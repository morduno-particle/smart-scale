
/Users/manuelorduno/Documents/GitHub/smart-scale/target/4.0.2/argon/smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7d80  000b7d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7da4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e5ac  000b7da8  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2003e620  2003e620  0002e620  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7e1c  000b7e1c  00027e1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7e44  000b7e44  00027e44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011f89b  00000000  00000000  00027e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014317  00000000  00000000  001476e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038db7  00000000  00000000  0015b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d50  00000000  00000000  001947b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a150  00000000  00000000  00197501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c1be  00000000  00000000  001a1651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004447d  00000000  00000000  001dd80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001322db  00000000  00000000  00221c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008050  00000000  00000000  00353f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f9d5 	bl	b73e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f9f7 	bl	b7430 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5ac 	.word	0x2003e5ac
   b404c:	000b7da8 	.word	0x000b7da8
   b4050:	2003e620 	.word	0x2003e620
   b4054:	2003e620 	.word	0x2003e620
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fc61 	bl	b6928 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7d5c 	.word	0x000b7d5c
   b4080:	000b7d80 	.word	0x000b7d80

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b958 	b.w	b4338 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f861 	bl	b4150 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bc01 	b.w	b6898 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bdf7 	b.w	b4c88 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bdf5 	b.w	b4c88 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bdfb 	b.w	b4c98 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fd38 	bl	b4b20 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b48e1 	.word	0x000b48e1
   b40b8:	000b7748 	.word	0x000b7748

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d8:	4b0a      	ldr	r3, [pc, #40]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40da:	b510      	push	{r4, lr}
   b40dc:	4604      	mov	r4, r0
   b40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e0:	f001 fa78 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b40e4:	4621      	mov	r1, r4
   b40e6:	f001 fcb0 	bl	b5a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ea:	f002 fb4f 	bl	b678c <_Z16_fetch_usbserialv>
   b40ee:	f002 fb41 	bl	b6774 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f2:	4620      	mov	r0, r4
   b40f4:	4b04      	ldr	r3, [pc, #16]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f6:	f840 3b04 	str.w	r3, [r0], #4
   b40fa:	f001 fb41 	bl	b5780 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}
   b4102:	bf00      	nop
   b4104:	000b797c 	.word	0x000b797c
   b4108:	000b7964 	.word	0x000b7964

000b410c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
    }
   b4110:	f7ff ffe2 	bl	b40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   b4114:	4620      	mov	r0, r4
   b4116:	2124      	movs	r1, #36	; 0x24
   b4118:	f7ff ffc1 	bl	b409e <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4120:	b40e      	push	{r1, r2, r3}
   b4122:	b500      	push	{lr}
   b4124:	b08c      	sub	sp, #48	; 0x30
   b4126:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4128:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b412c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4130:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4132:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4136:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4138:	6801      	ldr	r1, [r0, #0]
   b413a:	aa04      	add	r2, sp, #16
   b413c:	201e      	movs	r0, #30
    attr.flags = 0;
   b413e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4142:	f000 fcf5 	bl	b4b30 <log_message_v>
}
   b4146:	b00c      	add	sp, #48	; 0x30
   b4148:	f85d eb04 	ldr.w	lr, [sp], #4
   b414c:	b003      	add	sp, #12
   b414e:	4770      	bx	lr

000b4150 <loop>:

}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   b4150:	b510      	push	{r4, lr}
    if (millis() - lastLog >= logPeriod.count())
   b4152:	4c0f      	ldr	r4, [pc, #60]	; (b4190 <loop+0x40>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4154:	f000 fbcc 	bl	b48f0 <HAL_Timer_Get_Milli_Seconds>
   b4158:	6823      	ldr	r3, [r4, #0]
   b415a:	1ac0      	subs	r0, r0, r3
   b415c:	f241 3387 	movw	r3, #4999	; 0x1387
   b4160:	4298      	cmp	r0, r3
   b4162:	d914      	bls.n	b418e <loop+0x3e>
   b4164:	f000 fbc4 	bl	b48f0 <HAL_Timer_Get_Milli_Seconds>
    {
        lastLog = millis();
        
        // The core of your code will likely live here.
        weight_val = loadcell_get_weight( &loadcell, LOADCELL_CHANN_A_GATE_64_NEXT, &cell_data );
   b4168:	4a0a      	ldr	r2, [pc, #40]	; (b4194 <loop+0x44>)
        lastLog = millis();
   b416a:	6020      	str	r0, [r4, #0]
        weight_val = loadcell_get_weight( &loadcell, LOADCELL_CHANN_A_GATE_64_NEXT, &cell_data );
   b416c:	2102      	movs	r1, #2
   b416e:	480a      	ldr	r0, [pc, #40]	; (b4198 <loop+0x48>)
   b4170:	f000 fb06 	bl	b4780 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t>
   b4174:	4b09      	ldr	r3, [pc, #36]	; (b419c <loop+0x4c>)
   b4176:	ee10 0a10 	vmov	r0, s0
   b417a:	ed83 0a00 	vstr	s0, [r3]
        Log.info("     Peso: %.2lf", weight_val );
   b417e:	f002 fe67 	bl	b6e50 <__aeabi_f2d>
   b4182:	4602      	mov	r2, r0
   b4184:	460b      	mov	r3, r1
   b4186:	4806      	ldr	r0, [pc, #24]	; (b41a0 <loop+0x50>)
   b4188:	4906      	ldr	r1, [pc, #24]	; (b41a4 <loop+0x54>)
   b418a:	f7ff ffc9 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    }

}
   b418e:	bd10      	pop	{r4, pc}
   b4190:	2003e658 	.word	0x2003e658
   b4194:	2003e628 	.word	0x2003e628
   b4198:	2003e620 	.word	0x2003e620
   b419c:	2003e680 	.word	0x2003e680
   b41a0:	2003e6a8 	.word	0x2003e6a8
   b41a4:	000b775d 	.word	0x000b775d

000b41a8 <_Z13loadcell_initv>:

void loadcell_init()
{
   b41a8:	b507      	push	{r0, r1, r2, lr}
     * need to define them manually for log to work. 
     * See @b LOG_MAP_USB_UART macro definition for detailed explanation.
     */
    //LOG_MAP_USB_UART( log_cfg );
    //log_init(  &log_cfg );
    Log.info(  "---- Application Init ----" );
   b41aa:	4953      	ldr	r1, [pc, #332]	; (b42f8 <_Z13loadcell_initv+0x150>)
   b41ac:	4853      	ldr	r0, [pc, #332]	; (b42fc <_Z13loadcell_initv+0x154>)
   b41ae:	f7ff ffb7 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>

    //  Click initialization.

    loadcell_cfg_setup( &cfg );
   b41b2:	a801      	add	r0, sp, #4
   b41b4:	f000 f9a6 	bl	b4504 <_Z18loadcell_cfg_setupP14loadcell_cfg_t>
    LOADCELL_MAP_MIKROBUS( cfg, MIKROBUS_1 );
   b41b8:	230e      	movs	r3, #14
   b41ba:	f88d 3004 	strb.w	r3, [sp, #4]
   b41be:	2310      	movs	r3, #16
   b41c0:	f88d 3005 	strb.w	r3, [sp, #5]
    loadcell_init( &loadcell, &cfg );
   b41c4:	a901      	add	r1, sp, #4
    LOADCELL_MAP_MIKROBUS( cfg, MIKROBUS_1 );
   b41c6:	230f      	movs	r3, #15
    loadcell_init( &loadcell, &cfg );
   b41c8:	484d      	ldr	r0, [pc, #308]	; (b4300 <_Z13loadcell_initv+0x158>)
    LOADCELL_MAP_MIKROBUS( cfg, MIKROBUS_1 );
   b41ca:	f88d 3006 	strb.w	r3, [sp, #6]
    loadcell_init( &loadcell, &cfg );
   b41ce:	f000 f99e 	bl	b450e <_Z13loadcell_initP10loadcell_tP14loadcell_cfg_t>
    
    Log.info( "-------------------------\r\n");
   b41d2:	494c      	ldr	r1, [pc, #304]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b41d4:	4849      	ldr	r0, [pc, #292]	; (b42fc <_Z13loadcell_initv+0x154>)
   b41d6:	f7ff ffa3 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "     Load cell click     \r\n");
   b41da:	494b      	ldr	r1, [pc, #300]	; (b4308 <_Z13loadcell_initv+0x160>)
   b41dc:	4847      	ldr	r0, [pc, #284]	; (b42fc <_Z13loadcell_initv+0x154>)
   b41de:	f7ff ff9f 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "-------------------------\r\n");
   b41e2:	4948      	ldr	r1, [pc, #288]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b41e4:	4845      	ldr	r0, [pc, #276]	; (b42fc <_Z13loadcell_initv+0x154>)
   b41e6:	f7ff ff9b 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
inline void Delay_1000ms( ) {delay(1000);}
inline void Delay_ms(unsigned long ms) {delay(ms);}
   b41ea:	2064      	movs	r0, #100	; 0x64
   b41ec:	f000 fd84 	bl	b4cf8 <delay>
    Delay_ms( 100 );
    
    loadcell_set_mode( &loadcell, LOADCELL_POWER_UP );
   b41f0:	2100      	movs	r1, #0
   b41f2:	4843      	ldr	r0, [pc, #268]	; (b4300 <_Z13loadcell_initv+0x158>)
   b41f4:	f000 f9fc 	bl	b45f0 <_Z17loadcell_set_modeP10loadcell_th>
   b41f8:	2064      	movs	r0, #100	; 0x64
   b41fa:	f000 fd7d 	bl	b4cf8 <delay>
    Delay_ms( 100 );

    loadcell_reset( &loadcell );
   b41fe:	4840      	ldr	r0, [pc, #256]	; (b4300 <_Z13loadcell_initv+0x158>)
   b4200:	f000 f9e3 	bl	b45ca <_Z14loadcell_resetP10loadcell_t>
   b4204:	2064      	movs	r0, #100	; 0x64
   b4206:	f000 fd77 	bl	b4cf8 <delay>
    Delay_ms( 100 );

    loadcell_set_rate( &loadcell, LOADCELL_10HZ_INTERNAL_OSC );
   b420a:	2100      	movs	r1, #0
   b420c:	483c      	ldr	r0, [pc, #240]	; (b4300 <_Z13loadcell_initv+0x158>)
   b420e:	f000 f9d7 	bl	b45c0 <_Z17loadcell_set_rateP10loadcell_th>
   b4212:	2064      	movs	r0, #100	; 0x64
   b4214:	f000 fd70 	bl	b4cf8 <delay>
    Delay_ms( 100 );

    Log.info( "    Tare the scale :   Channel A,  Gate 64  \r\n");
   b4218:	493c      	ldr	r1, [pc, #240]	; (b430c <_Z13loadcell_initv+0x164>)
   b421a:	4838      	ldr	r0, [pc, #224]	; (b42fc <_Z13loadcell_initv+0x154>)
   b421c:	f7ff ff80 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "-------------------------\r\n");
   b4220:	4938      	ldr	r1, [pc, #224]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b4222:	4836      	ldr	r0, [pc, #216]	; (b42fc <_Z13loadcell_initv+0x154>)
   b4224:	f7ff ff7c 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( " In the following 10 seconds please REMOVE all object from the scale.\r\n");
   b4228:	4939      	ldr	r1, [pc, #228]	; (b4310 <_Z13loadcell_initv+0x168>)
   b422a:	4834      	ldr	r0, [pc, #208]	; (b42fc <_Z13loadcell_initv+0x154>)
   b422c:	f7ff ff78 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
   b4230:	f242 7010 	movw	r0, #10000	; 0x2710
   b4234:	f000 fd60 	bl	b4cf8 <delay>
    Delay_ms( 10000 );

    Log.info( "-------------------------\r\n");
   b4238:	4932      	ldr	r1, [pc, #200]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b423a:	4830      	ldr	r0, [pc, #192]	; (b42fc <_Z13loadcell_initv+0x154>)
   b423c:	f7ff ff70 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "    Start tare scales    \r\n");
   b4240:	4934      	ldr	r1, [pc, #208]	; (b4314 <_Z13loadcell_initv+0x16c>)
   b4242:	482e      	ldr	r0, [pc, #184]	; (b42fc <_Z13loadcell_initv+0x154>)
   b4244:	f7ff ff6c 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    loadcell_tare ( &loadcell, LOADCELL_CHANN_A_GATE_64_NEXT, &cell_data );
   b4248:	4a33      	ldr	r2, [pc, #204]	; (b4318 <_Z13loadcell_initv+0x170>)
   b424a:	482d      	ldr	r0, [pc, #180]	; (b4300 <_Z13loadcell_initv+0x158>)
   b424c:	2102      	movs	r1, #2
   b424e:	f000 f9df 	bl	b4610 <_Z13loadcell_tareP10loadcell_thP15loadcell_data_t>
   b4252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4256:	f000 fd4f 	bl	b4cf8 <delay>
    Delay_ms( 500 );

    Log.info( "-------------------------\r\n");
   b425a:	492a      	ldr	r1, [pc, #168]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b425c:	4827      	ldr	r0, [pc, #156]	; (b42fc <_Z13loadcell_initv+0x154>)
   b425e:	f7ff ff5f 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "    Tarring completed \r\n");
   b4262:	492e      	ldr	r1, [pc, #184]	; (b431c <_Z13loadcell_initv+0x174>)
   b4264:	4825      	ldr	r0, [pc, #148]	; (b42fc <_Z13loadcell_initv+0x154>)
   b4266:	f7ff ff5b 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>

    Log.info( "-------------------------\r\n");
   b426a:	4926      	ldr	r1, [pc, #152]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b426c:	4823      	ldr	r0, [pc, #140]	; (b42fc <_Z13loadcell_initv+0x154>)
   b426e:	f7ff ff57 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( " In the following 10 seconds place 5000g weight etalon on the scale for calibration purpose.\r\n");
   b4272:	492b      	ldr	r1, [pc, #172]	; (b4320 <_Z13loadcell_initv+0x178>)
   b4274:	4821      	ldr	r0, [pc, #132]	; (b42fc <_Z13loadcell_initv+0x154>)
   b4276:	f7ff ff53 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
   b427a:	f242 7010 	movw	r0, #10000	; 0x2710
   b427e:	f000 fd3b 	bl	b4cf8 <delay>
    Delay_ms( 10000 );

    Log.info( "-------------------------\r\n");
   b4282:	4920      	ldr	r1, [pc, #128]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b4284:	481d      	ldr	r0, [pc, #116]	; (b42fc <_Z13loadcell_initv+0x154>)
   b4286:	f7ff ff4b 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "    Start calibration    \r\n");
   b428a:	4926      	ldr	r1, [pc, #152]	; (b4324 <_Z13loadcell_initv+0x17c>)
   b428c:	481b      	ldr	r0, [pc, #108]	; (b42fc <_Z13loadcell_initv+0x154>)
   b428e:	f7ff ff47 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>

    if ( loadcell_calibration ( &loadcell, LOADCELL_CHANN_A_GATE_64_NEXT, LOADCELL_WEIGHT_5000G, &cell_data ) == LOADCELL_GET_RESULT_OK )
   b4292:	2102      	movs	r1, #2
   b4294:	4b20      	ldr	r3, [pc, #128]	; (b4318 <_Z13loadcell_initv+0x170>)
   b4296:	481a      	ldr	r0, [pc, #104]	; (b4300 <_Z13loadcell_initv+0x158>)
   b4298:	f241 3288 	movw	r2, #5000	; 0x1388
   b429c:	f000 f9f2 	bl	b4684 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t>
   b42a0:	2801      	cmp	r0, #1
    {
        Log.info( "-------------------------\r\n");
   b42a2:	4918      	ldr	r1, [pc, #96]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b42a4:	4815      	ldr	r0, [pc, #84]	; (b42fc <_Z13loadcell_initv+0x154>)
    if ( loadcell_calibration ( &loadcell, LOADCELL_CHANN_A_GATE_64_NEXT, LOADCELL_WEIGHT_5000G, &cell_data ) == LOADCELL_GET_RESULT_OK )
   b42a6:	d120      	bne.n	b42ea <_Z13loadcell_initv+0x142>
        Log.info( "-------------------------\r\n");
   b42a8:	f7ff ff3a 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
        Log.info( "    Calibration  Done    \r\n");
   b42ac:	491e      	ldr	r1, [pc, #120]	; (b4328 <_Z13loadcell_initv+0x180>)
   b42ae:	4813      	ldr	r0, [pc, #76]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42b0:	f7ff ff36 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>

        Log.info( "- - - - - - - - - - - - -\r\n");
   b42b4:	491d      	ldr	r1, [pc, #116]	; (b432c <_Z13loadcell_initv+0x184>)
   b42b6:	4811      	ldr	r0, [pc, #68]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42b8:	f7ff ff32 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
        Log.info( " In the following 10 seconds please REMOVE all object from the scale.\r\n");
   b42bc:	4914      	ldr	r1, [pc, #80]	; (b4310 <_Z13loadcell_initv+0x168>)
   b42be:	480f      	ldr	r0, [pc, #60]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42c0:	f7ff ff2e 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
   b42c4:	f242 7010 	movw	r0, #10000	; 0x2710
   b42c8:	f000 fd16 	bl	b4cf8 <delay>
        Log.info( "-------------------------\r\n");
        Log.info( "   Calibration  Error   \r\n");
        for ( ; ; );
    }

    Log.info( "-------------------------\r\n");
   b42cc:	490d      	ldr	r1, [pc, #52]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b42ce:	480b      	ldr	r0, [pc, #44]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42d0:	f7ff ff26 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "   Start measurements :  \r\n");
   b42d4:	4916      	ldr	r1, [pc, #88]	; (b4330 <_Z13loadcell_initv+0x188>)
   b42d6:	4809      	ldr	r0, [pc, #36]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42d8:	f7ff ff22 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
    Log.info( "-------------------------\r\n");
   b42dc:	4909      	ldr	r1, [pc, #36]	; (b4304 <_Z13loadcell_initv+0x15c>)
   b42de:	4807      	ldr	r0, [pc, #28]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42e0:	f7ff ff1e 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>

   b42e4:	b003      	add	sp, #12
   b42e6:	f85d fb04 	ldr.w	pc, [sp], #4
        Log.info( "-------------------------\r\n");
   b42ea:	f7ff ff19 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
        Log.info( "   Calibration  Error   \r\n");
   b42ee:	4911      	ldr	r1, [pc, #68]	; (b4334 <_Z13loadcell_initv+0x18c>)
   b42f0:	4802      	ldr	r0, [pc, #8]	; (b42fc <_Z13loadcell_initv+0x154>)
   b42f2:	f7ff ff15 	bl	b4120 <_ZNK5spark6Logger4infoEPKcz>
        for ( ; ; );
   b42f6:	e7fe      	b.n	b42f6 <_Z13loadcell_initv+0x14e>
   b42f8:	000b776e 	.word	0x000b776e
   b42fc:	2003e6a8 	.word	0x2003e6a8
   b4300:	2003e620 	.word	0x2003e620
   b4304:	000b7789 	.word	0x000b7789
   b4308:	000b77a5 	.word	0x000b77a5
   b430c:	000b77c1 	.word	0x000b77c1
   b4310:	000b77f0 	.word	0x000b77f0
   b4314:	000b7838 	.word	0x000b7838
   b4318:	2003e628 	.word	0x2003e628
   b431c:	000b7854 	.word	0x000b7854
   b4320:	000b786d 	.word	0x000b786d
   b4324:	000b78cc 	.word	0x000b78cc
   b4328:	000b78e8 	.word	0x000b78e8
   b432c:	000b7904 	.word	0x000b7904
   b4330:	000b7920 	.word	0x000b7920
   b4334:	000b793c 	.word	0x000b793c

000b4338 <setup>:
  loadcell_init();
   b4338:	f7ff bf36 	b.w	b41a8 <_Z13loadcell_initv>

000b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b433c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b433e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4342:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4344:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4346:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b434a:	42ae      	cmp	r6, r5
   b434c:	d004      	beq.n	b4358 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b434e:	4628      	mov	r0, r5
   b4350:	f002 f8a0 	bl	b6494 <_ZN6StringD1Ev>
   b4354:	3514      	adds	r5, #20
   b4356:	e7f8      	b.n	b434a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4358:	6820      	ldr	r0, [r4, #0]
   b435a:	f000 fc9d 	bl	b4c98 <free>
    AllocatorT::free(data_);
}
   b435e:	4620      	mov	r0, r4
   b4360:	bd70      	pop	{r4, r5, r6, pc}

000b4362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b4362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   b4366:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   b436a:	4607      	mov	r7, r0
        if (n > 0) {
   b436c:	dd38      	ble.n	b43e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b436e:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   b4372:	fb09 f008 	mul.w	r0, r9, r8
   b4376:	f000 fc87 	bl	b4c88 <malloc>
            if (!d) {
   b437a:	4605      	mov	r5, r0
   b437c:	b3c0      	cbz	r0, b43f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x8e>
            move(d, data_, data_ + size_);
   b437e:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   b4382:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b4384:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   b4388:	d215      	bcs.n	b43b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   b438a:	4286      	cmp	r6, r0
   b438c:	d914      	bls.n	b43b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   b438e:	3e14      	subs	r6, #20
            dest += end - p - 1;
   b4390:	f1a4 0914 	sub.w	r9, r4, #20
   b4394:	1b34      	subs	r4, r6, r4
   b4396:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b4398:	45b1      	cmp	r9, r6
   b439a:	d022      	beq.n	b43e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
   b439c:	b12c      	cbz	r4, b43aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   b439e:	4631      	mov	r1, r6
   b43a0:	4620      	mov	r0, r4
   b43a2:	f002 f8f3 	bl	b658c <_ZN6StringC1EOS_>
   b43a6:	7c33      	ldrb	r3, [r6, #16]
   b43a8:	7423      	strb	r3, [r4, #16]
   b43aa:	4630      	mov	r0, r6
   b43ac:	f002 f872 	bl	b6494 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b43b0:	3e14      	subs	r6, #20
   b43b2:	3c14      	subs	r4, #20
   b43b4:	e7f0      	b.n	b4398 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   b43b6:	d014      	beq.n	b43e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
   b43b8:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   b43ba:	42a6      	cmp	r6, r4
   b43bc:	d011      	beq.n	b43e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
   b43be:	f1b9 0f00 	cmp.w	r9, #0
   b43c2:	d006      	beq.n	b43d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x70>
   b43c4:	4621      	mov	r1, r4
   b43c6:	4648      	mov	r0, r9
   b43c8:	f002 f8e0 	bl	b658c <_ZN6StringC1EOS_>
   b43cc:	7c23      	ldrb	r3, [r4, #16]
   b43ce:	f889 3010 	strb.w	r3, [r9, #16]
   b43d2:	4620      	mov	r0, r4
   b43d4:	f002 f85e 	bl	b6494 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b43d8:	3414      	adds	r4, #20
   b43da:	f109 0914 	add.w	r9, r9, #20
   b43de:	e7ec      	b.n	b43ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   b43e0:	2500      	movs	r5, #0
    ::free(ptr);
   b43e2:	6838      	ldr	r0, [r7, #0]
   b43e4:	f000 fc58 	bl	b4c98 <free>
        data_ = d;
   b43e8:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   b43ea:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   b43ee:	2001      	movs	r0, #1
    }
   b43f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b43f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b43f8:	2300      	movs	r3, #0
   b43fa:	e9c0 3300 	strd	r3, r3, [r0]
   b43fe:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4400:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4402:	6849      	ldr	r1, [r1, #4]
   b4404:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4406:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4408:	dd17      	ble.n	b443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   b440a:	f7ff ffaa 	bl	b4362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b440e:	b1a0      	cbz	r0, b443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4410:	e9d5 6300 	ldrd	r6, r3, [r5]
   b4414:	f04f 0814 	mov.w	r8, #20
   b4418:	6827      	ldr	r7, [r4, #0]
   b441a:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   b441e:	45b0      	cmp	r8, r6
   b4420:	d009      	beq.n	b4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   b4422:	b12f      	cbz	r7, b4430 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   b4424:	4631      	mov	r1, r6
   b4426:	4638      	mov	r0, r7
   b4428:	f002 f8ca 	bl	b65c0 <_ZN6StringC1ERKS_>
   b442c:	7c33      	ldrb	r3, [r6, #16]
   b442e:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   b4430:	3614      	adds	r6, #20
   b4432:	3714      	adds	r7, #20
   b4434:	e7f3      	b.n	b441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   b4436:	686b      	ldr	r3, [r5, #4]
   b4438:	6063      	str	r3, [r4, #4]
}
   b443a:	4620      	mov	r0, r4
   b443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4440 <_GLOBAL__sub_I_logHandler>:
   b4440:	b530      	push	{r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b4442:	2100      	movs	r1, #0
   b4444:	b093      	sub	sp, #76	; 0x4c
SYSTEM_THREAD(ENABLED);
   b4446:	2001      	movs	r0, #1
   b4448:	f000 fb9a 	bl	b4b80 <system_thread_set_state>
        level_(level) {
   b444c:	4928      	ldr	r1, [pc, #160]	; (b44f0 <_GLOBAL__sub_I_logHandler+0xb0>)
   b444e:	a80d      	add	r0, sp, #52	; 0x34
   b4450:	f002 f86b 	bl	b652a <_ZN6StringC1EPK19__FlashStringHelper>
        capacity_(0) {
   b4454:	2300      	movs	r3, #0
   b4456:	2101      	movs	r1, #1
    if (n > 0 && realloc(n)) {
   b4458:	a801      	add	r0, sp, #4
        capacity_(0) {
   b445a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b445e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   b4462:	9303      	str	r3, [sp, #12]
    if (n > 0 && realloc(n)) {
   b4464:	f7ff ff7d 	bl	b4362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b4468:	b150      	cbz	r0, b4480 <_GLOBAL__sub_I_logHandler+0x40>
        copy(data_, values.begin(), values.end());
   b446a:	9c01      	ldr	r4, [sp, #4]
            new(dest) T(*p);
   b446c:	b134      	cbz	r4, b447c <_GLOBAL__sub_I_logHandler+0x3c>
class LogCategoryFilter {
   b446e:	a90d      	add	r1, sp, #52	; 0x34
   b4470:	4620      	mov	r0, r4
   b4472:	f002 f8a5 	bl	b65c0 <_ZN6StringC1ERKS_>
   b4476:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   b447a:	7423      	strb	r3, [r4, #16]
        size_ = n;
   b447c:	2301      	movs	r3, #1
   b447e:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4480:	f002 f984 	bl	b678c <_Z16_fetch_usbserialv>
   b4484:	a901      	add	r1, sp, #4
   b4486:	4605      	mov	r5, r0
   b4488:	a804      	add	r0, sp, #16
        filter_(level, filters) {
   b448a:	4c1a      	ldr	r4, [pc, #104]	; (b44f4 <_GLOBAL__sub_I_logHandler+0xb4>)
   b448c:	f7ff ffb2 	bl	b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4490:	a904      	add	r1, sp, #16
   b4492:	a807      	add	r0, sp, #28
   b4494:	f7ff ffae 	bl	b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4498:	4b17      	ldr	r3, [pc, #92]	; (b44f8 <_GLOBAL__sub_I_logHandler+0xb8>)
   b449a:	6023      	str	r3, [r4, #0]
   b449c:	a907      	add	r1, sp, #28
   b449e:	a80a      	add	r0, sp, #40	; 0x28
   b44a0:	f7ff ffa8 	bl	b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b44a4:	aa0a      	add	r2, sp, #40	; 0x28
   b44a6:	2128      	movs	r1, #40	; 0x28
   b44a8:	1d20      	adds	r0, r4, #4
   b44aa:	f001 fbb1 	bl	b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b44ae:	a80a      	add	r0, sp, #40	; 0x28
   b44b0:	f7ff ff44 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b44b4:	a807      	add	r0, sp, #28
   b44b6:	f7ff ff41 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b44ba:	4b10      	ldr	r3, [pc, #64]	; (b44fc <_GLOBAL__sub_I_logHandler+0xbc>)
   b44bc:	6023      	str	r3, [r4, #0]
   b44be:	6225      	str	r5, [r4, #32]
   b44c0:	a804      	add	r0, sp, #16
   b44c2:	f7ff ff3b 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b44c6:	4b0e      	ldr	r3, [pc, #56]	; (b4500 <_GLOBAL__sub_I_logHandler+0xc0>)
   b44c8:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b44ca:	f002 f95f 	bl	b678c <_Z16_fetch_usbserialv>
   b44ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b44d2:	f002 f94b 	bl	b676c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b44d6:	f001 f87d 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b44da:	4621      	mov	r1, r4
   b44dc:	f001 fa6e 	bl	b59bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});
   b44e0:	a801      	add	r0, sp, #4
   b44e2:	f7ff ff2b 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
   b44e6:	a80d      	add	r0, sp, #52	; 0x34
   b44e8:	f001 ffd4 	bl	b6494 <_ZN6StringD1Ev>
   b44ec:	b013      	add	sp, #76	; 0x4c
   b44ee:	bd30      	pop	{r4, r5, pc}
   b44f0:	000b7957 	.word	0x000b7957
   b44f4:	2003e65c 	.word	0x2003e65c
   b44f8:	000b7964 	.word	0x000b7964
   b44fc:	000b7a9c 	.word	0x000b7a9c
   b4500:	000b797c 	.word	0x000b797c

000b4504 <_Z18loadcell_cfg_setupP14loadcell_cfg_t>:

void loadcell_cfg_setup ( loadcell_cfg_t *cfg )
{
    // Additional gpio pins

    cfg->rte   = HAL_PIN_NC;
   b4504:	23ff      	movs	r3, #255	; 0xff
   b4506:	7003      	strb	r3, [r0, #0]
    cfg->clk = HAL_PIN_NC;
   b4508:	7043      	strb	r3, [r0, #1]
    cfg->int_pin = HAL_PIN_NC;
   b450a:	7083      	strb	r3, [r0, #2]
}
   b450c:	4770      	bx	lr

000b450e <_Z13loadcell_initP10loadcell_tP14loadcell_cfg_t>:

LOADCELL_RETVAL loadcell_init ( loadcell_t *ctx, loadcell_cfg_t *cfg )
{
   b450e:	b538      	push	{r3, r4, r5, lr}
   b4510:	460c      	mov	r4, r1
   b4512:	4605      	mov	r5, r0
    // Output pins 

    digital_out_init( &ctx->rte, cfg->rte );
   b4514:	7809      	ldrb	r1, [r1, #0]
   b4516:	f000 f9a7 	bl	b4868 <_Z16digital_out_initP13digital_out_th>
    digital_out_init( &ctx->clk, cfg->clk );
   b451a:	7861      	ldrb	r1, [r4, #1]
   b451c:	1ca8      	adds	r0, r5, #2
   b451e:	f000 f9a3 	bl	b4868 <_Z16digital_out_initP13digital_out_th>

    // Input pins

    digital_in_init( &ctx->int_pin, cfg->int_pin );
   b4522:	78a1      	ldrb	r1, [r4, #2]
   b4524:	1d28      	adds	r0, r5, #4
   b4526:	f000 f991 	bl	b484c <_Z15digital_in_initP12digital_in_th>
    

    return LOADCELL_OK;
}
   b452a:	2000      	movs	r0, #0
   b452c:	bd38      	pop	{r3, r4, r5, pc}

000b452e <_Z18loadcell_check_outP10loadcell_t>:

uint8_t loadcell_check_out ( loadcell_t *ctx )
{
   b452e:	b508      	push	{r3, lr}
    if ( digital_in_read( &ctx->int_pin ))
   b4530:	3004      	adds	r0, #4
   b4532:	f000 f996 	bl	b4862 <_Z15digital_in_readP12digital_in_t>
    }
    else
    {
        return 0;
    }
}
   b4536:	3800      	subs	r0, #0
   b4538:	bf18      	it	ne
   b453a:	2001      	movne	r0, #1
   b453c:	bd08      	pop	{r3, pc}

000b453e <_Z21loadcell_read_resultsP10loadcell_thPm>:
    uint8_t count;
    uint8_t n_cnt;
    uint32_t ret_val = 0;
    uint32_t temp = 0;

    switch ( input_sel )
   b453e:	2902      	cmp	r1, #2
{
   b4540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4544:	4606      	mov	r6, r0
   b4546:	460c      	mov	r4, r1
   b4548:	4690      	mov	r8, r2
   b454a:	d837      	bhi.n	b45bc <_Z21loadcell_read_resultsP10loadcell_thPm+0x7e>
            return LOADCELL_GET_RESULT_ERROR;
            break;
        }
    }

    while ( loadcell_check_out( ctx ) );
   b454c:	4630      	mov	r0, r6
   b454e:	f7ff ffee 	bl	b452e <_Z18loadcell_check_outP10loadcell_t>
   b4552:	4605      	mov	r5, r0
   b4554:	2800      	cmp	r0, #0
   b4556:	d1f9      	bne.n	b454c <_Z21loadcell_read_resultsP10loadcell_thPm+0xe>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4558:	2001      	movs	r0, #1
   b455a:	f000 f9c1 	bl	b48e0 <HAL_Delay_Microseconds>
   b455e:	f04f 0917 	mov.w	r9, #23
    
    dev_clk_delay( );

    for ( n_cnt = 24; n_cnt > 0; n_cnt-- )
    {
        digital_out_high( &ctx->clk );
   b4562:	1cb7      	adds	r7, r6, #2
   b4564:	4638      	mov	r0, r7
   b4566:	f000 f98a 	bl	b487e <_Z16digital_out_highP13digital_out_t>
   b456a:	2001      	movs	r0, #1
   b456c:	f000 f9b8 	bl	b48e0 <HAL_Delay_Microseconds>
    
        dev_clk_delay( );
        
        temp = loadcell_check_out( ctx );
   b4570:	4630      	mov	r0, r6
   b4572:	f7ff ffdc 	bl	b452e <_Z18loadcell_check_outP10loadcell_t>
        temp <<= n_cnt - 1;
   b4576:	fa00 f009 	lsl.w	r0, r0, r9
        ret_val |= temp;
   b457a:	4305      	orrs	r5, r0
        digital_out_low( &ctx->clk );
   b457c:	4638      	mov	r0, r7
   b457e:	f000 f982 	bl	b4886 <_Z15digital_out_lowP13digital_out_t>
   b4582:	2001      	movs	r0, #1
   b4584:	f000 f9ac 	bl	b48e0 <HAL_Delay_Microseconds>
    for ( n_cnt = 24; n_cnt > 0; n_cnt-- )
   b4588:	f1b9 0901 	subs.w	r9, r9, #1
   b458c:	d2ea      	bcs.n	b4564 <_Z21loadcell_read_resultsP10loadcell_thPm+0x26>
        
        dev_clk_delay( );
    }
    
    count -= 24;
   b458e:	3401      	adds	r4, #1
   b4590:	b2e4      	uxtb	r4, r4
   
    while ( count )
    {
        digital_out_high( &ctx->clk );
   b4592:	4638      	mov	r0, r7
   b4594:	f000 f973 	bl	b487e <_Z16digital_out_highP13digital_out_t>
   b4598:	2001      	movs	r0, #1
   b459a:	f000 f9a1 	bl	b48e0 <HAL_Delay_Microseconds>
        
        dev_clk_delay( );
        
       digital_out_low( &ctx->clk );
   b459e:	4638      	mov	r0, r7
   b45a0:	f000 f971 	bl	b4886 <_Z15digital_out_lowP13digital_out_t>
        
        dev_clk_delay( );
        
        count--;
   b45a4:	3c01      	subs	r4, #1
   b45a6:	2001      	movs	r0, #1
   b45a8:	f000 f99a 	bl	b48e0 <HAL_Delay_Microseconds>
    while ( count )
   b45ac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b45b0:	d1ef      	bne.n	b4592 <_Z21loadcell_read_resultsP10loadcell_thPm+0x54>
    }
    
    *data_out = ret_val;
   b45b2:	f8c8 5000 	str.w	r5, [r8]
   b45b6:	2001      	movs	r0, #1

    return LOADCELL_GET_RESULT_OK;
}
   b45b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LOADCELL_GET_RESULT_ERROR;
   b45bc:	2000      	movs	r0, #0
   b45be:	e7fb      	b.n	b45b8 <_Z21loadcell_read_resultsP10loadcell_thPm+0x7a>

000b45c0 <_Z17loadcell_set_rateP10loadcell_th>:

void loadcell_set_rate ( loadcell_t *ctx, uint8_t rate_sel )
{
    if ( rate_sel )
   b45c0:	b109      	cbz	r1, b45c6 <_Z17loadcell_set_rateP10loadcell_th+0x6>
    {
        digital_out_high( &ctx->rte );
   b45c2:	f000 b95c 	b.w	b487e <_Z16digital_out_highP13digital_out_t>
    }
    else
    {
        digital_out_low( &ctx->rte );
   b45c6:	f000 b95e 	b.w	b4886 <_Z15digital_out_lowP13digital_out_t>

000b45ca <_Z14loadcell_resetP10loadcell_t>:
    }
}

void loadcell_reset ( loadcell_t *ctx )
{
   b45ca:	b510      	push	{r4, lr}
    digital_out_high( &ctx->clk );
   b45cc:	1c84      	adds	r4, r0, #2
   b45ce:	4620      	mov	r0, r4
   b45d0:	f000 f955 	bl	b487e <_Z16digital_out_highP13digital_out_t>
   b45d4:	2032      	movs	r0, #50	; 0x32
   b45d6:	f000 f983 	bl	b48e0 <HAL_Delay_Microseconds>
   b45da:	2032      	movs	r0, #50	; 0x32
   b45dc:	f000 f980 	bl	b48e0 <HAL_Delay_Microseconds>
    
    dev_rst_delay( );
    dev_rst_delay( );
    
    digital_out_low( &ctx->clk );
   b45e0:	4620      	mov	r0, r4
   b45e2:	f000 f950 	bl	b4886 <_Z15digital_out_lowP13digital_out_t>
    
    dev_rst_delay( );
}
   b45e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b45ea:	2032      	movs	r0, #50	; 0x32
   b45ec:	f000 b978 	b.w	b48e0 <HAL_Delay_Microseconds>

000b45f0 <_Z17loadcell_set_modeP10loadcell_th>:

void loadcell_set_mode ( loadcell_t *ctx, uint8_t pwr_mode )
{
   b45f0:	b508      	push	{r3, lr}
    if ( pwr_mode )
    {
        digital_out_high( &ctx->clk );
   b45f2:	3002      	adds	r0, #2
    if ( pwr_mode )
   b45f4:	b149      	cbz	r1, b460a <_Z17loadcell_set_modeP10loadcell_th+0x1a>
        digital_out_high( &ctx->clk );
   b45f6:	f000 f942 	bl	b487e <_Z16digital_out_highP13digital_out_t>
   b45fa:	2032      	movs	r0, #50	; 0x32
   b45fc:	f000 f970 	bl	b48e0 <HAL_Delay_Microseconds>
        digital_out_low( &ctx->clk );
    }
    
    dev_rst_delay( );
    dev_rst_delay( );
}
   b4600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4604:	2032      	movs	r0, #50	; 0x32
   b4606:	f000 b96b 	b.w	b48e0 <HAL_Delay_Microseconds>
        digital_out_low( &ctx->clk );
   b460a:	f000 f93c 	bl	b4886 <_Z15digital_out_lowP13digital_out_t>
   b460e:	e7f4      	b.n	b45fa <_Z17loadcell_set_modeP10loadcell_th+0xa>

000b4610 <_Z13loadcell_tareP10loadcell_thP15loadcell_data_t>:

void loadcell_tare ( loadcell_t *ctx, uint8_t input_sel, loadcell_data_t *cell_data )
{
   b4610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4614:	4607      	mov	r7, r0
   b4616:	4688      	mov	r8, r1
   b4618:	4616      	mov	r6, r2
   b461a:	2405      	movs	r4, #5
    uint32_t sum_val;
    float average_val;
    
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
    {
        loadcell_read_results( ctx, input_sel, &results );
   b461c:	aa01      	add	r2, sp, #4
   b461e:	4641      	mov	r1, r8
   b4620:	4638      	mov	r0, r7
   b4622:	f7ff ff8c 	bl	b453e <_Z21loadcell_read_resultsP10loadcell_thPm>
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
   b4626:	3c01      	subs	r4, #1
inline void Delay_1ms( ) {delay(1);}
   b4628:	2001      	movs	r0, #1
   b462a:	f000 fb65 	bl	b4cf8 <delay>
   b462e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b4632:	d1f3      	bne.n	b461c <_Z13loadcell_tareP10loadcell_thP15loadcell_data_t+0xc>
   b4634:	2564      	movs	r5, #100	; 0x64
    
    sum_val = 0;
    
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
    {
        loadcell_read_results( ctx, input_sel, &results );
   b4636:	aa01      	add	r2, sp, #4
   b4638:	4641      	mov	r1, r8
   b463a:	4638      	mov	r0, r7
   b463c:	f7ff ff7f 	bl	b453e <_Z21loadcell_read_resultsP10loadcell_thPm>
        
        sum_val += results;
   b4640:	9b01      	ldr	r3, [sp, #4]
   b4642:	2001      	movs	r0, #1
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
   b4644:	3d01      	subs	r5, #1
        sum_val += results;
   b4646:	441c      	add	r4, r3
   b4648:	f000 fb56 	bl	b4cf8 <delay>
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
   b464c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4650:	d1f1      	bne.n	b4636 <_Z13loadcell_tareP10loadcell_thP15loadcell_data_t+0x26>

        dev_measure_delay( );
    }
    
    average_val = ( float ) sum_val;
   b4652:	ee07 4a90 	vmov	s15, r4
    average_val /= 100.0;
   b4656:	eddf 6a0a 	vldr	s13, [pc, #40]	; b4680 <_Z13loadcell_tareP10loadcell_thP15loadcell_data_t+0x70>
    
    cell_data->tare = average_val;
    cell_data->tare_ok = LOADCELL_DATA_OK;
    cell_data->weight_data_100g_ok = LOADCELL_DATA_NO_DATA;
   b465a:	7335      	strb	r5, [r6, #12]
    average_val = ( float ) sum_val;
   b465c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cell_data->tare_ok = LOADCELL_DATA_OK;
   b4660:	2301      	movs	r3, #1
    average_val /= 100.0;
   b4662:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    cell_data->tare_ok = LOADCELL_DATA_OK;
   b4666:	7133      	strb	r3, [r6, #4]
    cell_data->weight_data_500g_ok = LOADCELL_DATA_NO_DATA;
   b4668:	7535      	strb	r5, [r6, #20]
    cell_data->weight_data_1000g_ok = LOADCELL_DATA_NO_DATA;
   b466a:	7735      	strb	r5, [r6, #28]
    cell_data->weight_data_5000g_ok = LOADCELL_DATA_NO_DATA;
   b466c:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    cell_data->weight_data_10000g_ok = LOADCELL_DATA_NO_DATA;
   b4670:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
    cell_data->tare = average_val;
   b4674:	ed86 7a00 	vstr	s14, [r6]
}
   b4678:	b002      	add	sp, #8
   b467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b467e:	bf00      	nop
   b4680:	42c80000 	.word	0x42c80000

000b4684 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t>:

uint8_t loadcell_calibration ( loadcell_t *ctx, uint8_t input_sel, uint16_t cal_val, loadcell_data_t *cell_data )
{
   b4684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4688:	ed2d 8b02 	vpush	{d8}
    float weight_val;
    uint8_t status;
    
    status = LOADCELL_GET_RESULT_OK;
    
    tare_val = cell_data->tare;
   b468c:	ed93 8a00 	vldr	s16, [r3]
{
   b4690:	b083      	sub	sp, #12
   b4692:	4606      	mov	r6, r0
   b4694:	4689      	mov	r9, r1
   b4696:	4690      	mov	r8, r2
   b4698:	461f      	mov	r7, r3
    tare_val = cell_data->tare;
   b469a:	2414      	movs	r4, #20
    
    sum_val = 0;
   b469c:	2500      	movs	r5, #0
    
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
    {
        loadcell_read_results( ctx, input_sel, &results );
   b469e:	aa01      	add	r2, sp, #4
   b46a0:	4649      	mov	r1, r9
   b46a2:	4630      	mov	r0, r6
   b46a4:	f7ff ff4b 	bl	b453e <_Z21loadcell_read_resultsP10loadcell_thPm>

        sum_val += results;
   b46a8:	9b01      	ldr	r3, [sp, #4]
   b46aa:	2001      	movs	r0, #1
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
   b46ac:	3c01      	subs	r4, #1
        sum_val += results;
   b46ae:	441d      	add	r5, r3
   b46b0:	f000 fb22 	bl	b4cf8 <delay>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
   b46b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b46b8:	d1f1      	bne.n	b469e <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0x1a>

        dev_measure_delay( );
    }

    average_val = ( float ) sum_val;
   b46ba:	ee07 5a90 	vmov	s15, r5
   b46be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    average_val /= 20.0;
   b46c2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
   b46c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
    
    weight_val = average_val - tare_val;
    
    switch ( cal_val )
   b46ca:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
    weight_val = average_val - tare_val;
   b46ce:	ee77 7ac8 	vsub.f32	s15, s15, s16
    switch ( cal_val )
   b46d2:	d038      	beq.n	b4746 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xc2>
   b46d4:	d80e      	bhi.n	b46f4 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0x70>
   b46d6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
   b46da:	d01d      	beq.n	b4718 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0x94>
   b46dc:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
   b46e0:	d028      	beq.n	b4734 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xb0>
            break;
        }
        default :
        {
            status = LOADCELL_GET_RESULT_ERROR;
            cell_data->weight_data_100g_ok = LOADCELL_DATA_NO_DATA;
   b46e2:	2200      	movs	r2, #0
   b46e4:	733a      	strb	r2, [r7, #12]
            cell_data->weight_data_500g_ok = LOADCELL_DATA_NO_DATA;
   b46e6:	753a      	strb	r2, [r7, #20]
            cell_data->weight_data_1000g_ok = LOADCELL_DATA_NO_DATA;
   b46e8:	773a      	strb	r2, [r7, #28]
            cell_data->weight_data_5000g_ok = LOADCELL_DATA_NO_DATA;
   b46ea:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
            cell_data->weight_data_10000g_ok = LOADCELL_DATA_NO_DATA;
   b46ee:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
            break;
   b46f2:	e019      	b.n	b4728 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xa4>
    switch ( cal_val )
   b46f4:	f241 3388 	movw	r3, #5000	; 0x1388
   b46f8:	4598      	cmp	r8, r3
   b46fa:	d02d      	beq.n	b4758 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xd4>
   b46fc:	f242 7310 	movw	r3, #10000	; 0x2710
   b4700:	4598      	cmp	r8, r3
   b4702:	d1ee      	bne.n	b46e2 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0x5e>
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
   b4704:	eddf 6a19 	vldr	s13, [pc, #100]	; b476c <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xe8>
   b4708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_10000g_ok = LOADCELL_DATA_OK;
   b470c:	2401      	movs	r4, #1
   b470e:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
   b4712:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
            break;
   b4716:	e007      	b.n	b4728 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xa4>
            cell_data->weight_coeff_100g = 100.0 / weight_val;
   b4718:	eddf 6a15 	vldr	s13, [pc, #84]	; b4770 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xec>
   b471c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_100g_ok = LOADCELL_DATA_OK;
   b4720:	2401      	movs	r4, #1
   b4722:	733c      	strb	r4, [r7, #12]
            cell_data->weight_coeff_100g = 100.0 / weight_val;
   b4724:	ed87 7a02 	vstr	s14, [r7, #8]
        }
    }
    
    return status;
}
   b4728:	4620      	mov	r0, r4
   b472a:	b003      	add	sp, #12
   b472c:	ecbd 8b02 	vpop	{d8}
   b4730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cell_data->weight_coeff_500g = 500.0 / weight_val;
   b4734:	eddf 6a0f 	vldr	s13, [pc, #60]	; b4774 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xf0>
   b4738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_500g_ok = LOADCELL_DATA_OK;
   b473c:	2401      	movs	r4, #1
   b473e:	753c      	strb	r4, [r7, #20]
            cell_data->weight_coeff_500g = 500.0 / weight_val;
   b4740:	ed87 7a04 	vstr	s14, [r7, #16]
            break;
   b4744:	e7f0      	b.n	b4728 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xa4>
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
   b4746:	eddf 6a0c 	vldr	s13, [pc, #48]	; b4778 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xf4>
   b474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_1000g_ok = LOADCELL_DATA_OK;
   b474e:	2401      	movs	r4, #1
   b4750:	773c      	strb	r4, [r7, #28]
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
   b4752:	ed87 7a06 	vstr	s14, [r7, #24]
            break;
   b4756:	e7e7      	b.n	b4728 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xa4>
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
   b4758:	eddf 6a08 	vldr	s13, [pc, #32]	; b477c <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xf8>
   b475c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_5000g_ok = LOADCELL_DATA_OK;
   b4760:	2401      	movs	r4, #1
   b4762:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
   b4766:	ed87 7a08 	vstr	s14, [r7, #32]
            break;
   b476a:	e7dd      	b.n	b4728 <_Z20loadcell_calibrationP10loadcell_thtP15loadcell_data_t+0xa4>
   b476c:	461c4000 	.word	0x461c4000
   b4770:	42c80000 	.word	0x42c80000
   b4774:	43fa0000 	.word	0x43fa0000
   b4778:	447a0000 	.word	0x447a0000
   b477c:	459c4000 	.word	0x459c4000

000b4780 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t>:

float loadcell_get_weight ( loadcell_t *ctx, uint8_t input_sel, loadcell_data_t *cell_data )
{
   b4780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4784:	ed2d 8b02 	vpush	{d8}
    float weight_val;
    uint8_t status;

    status = LOADCELL_GET_RESULT_OK;

    tare_val = cell_data->tare;
   b4788:	ed92 8a00 	vldr	s16, [r2]
{
   b478c:	b082      	sub	sp, #8
   b478e:	4607      	mov	r7, r0
   b4790:	4688      	mov	r8, r1
   b4792:	4614      	mov	r4, r2
    tare_val = cell_data->tare;
   b4794:	2614      	movs	r6, #20

    sum_val = 0;
   b4796:	2500      	movs	r5, #0

    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
    {
        loadcell_read_results( ctx, input_sel, &results );
   b4798:	aa01      	add	r2, sp, #4
   b479a:	4641      	mov	r1, r8
   b479c:	4638      	mov	r0, r7
   b479e:	f7ff fece 	bl	b453e <_Z21loadcell_read_resultsP10loadcell_thPm>

        sum_val += results;
   b47a2:	9b01      	ldr	r3, [sp, #4]
   b47a4:	2001      	movs	r0, #1
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
   b47a6:	3e01      	subs	r6, #1
        sum_val += results;
   b47a8:	441d      	add	r5, r3
   b47aa:	f000 faa5 	bl	b4cf8 <delay>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
   b47ae:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b47b2:	d1f1      	bne.n	b4798 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x18>

        dev_measure_delay( );
    }

    average_val = ( float ) sum_val;
   b47b4:	ee07 5a90 	vmov	s15, r5
   b47b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    average_val /= 20.0;
   b47bc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
   b47c0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    weight_val = average_val - tare_val;
    
    if ( cell_data->weight_data_100g_ok == LOADCELL_DATA_OK )
   b47c4:	7b23      	ldrb	r3, [r4, #12]
   b47c6:	2b01      	cmp	r3, #1
    weight_val = average_val - tare_val;
   b47c8:	ee30 0a48 	vsub.f32	s0, s0, s16
    if ( cell_data->weight_data_100g_ok == LOADCELL_DATA_OK )
   b47cc:	d10f      	bne.n	b47ee <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x6e>
    {
        weight_val *= cell_data->weight_coeff_100g;
   b47ce:	edd4 7a02 	vldr	s15, [r4, #8]
    }
    else if ( cell_data->weight_data_500g_ok == LOADCELL_DATA_OK )
    {
        weight_val *= cell_data->weight_coeff_500g;
   b47d2:	ee20 0a27 	vmul.f32	s0, s0, s15
    else
    {
        weight_val *= LOADCELL_DEFAULT_WEIGHT_SCALE_COEFFICIENT;
    }

    if ( weight_val < 0 )
   b47d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b47da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        weight_val = 0.0;
   b47de:	bf48      	it	mi
   b47e0:	ed9f 0a19 	vldrmi	s0, [pc, #100]	; b4848 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0xc8>
    }
    
    return weight_val;
}
   b47e4:	b002      	add	sp, #8
   b47e6:	ecbd 8b02 	vpop	{d8}
   b47ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if ( cell_data->weight_data_500g_ok == LOADCELL_DATA_OK )
   b47ee:	7d23      	ldrb	r3, [r4, #20]
   b47f0:	2b01      	cmp	r3, #1
   b47f2:	d102      	bne.n	b47fa <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x7a>
        weight_val *= cell_data->weight_coeff_500g;
   b47f4:	edd4 7a04 	vldr	s15, [r4, #16]
   b47f8:	e7eb      	b.n	b47d2 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x52>
    else if ( cell_data->weight_data_1000g_ok == LOADCELL_DATA_OK )
   b47fa:	7f23      	ldrb	r3, [r4, #28]
   b47fc:	2b01      	cmp	r3, #1
   b47fe:	d102      	bne.n	b4806 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x86>
        weight_val *= cell_data->weight_coeff_1000g;
   b4800:	edd4 7a06 	vldr	s15, [r4, #24]
   b4804:	e7e5      	b.n	b47d2 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x52>
    else if ( cell_data->weight_data_5000g_ok == LOADCELL_DATA_OK )
   b4806:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   b480a:	2b01      	cmp	r3, #1
   b480c:	d102      	bne.n	b4814 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x94>
        weight_val *= cell_data->weight_coeff_5000g;
   b480e:	edd4 7a08 	vldr	s15, [r4, #32]
   b4812:	e7de      	b.n	b47d2 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x52>
    else if ( cell_data->weight_data_10000g_ok == LOADCELL_DATA_OK )
   b4814:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4818:	2b01      	cmp	r3, #1
   b481a:	d102      	bne.n	b4822 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0xa2>
        weight_val *= cell_data->weight_coeff_10000g;
   b481c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   b4820:	e7d7      	b.n	b47d2 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x52>
        weight_val *= LOADCELL_DEFAULT_WEIGHT_SCALE_COEFFICIENT;
   b4822:	ee10 0a10 	vmov	r0, s0
   b4826:	f002 fb13 	bl	b6e50 <__aeabi_f2d>
   b482a:	a305      	add	r3, pc, #20	; (adr r3, b4840 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0xc0>)
   b482c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4830:	f002 fb66 	bl	b6f00 <__aeabi_dmul>
   b4834:	f002 fd76 	bl	b7324 <__aeabi_d2f>
   b4838:	ee00 0a10 	vmov	s0, r0
   b483c:	e7cb      	b.n	b47d6 <_Z19loadcell_get_weightP10loadcell_thP15loadcell_data_t+0x56>
   b483e:	bf00      	nop
   b4840:	616a3715 	.word	0x616a3715
   b4844:	3fb6a7a5 	.word	0x3fb6a7a5
   b4848:	00000000 	.word	0x00000000

000b484c <_Z15digital_in_initP12digital_in_th>:

#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
   b484c:	b510      	push	{r4, lr}
    if (mode == INPUT)
   b484e:	460c      	mov	r4, r1
   b4850:	b921      	cbnz	r1, b485c <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
   b4852:	7800      	ldrb	r0, [r0, #0]
   b4854:	f002 f8d8 	bl	b6a08 <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
   b4858:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
   b485a:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
   b485c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4860:	e7fb      	b.n	b485a <_Z15digital_in_initP12digital_in_th+0xe>

000b4862 <_Z15digital_in_readP12digital_in_t>:

//function for reading pin state
int32_t digital_in_read(digital_in_t *in)
{
    return digitalRead(in->pin);
   b4862:	7800      	ldrb	r0, [r0, #0]
   b4864:	f002 b8fa 	b.w	b6a5c <digitalRead>

000b4868 <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
   b4868:	2901      	cmp	r1, #1
{
   b486a:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
   b486c:	d104      	bne.n	b4878 <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));      //static cast mode and set pin as output
   b486e:	8800      	ldrh	r0, [r0, #0]
   b4870:	f002 f8ca 	bl	b6a08 <pinMode>
        return DIGITAL_OUT_SUCCESS;                         //return status
   b4874:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
    }
}
   b4876:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
   b4878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b487c:	e7fb      	b.n	b4876 <_Z16digital_out_initP13digital_out_th+0xe>

000b487e <_Z16digital_out_highP13digital_out_t>:

//function for setting pin HIGH
void digital_out_high(digital_out_t *out)
{   
    digitalWrite(out->pin, HIGH);       //write pin to logic 1
   b487e:	8800      	ldrh	r0, [r0, #0]
   b4880:	2101      	movs	r1, #1
   b4882:	f002 b8d2 	b.w	b6a2a <digitalWrite>

000b4886 <_Z15digital_out_lowP13digital_out_t>:
}

//function for setting pin LOW
void digital_out_low(digital_out_t *out)
{   
    digitalWrite(out->pin, LOW);        //write pin to logic 0
   b4886:	8800      	ldrh	r0, [r0, #0]
   b4888:	2100      	movs	r1, #0
   b488a:	f002 b8ce 	b.w	b6a2a <digitalWrite>
	...

000b4890 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <os_mutex_recursive_create+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030248 	.word	0x00030248

000b48a0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <os_mutex_recursive_destroy+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030248 	.word	0x00030248

000b48b0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <os_mutex_recursive_lock+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030248 	.word	0x00030248

000b48c0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <os_mutex_recursive_unlock+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	00030248 	.word	0x00030248

000b48d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <HAL_RNG_GetRandomNumber+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	685b      	ldr	r3, [r3, #4]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030218 	.word	0x00030218

000b48e0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <HAL_Delay_Microseconds+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	68db      	ldr	r3, [r3, #12]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030218 	.word	0x00030218

000b48f0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	695b      	ldr	r3, [r3, #20]
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030218 	.word	0x00030218

000b4900 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <HAL_Pin_Mode+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	689b      	ldr	r3, [r3, #8]
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	0003022c 	.word	0x0003022c

000b4910 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <HAL_Get_Pin_Mode+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	68db      	ldr	r3, [r3, #12]
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	0003022c 	.word	0x0003022c

000b4920 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <HAL_GPIO_Write+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	691b      	ldr	r3, [r3, #16]
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	0003022c 	.word	0x0003022c

000b4930 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <HAL_GPIO_Read+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	695b      	ldr	r3, [r3, #20]
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	0003022c 	.word	0x0003022c

000b4940 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <hal_i2c_write+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	6a1b      	ldr	r3, [r3, #32]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030228 	.word	0x00030228

000b4950 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <hal_i2c_available+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030228 	.word	0x00030228

000b4960 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <hal_i2c_read+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030228 	.word	0x00030228

000b4970 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <hal_i2c_peek+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030228 	.word	0x00030228

000b4980 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <hal_i2c_flush+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030228 	.word	0x00030228

000b4990 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <hal_i2c_is_enabled+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030228 	.word	0x00030228

000b49a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <hal_i2c_init+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030228 	.word	0x00030228

000b49b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <inet_inet_ntop+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	695b      	ldr	r3, [r3, #20]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030264 	.word	0x00030264

000b49c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <netdb_freeaddrinfo+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	689b      	ldr	r3, [r3, #8]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030268 	.word	0x00030268

000b49d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <netdb_getaddrinfo+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	68db      	ldr	r3, [r3, #12]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030268 	.word	0x00030268

000b49e0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <hal_spi_init+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	69db      	ldr	r3, [r3, #28]
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030230 	.word	0x00030230

000b49f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <hal_spi_is_enabled+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6a1b      	ldr	r3, [r3, #32]
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030230 	.word	0x00030230

000b4a00 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_usart_end+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	689b      	ldr	r3, [r3, #8]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	0003023c 	.word	0x0003023c

000b4a10 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_usart_write+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	68db      	ldr	r3, [r3, #12]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003023c 	.word	0x0003023c

000b4a20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <hal_usart_available+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	691b      	ldr	r3, [r3, #16]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	0003023c 	.word	0x0003023c

000b4a30 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <hal_usart_read+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	695b      	ldr	r3, [r3, #20]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	0003023c 	.word	0x0003023c

000b4a40 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <hal_usart_peek+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	699b      	ldr	r3, [r3, #24]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	0003023c 	.word	0x0003023c

000b4a50 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <hal_usart_flush+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	69db      	ldr	r3, [r3, #28]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003023c 	.word	0x0003023c

000b4a60 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_usart_is_enabled+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6a1b      	ldr	r3, [r3, #32]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003023c 	.word	0x0003023c

000b4a70 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_usart_available_data_for_write+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003023c 	.word	0x0003023c

000b4a80 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_usart_begin_config+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	0003023c 	.word	0x0003023c

000b4a90 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_usart_init_ex+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	0003023c 	.word	0x0003023c

000b4aa0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <HAL_USB_USART_Init+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	681b      	ldr	r3, [r3, #0]
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	0003024c 	.word	0x0003024c

000b4ab0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <HAL_USB_USART_Begin+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	685b      	ldr	r3, [r3, #4]
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	0003024c 	.word	0x0003024c

000b4ac0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <HAL_USB_USART_End+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	689b      	ldr	r3, [r3, #8]
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	0003024c 	.word	0x0003024c

000b4ad0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <HAL_USB_USART_Available_Data+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	691b      	ldr	r3, [r3, #16]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	0003024c 	.word	0x0003024c

000b4ae0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	695b      	ldr	r3, [r3, #20]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	0003024c 	.word	0x0003024c

000b4af0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <HAL_USB_USART_Receive_Data+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	699b      	ldr	r3, [r3, #24]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	0003024c 	.word	0x0003024c

000b4b00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <HAL_USB_USART_Send_Data+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	69db      	ldr	r3, [r3, #28]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	0003024c 	.word	0x0003024c

000b4b10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <HAL_USB_USART_Flush_Data+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6a1b      	ldr	r3, [r3, #32]
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	0003024c 	.word	0x0003024c

000b4b20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <panic_+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030260 	.word	0x00030260

000b4b30 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <log_message_v+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030260 	.word	0x00030260

000b4b40 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <log_level_name+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030260 	.word	0x00030260

000b4b50 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <log_set_callbacks+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030260 	.word	0x00030260

000b4b60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <set_system_mode+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	685b      	ldr	r3, [r3, #4]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030220 	.word	0x00030220

000b4b70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <system_delay_ms+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	695b      	ldr	r3, [r3, #20]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030220 	.word	0x00030220

000b4b80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <system_thread_set_state+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030220 	.word	0x00030220

000b4b90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b03      	ldr	r3, [pc, #12]	; (b4ba0 <system_ctrl_set_app_request_handler+0x10>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b9a:	9301      	str	r3, [sp, #4]
   b4b9c:	bd08      	pop	{r3, pc}
   b4b9e:	0000      	.short	0x0000
   b4ba0:	00030220 	.word	0x00030220

000b4ba4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b03      	ldr	r3, [pc, #12]	; (b4bb4 <system_ctrl_set_result+0x10>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4bae:	9301      	str	r3, [sp, #4]
   b4bb0:	bd08      	pop	{r3, pc}
   b4bb2:	0000      	.short	0x0000
   b4bb4:	00030220 	.word	0x00030220

000b4bb8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030244 	.word	0x00030244

000b4bc8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <network_connect+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	685b      	ldr	r3, [r3, #4]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030240 	.word	0x00030240

000b4bd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <network_connecting+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	689b      	ldr	r3, [r3, #8]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030240 	.word	0x00030240

000b4be8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <network_disconnect+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	68db      	ldr	r3, [r3, #12]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030240 	.word	0x00030240

000b4bf8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <network_ready+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	691b      	ldr	r3, [r3, #16]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030240 	.word	0x00030240

000b4c08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <network_on+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	695b      	ldr	r3, [r3, #20]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030240 	.word	0x00030240

000b4c18 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <network_off+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	699b      	ldr	r3, [r3, #24]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030240 	.word	0x00030240

000b4c28 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <network_listen+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	69db      	ldr	r3, [r3, #28]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030240 	.word	0x00030240

000b4c38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <network_listening+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6a1b      	ldr	r3, [r3, #32]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030240 	.word	0x00030240

000b4c48 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <network_set_listen_timeout+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030240 	.word	0x00030240

000b4c58 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <network_get_listen_timeout+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030240 	.word	0x00030240

000b4c68 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <network_is_on+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030240 	.word	0x00030240

000b4c78 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <network_is_off+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030240 	.word	0x00030240

000b4c88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <malloc+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	681b      	ldr	r3, [r3, #0]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	0003021c 	.word	0x0003021c

000b4c98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <free+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	685b      	ldr	r3, [r3, #4]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	0003021c 	.word	0x0003021c

000b4ca8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <realloc+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	689b      	ldr	r3, [r3, #8]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	0003021c 	.word	0x0003021c

000b4cb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <vsnprintf+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	0003021c 	.word	0x0003021c

000b4cc8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <__errno+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	0003021c 	.word	0x0003021c

000b4cd8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <__assert_func+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	0003021c 	.word	0x0003021c

000b4ce8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <newlib_impure_ptr_callback+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	0003021c 	.word	0x0003021c

000b4cf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4cf8:	2100      	movs	r1, #0
   b4cfa:	f7ff bf39 	b.w	b4b70 <system_delay_ms>

000b4cfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4cfe:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d00:	6843      	ldr	r3, [r0, #4]
   b4d02:	3b01      	subs	r3, #1
    {
   b4d04:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d06:	6043      	str	r3, [r0, #4]
   b4d08:	b963      	cbnz	r3, b4d24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4d0a:	6803      	ldr	r3, [r0, #0]
   b4d0c:	689b      	ldr	r3, [r3, #8]
   b4d0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d10:	68a3      	ldr	r3, [r4, #8]
   b4d12:	3b01      	subs	r3, #1
   b4d14:	60a3      	str	r3, [r4, #8]
   b4d16:	b92b      	cbnz	r3, b4d24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d18:	6823      	ldr	r3, [r4, #0]
   b4d1a:	4620      	mov	r0, r4
   b4d1c:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d22:	4718      	bx	r3
    }
   b4d24:	bd10      	pop	{r4, pc}

000b4d26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d26:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d28:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d2c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d2e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4d32:	42ae      	cmp	r6, r5
   b4d34:	d004      	beq.n	b4d40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b4d36:	4628      	mov	r0, r5
   b4d38:	f001 fbac 	bl	b6494 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4d3c:	3510      	adds	r5, #16
   b4d3e:	e7f8      	b.n	b4d32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4d40:	6820      	ldr	r0, [r4, #0]
   b4d42:	f7ff ffa9 	bl	b4c98 <free>
    AllocatorT::free(data_);
}
   b4d46:	4620      	mov	r0, r4
   b4d48:	bd70      	pop	{r4, r5, r6, pc}

000b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d4a:	b510      	push	{r4, lr}
   b4d4c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b4d4e:	6800      	ldr	r0, [r0, #0]
   b4d50:	b108      	cbz	r0, b4d56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4d52:	f7ff ffd4 	bl	b4cfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4d56:	4620      	mov	r0, r4
   b4d58:	bd10      	pop	{r4, pc}
	...

000b4d5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d5c:	4802      	ldr	r0, [pc, #8]	; (b4d68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d5e:	2300      	movs	r3, #0
   b4d60:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d62:	f7ff bd95 	b.w	b4890 <os_mutex_recursive_create>
   b4d66:	bf00      	nop
   b4d68:	2003e690 	.word	0x2003e690

000b4d6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	4611      	mov	r1, r2
   b4d72:	f7ff bf61 	b.w	b4c38 <network_listening>

000b4d76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d76:	2200      	movs	r2, #0
   b4d78:	6840      	ldr	r0, [r0, #4]
   b4d7a:	4611      	mov	r1, r2
   b4d7c:	f7ff bf6c 	b.w	b4c58 <network_get_listen_timeout>

000b4d80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d80:	6840      	ldr	r0, [r0, #4]
   b4d82:	2200      	movs	r2, #0
   b4d84:	f7ff bf60 	b.w	b4c48 <network_set_listen_timeout>

000b4d88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d88:	6840      	ldr	r0, [r0, #4]
   b4d8a:	2200      	movs	r2, #0
   b4d8c:	f081 0101 	eor.w	r1, r1, #1
   b4d90:	f7ff bf4a 	b.w	b4c28 <network_listen>

000b4d94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d94:	2300      	movs	r3, #0
   b4d96:	6840      	ldr	r0, [r0, #4]
   b4d98:	461a      	mov	r2, r3
   b4d9a:	4619      	mov	r1, r3
   b4d9c:	f7ff bf3c 	b.w	b4c18 <network_off>

000b4da0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4da0:	2300      	movs	r3, #0
   b4da2:	6840      	ldr	r0, [r0, #4]
   b4da4:	461a      	mov	r2, r3
   b4da6:	4619      	mov	r1, r3
   b4da8:	f7ff bf2e 	b.w	b4c08 <network_on>

000b4dac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4dac:	2200      	movs	r2, #0
   b4dae:	6840      	ldr	r0, [r0, #4]
   b4db0:	4611      	mov	r1, r2
   b4db2:	f7ff bf21 	b.w	b4bf8 <network_ready>

000b4db6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4db6:	2200      	movs	r2, #0
   b4db8:	6840      	ldr	r0, [r0, #4]
   b4dba:	4611      	mov	r1, r2
   b4dbc:	f7ff bf0c 	b.w	b4bd8 <network_connecting>

000b4dc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	2200      	movs	r2, #0
   b4dc4:	2102      	movs	r1, #2
   b4dc6:	f7ff bf0f 	b.w	b4be8 <network_disconnect>

000b4dca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dca:	2300      	movs	r3, #0
   b4dcc:	6840      	ldr	r0, [r0, #4]
   b4dce:	461a      	mov	r2, r3
   b4dd0:	f7ff befa 	b.w	b4bc8 <network_connect>

000b4dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4dd4:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4dd6:	2203      	movs	r2, #3
   b4dd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4dda:	4a02      	ldr	r2, [pc, #8]	; (b4de4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4ddc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4dde:	4770      	bx	lr
   b4de0:	2003e694 	.word	0x2003e694
   b4de4:	000b7994 	.word	0x000b7994

000b4de8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4de8:	4770      	bx	lr

000b4dea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dec:	4606      	mov	r6, r0
   b4dee:	4615      	mov	r5, r2
   b4df0:	460c      	mov	r4, r1
   b4df2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4df4:	42bc      	cmp	r4, r7
   b4df6:	d006      	beq.n	b4e06 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4df8:	6833      	ldr	r3, [r6, #0]
   b4dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4dfe:	689b      	ldr	r3, [r3, #8]
   b4e00:	4630      	mov	r0, r6
   b4e02:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4e04:	e7f6      	b.n	b4df4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4e06:	4628      	mov	r0, r5
   b4e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e0a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4e0a:	7c00      	ldrb	r0, [r0, #16]
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	f7ff bd97 	b.w	b4940 <hal_i2c_write>

000b4e12 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e12:	7c00      	ldrb	r0, [r0, #16]
   b4e14:	2100      	movs	r1, #0
   b4e16:	f7ff bd9b 	b.w	b4950 <hal_i2c_available>

000b4e1a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4e1a:	7c00      	ldrb	r0, [r0, #16]
   b4e1c:	2100      	movs	r1, #0
   b4e1e:	f7ff bd9f 	b.w	b4960 <hal_i2c_read>

000b4e22 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4e22:	7c00      	ldrb	r0, [r0, #16]
   b4e24:	2100      	movs	r1, #0
   b4e26:	f7ff bda3 	b.w	b4970 <hal_i2c_peek>

000b4e2a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4e2a:	7c00      	ldrb	r0, [r0, #16]
   b4e2c:	2100      	movs	r1, #0
   b4e2e:	f7ff bda7 	b.w	b4980 <hal_i2c_flush>

000b4e32 <_ZN7TwoWireD0Ev>:
   b4e32:	b510      	push	{r4, lr}
   b4e34:	2114      	movs	r1, #20
   b4e36:	4604      	mov	r4, r0
   b4e38:	f7ff f931 	bl	b409e <_ZdlPvj>
   b4e3c:	4620      	mov	r0, r4
   b4e3e:	bd10      	pop	{r4, pc}

000b4e40 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4e40:	b538      	push	{r3, r4, r5, lr}
   b4e42:	4604      	mov	r4, r0
   b4e44:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e4a:	2200      	movs	r2, #0
   b4e4c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4e50:	4b09      	ldr	r3, [pc, #36]	; (b4e78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4e52:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4e54:	4608      	mov	r0, r1
   b4e56:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4e58:	4629      	mov	r1, r5
   b4e5a:	f7ff fda1 	bl	b49a0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4e5e:	30bf      	adds	r0, #191	; 0xbf
   b4e60:	d108      	bne.n	b4e74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4e62:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4e64:	07db      	lsls	r3, r3, #31
   b4e66:	d505      	bpl.n	b4e74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4e68:	6868      	ldr	r0, [r5, #4]
   b4e6a:	f7ff ff15 	bl	b4c98 <free>
    free(conf.tx_buffer);
   b4e6e:	68e8      	ldr	r0, [r5, #12]
   b4e70:	f7ff ff12 	bl	b4c98 <free>
}
   b4e74:	4620      	mov	r0, r4
   b4e76:	bd38      	pop	{r3, r4, r5, pc}
   b4e78:	000b79d0 	.word	0x000b79d0

000b4e7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e7c:	4770      	bx	lr

000b4e7e <_ZN9IPAddressD0Ev>:
   b4e7e:	b510      	push	{r4, lr}
   b4e80:	2118      	movs	r1, #24
   b4e82:	4604      	mov	r4, r0
   b4e84:	f7ff f90b 	bl	b409e <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e8e:	7d03      	ldrb	r3, [r0, #20]
   b4e90:	2b06      	cmp	r3, #6
{
   b4e92:	b08d      	sub	sp, #52	; 0x34
   b4e94:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e96:	f100 0704 	add.w	r7, r0, #4
   b4e9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e9e:	d012      	beq.n	b4ec6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ea0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4ea4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ea8:	220a      	movs	r2, #10
   b4eaa:	4630      	mov	r0, r6
   b4eac:	f001 fa93 	bl	b63d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eb0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4eb2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4eb4:	d019      	beq.n	b4eea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4eb6:	2c00      	cmp	r4, #0
   b4eb8:	d0f4      	beq.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4eba:	212e      	movs	r1, #46	; 0x2e
   b4ebc:	4630      	mov	r0, r6
   b4ebe:	f001 fa7b 	bl	b63b8 <_ZN5Print5printEc>
   b4ec2:	4404      	add	r4, r0
   b4ec4:	e7ee      	b.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ec6:	232f      	movs	r3, #47	; 0x2f
   b4ec8:	466a      	mov	r2, sp
   b4eca:	4639      	mov	r1, r7
   b4ecc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ece:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed2:	f7ff fd6d 	bl	b49b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ed6:	4668      	mov	r0, sp
   b4ed8:	f002 fb09 	bl	b74ee <strlen>
   b4edc:	6833      	ldr	r3, [r6, #0]
   b4ede:	4602      	mov	r2, r0
   b4ee0:	68db      	ldr	r3, [r3, #12]
   b4ee2:	4669      	mov	r1, sp
   b4ee4:	4630      	mov	r0, r6
   b4ee6:	4798      	blx	r3
   b4ee8:	4604      	mov	r4, r0
    }
    return n;
}
   b4eea:	4620      	mov	r0, r4
   b4eec:	b00d      	add	sp, #52	; 0x34
   b4eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ef0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ef0:	b510      	push	{r4, lr}
   b4ef2:	4b05      	ldr	r3, [pc, #20]	; (b4f08 <_ZN9IPAddressC1Ev+0x18>)
   b4ef4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4ef6:	2211      	movs	r2, #17
   b4ef8:	f840 3b04 	str.w	r3, [r0], #4
   b4efc:	2100      	movs	r1, #0
   b4efe:	f002 fa97 	bl	b7430 <memset>
}
   b4f02:	4620      	mov	r0, r4
   b4f04:	bd10      	pop	{r4, pc}
   b4f06:	bf00      	nop
   b4f08:	000b79f8 	.word	0x000b79f8

000b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f0c:	4603      	mov	r3, r0
   b4f0e:	4a07      	ldr	r2, [pc, #28]	; (b4f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f10:	b510      	push	{r4, lr}
   b4f12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f16:	f101 0210 	add.w	r2, r1, #16
   b4f1a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f1e:	f843 4b04 	str.w	r4, [r3], #4
   b4f22:	4291      	cmp	r1, r2
   b4f24:	d1f9      	bne.n	b4f1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f26:	780a      	ldrb	r2, [r1, #0]
   b4f28:	701a      	strb	r2, [r3, #0]
}
   b4f2a:	bd10      	pop	{r4, pc}
   b4f2c:	000b79f8 	.word	0x000b79f8

000b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f42:	2304      	movs	r3, #4
   b4f44:	6041      	str	r1, [r0, #4]
   b4f46:	7503      	strb	r3, [r0, #20]
}
   b4f48:	bd10      	pop	{r4, pc}
	...

000b4f4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f4c:	b507      	push	{r0, r1, r2, lr}
   b4f4e:	4b06      	ldr	r3, [pc, #24]	; (b4f68 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f52:	78cb      	ldrb	r3, [r1, #3]
   b4f54:	9300      	str	r3, [sp, #0]
   b4f56:	788b      	ldrb	r3, [r1, #2]
   b4f58:	784a      	ldrb	r2, [r1, #1]
   b4f5a:	7809      	ldrb	r1, [r1, #0]
   b4f5c:	f7ff ffe8 	bl	b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f60:	b003      	add	sp, #12
   b4f62:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f66:	bf00      	nop
   b4f68:	000b79f8 	.word	0x000b79f8

000b4f6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4f6c:	f100 0310 	add.w	r3, r0, #16
   b4f70:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4f72:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4f76:	2901      	cmp	r1, #1
   b4f78:	4618      	mov	r0, r3
   b4f7a:	d108      	bne.n	b4f8e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4f7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4f80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4f84:	3a01      	subs	r2, #1
   b4f86:	f103 0310 	add.w	r3, r3, #16
   b4f8a:	d1f2      	bne.n	b4f72 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4f8c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4f8e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4f90:	bf04      	itt	eq
   b4f92:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4f96:	1852      	addeq	r2, r2, r1
   b4f98:	e7f4      	b.n	b4f84 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4f9a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4f9a:	b40e      	push	{r1, r2, r3}
   b4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f9e:	b088      	sub	sp, #32
   b4fa0:	af00      	add	r7, sp, #0
   b4fa2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fa6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4fa8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fac:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4fae:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fb0:	462b      	mov	r3, r5
   b4fb2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4fb4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fb6:	f7ff fe7f 	bl	b4cb8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4fba:	280f      	cmp	r0, #15
   b4fbc:	687a      	ldr	r2, [r7, #4]
   b4fbe:	d91a      	bls.n	b4ff6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4fc0:	f100 0308 	add.w	r3, r0, #8
   b4fc4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4fc8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4fca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fce:	1c41      	adds	r1, r0, #1
   b4fd0:	462b      	mov	r3, r5
   b4fd2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4fd4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fd6:	f7ff fe6f 	bl	b4cb8 <vsnprintf>
        if (n > 0) {
   b4fda:	1e02      	subs	r2, r0, #0
   b4fdc:	dd04      	ble.n	b4fe8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4fde:	6823      	ldr	r3, [r4, #0]
   b4fe0:	4669      	mov	r1, sp
   b4fe2:	689b      	ldr	r3, [r3, #8]
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	4798      	blx	r3
   b4fe8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4fea:	3720      	adds	r7, #32
   b4fec:	46bd      	mov	sp, r7
   b4fee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4ff2:	b003      	add	sp, #12
   b4ff4:	4770      	bx	lr
    } else if (n > 0) {
   b4ff6:	2800      	cmp	r0, #0
   b4ff8:	d0f7      	beq.n	b4fea <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4ffa:	6823      	ldr	r3, [r4, #0]
   b4ffc:	4602      	mov	r2, r0
   b4ffe:	689b      	ldr	r3, [r3, #8]
   b5000:	f107 0110 	add.w	r1, r7, #16
   b5004:	4620      	mov	r0, r4
   b5006:	4798      	blx	r3
}
   b5008:	e7ef      	b.n	b4fea <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b500a:	b538      	push	{r3, r4, r5, lr}
   b500c:	680b      	ldr	r3, [r1, #0]
   b500e:	6003      	str	r3, [r0, #0]
   b5010:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5012:	6843      	ldr	r3, [r0, #4]
   b5014:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5016:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5018:	d008      	beq.n	b502c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b501a:	b115      	cbz	r5, b5022 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b501c:	686b      	ldr	r3, [r5, #4]
   b501e:	3301      	adds	r3, #1
   b5020:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5022:	6860      	ldr	r0, [r4, #4]
   b5024:	b108      	cbz	r0, b502a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5026:	f7ff fe6a 	bl	b4cfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b502a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b502c:	bd38      	pop	{r3, r4, r5, pc}

000b502e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b502e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5030:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5032:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5036:	689b      	ldr	r3, [r3, #8]
   b5038:	2201      	movs	r2, #1
   b503a:	f10d 0107 	add.w	r1, sp, #7
   b503e:	4798      	blx	r3
}
   b5040:	b003      	add	sp, #12
   b5042:	f85d fb04 	ldr.w	pc, [sp], #4

000b5046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5046:	460b      	mov	r3, r1
   b5048:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b504a:	2200      	movs	r2, #0
   b504c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b504e:	e9c0 2200 	strd	r2, r2, [r0]
   b5052:	4604      	mov	r4, r0
        t_ = t;
   b5054:	6083      	str	r3, [r0, #8]
    if (t) {
   b5056:	b90b      	cbnz	r3, b505c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5058:	4620      	mov	r0, r4
   b505a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b505c:	f7ff ffd5 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5060:	e7fa      	b.n	b5058 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5062 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5062:	6883      	ldr	r3, [r0, #8]
   b5064:	b1eb      	cbz	r3, b50a2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5066:	781a      	ldrb	r2, [r3, #0]
   b5068:	2a03      	cmp	r2, #3
   b506a:	d81a      	bhi.n	b50a2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b506c:	e8df f002 	tbb	[pc, r2]
   b5070:	1b021704 	.word	0x1b021704
   b5074:	2005      	movs	r0, #5
   b5076:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5078:	6802      	ldr	r2, [r0, #0]
   b507a:	685b      	ldr	r3, [r3, #4]
   b507c:	6852      	ldr	r2, [r2, #4]
   b507e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5080:	282d      	cmp	r0, #45	; 0x2d
   b5082:	d012      	beq.n	b50aa <_ZNK5spark9JSONValue4typeEv+0x48>
   b5084:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5088:	2b09      	cmp	r3, #9
   b508a:	d90e      	bls.n	b50aa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b508c:	2874      	cmp	r0, #116	; 0x74
   b508e:	d00e      	beq.n	b50ae <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5090:	2866      	cmp	r0, #102	; 0x66
   b5092:	d00c      	beq.n	b50ae <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5094:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5098:	4258      	negs	r0, r3
   b509a:	4158      	adcs	r0, r3
   b509c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b509e:	2006      	movs	r0, #6
   b50a0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b50a2:	2000      	movs	r0, #0
   b50a4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b50a6:	2004      	movs	r0, #4
   b50a8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b50aa:	2003      	movs	r0, #3
   b50ac:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b50ae:	2002      	movs	r0, #2
}
   b50b0:	4770      	bx	lr

000b50b2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b50b2:	b510      	push	{r4, lr}
   b50b4:	4604      	mov	r4, r0
    switch (type()) {
   b50b6:	f7ff ffd4 	bl	b5062 <_ZNK5spark9JSONValue4typeEv>
   b50ba:	2802      	cmp	r0, #2
   b50bc:	d00e      	beq.n	b50dc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b50be:	1ec3      	subs	r3, r0, #3
   b50c0:	b2db      	uxtb	r3, r3
   b50c2:	2b01      	cmp	r3, #1
   b50c4:	d814      	bhi.n	b50f0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b50c6:	6822      	ldr	r2, [r4, #0]
   b50c8:	68a3      	ldr	r3, [r4, #8]
   b50ca:	6850      	ldr	r0, [r2, #4]
   b50cc:	685b      	ldr	r3, [r3, #4]
}
   b50ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b50d2:	220a      	movs	r2, #10
   b50d4:	2100      	movs	r1, #0
   b50d6:	4418      	add	r0, r3
   b50d8:	f002 babc 	b.w	b7654 <strtol>
        const char* const s = d_->json + t_->start;
   b50dc:	6822      	ldr	r2, [r4, #0]
   b50de:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b50e0:	6852      	ldr	r2, [r2, #4]
   b50e2:	685b      	ldr	r3, [r3, #4]
   b50e4:	5cd0      	ldrb	r0, [r2, r3]
   b50e6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b50ea:	4258      	negs	r0, r3
   b50ec:	4158      	adcs	r0, r3
}
   b50ee:	bd10      	pop	{r4, pc}
    switch (type()) {
   b50f0:	2000      	movs	r0, #0
   b50f2:	e7fc      	b.n	b50ee <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b50f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b50f4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b50f6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b50f8:	e9c0 3300 	strd	r3, r3, [r0]
   b50fc:	4604      	mov	r4, r0
        n_(0) {
   b50fe:	480e      	ldr	r0, [pc, #56]	; (b5138 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5100:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5104:	b1a9      	cbz	r1, b5132 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5106:	780b      	ldrb	r3, [r1, #0]
   b5108:	2b03      	cmp	r3, #3
   b510a:	d006      	beq.n	b511a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b510c:	b98b      	cbnz	r3, b5132 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b510e:	6813      	ldr	r3, [r2, #0]
   b5110:	6858      	ldr	r0, [r3, #4]
   b5112:	684b      	ldr	r3, [r1, #4]
   b5114:	5cc3      	ldrb	r3, [r0, r3]
   b5116:	2b6e      	cmp	r3, #110	; 0x6e
   b5118:	d007      	beq.n	b512a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b511a:	6813      	ldr	r3, [r2, #0]
   b511c:	684d      	ldr	r5, [r1, #4]
   b511e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5120:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5122:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5124:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5126:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5128:	60e3      	str	r3, [r4, #12]
   b512a:	4611      	mov	r1, r2
   b512c:	4620      	mov	r0, r4
   b512e:	f7ff ff6c 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5132:	4620      	mov	r0, r4
   b5134:	bd38      	pop	{r3, r4, r5, pc}
   b5136:	bf00      	nop
   b5138:	000b77c0 	.word	0x000b77c0

000b513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b513c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b513e:	2500      	movs	r5, #0
   b5140:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5142:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5146:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b514a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b514e:	4604      	mov	r4, r0
   b5150:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5152:	b14b      	cbz	r3, b5168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5154:	781a      	ldrb	r2, [r3, #0]
   b5156:	2a01      	cmp	r2, #1
   b5158:	d106      	bne.n	b5168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b515a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b515e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5160:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5162:	6143      	str	r3, [r0, #20]
   b5164:	f7ff ff51 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5168:	4620      	mov	r0, r4
   b516a:	bd38      	pop	{r3, r4, r5, pc}

000b516c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b516c:	b510      	push	{r4, lr}
    if (!n_) {
   b516e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5170:	4604      	mov	r4, r0
    if (!n_) {
   b5172:	b163      	cbz	r3, b518e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5174:	6880      	ldr	r0, [r0, #8]
   b5176:	60e0      	str	r0, [r4, #12]
    --n_;
   b5178:	3b01      	subs	r3, #1
    ++t_;
   b517a:	3010      	adds	r0, #16
   b517c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b517e:	6120      	str	r0, [r4, #16]
    --n_;
   b5180:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5182:	b113      	cbz	r3, b518a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5184:	f7ff fef2 	bl	b4f6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5188:	60a0      	str	r0, [r4, #8]
    return true;
   b518a:	2001      	movs	r0, #1
   b518c:	e000      	b.n	b5190 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b518e:	4618      	mov	r0, r3
}
   b5190:	bd10      	pop	{r4, pc}

000b5192 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5192:	b510      	push	{r4, lr}
    write('}');
   b5194:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5196:	4604      	mov	r4, r0
    write('}');
   b5198:	f7ff ff49 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b519c:	2301      	movs	r3, #1
   b519e:	7123      	strb	r3, [r4, #4]
}
   b51a0:	4620      	mov	r0, r4
   b51a2:	bd10      	pop	{r4, pc}

000b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b51a4:	b508      	push	{r3, lr}
    switch (state_) {
   b51a6:	7903      	ldrb	r3, [r0, #4]
   b51a8:	2b01      	cmp	r3, #1
   b51aa:	d002      	beq.n	b51b2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b51ac:	2b02      	cmp	r3, #2
   b51ae:	d004      	beq.n	b51ba <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b51b0:	bd08      	pop	{r3, pc}
        write(',');
   b51b2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b51b4:	f7ff ff3b 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
}
   b51b8:	e7fa      	b.n	b51b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b51ba:	213a      	movs	r1, #58	; 0x3a
   b51bc:	e7fa      	b.n	b51b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b51be <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b51be:	b510      	push	{r4, lr}
   b51c0:	4604      	mov	r4, r0
    writeSeparator();
   b51c2:	f7ff ffef 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b51c6:	4620      	mov	r0, r4
   b51c8:	217b      	movs	r1, #123	; 0x7b
   b51ca:	f7ff ff30 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b51ce:	2300      	movs	r3, #0
   b51d0:	7123      	strb	r3, [r4, #4]
}
   b51d2:	4620      	mov	r0, r4
   b51d4:	bd10      	pop	{r4, pc}
	...

000b51d8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b51d8:	b513      	push	{r0, r1, r4, lr}
   b51da:	4604      	mov	r4, r0
   b51dc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b51de:	f7ff ffe1 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b51e2:	6823      	ldr	r3, [r4, #0]
   b51e4:	9a01      	ldr	r2, [sp, #4]
   b51e6:	68db      	ldr	r3, [r3, #12]
   b51e8:	4903      	ldr	r1, [pc, #12]	; (b51f8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b51ea:	4620      	mov	r0, r4
   b51ec:	4798      	blx	r3
    state_ = NEXT;
   b51ee:	2301      	movs	r3, #1
}
   b51f0:	4620      	mov	r0, r4
    state_ = NEXT;
   b51f2:	7123      	strb	r3, [r4, #4]
}
   b51f4:	b002      	add	sp, #8
   b51f6:	bd10      	pop	{r4, pc}
   b51f8:	000b7a04 	.word	0x000b7a04

000b51fc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b51fc:	b513      	push	{r0, r1, r4, lr}
   b51fe:	4604      	mov	r4, r0
   b5200:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5202:	f7ff ffcf 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5206:	6823      	ldr	r3, [r4, #0]
   b5208:	9a01      	ldr	r2, [sp, #4]
   b520a:	68db      	ldr	r3, [r3, #12]
   b520c:	4903      	ldr	r1, [pc, #12]	; (b521c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b520e:	4620      	mov	r0, r4
   b5210:	4798      	blx	r3
    state_ = NEXT;
   b5212:	2301      	movs	r3, #1
}
   b5214:	4620      	mov	r0, r4
    state_ = NEXT;
   b5216:	7123      	strb	r3, [r4, #4]
}
   b5218:	b002      	add	sp, #8
   b521a:	bd10      	pop	{r4, pc}
   b521c:	000b7a07 	.word	0x000b7a07

000b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5224:	460d      	mov	r5, r1
    write('"');
   b5226:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5228:	4690      	mov	r8, r2
   b522a:	4604      	mov	r4, r0
    write('"');
   b522c:	f7ff feff 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5230:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b52d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5234:	44a8      	add	r8, r5
    const char *s = str;
   b5236:	462f      	mov	r7, r5
    while (s != end) {
   b5238:	4547      	cmp	r7, r8
   b523a:	46ba      	mov	sl, r7
   b523c:	d03d      	beq.n	b52ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b523e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5242:	2e22      	cmp	r6, #34	; 0x22
   b5244:	d006      	beq.n	b5254 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5246:	2e5c      	cmp	r6, #92	; 0x5c
   b5248:	d004      	beq.n	b5254 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b524a:	4630      	mov	r0, r6
   b524c:	f002 f8c0 	bl	b73d0 <isprint>
   b5250:	2800      	cmp	r0, #0
   b5252:	d1f1      	bne.n	b5238 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5254:	6823      	ldr	r3, [r4, #0]
   b5256:	ebaa 0205 	sub.w	r2, sl, r5
   b525a:	689b      	ldr	r3, [r3, #8]
   b525c:	4629      	mov	r1, r5
   b525e:	4620      	mov	r0, r4
   b5260:	4798      	blx	r3
            write('\\');
   b5262:	215c      	movs	r1, #92	; 0x5c
   b5264:	4620      	mov	r0, r4
   b5266:	f7ff fee2 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b526a:	2e0d      	cmp	r6, #13
   b526c:	d80a      	bhi.n	b5284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b526e:	2e07      	cmp	r6, #7
   b5270:	d91c      	bls.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5272:	f1a6 0308 	sub.w	r3, r6, #8
   b5276:	2b05      	cmp	r3, #5
   b5278:	d818      	bhi.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b527a:	e8df f003 	tbb	[pc, r3]
   b527e:	0f0d      	.short	0x0f0d
   b5280:	15131711 	.word	0x15131711
   b5284:	2e22      	cmp	r6, #34	; 0x22
   b5286:	d001      	beq.n	b528c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5288:	2e5c      	cmp	r6, #92	; 0x5c
   b528a:	d10f      	bne.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b528c:	4631      	mov	r1, r6
                write('b');
   b528e:	4620      	mov	r0, r4
   b5290:	f7ff fecd 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5294:	463d      	mov	r5, r7
    while (s != end) {
   b5296:	e7cf      	b.n	b5238 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5298:	2162      	movs	r1, #98	; 0x62
   b529a:	e7f8      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b529c:	2174      	movs	r1, #116	; 0x74
   b529e:	e7f6      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b52a0:	216e      	movs	r1, #110	; 0x6e
   b52a2:	e7f4      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b52a4:	2166      	movs	r1, #102	; 0x66
   b52a6:	e7f2      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b52a8:	2172      	movs	r1, #114	; 0x72
   b52aa:	e7f0      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b52ac:	6823      	ldr	r3, [r4, #0]
   b52ae:	4632      	mov	r2, r6
   b52b0:	68db      	ldr	r3, [r3, #12]
   b52b2:	4649      	mov	r1, r9
   b52b4:	4620      	mov	r0, r4
   b52b6:	4798      	blx	r3
                break;
   b52b8:	e7ec      	b.n	b5294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b52ba:	42bd      	cmp	r5, r7
   b52bc:	d005      	beq.n	b52ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b52be:	6823      	ldr	r3, [r4, #0]
   b52c0:	1b7a      	subs	r2, r7, r5
   b52c2:	689b      	ldr	r3, [r3, #8]
   b52c4:	4629      	mov	r1, r5
   b52c6:	4620      	mov	r0, r4
   b52c8:	4798      	blx	r3
    }
    write('"');
   b52ca:	2122      	movs	r1, #34	; 0x22
   b52cc:	4620      	mov	r0, r4
   b52ce:	f7ff feae 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
}
   b52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b52d6:	bf00      	nop
   b52d8:	000b7a0a 	.word	0x000b7a0a

000b52dc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b52dc:	b513      	push	{r0, r1, r4, lr}
   b52de:	4604      	mov	r4, r0
   b52e0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b52e4:	f7ff ff5e 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b52e8:	4620      	mov	r0, r4
   b52ea:	e9dd 2100 	ldrd	r2, r1, [sp]
   b52ee:	f7ff ff97 	bl	b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b52f2:	2302      	movs	r3, #2
}
   b52f4:	4620      	mov	r0, r4
    state_ = VALUE;
   b52f6:	7123      	strb	r3, [r4, #4]
}
   b52f8:	b002      	add	sp, #8
   b52fa:	bd10      	pop	{r4, pc}

000b52fc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b52fc:	b513      	push	{r0, r1, r4, lr}
   b52fe:	4604      	mov	r4, r0
   b5300:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5304:	f7ff ff4e 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5308:	4620      	mov	r0, r4
   b530a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b530e:	f7ff ff87 	bl	b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5312:	2301      	movs	r3, #1
}
   b5314:	4620      	mov	r0, r4
    state_ = NEXT;
   b5316:	7123      	strb	r3, [r4, #4]
}
   b5318:	b002      	add	sp, #8
   b531a:	bd10      	pop	{r4, pc}

000b531c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b531c:	6880      	ldr	r0, [r0, #8]
   b531e:	6803      	ldr	r3, [r0, #0]
   b5320:	68db      	ldr	r3, [r3, #12]
   b5322:	4718      	bx	r3

000b5324 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5324:	4770      	bx	lr

000b5326 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5326:	4608      	mov	r0, r1
   b5328:	b111      	cbz	r1, b5330 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b532a:	680b      	ldr	r3, [r1, #0]
   b532c:	685b      	ldr	r3, [r3, #4]
   b532e:	4718      	bx	r3
}
   b5330:	4770      	bx	lr

000b5332 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5332:	4770      	bx	lr

000b5334 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5334:	4770      	bx	lr

000b5336 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5336:	4770      	bx	lr

000b5338 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5338:	4770      	bx	lr

000b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b533a:	b538      	push	{r3, r4, r5, lr}
   b533c:	4604      	mov	r4, r0
   b533e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5340:	6800      	ldr	r0, [r0, #0]
   b5342:	212e      	movs	r1, #46	; 0x2e
   b5344:	f002 f8b7 	bl	b74b6 <strchrnul>
    size = s - category;
   b5348:	6823      	ldr	r3, [r4, #0]
   b534a:	1ac3      	subs	r3, r0, r3
   b534c:	602b      	str	r3, [r5, #0]
    if (size) {
   b534e:	b123      	cbz	r3, b535a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5350:	7803      	ldrb	r3, [r0, #0]
   b5352:	b103      	cbz	r3, b5356 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5354:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5356:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5358:	6020      	str	r0, [r4, #0]
}
   b535a:	4618      	mov	r0, r3
   b535c:	bd38      	pop	{r3, r4, r5, pc}

000b535e <_ZN5spark16JSONStreamWriterD0Ev>:
   b535e:	b510      	push	{r4, lr}
   b5360:	210c      	movs	r1, #12
   b5362:	4604      	mov	r4, r0
   b5364:	f7fe fe9b 	bl	b409e <_ZdlPvj>
   b5368:	4620      	mov	r0, r4
   b536a:	bd10      	pop	{r4, pc}

000b536c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b536c:	b510      	push	{r4, lr}
   b536e:	2104      	movs	r1, #4
   b5370:	4604      	mov	r4, r0
   b5372:	f7fe fe94 	bl	b409e <_ZdlPvj>
   b5376:	4620      	mov	r0, r4
   b5378:	bd10      	pop	{r4, pc}

000b537a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b537a:	b510      	push	{r4, lr}
   b537c:	2104      	movs	r1, #4
   b537e:	4604      	mov	r4, r0
   b5380:	f7fe fe8d 	bl	b409e <_ZdlPvj>
   b5384:	4620      	mov	r0, r4
   b5386:	bd10      	pop	{r4, pc}

000b5388 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5388:	f7ff ba92 	b.w	b48b0 <os_mutex_recursive_lock>

000b538c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b538c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b538e:	f002 f89c 	bl	b74ca <strcmp>
}
   b5392:	fab0 f080 	clz	r0, r0
   b5396:	0940      	lsrs	r0, r0, #5
   b5398:	bd08      	pop	{r3, pc}

000b539a <__tcf_1>:
   b539a:	4770      	bx	lr

000b539c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b539c:	b510      	push	{r4, lr}
   b539e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b53a0:	f001 f9f4 	bl	b678c <_Z16_fetch_usbserialv>
   b53a4:	4284      	cmp	r4, r0
   b53a6:	d010      	beq.n	b53ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b53a8:	f001 fbc6 	bl	b6b38 <_Z22__fetch_global_Serial1v>
   b53ac:	4284      	cmp	r4, r0
   b53ae:	d105      	bne.n	b53bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b53b0:	f001 fbc2 	bl	b6b38 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b53b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b53b8:	f001 b983 	b.w	b66c2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b53bc:	b12c      	cbz	r4, b53ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b53be:	6823      	ldr	r3, [r4, #0]
   b53c0:	4620      	mov	r0, r4
   b53c2:	685b      	ldr	r3, [r3, #4]
}
   b53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53c8:	4718      	bx	r3
   b53ca:	bd10      	pop	{r4, pc}

000b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53cc:	680b      	ldr	r3, [r1, #0]
   b53ce:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b53d0:	684b      	ldr	r3, [r1, #4]
   b53d2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b53d4:	b113      	cbz	r3, b53dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b53d6:	685a      	ldr	r2, [r3, #4]
   b53d8:	3201      	adds	r2, #1
   b53da:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53dc:	4770      	bx	lr

000b53de <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b53de:	b513      	push	{r0, r1, r4, lr}
   b53e0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b53e2:	4608      	mov	r0, r1
   b53e4:	9101      	str	r1, [sp, #4]
   b53e6:	f002 f882 	bl	b74ee <strlen>
   b53ea:	9901      	ldr	r1, [sp, #4]
   b53ec:	4602      	mov	r2, r0
   b53ee:	4620      	mov	r0, r4
}
   b53f0:	b002      	add	sp, #8
   b53f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b53f6:	f7ff bf81 	b.w	b52fc <_ZN5spark10JSONWriter5valueEPKcj>

000b53fa <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b53fa:	b513      	push	{r0, r1, r4, lr}
   b53fc:	4604      	mov	r4, r0
    write(str, strlen(str));
   b53fe:	4608      	mov	r0, r1
   b5400:	9101      	str	r1, [sp, #4]
   b5402:	f002 f874 	bl	b74ee <strlen>
   b5406:	6823      	ldr	r3, [r4, #0]
   b5408:	9901      	ldr	r1, [sp, #4]
   b540a:	68db      	ldr	r3, [r3, #12]
   b540c:	4602      	mov	r2, r0
   b540e:	4620      	mov	r0, r4
}
   b5410:	b002      	add	sp, #8
   b5412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5416:	4718      	bx	r3

000b5418 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5418:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b541a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b541c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5420:	68db      	ldr	r3, [r3, #12]
   b5422:	2201      	movs	r2, #1
   b5424:	f10d 0107 	add.w	r1, sp, #7
   b5428:	4798      	blx	r3
}
   b542a:	b003      	add	sp, #12
   b542c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5430:	b40e      	push	{r1, r2, r3}
   b5432:	b503      	push	{r0, r1, lr}
   b5434:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5436:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5438:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b543c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b543e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5440:	f000 ffe7 	bl	b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5444:	b002      	add	sp, #8
   b5446:	f85d eb04 	ldr.w	lr, [sp], #4
   b544a:	b003      	add	sp, #12
   b544c:	4770      	bx	lr

000b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b544e:	680a      	ldr	r2, [r1, #0]
   b5450:	6002      	str	r2, [r0, #0]
   b5452:	684a      	ldr	r2, [r1, #4]
   b5454:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5456:	2200      	movs	r2, #0
   b5458:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b545c:	b510      	push	{r4, lr}
   b545e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5460:	688c      	ldr	r4, [r1, #8]
   b5462:	6084      	str	r4, [r0, #8]
   b5464:	68cc      	ldr	r4, [r1, #12]
   b5466:	60c4      	str	r4, [r0, #12]
   b5468:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b546a:	608a      	str	r2, [r1, #8]
   b546c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b546e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5470:	610a      	str	r2, [r1, #16]
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5478:	e9d0 8400 	ldrd	r8, r4, [r0]
   b547c:	f04f 0a14 	mov.w	sl, #20
   b5480:	9300      	str	r3, [sp, #0]
   b5482:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5486:	4b18      	ldr	r3, [pc, #96]	; (b54e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5488:	10a4      	asrs	r4, r4, #2
   b548a:	4617      	mov	r7, r2
   b548c:	435c      	muls	r4, r3
   b548e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5490:	2c00      	cmp	r4, #0
   b5492:	dd21      	ble.n	b54d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5494:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5496:	fb0a f006 	mul.w	r0, sl, r6
   b549a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b549e:	463a      	mov	r2, r7
   b54a0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b54a4:	5828      	ldr	r0, [r5, r0]
   b54a6:	9101      	str	r1, [sp, #4]
   b54a8:	455f      	cmp	r7, fp
   b54aa:	bf28      	it	cs
   b54ac:	465a      	movcs	r2, fp
   b54ae:	f002 f826 	bl	b74fe <strncmp>
                if (cmp == 0) {
   b54b2:	2800      	cmp	r0, #0
   b54b4:	9901      	ldr	r1, [sp, #4]
   b54b6:	f04f 0301 	mov.w	r3, #1
   b54ba:	d10b      	bne.n	b54d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b54bc:	455f      	cmp	r7, fp
   b54be:	d103      	bne.n	b54c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b54c0:	9a00      	ldr	r2, [sp, #0]
   b54c2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b54c4:	4634      	mov	r4, r6
   b54c6:	e7e3      	b.n	b5490 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b54c8:	d9fc      	bls.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b54ca:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b54cc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b54d0:	3e01      	subs	r6, #1
   b54d2:	e7f7      	b.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b54d4:	dbf9      	blt.n	b54ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b54d6:	e7f5      	b.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b54d8:	eba5 0508 	sub.w	r5, r5, r8
}
   b54dc:	4802      	ldr	r0, [pc, #8]	; (b54e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b54de:	10ad      	asrs	r5, r5, #2
   b54e0:	4368      	muls	r0, r5
   b54e2:	b003      	add	sp, #12
   b54e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54e8:	cccccccd 	.word	0xcccccccd

000b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b54ee:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b54f0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54f2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b54f4:	b303      	cbz	r3, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b54f6:	b1f9      	cbz	r1, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b54f8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b54fa:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b54fe:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5500:	a903      	add	r1, sp, #12
   b5502:	a801      	add	r0, sp, #4
   b5504:	f7ff ff19 	bl	b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5508:	4601      	mov	r1, r0
   b550a:	b1a8      	cbz	r0, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b550c:	f10d 030b 	add.w	r3, sp, #11
   b5510:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5512:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5516:	4620      	mov	r0, r4
   b5518:	f7ff ffac 	bl	b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b551c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5520:	b153      	cbz	r3, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5522:	6823      	ldr	r3, [r4, #0]
   b5524:	2414      	movs	r4, #20
   b5526:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b552a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b552c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5530:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5532:	bfa8      	it	ge
   b5534:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5536:	e7e3      	b.n	b5500 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5538:	4628      	mov	r0, r5
   b553a:	b004      	add	sp, #16
   b553c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5540 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5540:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5542:	4c09      	ldr	r4, [pc, #36]	; (b5568 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5544:	7823      	ldrb	r3, [r4, #0]
   b5546:	f3bf 8f5b 	dmb	ish
   b554a:	07db      	lsls	r3, r3, #31
   b554c:	d409      	bmi.n	b5562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b554e:	4620      	mov	r0, r4
   b5550:	f7fe fdb4 	bl	b40bc <__cxa_guard_acquire>
   b5554:	b128      	cbz	r0, b5562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5556:	4620      	mov	r0, r4
   b5558:	f7fe fdb5 	bl	b40c6 <__cxa_guard_release>
   b555c:	4803      	ldr	r0, [pc, #12]	; (b556c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b555e:	f001 ff31 	bl	b73c4 <atexit>
}
   b5562:	4803      	ldr	r0, [pc, #12]	; (b5570 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5564:	bd10      	pop	{r4, pc}
   b5566:	bf00      	nop
   b5568:	2003e6a0 	.word	0x2003e6a0
   b556c:	000b5333 	.word	0x000b5333
   b5570:	2003e5ac 	.word	0x2003e5ac

000b5574 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5574:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5576:	4c09      	ldr	r4, [pc, #36]	; (b559c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5578:	7823      	ldrb	r3, [r4, #0]
   b557a:	f3bf 8f5b 	dmb	ish
   b557e:	07db      	lsls	r3, r3, #31
   b5580:	d409      	bmi.n	b5596 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5582:	4620      	mov	r0, r4
   b5584:	f7fe fd9a 	bl	b40bc <__cxa_guard_acquire>
   b5588:	b128      	cbz	r0, b5596 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b558a:	4620      	mov	r0, r4
   b558c:	f7fe fd9b 	bl	b40c6 <__cxa_guard_release>
   b5590:	4803      	ldr	r0, [pc, #12]	; (b55a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5592:	f001 ff17 	bl	b73c4 <atexit>
    return &factory;
}
   b5596:	4803      	ldr	r0, [pc, #12]	; (b55a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5598:	bd10      	pop	{r4, pc}
   b559a:	bf00      	nop
   b559c:	2003e6a4 	.word	0x2003e6a4
   b55a0:	000b539b 	.word	0x000b539b
   b55a4:	2003e5b0 	.word	0x2003e5b0

000b55a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b55a8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b55aa:	2500      	movs	r5, #0
   b55ac:	4604      	mov	r4, r0
   b55ae:	e9c0 5500 	strd	r5, r5, [r0]
   b55b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b55b6:	6085      	str	r5, [r0, #8]
   b55b8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b55ba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b55be:	f7ff f967 	bl	b4890 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b55c2:	f7ff ffbd 	bl	b5540 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b55c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55c8:	f7ff ffd4 	bl	b5574 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b55cc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55ce:	6220      	str	r0, [r4, #32]
}
   b55d0:	4620      	mov	r0, r4
   b55d2:	bd38      	pop	{r3, r4, r5, pc}

000b55d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b55d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b55d6:	4c0a      	ldr	r4, [pc, #40]	; (b5600 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b55d8:	7823      	ldrb	r3, [r4, #0]
   b55da:	f3bf 8f5b 	dmb	ish
   b55de:	07db      	lsls	r3, r3, #31
   b55e0:	d40c      	bmi.n	b55fc <_ZN5spark10LogManager8instanceEv+0x28>
   b55e2:	4620      	mov	r0, r4
   b55e4:	f7fe fd6a 	bl	b40bc <__cxa_guard_acquire>
   b55e8:	b140      	cbz	r0, b55fc <_ZN5spark10LogManager8instanceEv+0x28>
   b55ea:	4806      	ldr	r0, [pc, #24]	; (b5604 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55ec:	f7ff ffdc 	bl	b55a8 <_ZN5spark10LogManagerC1Ev>
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7fe fd68 	bl	b40c6 <__cxa_guard_release>
   b55f6:	4804      	ldr	r0, [pc, #16]	; (b5608 <_ZN5spark10LogManager8instanceEv+0x34>)
   b55f8:	f001 fee4 	bl	b73c4 <atexit>
    return &mgr;
}
   b55fc:	4801      	ldr	r0, [pc, #4]	; (b5604 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55fe:	bd10      	pop	{r4, pc}
   b5600:	2003e69c 	.word	0x2003e69c
   b5604:	2003e6ac 	.word	0x2003e6ac
   b5608:	000b5b29 	.word	0x000b5b29

000b560c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b560c:	4a02      	ldr	r2, [pc, #8]	; (b5618 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b560e:	4903      	ldr	r1, [pc, #12]	; (b561c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5610:	4803      	ldr	r0, [pc, #12]	; (b5620 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5612:	2300      	movs	r3, #0
   b5614:	f7ff ba9c 	b.w	b4b50 <log_set_callbacks>
   b5618:	000b590d 	.word	0x000b590d
   b561c:	000b5899 	.word	0x000b5899
   b5620:	000b5819 	.word	0x000b5819

000b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5624:	2300      	movs	r3, #0
   b5626:	461a      	mov	r2, r3
   b5628:	4619      	mov	r1, r3
   b562a:	4618      	mov	r0, r3
   b562c:	f7ff ba90 	b.w	b4b50 <log_set_callbacks>

000b5630 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5630:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5632:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5634:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5636:	4668      	mov	r0, sp
   b5638:	f7ff fec8 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b563c:	466a      	mov	r2, sp
   b563e:	4629      	mov	r1, r5
   b5640:	4620      	mov	r0, r4
   b5642:	f7ff fd7b 	bl	b513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5646:	a801      	add	r0, sp, #4
   b5648:	f7ff fb7f 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b564c:	4620      	mov	r0, r4
   b564e:	b003      	add	sp, #12
   b5650:	bd30      	pop	{r4, r5, pc}

000b5652 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5654:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5656:	4604      	mov	r4, r0
   b5658:	4668      	mov	r0, sp
   b565a:	f7ff feb7 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b565e:	466a      	mov	r2, sp
   b5660:	4629      	mov	r1, r5
   b5662:	4620      	mov	r0, r4
   b5664:	f7ff fd46 	bl	b50f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5668:	a801      	add	r0, sp, #4
   b566a:	f7ff fb6e 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b566e:	4620      	mov	r0, r4
   b5670:	b003      	add	sp, #12
   b5672:	bd30      	pop	{r4, r5, pc}

000b5674 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5676:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5678:	4604      	mov	r4, r0
   b567a:	4668      	mov	r0, sp
   b567c:	f7ff fea6 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5680:	466a      	mov	r2, sp
   b5682:	4629      	mov	r1, r5
   b5684:	4620      	mov	r0, r4
   b5686:	f7ff fcde 	bl	b5046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b568a:	a801      	add	r0, sp, #4
   b568c:	f7ff fb5d 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5690:	4620      	mov	r0, r4
   b5692:	b003      	add	sp, #12
   b5694:	bd30      	pop	{r4, r5, pc}
	...

000b5698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5698:	b570      	push	{r4, r5, r6, lr}
   b569a:	b08a      	sub	sp, #40	; 0x28
   b569c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b569e:	4601      	mov	r1, r0
   b56a0:	a804      	add	r0, sp, #16
   b56a2:	f7ff ffc5 	bl	b5630 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b56a6:	4e14      	ldr	r6, [pc, #80]	; (b56f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b56a8:	a804      	add	r0, sp, #16
   b56aa:	f7ff fd5f 	bl	b516c <_ZN5spark18JSONObjectIterator4nextEv>
   b56ae:	b1e8      	cbz	r0, b56ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b56b0:	a904      	add	r1, sp, #16
   b56b2:	4668      	mov	r0, sp
   b56b4:	f7ff ffcd 	bl	b5652 <_ZNK5spark18JSONObjectIterator4nameEv>
   b56b8:	9802      	ldr	r0, [sp, #8]
   b56ba:	4631      	mov	r1, r6
   b56bc:	f7ff fe66 	bl	b538c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b56c0:	4604      	mov	r4, r0
   b56c2:	b110      	cbz	r0, b56ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b56c4:	1e2c      	subs	r4, r5, #0
   b56c6:	bf18      	it	ne
   b56c8:	2401      	movne	r4, #1
   b56ca:	a801      	add	r0, sp, #4
   b56cc:	f7ff fb3d 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56d0:	2c00      	cmp	r4, #0
   b56d2:	d0e9      	beq.n	b56a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b56d4:	a904      	add	r1, sp, #16
   b56d6:	4668      	mov	r0, sp
   b56d8:	f7ff ffcc 	bl	b5674 <_ZNK5spark18JSONObjectIterator5valueEv>
   b56dc:	4668      	mov	r0, sp
   b56de:	f7ff fce8 	bl	b50b2 <_ZNK5spark9JSONValue5toIntEv>
   b56e2:	6028      	str	r0, [r5, #0]
   b56e4:	a801      	add	r0, sp, #4
   b56e6:	f7ff fb30 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56ea:	e7dd      	b.n	b56a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b56ec:	a805      	add	r0, sp, #20
   b56ee:	f7ff fb2c 	bl	b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56f2:	b00a      	add	sp, #40	; 0x28
   b56f4:	bd70      	pop	{r4, r5, r6, pc}
   b56f6:	bf00      	nop
   b56f8:	000b7a10 	.word	0x000b7a10

000b56fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b56fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b56fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5700:	4620      	mov	r0, r4
   b5702:	4913      	ldr	r1, [pc, #76]	; (b5750 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5704:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5706:	f001 fee0 	bl	b74ca <strcmp>
   b570a:	b950      	cbnz	r0, b5722 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b570c:	f001 f83e 	bl	b678c <_Z16_fetch_usbserialv>
   b5710:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5714:	f001 f82a 	bl	b676c <_ZN9USBSerial5beginEl>
}
   b5718:	b003      	add	sp, #12
   b571a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b571e:	f001 b835 	b.w	b678c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5722:	490c      	ldr	r1, [pc, #48]	; (b5754 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5724:	4620      	mov	r0, r4
   b5726:	f001 fed0 	bl	b74ca <strcmp>
   b572a:	b978      	cbnz	r0, b574c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b572c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5730:	a901      	add	r1, sp, #4
   b5732:	4628      	mov	r0, r5
        int baud = 9600;
   b5734:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5736:	f7ff ffaf 	bl	b5698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b573a:	f001 f9fd 	bl	b6b38 <_Z22__fetch_global_Serial1v>
   b573e:	9901      	ldr	r1, [sp, #4]
   b5740:	f000 ffbc 	bl	b66bc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5744:	f001 f9f8 	bl	b6b38 <_Z22__fetch_global_Serial1v>
}
   b5748:	b003      	add	sp, #12
   b574a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b574c:	2000      	movs	r0, #0
   b574e:	e7fb      	b.n	b5748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5750:	000b7a15 	.word	0x000b7a15
   b5754:	000b7a1c 	.word	0x000b7a1c

000b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5758:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b575a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b575e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5760:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5762:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5766:	42ae      	cmp	r6, r5
   b5768:	d005      	beq.n	b5776 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b576a:	f105 0008 	add.w	r0, r5, #8
   b576e:	f7ff fff3 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5772:	3514      	adds	r5, #20
   b5774:	e7f7      	b.n	b5766 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5776:	6820      	ldr	r0, [r4, #0]
   b5778:	f7ff fa8e 	bl	b4c98 <free>
}
   b577c:	4620      	mov	r0, r4
   b577e:	bd70      	pop	{r4, r5, r6, pc}

000b5780 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5780:	b510      	push	{r4, lr}
   b5782:	4604      	mov	r4, r0
   b5784:	300c      	adds	r0, #12
   b5786:	f7ff ffe7 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b578a:	4620      	mov	r0, r4
   b578c:	f7ff facb 	bl	b4d26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5790:	4620      	mov	r0, r4
   b5792:	bd10      	pop	{r4, pc}

000b5794 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5794:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5796:	4b04      	ldr	r3, [pc, #16]	; (b57a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5798:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b579a:	f840 3b04 	str.w	r3, [r0], #4
   b579e:	f7ff ffef 	bl	b5780 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b57a2:	4620      	mov	r0, r4
   b57a4:	bd10      	pop	{r4, pc}
   b57a6:	bf00      	nop
   b57a8:	000b7964 	.word	0x000b7964

000b57ac <_ZN5spark16StreamLogHandlerD0Ev>:
   b57ac:	b510      	push	{r4, lr}
   b57ae:	4604      	mov	r4, r0
   b57b0:	f7ff fff0 	bl	b5794 <_ZN5spark16StreamLogHandlerD1Ev>
   b57b4:	4620      	mov	r0, r4
   b57b6:	2124      	movs	r1, #36	; 0x24
   b57b8:	f7fe fc71 	bl	b409e <_ZdlPvj>
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}

000b57c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b57c0:	b510      	push	{r4, lr}
   b57c2:	4b03      	ldr	r3, [pc, #12]	; (b57d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b57c4:	6003      	str	r3, [r0, #0]
   b57c6:	4604      	mov	r4, r0
   b57c8:	f7ff ffe4 	bl	b5794 <_ZN5spark16StreamLogHandlerD1Ev>
   b57cc:	4620      	mov	r0, r4
   b57ce:	bd10      	pop	{r4, pc}
   b57d0:	000b7ab4 	.word	0x000b7ab4

000b57d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b57d4:	b510      	push	{r4, lr}
   b57d6:	4604      	mov	r4, r0
   b57d8:	f7ff fff2 	bl	b57c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b57dc:	4620      	mov	r0, r4
   b57de:	2124      	movs	r1, #36	; 0x24
   b57e0:	f7fe fc5d 	bl	b409e <_ZdlPvj>
   b57e4:	4620      	mov	r0, r4
   b57e6:	bd10      	pop	{r4, pc}

000b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b57e8:	2200      	movs	r2, #0
   b57ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b57ee:	b510      	push	{r4, lr}
        capacity_(0) {
   b57f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b57f2:	680c      	ldr	r4, [r1, #0]
   b57f4:	6004      	str	r4, [r0, #0]
   b57f6:	684c      	ldr	r4, [r1, #4]
   b57f8:	6044      	str	r4, [r0, #4]
   b57fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57fc:	600a      	str	r2, [r1, #0]
   b57fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5800:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5802:	608a      	str	r2, [r1, #8]
}
   b5804:	bd10      	pop	{r4, pc}

000b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5806:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5808:	6803      	ldr	r3, [r0, #0]
   b580a:	4604      	mov	r4, r0
   b580c:	6818      	ldr	r0, [r3, #0]
   b580e:	f7ff f857 	bl	b48c0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5812:	4620      	mov	r0, r4
   b5814:	bd10      	pop	{r4, pc}
	...

000b5818 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b581c:	b087      	sub	sp, #28
   b581e:	4680      	mov	r8, r0
   b5820:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5822:	4b1c      	ldr	r3, [pc, #112]	; (b5894 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5824:	685b      	ldr	r3, [r3, #4]
   b5826:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b582a:	4689      	mov	r9, r1
   b582c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b582e:	b96b      	cbnz	r3, b584c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5830:	f7ff fed0 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b5834:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5836:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b583a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b583c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b583e:	f7ff fda3 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5842:	7b23      	ldrb	r3, [r4, #12]
   b5844:	b12b      	cbz	r3, b5852 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5846:	a805      	add	r0, sp, #20
   b5848:	f7ff ffdd 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b584c:	b007      	add	sp, #28
   b584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5852:	2301      	movs	r3, #1
   b5854:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5856:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b585a:	fa5f f989 	uxtb.w	r9, r9
   b585e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5862:	45aa      	cmp	sl, r5
   b5864:	d012      	beq.n	b588c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5866:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b586a:	4631      	mov	r1, r6
   b586c:	1d38      	adds	r0, r7, #4
   b586e:	f7ff fe3d 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5872:	4581      	cmp	r9, r0
   b5874:	d3f5      	bcc.n	b5862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5876:	683b      	ldr	r3, [r7, #0]
   b5878:	9a03      	ldr	r2, [sp, #12]
   b587a:	9200      	str	r2, [sp, #0]
   b587c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5880:	464a      	mov	r2, r9
   b5882:	4633      	mov	r3, r6
   b5884:	4641      	mov	r1, r8
   b5886:	4638      	mov	r0, r7
   b5888:	47d8      	blx	fp
   b588a:	e7ea      	b.n	b5862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b588c:	2300      	movs	r3, #0
   b588e:	7323      	strb	r3, [r4, #12]
   b5890:	e7d9      	b.n	b5846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5892:	bf00      	nop
   b5894:	e000ed00 	.word	0xe000ed00

000b5898 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b589c:	469b      	mov	fp, r3
   b589e:	4b1a      	ldr	r3, [pc, #104]	; (b5908 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b58a0:	685b      	ldr	r3, [r3, #4]
   b58a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b58a6:	4680      	mov	r8, r0
   b58a8:	4689      	mov	r9, r1
   b58aa:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b58ac:	b96b      	cbnz	r3, b58ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b58ae:	f7ff fe91 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b58b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b58b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b58b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b58bc:	f7ff fd64 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b58c0:	7b23      	ldrb	r3, [r4, #12]
   b58c2:	b12b      	cbz	r3, b58d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b58c4:	a801      	add	r0, sp, #4
   b58c6:	f7ff ff9e 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b58ca:	b003      	add	sp, #12
   b58cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b58d0:	2301      	movs	r3, #1
   b58d2:	7323      	strb	r3, [r4, #12]
   b58d4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b58d8:	b2f6      	uxtb	r6, r6
   b58da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b58de:	4555      	cmp	r5, sl
   b58e0:	d00e      	beq.n	b5900 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b58e2:	f855 7b04 	ldr.w	r7, [r5], #4
   b58e6:	4659      	mov	r1, fp
   b58e8:	1d38      	adds	r0, r7, #4
   b58ea:	f7ff fdff 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   b58ee:	4286      	cmp	r6, r0
   b58f0:	d3f5      	bcc.n	b58de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b58f2:	683b      	ldr	r3, [r7, #0]
   b58f4:	464a      	mov	r2, r9
   b58f6:	68db      	ldr	r3, [r3, #12]
   b58f8:	4641      	mov	r1, r8
   b58fa:	4638      	mov	r0, r7
   b58fc:	4798      	blx	r3
   b58fe:	e7ee      	b.n	b58de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5900:	2300      	movs	r3, #0
   b5902:	7323      	strb	r3, [r4, #12]
   b5904:	e7de      	b.n	b58c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5906:	bf00      	nop
   b5908:	e000ed00 	.word	0xe000ed00

000b590c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b590c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5910:	4b16      	ldr	r3, [pc, #88]	; (b596c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5912:	685b      	ldr	r3, [r3, #4]
   b5914:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5918:	4605      	mov	r5, r0
   b591a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b591c:	bb1b      	cbnz	r3, b5966 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b591e:	f7ff fe59 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5922:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5926:	4604      	mov	r4, r0
   b5928:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b592a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b592c:	f7ff fd2c 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5930:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5934:	2446      	movs	r4, #70	; 0x46
   b5936:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b593a:	45b0      	cmp	r8, r6
   b593c:	d109      	bne.n	b5952 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b593e:	a801      	add	r0, sp, #4
   b5940:	f7ff ff61 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5944:	42a5      	cmp	r5, r4
   b5946:	bfb4      	ite	lt
   b5948:	2000      	movlt	r0, #0
   b594a:	2001      	movge	r0, #1
}
   b594c:	b002      	add	sp, #8
   b594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5952:	f856 0b04 	ldr.w	r0, [r6], #4
   b5956:	4639      	mov	r1, r7
   b5958:	3004      	adds	r0, #4
   b595a:	f7ff fdc7 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b595e:	4284      	cmp	r4, r0
   b5960:	bfa8      	it	ge
   b5962:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5964:	e7e9      	b.n	b593a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5966:	2000      	movs	r0, #0
   b5968:	e7f0      	b.n	b594c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b596a:	bf00      	nop
   b596c:	e000ed00 	.word	0xe000ed00

000b5970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5972:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5976:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5978:	4604      	mov	r4, r0
   b597a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b597c:	db0d      	blt.n	b599a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b597e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5980:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5982:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5984:	dd04      	ble.n	b5990 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5986:	00b9      	lsls	r1, r7, #2
   b5988:	f7ff f98e 	bl	b4ca8 <realloc>
            if (!d) {
   b598c:	b918      	cbnz	r0, b5996 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5990:	f7ff f982 	bl	b4c98 <free>
        T* d = nullptr;
   b5994:	2000      	movs	r0, #0
        data_ = d;
   b5996:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5998:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b599a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b599c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b599e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b59a2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b59a4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b59a8:	1d08      	adds	r0, r1, #4
   b59aa:	f001 fd27 	bl	b73fc <memmove>
    new(p) T(std::move(value));
   b59ae:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b59b2:	6863      	ldr	r3, [r4, #4]
   b59b4:	3301      	adds	r3, #1
   b59b6:	6063      	str	r3, [r4, #4]
    return true;
   b59b8:	2001      	movs	r0, #1
   b59ba:	e7e8      	b.n	b598e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b59bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b59be:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59c2:	4604      	mov	r4, r0
   b59c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59c6:	9301      	str	r3, [sp, #4]
   b59c8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b59ca:	f7ff fcdd 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b59ce:	e9d4 3200 	ldrd	r3, r2, [r4]
   b59d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b59d6:	4293      	cmp	r3, r2
   b59d8:	4619      	mov	r1, r3
   b59da:	d00b      	beq.n	b59f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b59dc:	6809      	ldr	r1, [r1, #0]
   b59de:	42a9      	cmp	r1, r5
   b59e0:	f103 0304 	add.w	r3, r3, #4
   b59e4:	d1f7      	bne.n	b59d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b59e6:	a801      	add	r0, sp, #4
   b59e8:	f7ff ff0d 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b59ec:	2500      	movs	r5, #0
}
   b59ee:	4628      	mov	r0, r5
   b59f0:	b003      	add	sp, #12
   b59f2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b59f4:	4629      	mov	r1, r5
   b59f6:	4620      	mov	r0, r4
   b59f8:	f7ff ffba 	bl	b5970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b59fc:	4605      	mov	r5, r0
   b59fe:	2800      	cmp	r0, #0
   b5a00:	d0f1      	beq.n	b59e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5a02:	6863      	ldr	r3, [r4, #4]
   b5a04:	2b01      	cmp	r3, #1
   b5a06:	d101      	bne.n	b5a0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5a08:	f7ff fe00 	bl	b560c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a0c:	a801      	add	r0, sp, #4
   b5a0e:	f7ff fefa 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5a12:	e7ec      	b.n	b59ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a14:	b570      	push	{r4, r5, r6, lr}
   b5a16:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5a18:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a1c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5a1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5a22:	4282      	cmp	r2, r0
   b5a24:	d00f      	beq.n	b5a46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5a26:	4601      	mov	r1, r0
            if (*p == value) {
   b5a28:	681d      	ldr	r5, [r3, #0]
   b5a2a:	f851 6b04 	ldr.w	r6, [r1], #4
   b5a2e:	42ae      	cmp	r6, r5
   b5a30:	d107      	bne.n	b5a42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a32:	1a52      	subs	r2, r2, r1
   b5a34:	f001 fce2 	bl	b73fc <memmove>
    --size_;
   b5a38:	6863      	ldr	r3, [r4, #4]
   b5a3a:	3b01      	subs	r3, #1
   b5a3c:	6063      	str	r3, [r4, #4]
    return true;
   b5a3e:	2001      	movs	r0, #1
}
   b5a40:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5a42:	4608      	mov	r0, r1
   b5a44:	e7ed      	b.n	b5a22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5a46:	2000      	movs	r0, #0
   b5a48:	e7fa      	b.n	b5a40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5a4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a50:	4604      	mov	r4, r0
   b5a52:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5a54:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a56:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5a58:	f7ff fc96 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5a5c:	a901      	add	r1, sp, #4
   b5a5e:	4620      	mov	r0, r4
   b5a60:	f7ff ffd8 	bl	b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5a64:	b118      	cbz	r0, b5a6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5a66:	6863      	ldr	r3, [r4, #4]
   b5a68:	b90b      	cbnz	r3, b5a6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5a6a:	f7ff fddb 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a6e:	a803      	add	r0, sp, #12
   b5a70:	f7ff fec9 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a74:	b004      	add	sp, #16
   b5a76:	bd10      	pop	{r4, pc}

000b5a78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5a78:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5a7a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5a7e:	2318      	movs	r3, #24
   b5a80:	4604      	mov	r4, r0
   b5a82:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5a86:	42ae      	cmp	r6, r5
   b5a88:	d015      	beq.n	b5ab6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5a8a:	f105 0110 	add.w	r1, r5, #16
   b5a8e:	4620      	mov	r0, r4
   b5a90:	f7ff ffc0 	bl	b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5a94:	6863      	ldr	r3, [r4, #4]
   b5a96:	b90b      	cbnz	r3, b5a9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5a98:	f7ff fdc4 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5a9c:	69e0      	ldr	r0, [r4, #28]
   b5a9e:	6929      	ldr	r1, [r5, #16]
   b5aa0:	6803      	ldr	r3, [r0, #0]
   b5aa2:	68db      	ldr	r3, [r3, #12]
   b5aa4:	4798      	blx	r3
        if (h.stream) {
   b5aa6:	6969      	ldr	r1, [r5, #20]
   b5aa8:	b119      	cbz	r1, b5ab2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5aaa:	6a20      	ldr	r0, [r4, #32]
   b5aac:	6803      	ldr	r3, [r0, #0]
   b5aae:	68db      	ldr	r3, [r3, #12]
   b5ab0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5ab2:	3518      	adds	r5, #24
   b5ab4:	e7e7      	b.n	b5a86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5ab6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5aba:	2618      	movs	r6, #24
   b5abc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ac0:	42ae      	cmp	r6, r5
   b5ac2:	d004      	beq.n	b5ace <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5ac4:	4628      	mov	r0, r5
   b5ac6:	f000 fce5 	bl	b6494 <_ZN6StringD1Ev>
   b5aca:	3518      	adds	r5, #24
   b5acc:	e7f8      	b.n	b5ac0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5ace:	2300      	movs	r3, #0
   b5ad0:	6163      	str	r3, [r4, #20]
}
   b5ad2:	bd70      	pop	{r4, r5, r6, pc}

000b5ad4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ad6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5ad8:	f7ff fda4 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5adc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5ae0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ae2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ae4:	f7ff fc50 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5ae8:	4620      	mov	r0, r4
   b5aea:	f7ff ffc5 	bl	b5a78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5aee:	a801      	add	r0, sp, #4
   b5af0:	f7ff fe89 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5af6:	b108      	cbz	r0, b5afc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5af8:	f7fe fed2 	bl	b48a0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5afc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5b00:	2618      	movs	r6, #24
   b5b02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b06:	42ae      	cmp	r6, r5
   b5b08:	d004      	beq.n	b5b14 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5b0a:	4628      	mov	r0, r5
   b5b0c:	f000 fcc2 	bl	b6494 <_ZN6StringD1Ev>
   b5b10:	3518      	adds	r5, #24
   b5b12:	e7f8      	b.n	b5b06 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5b14:	6920      	ldr	r0, [r4, #16]
   b5b16:	f7ff f8bf 	bl	b4c98 <free>
   b5b1a:	6820      	ldr	r0, [r4, #0]
   b5b1c:	f7ff f8bc 	bl	b4c98 <free>
}
   b5b20:	4620      	mov	r0, r4
   b5b22:	b002      	add	sp, #8
   b5b24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5b28 <__tcf_2>:
    static LogManager mgr;
   b5b28:	4801      	ldr	r0, [pc, #4]	; (b5b30 <__tcf_2+0x8>)
   b5b2a:	f7ff bfd3 	b.w	b5ad4 <_ZN5spark10LogManagerD1Ev>
   b5b2e:	bf00      	nop
   b5b30:	2003e6ac 	.word	0x2003e6ac

000b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5b34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b38:	4604      	mov	r4, r0
   b5b3a:	460d      	mov	r5, r1
   b5b3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b3e:	d915      	bls.n	b5b6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5b40:	4290      	cmp	r0, r2
   b5b42:	d214      	bcs.n	b5b6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5b44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5b48:	1a75      	subs	r5, r6, r1
   b5b4a:	f1a1 0714 	sub.w	r7, r1, #20
   b5b4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b50:	42b7      	cmp	r7, r6
   b5b52:	d01a      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5b54:	b11c      	cbz	r4, b5b5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5b56:	4631      	mov	r1, r6
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f7ff fc78 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5b5e:	f106 0008 	add.w	r0, r6, #8
   b5b62:	f7ff fdf9 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5b66:	3e14      	subs	r6, #20
   b5b68:	3c14      	subs	r4, #20
   b5b6a:	e7f1      	b.n	b5b50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5b6c:	d00d      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5b6e:	42b5      	cmp	r5, r6
   b5b70:	d00b      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5b72:	b11c      	cbz	r4, b5b7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5b74:	4629      	mov	r1, r5
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7ff fc69 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5b7c:	f105 0008 	add.w	r0, r5, #8
   b5b80:	f7ff fdea 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b84:	3514      	adds	r5, #20
   b5b86:	3414      	adds	r4, #20
   b5b88:	e7f1      	b.n	b5b6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b90:	4604      	mov	r4, r0
   b5b92:	460d      	mov	r5, r1
   b5b94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b96:	d914      	bls.n	b5bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5b98:	4290      	cmp	r0, r2
   b5b9a:	d213      	bcs.n	b5bc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5b9c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5ba0:	1a75      	subs	r5, r6, r1
   b5ba2:	f1a1 0710 	sub.w	r7, r1, #16
   b5ba6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ba8:	42b7      	cmp	r7, r6
   b5baa:	d018      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5bac:	b11c      	cbz	r4, b5bb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5bae:	4631      	mov	r1, r6
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f000 fceb 	bl	b658c <_ZN6StringC1EOS_>
                end->~T();
   b5bb6:	4630      	mov	r0, r6
   b5bb8:	f000 fc6c 	bl	b6494 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5bbc:	3e10      	subs	r6, #16
   b5bbe:	3c10      	subs	r4, #16
   b5bc0:	e7f2      	b.n	b5ba8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5bc2:	d00c      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5bc4:	42b5      	cmp	r5, r6
   b5bc6:	d00a      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5bc8:	b11c      	cbz	r4, b5bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5bca:	4629      	mov	r1, r5
   b5bcc:	4620      	mov	r0, r4
   b5bce:	f000 fcdd 	bl	b658c <_ZN6StringC1EOS_>
                p->~T();
   b5bd2:	4628      	mov	r0, r5
   b5bd4:	f000 fc5e 	bl	b6494 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5bd8:	3510      	adds	r5, #16
   b5bda:	3410      	adds	r4, #16
   b5bdc:	e7f2      	b.n	b5bc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5be0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5be2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5be4:	4605      	mov	r5, r0
        if (n > 0) {
   b5be6:	dd11      	ble.n	b5c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5be8:	0130      	lsls	r0, r6, #4
   b5bea:	f7ff f84d 	bl	b4c88 <malloc>
            if (!d) {
   b5bee:	4604      	mov	r4, r0
   b5bf0:	b158      	cbz	r0, b5c0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5bf2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5bf6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5bfa:	f7ff ffc7 	bl	b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5bfe:	6828      	ldr	r0, [r5, #0]
   b5c00:	f7ff f84a 	bl	b4c98 <free>
        data_ = d;
   b5c04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5c06:	60ae      	str	r6, [r5, #8]
        return true;
   b5c08:	2001      	movs	r0, #1
    }
   b5c0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5c0c:	2400      	movs	r4, #0
   b5c0e:	e7f6      	b.n	b5bfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c14:	4690      	mov	r8, r2
   b5c16:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5c18:	2300      	movs	r3, #0
   b5c1a:	9103      	str	r1, [sp, #12]
    return size_;
   b5c1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5c20:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c22:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5c24:	4299      	cmp	r1, r3
        capacity_(0) {
   b5c26:	e9c0 3300 	strd	r3, r3, [r0]
   b5c2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5c32:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c36:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c38:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5c3a:	dc23      	bgt.n	b5c84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5c3c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5c40:	2314      	movs	r3, #20
   b5c42:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5c46:	42af      	cmp	r7, r5
   b5c48:	d03b      	beq.n	b5cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5c4a:	4629      	mov	r1, r5
   b5c4c:	a80b      	add	r0, sp, #44	; 0x2c
   b5c4e:	f000 fc9d 	bl	b658c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5c52:	a90b      	add	r1, sp, #44	; 0x2c
   b5c54:	a80f      	add	r0, sp, #60	; 0x3c
   b5c56:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5c58:	f000 fc98 	bl	b658c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c5c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5c60:	4299      	cmp	r1, r3
   b5c62:	da1b      	bge.n	b5c9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5c64:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5c68:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5c6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5c70:	4631      	mov	r1, r6
   b5c72:	f106 0010 	add.w	r0, r6, #16
   b5c76:	f7ff ff89 	bl	b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5c7a:	b9ee      	cbnz	r6, b5cb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5c7e:	3301      	adds	r3, #1
   b5c80:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5c82:	e011      	b.n	b5ca8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5c84:	a808      	add	r0, sp, #32
   b5c86:	f7ff ffab 	bl	b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c8a:	2800      	cmp	r0, #0
   b5c8c:	d1d6      	bne.n	b5c3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5c8e:	a808      	add	r0, sp, #32
   b5c90:	f7ff f849 	bl	b4d26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5c94:	4620      	mov	r0, r4
   b5c96:	b015      	add	sp, #84	; 0x54
   b5c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c9c:	3101      	adds	r1, #1
   b5c9e:	a808      	add	r0, sp, #32
   b5ca0:	f7ff ff9e 	bl	b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5ca4:	2800      	cmp	r0, #0
   b5ca6:	d1dd      	bne.n	b5c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5ca8:	a80f      	add	r0, sp, #60	; 0x3c
   b5caa:	f000 fbf3 	bl	b6494 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5cae:	a80b      	add	r0, sp, #44	; 0x2c
   b5cb0:	f000 fbf0 	bl	b6494 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5cb4:	3514      	adds	r5, #20
   b5cb6:	e7c6      	b.n	b5c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5cb8:	a90f      	add	r1, sp, #60	; 0x3c
   b5cba:	4630      	mov	r0, r6
   b5cbc:	f000 fc66 	bl	b658c <_ZN6StringC1EOS_>
   b5cc0:	e7dc      	b.n	b5c7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5cc2:	2600      	movs	r6, #0
   b5cc4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5cc8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5cca:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5cce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5cd2:	429e      	cmp	r6, r3
   b5cd4:	da7c      	bge.n	b5dd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5cd6:	0133      	lsls	r3, r6, #4
   b5cd8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5cda:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5cdc:	b90b      	cbnz	r3, b5ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5cde:	3601      	adds	r6, #1
   b5ce0:	e7f5      	b.n	b5cce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5ce2:	2300      	movs	r3, #0
   b5ce4:	9307      	str	r3, [sp, #28]
   b5ce6:	fb09 f306 	mul.w	r3, r9, r6
   b5cea:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5cec:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5cee:	a907      	add	r1, sp, #28
   b5cf0:	a806      	add	r0, sp, #24
   b5cf2:	f7ff fb22 	bl	b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5cf6:	4682      	mov	sl, r0
   b5cf8:	2800      	cmp	r0, #0
   b5cfa:	d0f0      	beq.n	b5cde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5cfc:	f04f 0300 	mov.w	r3, #0
   b5d00:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5d04:	4601      	mov	r1, r0
   b5d06:	9a07      	ldr	r2, [sp, #28]
   b5d08:	f10d 0317 	add.w	r3, sp, #23
   b5d0c:	4628      	mov	r0, r5
   b5d0e:	f7ff fbb1 	bl	b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d12:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5d16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d18:	2f00      	cmp	r7, #0
   b5d1a:	d14a      	bne.n	b5db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5d1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5d20:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5d24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5d30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5d34:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d36:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5d3a:	4293      	cmp	r3, r2
   b5d3c:	db17      	blt.n	b5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5d3e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5d42:	f1ba 0f00 	cmp.w	sl, #0
   b5d46:	dd30      	ble.n	b5daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5d48:	fb09 f00a 	mul.w	r0, r9, sl
   b5d4c:	f7fe ff9c 	bl	b4c88 <malloc>
            if (!d) {
   b5d50:	4683      	mov	fp, r0
   b5d52:	b360      	cbz	r0, b5dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5d54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d58:	fb09 1202 	mla	r2, r9, r2, r1
   b5d5c:	f7ff feea 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5d60:	6828      	ldr	r0, [r5, #0]
   b5d62:	f7fe ff99 	bl	b4c98 <free>
        data_ = d;
   b5d66:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5d6a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5d6e:	682b      	ldr	r3, [r5, #0]
   b5d70:	9a01      	ldr	r2, [sp, #4]
   b5d72:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5d76:	686a      	ldr	r2, [r5, #4]
   b5d78:	4651      	mov	r1, sl
   b5d7a:	fb09 3202 	mla	r2, r9, r2, r3
   b5d7e:	f10a 0014 	add.w	r0, sl, #20
   b5d82:	f7ff fed7 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5d86:	f1ba 0f00 	cmp.w	sl, #0
   b5d8a:	d003      	beq.n	b5d94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5d8c:	a90f      	add	r1, sp, #60	; 0x3c
   b5d8e:	4650      	mov	r0, sl
   b5d90:	f7ff fb5d 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5d94:	686b      	ldr	r3, [r5, #4]
   b5d96:	3301      	adds	r3, #1
   b5d98:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5d9a:	a811      	add	r0, sp, #68	; 0x44
   b5d9c:	f7ff fcdc 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5da0:	b13f      	cbz	r7, b5db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5da2:	a80b      	add	r0, sp, #44	; 0x2c
   b5da4:	f7ff fcd8 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5da8:	e771      	b.n	b5c8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5daa:	46bb      	mov	fp, r7
   b5dac:	e7d8      	b.n	b5d60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5dae:	2701      	movs	r7, #1
   b5db0:	e7f3      	b.n	b5d9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5db2:	9b01      	ldr	r3, [sp, #4]
   b5db4:	682d      	ldr	r5, [r5, #0]
   b5db6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5dba:	9b06      	ldr	r3, [sp, #24]
   b5dbc:	781b      	ldrb	r3, [r3, #0]
   b5dbe:	b92b      	cbnz	r3, b5dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5dc0:	f8d8 3000 	ldr.w	r3, [r8]
   b5dc4:	9a02      	ldr	r2, [sp, #8]
   b5dc6:	4413      	add	r3, r2
   b5dc8:	7c1b      	ldrb	r3, [r3, #16]
   b5dca:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5dcc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5dce:	e78e      	b.n	b5cee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5dd2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5dd6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dda:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5dde:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5de0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5de2:	60a2      	str	r2, [r4, #8]
   b5de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5de6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5de8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5dea:	60e2      	str	r2, [r4, #12]
   b5dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5dee:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5df0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5df2:	6122      	str	r2, [r4, #16]
   b5df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5df6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5df8:	9b03      	ldr	r3, [sp, #12]
   b5dfa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5dfc:	6162      	str	r2, [r4, #20]
   b5dfe:	7623      	strb	r3, [r4, #24]
   b5e00:	e7cf      	b.n	b5da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e06:	4604      	mov	r4, r0
   b5e08:	b087      	sub	sp, #28
   b5e0a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5e0c:	4626      	mov	r6, r4
        stream_(&stream) {
   b5e0e:	4619      	mov	r1, r3
   b5e10:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5e12:	4617      	mov	r7, r2
        stream_(&stream) {
   b5e14:	f7fe faee 	bl	b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e18:	4b0b      	ldr	r3, [pc, #44]	; (b5e48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5e1a:	f846 3b04 	str.w	r3, [r6], #4
   b5e1e:	4669      	mov	r1, sp
   b5e20:	a803      	add	r0, sp, #12
   b5e22:	f7fe fae7 	bl	b43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e26:	aa03      	add	r2, sp, #12
   b5e28:	4639      	mov	r1, r7
   b5e2a:	4630      	mov	r0, r6
   b5e2c:	f7ff fef0 	bl	b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e30:	a803      	add	r0, sp, #12
   b5e32:	f7fe fa83 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e36:	4668      	mov	r0, sp
   b5e38:	f7fe fa80 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e3c:	4b03      	ldr	r3, [pc, #12]	; (b5e4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5e3e:	6023      	str	r3, [r4, #0]
}
   b5e40:	4620      	mov	r0, r4
        stream_(&stream) {
   b5e42:	6225      	str	r5, [r4, #32]
}
   b5e44:	b007      	add	sp, #28
   b5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5e48:	000b7964 	.word	0x000b7964
   b5e4c:	000b7a9c 	.word	0x000b7a9c

000b5e50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e52:	460f      	mov	r7, r1
   b5e54:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e56:	491d      	ldr	r1, [pc, #116]	; (b5ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5e58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e5a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5e5c:	4616      	mov	r6, r2
   b5e5e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e60:	f001 fb33 	bl	b74ca <strcmp>
   b5e64:	b9c0      	cbnz	r0, b5e98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5e66:	b1a4      	cbz	r4, b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5e68:	4629      	mov	r1, r5
   b5e6a:	a801      	add	r0, sp, #4
   b5e6c:	f7ff fcbc 	bl	b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5e70:	4917      	ldr	r1, [pc, #92]	; (b5ed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5e72:	2024      	movs	r0, #36	; 0x24
   b5e74:	f000 fe84 	bl	b6b80 <_ZnwjRKSt9nothrow_t>
   b5e78:	4605      	mov	r5, r0
   b5e7a:	b130      	cbz	r0, b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5e7c:	ab01      	add	r3, sp, #4
   b5e7e:	4632      	mov	r2, r6
   b5e80:	4621      	mov	r1, r4
   b5e82:	f7ff ffbf 	bl	b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e86:	4b13      	ldr	r3, [pc, #76]	; (b5ed4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5e88:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e8a:	a801      	add	r0, sp, #4
   b5e8c:	f7fe fa56 	bl	b433c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e90:	462c      	mov	r4, r5
}
   b5e92:	4620      	mov	r0, r4
   b5e94:	b005      	add	sp, #20
   b5e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5e98:	490f      	ldr	r1, [pc, #60]	; (b5ed8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5e9a:	4638      	mov	r0, r7
   b5e9c:	f001 fb15 	bl	b74ca <strcmp>
   b5ea0:	b990      	cbnz	r0, b5ec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5ea2:	2c00      	cmp	r4, #0
   b5ea4:	d0f5      	beq.n	b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5ea6:	4629      	mov	r1, r5
   b5ea8:	a801      	add	r0, sp, #4
   b5eaa:	f7ff fc9d 	bl	b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5eae:	4908      	ldr	r1, [pc, #32]	; (b5ed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5eb0:	2024      	movs	r0, #36	; 0x24
   b5eb2:	f000 fe65 	bl	b6b80 <_ZnwjRKSt9nothrow_t>
   b5eb6:	4605      	mov	r5, r0
   b5eb8:	2800      	cmp	r0, #0
   b5eba:	d0e6      	beq.n	b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5ebc:	ab01      	add	r3, sp, #4
   b5ebe:	4632      	mov	r2, r6
   b5ec0:	4621      	mov	r1, r4
   b5ec2:	f7ff ff9f 	bl	b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5ec6:	e7e0      	b.n	b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5ec8:	2400      	movs	r4, #0
   b5eca:	e7e2      	b.n	b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5ecc:	000b7a24 	.word	0x000b7a24
   b5ed0:	000b7be8 	.word	0x000b7be8
   b5ed4:	000b7ab4 	.word	0x000b7ab4
   b5ed8:	000b7a28 	.word	0x000b7a28

000b5edc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5edc:	4b01      	ldr	r3, [pc, #4]	; (b5ee4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5ede:	4a02      	ldr	r2, [pc, #8]	; (b5ee8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5ee0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5ee2:	4770      	bx	lr
   b5ee4:	2003e6a8 	.word	0x2003e6a8
   b5ee8:	000b7957 	.word	0x000b7957

000b5eec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ef0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5ef2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	460e      	mov	r6, r1
   b5efa:	4617      	mov	r7, r2
   b5efc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5efe:	f000 fc45 	bl	b678c <_Z16_fetch_usbserialv>
   b5f02:	4581      	cmp	r9, r0
   b5f04:	d04c      	beq.n	b5fa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5f06:	792b      	ldrb	r3, [r5, #4]
   b5f08:	0719      	lsls	r1, r3, #28
   b5f0a:	d504      	bpl.n	b5f16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5f0c:	696a      	ldr	r2, [r5, #20]
   b5f0e:	4954      	ldr	r1, [pc, #336]	; (b6060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5f10:	4620      	mov	r0, r4
   b5f12:	f7ff fa8d 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5f16:	f1b8 0f00 	cmp.w	r8, #0
   b5f1a:	d00d      	beq.n	b5f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5f1c:	215b      	movs	r1, #91	; 0x5b
   b5f1e:	4620      	mov	r0, r4
   b5f20:	f7ff fa7a 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5f24:	4641      	mov	r1, r8
   b5f26:	4620      	mov	r0, r4
   b5f28:	f7ff fa67 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5f2c:	6823      	ldr	r3, [r4, #0]
   b5f2e:	494d      	ldr	r1, [pc, #308]	; (b6064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5f30:	68db      	ldr	r3, [r3, #12]
   b5f32:	2202      	movs	r2, #2
   b5f34:	4620      	mov	r0, r4
   b5f36:	4798      	blx	r3
    if (attr.has_file) {
   b5f38:	792b      	ldrb	r3, [r5, #4]
   b5f3a:	07da      	lsls	r2, r3, #31
   b5f3c:	d523      	bpl.n	b5f86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5f3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5f42:	212f      	movs	r1, #47	; 0x2f
   b5f44:	4640      	mov	r0, r8
   b5f46:	f001 faee 	bl	b7526 <strrchr>
    if (s1) {
   b5f4a:	b108      	cbz	r0, b5f50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5f4c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5f50:	4641      	mov	r1, r8
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff fa51 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5f58:	792b      	ldrb	r3, [r5, #4]
   b5f5a:	079b      	lsls	r3, r3, #30
   b5f5c:	d508      	bpl.n	b5f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5f5e:	213a      	movs	r1, #58	; 0x3a
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff fa59 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5f66:	68ea      	ldr	r2, [r5, #12]
   b5f68:	493f      	ldr	r1, [pc, #252]	; (b6068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff fa60 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5f70:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5f72:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5f74:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5f78:	68db      	ldr	r3, [r3, #12]
   b5f7a:	bf14      	ite	ne
   b5f7c:	493b      	ldrne	r1, [pc, #236]	; (b606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5f7e:	493c      	ldreq	r1, [pc, #240]	; (b6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5f80:	2202      	movs	r2, #2
            write(": ", 2);
   b5f82:	4620      	mov	r0, r4
   b5f84:	4798      	blx	r3
    if (attr.has_function) {
   b5f86:	792b      	ldrb	r3, [r5, #4]
   b5f88:	0758      	lsls	r0, r3, #29
   b5f8a:	d51d      	bpl.n	b5fc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5f8c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5f8e:	460b      	mov	r3, r1
   b5f90:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5f92:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f96:	b160      	cbz	r0, b5fb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5f98:	2820      	cmp	r0, #32
   b5f9a:	d108      	bne.n	b5fae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5f9c:	4619      	mov	r1, r3
   b5f9e:	e7f7      	b.n	b5f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5fa0:	4834      	ldr	r0, [pc, #208]	; (b6074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5fa2:	f000 f966 	bl	b6272 <_ZN5spark12NetworkClass9listeningEv>
   b5fa6:	2800      	cmp	r0, #0
   b5fa8:	d0ad      	beq.n	b5f06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5fae:	2828      	cmp	r0, #40	; 0x28
   b5fb0:	d1ee      	bne.n	b5f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5fb2:	6823      	ldr	r3, [r4, #0]
   b5fb4:	1a52      	subs	r2, r2, r1
   b5fb6:	68db      	ldr	r3, [r3, #12]
   b5fb8:	4620      	mov	r0, r4
   b5fba:	4798      	blx	r3
        write("(): ", 4);
   b5fbc:	6823      	ldr	r3, [r4, #0]
   b5fbe:	492e      	ldr	r1, [pc, #184]	; (b6078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5fc0:	68db      	ldr	r3, [r3, #12]
   b5fc2:	2204      	movs	r2, #4
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5fc8:	2100      	movs	r1, #0
   b5fca:	4638      	mov	r0, r7
   b5fcc:	f7fe fdb8 	bl	b4b40 <log_level_name>
   b5fd0:	4601      	mov	r1, r0
    write(s);
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	f7ff fa11 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5fd8:	6823      	ldr	r3, [r4, #0]
   b5fda:	4925      	ldr	r1, [pc, #148]	; (b6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5fdc:	68db      	ldr	r3, [r3, #12]
   b5fde:	2202      	movs	r2, #2
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	4798      	blx	r3
    if (msg) {
   b5fe4:	b11e      	cbz	r6, b5fee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5fe6:	4631      	mov	r1, r6
   b5fe8:	4620      	mov	r0, r4
   b5fea:	f7ff fa06 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5fee:	792b      	ldrb	r3, [r5, #4]
   b5ff0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5ff4:	d02c      	beq.n	b6050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5ff6:	6823      	ldr	r3, [r4, #0]
   b5ff8:	4920      	ldr	r1, [pc, #128]	; (b607c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5ffa:	68db      	ldr	r3, [r3, #12]
   b5ffc:	2202      	movs	r2, #2
   b5ffe:	4620      	mov	r0, r4
   b6000:	4798      	blx	r3
        if (attr.has_code) {
   b6002:	792b      	ldrb	r3, [r5, #4]
   b6004:	06d9      	lsls	r1, r3, #27
   b6006:	d50a      	bpl.n	b601e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6008:	6823      	ldr	r3, [r4, #0]
   b600a:	491d      	ldr	r1, [pc, #116]	; (b6080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b600c:	68db      	ldr	r3, [r3, #12]
   b600e:	2207      	movs	r2, #7
   b6010:	4620      	mov	r0, r4
   b6012:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6014:	69aa      	ldr	r2, [r5, #24]
   b6016:	491b      	ldr	r1, [pc, #108]	; (b6084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6018:	4620      	mov	r0, r4
   b601a:	f7ff fa09 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b601e:	792b      	ldrb	r3, [r5, #4]
   b6020:	069a      	lsls	r2, r3, #26
   b6022:	d511      	bpl.n	b6048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6024:	06db      	lsls	r3, r3, #27
   b6026:	d505      	bpl.n	b6034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6028:	6823      	ldr	r3, [r4, #0]
   b602a:	4910      	ldr	r1, [pc, #64]	; (b606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b602c:	68db      	ldr	r3, [r3, #12]
   b602e:	2202      	movs	r2, #2
   b6030:	4620      	mov	r0, r4
   b6032:	4798      	blx	r3
            write("details = ", 10);
   b6034:	6823      	ldr	r3, [r4, #0]
   b6036:	4914      	ldr	r1, [pc, #80]	; (b6088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6038:	68db      	ldr	r3, [r3, #12]
   b603a:	4620      	mov	r0, r4
   b603c:	220a      	movs	r2, #10
   b603e:	4798      	blx	r3
            write(attr.details);
   b6040:	69e9      	ldr	r1, [r5, #28]
   b6042:	4620      	mov	r0, r4
   b6044:	f7ff f9d9 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6048:	215d      	movs	r1, #93	; 0x5d
   b604a:	4620      	mov	r0, r4
   b604c:	f7ff f9e4 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6050:	6823      	ldr	r3, [r4, #0]
   b6052:	490e      	ldr	r1, [pc, #56]	; (b608c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6054:	68db      	ldr	r3, [r3, #12]
   b6056:	4620      	mov	r0, r4
   b6058:	2202      	movs	r2, #2
}
   b605a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b605e:	4718      	bx	r3
   b6060:	000b7a39 	.word	0x000b7a39
   b6064:	000b7a40 	.word	0x000b7a40
   b6068:	000b7a04 	.word	0x000b7a04
   b606c:	000b7a43 	.word	0x000b7a43
   b6070:	000b7a48 	.word	0x000b7a48
   b6074:	2003e6d4 	.word	0x2003e6d4
   b6078:	000b7a46 	.word	0x000b7a46
   b607c:	000b7a4b 	.word	0x000b7a4b
   b6080:	000b7a4e 	.word	0x000b7a4e
   b6084:	000b7a56 	.word	0x000b7a56
   b6088:	000b7a59 	.word	0x000b7a59
   b608c:	000b77be 	.word	0x000b77be

000b6090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6094:	b085      	sub	sp, #20
    return stream_;
   b6096:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b609a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b609c:	4605      	mov	r5, r0
   b609e:	460f      	mov	r7, r1
   b60a0:	4690      	mov	r8, r2
   b60a2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b60a4:	f000 fb72 	bl	b678c <_Z16_fetch_usbserialv>
   b60a8:	4581      	cmp	r9, r0
   b60aa:	d105      	bne.n	b60b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b60ac:	4849      	ldr	r0, [pc, #292]	; (b61d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b60ae:	f000 f8e0 	bl	b6272 <_ZN5spark12NetworkClass9listeningEv>
   b60b2:	2800      	cmp	r0, #0
   b60b4:	f040 808a 	bne.w	b61cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b60b8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b60ba:	4a47      	ldr	r2, [pc, #284]	; (b61d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b60bc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b60be:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b60c2:	a801      	add	r0, sp, #4
        strm_(stream) {
   b60c4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b60c6:	f88d 9008 	strb.w	r9, [sp, #8]
   b60ca:	f7ff f878 	bl	b51be <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b60ce:	4649      	mov	r1, r9
   b60d0:	4640      	mov	r0, r8
   b60d2:	f7fe fd35 	bl	b4b40 <log_level_name>
    json.name("l", 1).value(s);
   b60d6:	4941      	ldr	r1, [pc, #260]	; (b61dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b60d8:	4680      	mov	r8, r0
   b60da:	2201      	movs	r2, #1
   b60dc:	a801      	add	r0, sp, #4
   b60de:	f7ff f8fd 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b60e2:	4641      	mov	r1, r8
   b60e4:	f7ff f97b 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b60e8:	b13f      	cbz	r7, b60fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b60ea:	493d      	ldr	r1, [pc, #244]	; (b61e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b60ec:	2201      	movs	r2, #1
   b60ee:	a801      	add	r0, sp, #4
   b60f0:	f7ff f8f4 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b60f4:	4639      	mov	r1, r7
   b60f6:	f7ff f972 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b60fa:	b13e      	cbz	r6, b610c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b60fc:	4939      	ldr	r1, [pc, #228]	; (b61e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b60fe:	2201      	movs	r2, #1
   b6100:	a801      	add	r0, sp, #4
   b6102:	f7ff f8eb 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6106:	4631      	mov	r1, r6
   b6108:	f7ff f969 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b610c:	7923      	ldrb	r3, [r4, #4]
   b610e:	07df      	lsls	r7, r3, #31
   b6110:	d50e      	bpl.n	b6130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6112:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6114:	212f      	movs	r1, #47	; 0x2f
   b6116:	4630      	mov	r0, r6
   b6118:	f001 fa05 	bl	b7526 <strrchr>
    if (s1) {
   b611c:	b100      	cbz	r0, b6120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b611e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6120:	4931      	ldr	r1, [pc, #196]	; (b61e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6122:	2201      	movs	r2, #1
   b6124:	a801      	add	r0, sp, #4
   b6126:	f7ff f8d9 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b612a:	4631      	mov	r1, r6
   b612c:	f7ff f957 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6130:	7923      	ldrb	r3, [r4, #4]
   b6132:	079e      	lsls	r6, r3, #30
   b6134:	d507      	bpl.n	b6146 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6136:	492d      	ldr	r1, [pc, #180]	; (b61ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6138:	2202      	movs	r2, #2
   b613a:	a801      	add	r0, sp, #4
   b613c:	f7ff f8ce 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6140:	68e1      	ldr	r1, [r4, #12]
   b6142:	f7ff f849 	bl	b51d8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6146:	7923      	ldrb	r3, [r4, #4]
   b6148:	0758      	lsls	r0, r3, #29
   b614a:	d514      	bpl.n	b6176 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b614c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b614e:	4633      	mov	r3, r6
   b6150:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6152:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6156:	b12a      	cbz	r2, b6164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6158:	2a20      	cmp	r2, #32
   b615a:	d101      	bne.n	b6160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b615c:	461e      	mov	r6, r3
   b615e:	e7f7      	b.n	b6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6160:	2a28      	cmp	r2, #40	; 0x28
   b6162:	d1f5      	bne.n	b6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6164:	4922      	ldr	r1, [pc, #136]	; (b61f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6166:	2202      	movs	r2, #2
   b6168:	a801      	add	r0, sp, #4
   b616a:	f7ff f8b7 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b616e:	1bba      	subs	r2, r7, r6
   b6170:	4631      	mov	r1, r6
   b6172:	f7ff f8c3 	bl	b52fc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6176:	7923      	ldrb	r3, [r4, #4]
   b6178:	0719      	lsls	r1, r3, #28
   b617a:	d507      	bpl.n	b618c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b617c:	491d      	ldr	r1, [pc, #116]	; (b61f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b617e:	2201      	movs	r2, #1
   b6180:	a801      	add	r0, sp, #4
   b6182:	f7ff f8ab 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6186:	6961      	ldr	r1, [r4, #20]
   b6188:	f7ff f838 	bl	b51fc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b618c:	7923      	ldrb	r3, [r4, #4]
   b618e:	06da      	lsls	r2, r3, #27
   b6190:	d508      	bpl.n	b61a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6192:	2204      	movs	r2, #4
   b6194:	4918      	ldr	r1, [pc, #96]	; (b61f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6196:	eb0d 0002 	add.w	r0, sp, r2
   b619a:	f7ff f89f 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b619e:	69a1      	ldr	r1, [r4, #24]
   b61a0:	f7ff f81a 	bl	b51d8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b61a4:	7923      	ldrb	r3, [r4, #4]
   b61a6:	069b      	lsls	r3, r3, #26
   b61a8:	d507      	bpl.n	b61ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b61aa:	4914      	ldr	r1, [pc, #80]	; (b61fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b61ac:	2206      	movs	r2, #6
   b61ae:	a801      	add	r0, sp, #4
   b61b0:	f7ff f894 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b61b4:	69e1      	ldr	r1, [r4, #28]
   b61b6:	f7ff f912 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b61ba:	a801      	add	r0, sp, #4
   b61bc:	f7fe ffe9 	bl	b5192 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b61c0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b61c2:	490f      	ldr	r1, [pc, #60]	; (b6200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b61c4:	6803      	ldr	r3, [r0, #0]
   b61c6:	2202      	movs	r2, #2
   b61c8:	68db      	ldr	r3, [r3, #12]
   b61ca:	4798      	blx	r3
}
   b61cc:	b005      	add	sp, #20
   b61ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b61d2:	bf00      	nop
   b61d4:	2003e6d4 	.word	0x2003e6d4
   b61d8:	000b7a84 	.word	0x000b7a84
   b61dc:	000b7a1a 	.word	0x000b7a1a
   b61e0:	000b7a64 	.word	0x000b7a64
   b61e4:	000b7c57 	.word	0x000b7c57
   b61e8:	000b776c 	.word	0x000b776c
   b61ec:	000b7a66 	.word	0x000b7a66
   b61f0:	000b7a69 	.word	0x000b7a69
   b61f4:	000b7a6c 	.word	0x000b7a6c
   b61f8:	000b7a6e 	.word	0x000b7a6e
   b61fc:	000b7a73 	.word	0x000b7a73
   b6200:	000b77be 	.word	0x000b77be

000b6204 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6204:	2300      	movs	r3, #0
   b6206:	6840      	ldr	r0, [r0, #4]
   b6208:	461a      	mov	r2, r3
   b620a:	f7fe bcdd 	b.w	b4bc8 <network_connect>

000b620e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b620e:	6840      	ldr	r0, [r0, #4]
   b6210:	2200      	movs	r2, #0
   b6212:	2102      	movs	r1, #2
   b6214:	f7fe bce8 	b.w	b4be8 <network_disconnect>

000b6218 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6218:	2200      	movs	r2, #0
   b621a:	6840      	ldr	r0, [r0, #4]
   b621c:	4611      	mov	r1, r2
   b621e:	f7fe bcdb 	b.w	b4bd8 <network_connecting>

000b6222 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6222:	2200      	movs	r2, #0
   b6224:	6840      	ldr	r0, [r0, #4]
   b6226:	4611      	mov	r1, r2
   b6228:	f7fe bce6 	b.w	b4bf8 <network_ready>

000b622c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b622c:	2300      	movs	r3, #0
   b622e:	6840      	ldr	r0, [r0, #4]
   b6230:	461a      	mov	r2, r3
   b6232:	4619      	mov	r1, r3
   b6234:	f7fe bce8 	b.w	b4c08 <network_on>

000b6238 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6238:	2300      	movs	r3, #0
   b623a:	6840      	ldr	r0, [r0, #4]
   b623c:	461a      	mov	r2, r3
   b623e:	4619      	mov	r1, r3
   b6240:	f7fe bcea 	b.w	b4c18 <network_off>

000b6244 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6244:	6840      	ldr	r0, [r0, #4]
   b6246:	2100      	movs	r1, #0
   b6248:	f7fe bd0e 	b.w	b4c68 <network_is_on>

000b624c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b624c:	6840      	ldr	r0, [r0, #4]
   b624e:	2100      	movs	r1, #0
   b6250:	f7fe bd12 	b.w	b4c78 <network_is_off>

000b6254 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6254:	6840      	ldr	r0, [r0, #4]
   b6256:	2200      	movs	r2, #0
   b6258:	f081 0101 	eor.w	r1, r1, #1
   b625c:	f7fe bce4 	b.w	b4c28 <network_listen>

000b6260 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6260:	6840      	ldr	r0, [r0, #4]
   b6262:	2200      	movs	r2, #0
   b6264:	f7fe bcf0 	b.w	b4c48 <network_set_listen_timeout>

000b6268 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6268:	2200      	movs	r2, #0
   b626a:	6840      	ldr	r0, [r0, #4]
   b626c:	4611      	mov	r1, r2
   b626e:	f7fe bcf3 	b.w	b4c58 <network_get_listen_timeout>

000b6272 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6272:	2200      	movs	r2, #0
   b6274:	6840      	ldr	r0, [r0, #4]
   b6276:	4611      	mov	r1, r2
   b6278:	f7fe bcde 	b.w	b4c38 <network_listening>

000b627c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b627c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6280:	b095      	sub	sp, #84	; 0x54
   b6282:	4614      	mov	r4, r2
   b6284:	460d      	mov	r5, r1
   b6286:	4607      	mov	r7, r0
    IPAddress addr;
   b6288:	f7fe fe32 	bl	b4ef0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b628c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b628e:	221c      	movs	r2, #28
   b6290:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6292:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6294:	f001 f8cc 	bl	b7430 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6298:	2340      	movs	r3, #64	; 0x40
   b629a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b629c:	4620      	mov	r0, r4
   b629e:	466b      	mov	r3, sp
   b62a0:	aa0c      	add	r2, sp, #48	; 0x30
   b62a2:	2100      	movs	r1, #0
   b62a4:	f7fe fb94 	bl	b49d0 <netdb_getaddrinfo>
    if (!r) {
   b62a8:	4604      	mov	r4, r0
   b62aa:	2800      	cmp	r0, #0
   b62ac:	d14b      	bne.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62ae:	4602      	mov	r2, r0
   b62b0:	2101      	movs	r1, #1
   b62b2:	6868      	ldr	r0, [r5, #4]
   b62b4:	f7fe fca0 	bl	b4bf8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62bc:	4622      	mov	r2, r4
   b62be:	6868      	ldr	r0, [r5, #4]
   b62c0:	f7fe fc9a 	bl	b4bf8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62c6:	4681      	mov	r9, r0
        bool ok = false;
   b62c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62ca:	2e00      	cmp	r6, #0
   b62cc:	d03b      	beq.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b62ce:	2900      	cmp	r1, #0
   b62d0:	d139      	bne.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b62d2:	6873      	ldr	r3, [r6, #4]
   b62d4:	2b02      	cmp	r3, #2
   b62d6:	d003      	beq.n	b62e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b62d8:	2b0a      	cmp	r3, #10
   b62da:	d011      	beq.n	b6300 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62dc:	69f6      	ldr	r6, [r6, #28]
   b62de:	e7f4      	b.n	b62ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b62e0:	f1b8 0f00 	cmp.w	r8, #0
   b62e4:	d0fa      	beq.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b62e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b62e8:	a806      	add	r0, sp, #24
   b62ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b62ec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b62ee:	f7fe fe2d 	bl	b4f4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b62f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62f4:	1d3c      	adds	r4, r7, #4
   b62f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62f8:	682b      	ldr	r3, [r5, #0]
   b62fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b62fc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b62fe:	e7ed      	b.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6300:	f1b9 0f00 	cmp.w	r9, #0
   b6304:	d0ea      	beq.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6306:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6308:	2210      	movs	r2, #16
   b630a:	a801      	add	r0, sp, #4
   b630c:	f001 f890 	bl	b7430 <memset>
                    a.v = 6;
   b6310:	2306      	movs	r3, #6
   b6312:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6316:	ad01      	add	r5, sp, #4
   b6318:	f104 0308 	add.w	r3, r4, #8
   b631c:	3418      	adds	r4, #24
   b631e:	6818      	ldr	r0, [r3, #0]
   b6320:	6859      	ldr	r1, [r3, #4]
   b6322:	462a      	mov	r2, r5
   b6324:	c203      	stmia	r2!, {r0, r1}
   b6326:	3308      	adds	r3, #8
   b6328:	42a3      	cmp	r3, r4
   b632a:	4615      	mov	r5, r2
   b632c:	d1f7      	bne.n	b631e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b632e:	a901      	add	r1, sp, #4
   b6330:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6332:	ad07      	add	r5, sp, #28
   b6334:	f7fe fdea 	bl	b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b633a:	1d3c      	adds	r4, r7, #4
   b633c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b633e:	682b      	ldr	r3, [r5, #0]
   b6340:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6342:	4649      	mov	r1, r9
   b6344:	e7ca      	b.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6346:	9800      	ldr	r0, [sp, #0]
   b6348:	f7fe fb3a 	bl	b49c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b634c:	4638      	mov	r0, r7
   b634e:	b015      	add	sp, #84	; 0x54
   b6350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6354 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6354:	4b02      	ldr	r3, [pc, #8]	; (b6360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6356:	4a03      	ldr	r2, [pc, #12]	; (b6364 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6358:	601a      	str	r2, [r3, #0]
   b635a:	2200      	movs	r2, #0
   b635c:	605a      	str	r2, [r3, #4]

} // spark
   b635e:	4770      	bx	lr
   b6360:	2003e6d4 	.word	0x2003e6d4
   b6364:	000b7afc 	.word	0x000b7afc

000b6368 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b636a:	4606      	mov	r6, r0
   b636c:	460d      	mov	r5, r1
  size_t n = 0;
   b636e:	188f      	adds	r7, r1, r2
   b6370:	2400      	movs	r4, #0
  while (size--) {
   b6372:	42bd      	cmp	r5, r7
   b6374:	d00c      	beq.n	b6390 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6376:	6833      	ldr	r3, [r6, #0]
   b6378:	f815 1b01 	ldrb.w	r1, [r5], #1
   b637c:	689b      	ldr	r3, [r3, #8]
   b637e:	4630      	mov	r0, r6
   b6380:	4798      	blx	r3
     if (chunk>=0)
   b6382:	1e03      	subs	r3, r0, #0
   b6384:	db01      	blt.n	b638a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6386:	441c      	add	r4, r3
  while (size--) {
   b6388:	e7f3      	b.n	b6372 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b638a:	2c00      	cmp	r4, #0
   b638c:	bf08      	it	eq
   b638e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6390:	4620      	mov	r0, r4
   b6392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6394 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6394:	b513      	push	{r0, r1, r4, lr}
   b6396:	4604      	mov	r4, r0
    }
   b6398:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b639a:	b159      	cbz	r1, b63b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b639c:	9101      	str	r1, [sp, #4]
   b639e:	f001 f8a6 	bl	b74ee <strlen>
   b63a2:	6823      	ldr	r3, [r4, #0]
   b63a4:	9901      	ldr	r1, [sp, #4]
   b63a6:	68db      	ldr	r3, [r3, #12]
   b63a8:	4602      	mov	r2, r0
   b63aa:	4620      	mov	r0, r4
    }
   b63ac:	b002      	add	sp, #8
   b63ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63b2:	4718      	bx	r3
    }
   b63b4:	b002      	add	sp, #8
   b63b6:	bd10      	pop	{r4, pc}

000b63b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b63b8:	6803      	ldr	r3, [r0, #0]
   b63ba:	689b      	ldr	r3, [r3, #8]
   b63bc:	4718      	bx	r3

000b63be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b63be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b63c0:	210d      	movs	r1, #13
{
   b63c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b63c4:	f7ff fff8 	bl	b63b8 <_ZN5Print5printEc>
  n += print('\n');
   b63c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b63ca:	4604      	mov	r4, r0
  n += print('\n');
   b63cc:	4628      	mov	r0, r5
   b63ce:	f7ff fff3 	bl	b63b8 <_ZN5Print5printEc>
  return n;
}
   b63d2:	4420      	add	r0, r4
   b63d4:	bd38      	pop	{r3, r4, r5, pc}

000b63d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b63d6:	b530      	push	{r4, r5, lr}
   b63d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b63da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b63dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b63de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b63e2:	bf98      	it	ls
   b63e4:	220a      	movls	r2, #10
   b63e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b63e8:	460d      	mov	r5, r1
   b63ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b63ee:	fb01 5312 	mls	r3, r1, r2, r5
   b63f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b63f6:	2b09      	cmp	r3, #9
   b63f8:	bf94      	ite	ls
   b63fa:	3330      	addls	r3, #48	; 0x30
   b63fc:	3337      	addhi	r3, #55	; 0x37
   b63fe:	b2db      	uxtb	r3, r3
  } while(n);
   b6400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6406:	d9ef      	bls.n	b63e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6408:	4621      	mov	r1, r4
   b640a:	f7ff ffc3 	bl	b6394 <_ZN5Print5writeEPKc>
}
   b640e:	b00b      	add	sp, #44	; 0x2c
   b6410:	bd30      	pop	{r4, r5, pc}

000b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6416:	b086      	sub	sp, #24
   b6418:	af00      	add	r7, sp, #0
   b641a:	4605      	mov	r5, r0
   b641c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b641e:	1d38      	adds	r0, r7, #4
   b6420:	2114      	movs	r1, #20
{
   b6422:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6424:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6426:	f7fe fc47 	bl	b4cb8 <vsnprintf>

    if (n<bufsize)
   b642a:	2813      	cmp	r0, #19
   b642c:	d80e      	bhi.n	b644c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b642e:	1d39      	adds	r1, r7, #4
   b6430:	4628      	mov	r0, r5
   b6432:	f7ff ffaf 	bl	b6394 <_ZN5Print5writeEPKc>
   b6436:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6438:	b11e      	cbz	r6, b6442 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b643a:	4628      	mov	r0, r5
   b643c:	f7ff ffbf 	bl	b63be <_ZN5Print7printlnEv>
   b6440:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6442:	4620      	mov	r0, r4
   b6444:	3718      	adds	r7, #24
   b6446:	46bd      	mov	sp, r7
   b6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b644c:	f100 0308 	add.w	r3, r0, #8
   b6450:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6454:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b645a:	4622      	mov	r2, r4
   b645c:	1c41      	adds	r1, r0, #1
   b645e:	683b      	ldr	r3, [r7, #0]
   b6460:	4668      	mov	r0, sp
   b6462:	f7fe fc29 	bl	b4cb8 <vsnprintf>
  return write(str);
   b6466:	4669      	mov	r1, sp
   b6468:	4628      	mov	r0, r5
   b646a:	f7ff ff93 	bl	b6394 <_ZN5Print5writeEPKc>
   b646e:	4604      	mov	r4, r0
   b6470:	46c5      	mov	sp, r8
   b6472:	e7e1      	b.n	b6438 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6474 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6474:	4b01      	ldr	r3, [pc, #4]	; (b647c <_GLOBAL__sub_I_RGB+0x8>)
   b6476:	2200      	movs	r2, #0
   b6478:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b647a:	4770      	bx	lr
   b647c:	2003e6dc 	.word	0x2003e6dc

000b6480 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6480:	b510      	push	{r4, lr}
   b6482:	4604      	mov	r4, r0
   b6484:	4608      	mov	r0, r1
{
    _spi = spi;
   b6486:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6488:	f7fe faaa 	bl	b49e0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b648c:	2300      	movs	r3, #0
   b648e:	6063      	str	r3, [r4, #4]
}
   b6490:	4620      	mov	r0, r4
   b6492:	bd10      	pop	{r4, pc}

000b6494 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6494:	b510      	push	{r4, lr}
   b6496:	4604      	mov	r4, r0
{
	free(buffer);
   b6498:	6800      	ldr	r0, [r0, #0]
   b649a:	f7fe fbfd 	bl	b4c98 <free>
}
   b649e:	4620      	mov	r0, r4
   b64a0:	bd10      	pop	{r4, pc}

000b64a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b64a2:	b510      	push	{r4, lr}
   b64a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b64a6:	6800      	ldr	r0, [r0, #0]
   b64a8:	b108      	cbz	r0, b64ae <_ZN6String10invalidateEv+0xc>
   b64aa:	f7fe fbf5 	bl	b4c98 <free>
	buffer = NULL;
   b64ae:	2300      	movs	r3, #0
	capacity = len = 0;
   b64b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b64b4:	6023      	str	r3, [r4, #0]
}
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b64b8:	b538      	push	{r3, r4, r5, lr}
   b64ba:	4604      	mov	r4, r0
   b64bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b64be:	6800      	ldr	r0, [r0, #0]
   b64c0:	3101      	adds	r1, #1
   b64c2:	f7fe fbf1 	bl	b4ca8 <realloc>
	if (newbuffer) {
   b64c6:	b110      	cbz	r0, b64ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b64c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b64cc:	2001      	movs	r0, #1
	}
	return 0;
}
   b64ce:	bd38      	pop	{r3, r4, r5, pc}

000b64d0 <_ZN6String7reserveEj>:
{
   b64d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b64d2:	6803      	ldr	r3, [r0, #0]
{
   b64d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b64d6:	b123      	cbz	r3, b64e2 <_ZN6String7reserveEj+0x12>
   b64d8:	6843      	ldr	r3, [r0, #4]
   b64da:	428b      	cmp	r3, r1
   b64dc:	d301      	bcc.n	b64e2 <_ZN6String7reserveEj+0x12>
   b64de:	2001      	movs	r0, #1
}
   b64e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b64e2:	4620      	mov	r0, r4
   b64e4:	f7ff ffe8 	bl	b64b8 <_ZN6String12changeBufferEj>
   b64e8:	2800      	cmp	r0, #0
   b64ea:	d0f9      	beq.n	b64e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b64ec:	68a3      	ldr	r3, [r4, #8]
   b64ee:	2b00      	cmp	r3, #0
   b64f0:	d1f5      	bne.n	b64de <_ZN6String7reserveEj+0xe>
   b64f2:	6822      	ldr	r2, [r4, #0]
   b64f4:	7013      	strb	r3, [r2, #0]
   b64f6:	e7f2      	b.n	b64de <_ZN6String7reserveEj+0xe>

000b64f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b64f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64fa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64fc:	4611      	mov	r1, r2
   b64fe:	9201      	str	r2, [sp, #4]
{
   b6500:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6502:	f7ff ffe5 	bl	b64d0 <_ZN6String7reserveEj>
   b6506:	9a01      	ldr	r2, [sp, #4]
   b6508:	b928      	cbnz	r0, b6516 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b650a:	4620      	mov	r0, r4
   b650c:	f7ff ffc9 	bl	b64a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6510:	4620      	mov	r0, r4
   b6512:	b003      	add	sp, #12
   b6514:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6516:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6518:	4629      	mov	r1, r5
   b651a:	6820      	ldr	r0, [r4, #0]
   b651c:	f000 ff60 	bl	b73e0 <memcpy>
	buffer[len] = 0;
   b6520:	6822      	ldr	r2, [r4, #0]
   b6522:	68a3      	ldr	r3, [r4, #8]
   b6524:	2100      	movs	r1, #0
   b6526:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6528:	e7f2      	b.n	b6510 <_ZN6String4copyEPKcj+0x18>

000b652a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b652a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b652c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b652e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6532:	4604      	mov	r4, r0
	len = 0;
   b6534:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6536:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6538:	b141      	cbz	r1, b654c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b653a:	4608      	mov	r0, r1
   b653c:	9101      	str	r1, [sp, #4]
   b653e:	f000 ffd6 	bl	b74ee <strlen>
   b6542:	9901      	ldr	r1, [sp, #4]
   b6544:	4602      	mov	r2, r0
   b6546:	4620      	mov	r0, r4
   b6548:	f7ff ffd6 	bl	b64f8 <_ZN6String4copyEPKcj>
}
   b654c:	4620      	mov	r0, r4
   b654e:	b002      	add	sp, #8
   b6550:	bd10      	pop	{r4, pc}

000b6552 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6552:	b538      	push	{r3, r4, r5, lr}
   b6554:	4605      	mov	r5, r0
	if (buffer) {
   b6556:	6800      	ldr	r0, [r0, #0]
{
   b6558:	460c      	mov	r4, r1
	if (buffer) {
   b655a:	b168      	cbz	r0, b6578 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b655c:	686a      	ldr	r2, [r5, #4]
   b655e:	688b      	ldr	r3, [r1, #8]
   b6560:	429a      	cmp	r2, r3
   b6562:	d307      	bcc.n	b6574 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6564:	6809      	ldr	r1, [r1, #0]
   b6566:	f000 ffba 	bl	b74de <strcpy>
			len = rhs.len;
   b656a:	68a3      	ldr	r3, [r4, #8]
   b656c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b656e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6570:	60a3      	str	r3, [r4, #8]
}
   b6572:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6574:	f7fe fb90 	bl	b4c98 <free>
	buffer = rhs.buffer;
   b6578:	6823      	ldr	r3, [r4, #0]
   b657a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b657c:	6863      	ldr	r3, [r4, #4]
   b657e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6580:	68a3      	ldr	r3, [r4, #8]
   b6582:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6584:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6586:	e9c4 3300 	strd	r3, r3, [r4]
   b658a:	e7f1      	b.n	b6570 <_ZN6String4moveERS_+0x1e>

000b658c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b658c:	b510      	push	{r4, lr}
	buffer = NULL;
   b658e:	2300      	movs	r3, #0
	capacity = 0;
   b6590:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6594:	4604      	mov	r4, r0
	len = 0;
   b6596:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6598:	7303      	strb	r3, [r0, #12]
	move(rval);
   b659a:	f7ff ffda 	bl	b6552 <_ZN6String4moveERS_>
}
   b659e:	4620      	mov	r0, r4
   b65a0:	bd10      	pop	{r4, pc}

000b65a2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b65a2:	4288      	cmp	r0, r1
{
   b65a4:	b510      	push	{r4, lr}
   b65a6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b65a8:	d005      	beq.n	b65b6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b65aa:	680b      	ldr	r3, [r1, #0]
   b65ac:	b12b      	cbz	r3, b65ba <_ZN6StringaSERKS_+0x18>
   b65ae:	688a      	ldr	r2, [r1, #8]
   b65b0:	4619      	mov	r1, r3
   b65b2:	f7ff ffa1 	bl	b64f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b65b6:	4620      	mov	r0, r4
   b65b8:	bd10      	pop	{r4, pc}
	else invalidate();
   b65ba:	f7ff ff72 	bl	b64a2 <_ZN6String10invalidateEv>
   b65be:	e7fa      	b.n	b65b6 <_ZN6StringaSERKS_+0x14>

000b65c0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b65c0:	b510      	push	{r4, lr}
	buffer = NULL;
   b65c2:	2300      	movs	r3, #0
String::String(const String &value)
   b65c4:	4604      	mov	r4, r0
	capacity = 0;
   b65c6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b65ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   b65cc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b65ce:	f7ff ffe8 	bl	b65a2 <_ZN6StringaSERKS_>
}
   b65d2:	4620      	mov	r0, r4
   b65d4:	bd10      	pop	{r4, pc}
	...

000b65d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b65d8:	4b05      	ldr	r3, [pc, #20]	; (b65f0 <_GLOBAL__sub_I_System+0x18>)
   b65da:	2202      	movs	r2, #2
   b65dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b65de:	4b05      	ldr	r3, [pc, #20]	; (b65f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b65e0:	4a05      	ldr	r2, [pc, #20]	; (b65f8 <_GLOBAL__sub_I_System+0x20>)
   b65e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b65e4:	2000      	movs	r0, #0
   b65e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b65ea:	f7fe bab9 	b.w	b4b60 <set_system_mode>
   b65ee:	bf00      	nop
   b65f0:	2003e6f8 	.word	0x2003e6f8
   b65f4:	2003e6ec 	.word	0x2003e6ec
   b65f8:	ffff0000 	.word	0xffff0000

000b65fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b65fc:	4b02      	ldr	r3, [pc, #8]	; (b6608 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b65fe:	681a      	ldr	r2, [r3, #0]
   b6600:	4b02      	ldr	r3, [pc, #8]	; (b660c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6602:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6604:	4770      	bx	lr
   b6606:	bf00      	nop
   b6608:	2003e5b4 	.word	0x2003e5b4
   b660c:	2003e6fc 	.word	0x2003e6fc

000b6610 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6610:	4770      	bx	lr

000b6612 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6612:	7441      	strb	r1, [r0, #17]
}
   b6614:	4770      	bx	lr

000b6616 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6616:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6618:	7c00      	ldrb	r0, [r0, #16]
   b661a:	f7fe fa29 	bl	b4a70 <hal_usart_available_data_for_write>
}
   b661e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6622:	bd08      	pop	{r3, pc}

000b6624 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6624:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6626:	7c00      	ldrb	r0, [r0, #16]
   b6628:	f7fe f9fa 	bl	b4a20 <hal_usart_available>
}
   b662c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6630:	bd08      	pop	{r3, pc}

000b6632 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6632:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6634:	7c00      	ldrb	r0, [r0, #16]
   b6636:	f7fe fa03 	bl	b4a40 <hal_usart_peek>
}
   b663a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b663e:	bd08      	pop	{r3, pc}

000b6640 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6640:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6642:	7c00      	ldrb	r0, [r0, #16]
   b6644:	f7fe f9f4 	bl	b4a30 <hal_usart_read>
}
   b6648:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b664c:	bd08      	pop	{r3, pc}

000b664e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b664e:	7c00      	ldrb	r0, [r0, #16]
   b6650:	f7fe b9fe 	b.w	b4a50 <hal_usart_flush>

000b6654 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6656:	7c45      	ldrb	r5, [r0, #17]
{
   b6658:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b665a:	b12d      	cbz	r5, b6668 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b665c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b665e:	b003      	add	sp, #12
   b6660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6664:	f7fe b9d4 	b.w	b4a10 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6668:	7c00      	ldrb	r0, [r0, #16]
   b666a:	9101      	str	r1, [sp, #4]
   b666c:	f7fe fa00 	bl	b4a70 <hal_usart_available_data_for_write>
   b6670:	2800      	cmp	r0, #0
   b6672:	9901      	ldr	r1, [sp, #4]
   b6674:	dcf2      	bgt.n	b665c <_ZN11USARTSerial5writeEh+0x8>
}
   b6676:	4628      	mov	r0, r5
   b6678:	b003      	add	sp, #12
   b667a:	bd30      	pop	{r4, r5, pc}

000b667c <_ZN11USARTSerialD0Ev>:
   b667c:	b510      	push	{r4, lr}
   b667e:	2114      	movs	r1, #20
   b6680:	4604      	mov	r4, r0
   b6682:	f7fd fd0c 	bl	b409e <_ZdlPvj>
   b6686:	4620      	mov	r0, r4
   b6688:	bd10      	pop	{r4, pc}
	...

000b668c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b668c:	b510      	push	{r4, lr}
   b668e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6692:	4604      	mov	r4, r0
   b6694:	4608      	mov	r0, r1
   b6696:	4611      	mov	r1, r2
   b6698:	2200      	movs	r2, #0
   b669a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b669e:	4b04      	ldr	r3, [pc, #16]	; (b66b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b66a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b66a2:	2301      	movs	r3, #1
  _serial = serial;
   b66a4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b66a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b66a8:	f7fe f9f2 	bl	b4a90 <hal_usart_init_ex>
}
   b66ac:	4620      	mov	r0, r4
   b66ae:	bd10      	pop	{r4, pc}
   b66b0:	000b7b54 	.word	0x000b7b54

000b66b4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b66b4:	7c00      	ldrb	r0, [r0, #16]
   b66b6:	2300      	movs	r3, #0
   b66b8:	f7fe b9e2 	b.w	b4a80 <hal_usart_begin_config>

000b66bc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b66bc:	2200      	movs	r2, #0
   b66be:	f7ff bff9 	b.w	b66b4 <_ZN11USARTSerial5beginEmm>

000b66c2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b66c2:	7c00      	ldrb	r0, [r0, #16]
   b66c4:	f7fe b99c 	b.w	b4a00 <hal_usart_end>

000b66c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b66c8:	7441      	strb	r1, [r0, #17]
}
   b66ca:	4770      	bx	lr

000b66cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b66cc:	4770      	bx	lr

000b66ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b66ce:	4770      	bx	lr

000b66d0 <_ZN9USBSerial4readEv>:
{
   b66d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b66d2:	2100      	movs	r1, #0
   b66d4:	7c00      	ldrb	r0, [r0, #16]
   b66d6:	f7fe fa0b 	bl	b4af0 <HAL_USB_USART_Receive_Data>
}
   b66da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66de:	bd08      	pop	{r3, pc}

000b66e0 <_ZN9USBSerial4peekEv>:
{
   b66e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b66e2:	2101      	movs	r1, #1
   b66e4:	7c00      	ldrb	r0, [r0, #16]
   b66e6:	f7fe fa03 	bl	b4af0 <HAL_USB_USART_Receive_Data>
}
   b66ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66ee:	bd08      	pop	{r3, pc}

000b66f0 <_ZN9USBSerial17availableForWriteEv>:
{
   b66f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b66f2:	7c00      	ldrb	r0, [r0, #16]
   b66f4:	f7fe f9f4 	bl	b4ae0 <HAL_USB_USART_Available_Data_For_Write>
}
   b66f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66fc:	bd08      	pop	{r3, pc}

000b66fe <_ZN9USBSerial9availableEv>:
{
   b66fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6700:	7c00      	ldrb	r0, [r0, #16]
   b6702:	f7fe f9e5 	bl	b4ad0 <HAL_USB_USART_Available_Data>
}
   b6706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b670a:	bd08      	pop	{r3, pc}

000b670c <_ZN9USBSerial5writeEh>:
{
   b670c:	b513      	push	{r0, r1, r4, lr}
   b670e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6710:	7c00      	ldrb	r0, [r0, #16]
{
   b6712:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6714:	f7fe f9e4 	bl	b4ae0 <HAL_USB_USART_Available_Data_For_Write>
   b6718:	2800      	cmp	r0, #0
   b671a:	9901      	ldr	r1, [sp, #4]
   b671c:	dc01      	bgt.n	b6722 <_ZN9USBSerial5writeEh+0x16>
   b671e:	7c60      	ldrb	r0, [r4, #17]
   b6720:	b120      	cbz	r0, b672c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6722:	7c20      	ldrb	r0, [r4, #16]
   b6724:	f7fe f9ec 	bl	b4b00 <HAL_USB_USART_Send_Data>
   b6728:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b672c:	b002      	add	sp, #8
   b672e:	bd10      	pop	{r4, pc}

000b6730 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6730:	7c00      	ldrb	r0, [r0, #16]
   b6732:	f7fe b9ed 	b.w	b4b10 <HAL_USB_USART_Flush_Data>

000b6736 <_ZN9USBSerialD0Ev>:
   b6736:	b510      	push	{r4, lr}
   b6738:	2114      	movs	r1, #20
   b673a:	4604      	mov	r4, r0
   b673c:	f7fd fcaf 	bl	b409e <_ZdlPvj>
   b6740:	4620      	mov	r0, r4
   b6742:	bd10      	pop	{r4, pc}

000b6744 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6744:	b510      	push	{r4, lr}
   b6746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b674a:	4604      	mov	r4, r0
   b674c:	4608      	mov	r0, r1
   b674e:	2100      	movs	r1, #0
   b6750:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6754:	4b04      	ldr	r3, [pc, #16]	; (b6768 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6756:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6758:	2301      	movs	r3, #1
  _serial = serial;
   b675a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b675c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b675e:	4611      	mov	r1, r2
   b6760:	f7fe f99e 	bl	b4aa0 <HAL_USB_USART_Init>
}
   b6764:	4620      	mov	r0, r4
   b6766:	bd10      	pop	{r4, pc}
   b6768:	000b7b84 	.word	0x000b7b84

000b676c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b676c:	7c00      	ldrb	r0, [r0, #16]
   b676e:	2200      	movs	r2, #0
   b6770:	f7fe b99e 	b.w	b4ab0 <HAL_USB_USART_Begin>

000b6774 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6774:	7c00      	ldrb	r0, [r0, #16]
   b6776:	f7fe b9a3 	b.w	b4ac0 <HAL_USB_USART_End>

000b677a <_Z19acquireSerialBufferv>:
{
   b677a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b677c:	2214      	movs	r2, #20
{
   b677e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6780:	2100      	movs	r1, #0
   b6782:	f000 fe55 	bl	b7430 <memset>
}
   b6786:	4620      	mov	r0, r4
   b6788:	bd10      	pop	{r4, pc}
	...

000b678c <_Z16_fetch_usbserialv>:
{
   b678c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b678e:	4c0f      	ldr	r4, [pc, #60]	; (b67cc <_Z16_fetch_usbserialv+0x40>)
{
   b6790:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6792:	a803      	add	r0, sp, #12
   b6794:	f7ff fff1 	bl	b677a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6798:	7821      	ldrb	r1, [r4, #0]
   b679a:	f3bf 8f5b 	dmb	ish
   b679e:	f011 0101 	ands.w	r1, r1, #1
   b67a2:	d10f      	bne.n	b67c4 <_Z16_fetch_usbserialv+0x38>
   b67a4:	4620      	mov	r0, r4
   b67a6:	9101      	str	r1, [sp, #4]
   b67a8:	f7fd fc88 	bl	b40bc <__cxa_guard_acquire>
   b67ac:	9901      	ldr	r1, [sp, #4]
   b67ae:	b148      	cbz	r0, b67c4 <_Z16_fetch_usbserialv+0x38>
   b67b0:	aa03      	add	r2, sp, #12
   b67b2:	4807      	ldr	r0, [pc, #28]	; (b67d0 <_Z16_fetch_usbserialv+0x44>)
   b67b4:	f7ff ffc6 	bl	b6744 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b67b8:	4620      	mov	r0, r4
   b67ba:	f7fd fc84 	bl	b40c6 <__cxa_guard_release>
   b67be:	4805      	ldr	r0, [pc, #20]	; (b67d4 <_Z16_fetch_usbserialv+0x48>)
   b67c0:	f000 fe00 	bl	b73c4 <atexit>
	return _usbserial;
}
   b67c4:	4802      	ldr	r0, [pc, #8]	; (b67d0 <_Z16_fetch_usbserialv+0x44>)
   b67c6:	b008      	add	sp, #32
   b67c8:	bd10      	pop	{r4, pc}
   b67ca:	bf00      	nop
   b67cc:	2003e700 	.word	0x2003e700
   b67d0:	2003e704 	.word	0x2003e704
   b67d4:	000b66cd 	.word	0x000b66cd

000b67d8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b67d8:	2200      	movs	r2, #0
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	4611      	mov	r1, r2
   b67de:	f7fe ba0b 	b.w	b4bf8 <network_ready>

000b67e2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b67e2:	2200      	movs	r2, #0
   b67e4:	6840      	ldr	r0, [r0, #4]
   b67e6:	4611      	mov	r1, r2
   b67e8:	f7fe ba26 	b.w	b4c38 <network_listening>

000b67ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b67ec:	2200      	movs	r2, #0
   b67ee:	6840      	ldr	r0, [r0, #4]
   b67f0:	4611      	mov	r1, r2
   b67f2:	f7fe ba31 	b.w	b4c58 <network_get_listen_timeout>

000b67f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b67f6:	6840      	ldr	r0, [r0, #4]
   b67f8:	2200      	movs	r2, #0
   b67fa:	f7fe ba25 	b.w	b4c48 <network_set_listen_timeout>

000b67fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b67fe:	6840      	ldr	r0, [r0, #4]
   b6800:	2200      	movs	r2, #0
   b6802:	f081 0101 	eor.w	r1, r1, #1
   b6806:	f7fe ba0f 	b.w	b4c28 <network_listen>

000b680a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b680a:	2300      	movs	r3, #0
   b680c:	6840      	ldr	r0, [r0, #4]
   b680e:	461a      	mov	r2, r3
   b6810:	4619      	mov	r1, r3
   b6812:	f7fe ba01 	b.w	b4c18 <network_off>

000b6816 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6816:	2300      	movs	r3, #0
   b6818:	6840      	ldr	r0, [r0, #4]
   b681a:	461a      	mov	r2, r3
   b681c:	4619      	mov	r1, r3
   b681e:	f7fe b9f3 	b.w	b4c08 <network_on>

000b6822 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6822:	2200      	movs	r2, #0
   b6824:	6840      	ldr	r0, [r0, #4]
   b6826:	4611      	mov	r1, r2
   b6828:	f7fe b9d6 	b.w	b4bd8 <network_connecting>

000b682c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b682c:	6840      	ldr	r0, [r0, #4]
   b682e:	2200      	movs	r2, #0
   b6830:	2102      	movs	r1, #2
   b6832:	f7fe b9d9 	b.w	b4be8 <network_disconnect>

000b6836 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6836:	2300      	movs	r3, #0
   b6838:	6840      	ldr	r0, [r0, #4]
   b683a:	461a      	mov	r2, r3
   b683c:	f7fe b9c4 	b.w	b4bc8 <network_connect>

000b6840 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6840:	4b02      	ldr	r3, [pc, #8]	; (b684c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6842:	2204      	movs	r2, #4
   b6844:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6846:	4a02      	ldr	r2, [pc, #8]	; (b6850 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6848:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b684a:	4770      	bx	lr
   b684c:	2003e718 	.word	0x2003e718
   b6850:	000b7bb4 	.word	0x000b7bb4

000b6854 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6854:	4b01      	ldr	r3, [pc, #4]	; (b685c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6856:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6858:	4770      	bx	lr
   b685a:	bf00      	nop
   b685c:	2003e5b8 	.word	0x2003e5b8

000b6860 <serialEventRun>:
{
   b6860:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6862:	4b0b      	ldr	r3, [pc, #44]	; (b6890 <serialEventRun+0x30>)
   b6864:	b143      	cbz	r3, b6878 <serialEventRun+0x18>
   b6866:	f7ff ff91 	bl	b678c <_Z16_fetch_usbserialv>
   b686a:	6803      	ldr	r3, [r0, #0]
   b686c:	691b      	ldr	r3, [r3, #16]
   b686e:	4798      	blx	r3
   b6870:	2800      	cmp	r0, #0
   b6872:	dd01      	ble.n	b6878 <serialEventRun+0x18>
        serialEvent();
   b6874:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6878:	4b06      	ldr	r3, [pc, #24]	; (b6894 <serialEventRun+0x34>)
   b687a:	b143      	cbz	r3, b688e <serialEventRun+0x2e>
   b687c:	f000 f95c 	bl	b6b38 <_Z22__fetch_global_Serial1v>
   b6880:	6803      	ldr	r3, [r0, #0]
   b6882:	691b      	ldr	r3, [r3, #16]
   b6884:	4798      	blx	r3
   b6886:	2800      	cmp	r0, #0
   b6888:	dd01      	ble.n	b688e <serialEventRun+0x2e>
        serialEvent1();
   b688a:	f3af 8000 	nop.w
}
   b688e:	bd08      	pop	{r3, pc}
	...

000b6898 <_post_loop>:
{
   b6898:	b508      	push	{r3, lr}
	serialEventRun();
   b689a:	f7ff ffe1 	bl	b6860 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b689e:	f7fe f827 	bl	b48f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b68a2:	4b01      	ldr	r3, [pc, #4]	; (b68a8 <_post_loop+0x10>)
   b68a4:	6018      	str	r0, [r3, #0]
}
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	2003e728 	.word	0x2003e728

000b68ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b68ac:	4805      	ldr	r0, [pc, #20]	; (b68c4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b68ae:	4a06      	ldr	r2, [pc, #24]	; (b68c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b68b0:	4906      	ldr	r1, [pc, #24]	; (b68cc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b68b2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b68b4:	1a12      	subs	r2, r2, r0
   b68b6:	f000 fd93 	bl	b73e0 <memcpy>
    __backup_sram_signature = signature;
   b68ba:	4b05      	ldr	r3, [pc, #20]	; (b68d0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b68bc:	4a05      	ldr	r2, [pc, #20]	; (b68d4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b68be:	601a      	str	r2, [r3, #0]
}
   b68c0:	bd08      	pop	{r3, pc}
   b68c2:	bf00      	nop
   b68c4:	2003f400 	.word	0x2003f400
   b68c8:	2003f404 	.word	0x2003f404
   b68cc:	000b7da4 	.word	0x000b7da4
   b68d0:	2003f400 	.word	0x2003f400
   b68d4:	9a271c1e 	.word	0x9a271c1e

000b68d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b68d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b68da:	2300      	movs	r3, #0
   b68dc:	9300      	str	r3, [sp, #0]
   b68de:	461a      	mov	r2, r3
   b68e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68e4:	f7fe f95e 	bl	b4ba4 <system_ctrl_set_result>
}
   b68e8:	b003      	add	sp, #12
   b68ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b68f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b68f2:	8843      	ldrh	r3, [r0, #2]
   b68f4:	2b0a      	cmp	r3, #10
   b68f6:	d008      	beq.n	b690a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b68f8:	2b50      	cmp	r3, #80	; 0x50
   b68fa:	d10b      	bne.n	b6914 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b68fc:	4b09      	ldr	r3, [pc, #36]	; (b6924 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b68fe:	681b      	ldr	r3, [r3, #0]
   b6900:	b14b      	cbz	r3, b6916 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6902:	b003      	add	sp, #12
   b6904:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6908:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b690a:	f7ff ffe5 	bl	b68d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b690e:	b003      	add	sp, #12
   b6910:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6914:	2300      	movs	r3, #0
   b6916:	9300      	str	r3, [sp, #0]
   b6918:	461a      	mov	r2, r3
   b691a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b691e:	f7fe f941 	bl	b4ba4 <system_ctrl_set_result>
}
   b6922:	e7f4      	b.n	b690e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6924:	2003e724 	.word	0x2003e724

000b6928 <module_user_init_hook>:
{
   b6928:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b692a:	4812      	ldr	r0, [pc, #72]	; (b6974 <module_user_init_hook+0x4c>)
   b692c:	2100      	movs	r1, #0
   b692e:	f7fe f9db 	bl	b4ce8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6932:	4b11      	ldr	r3, [pc, #68]	; (b6978 <module_user_init_hook+0x50>)
   b6934:	681a      	ldr	r2, [r3, #0]
   b6936:	4b11      	ldr	r3, [pc, #68]	; (b697c <module_user_init_hook+0x54>)
   b6938:	429a      	cmp	r2, r3
   b693a:	4b11      	ldr	r3, [pc, #68]	; (b6980 <module_user_init_hook+0x58>)
   b693c:	bf0c      	ite	eq
   b693e:	2201      	moveq	r2, #1
   b6940:	2200      	movne	r2, #0
   b6942:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6944:	d001      	beq.n	b694a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6946:	f7ff ffb1 	bl	b68ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b694a:	f7fd ffc1 	bl	b48d0 <HAL_RNG_GetRandomNumber>
   b694e:	4604      	mov	r4, r0
    srand(seed);
   b6950:	f000 fd76 	bl	b7440 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6954:	4b0b      	ldr	r3, [pc, #44]	; (b6984 <module_user_init_hook+0x5c>)
   b6956:	b113      	cbz	r3, b695e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6958:	4620      	mov	r0, r4
   b695a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b695e:	2100      	movs	r1, #0
   b6960:	4808      	ldr	r0, [pc, #32]	; (b6984 <module_user_init_hook+0x5c>)
   b6962:	f7fe f929 	bl	b4bb8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b696a:	4807      	ldr	r0, [pc, #28]	; (b6988 <module_user_init_hook+0x60>)
   b696c:	2100      	movs	r1, #0
   b696e:	f7fe b90f 	b.w	b4b90 <system_ctrl_set_app_request_handler>
   b6972:	bf00      	nop
   b6974:	000b6855 	.word	0x000b6855
   b6978:	2003f400 	.word	0x2003f400
   b697c:	9a271c1e 	.word	0x9a271c1e
   b6980:	2003e720 	.word	0x2003e720
   b6984:	00000000 	.word	0x00000000
   b6988:	000b68f1 	.word	0x000b68f1

000b698c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b698c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b698e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6990:	d902      	bls.n	b6998 <pinAvailable+0xc>
    return false;
   b6992:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6994:	b002      	add	sp, #8
   b6996:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6998:	f1a0 030b 	sub.w	r3, r0, #11
   b699c:	2b02      	cmp	r3, #2
   b699e:	d81a      	bhi.n	b69d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b69a0:	4c17      	ldr	r4, [pc, #92]	; (b6a00 <pinAvailable+0x74>)
   b69a2:	7821      	ldrb	r1, [r4, #0]
   b69a4:	f3bf 8f5b 	dmb	ish
   b69a8:	f011 0101 	ands.w	r1, r1, #1
   b69ac:	d10b      	bne.n	b69c6 <pinAvailable+0x3a>
   b69ae:	4620      	mov	r0, r4
   b69b0:	9101      	str	r1, [sp, #4]
   b69b2:	f7fd fb83 	bl	b40bc <__cxa_guard_acquire>
   b69b6:	9901      	ldr	r1, [sp, #4]
   b69b8:	b128      	cbz	r0, b69c6 <pinAvailable+0x3a>
   b69ba:	4812      	ldr	r0, [pc, #72]	; (b6a04 <pinAvailable+0x78>)
   b69bc:	f7ff fd60 	bl	b6480 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b69c0:	4620      	mov	r0, r4
   b69c2:	f7fd fb80 	bl	b40c6 <__cxa_guard_release>
   b69c6:	4b0f      	ldr	r3, [pc, #60]	; (b6a04 <pinAvailable+0x78>)
   b69c8:	7818      	ldrb	r0, [r3, #0]
   b69ca:	f7fe f811 	bl	b49f0 <hal_spi_is_enabled>
   b69ce:	2800      	cmp	r0, #0
   b69d0:	d1df      	bne.n	b6992 <pinAvailable+0x6>
  return true; // 'pin' is available
   b69d2:	2001      	movs	r0, #1
   b69d4:	e7de      	b.n	b6994 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b69d6:	2801      	cmp	r0, #1
   b69d8:	d809      	bhi.n	b69ee <pinAvailable+0x62>
   b69da:	f000 f86d 	bl	b6ab8 <_Z19__fetch_global_Wirev>
   b69de:	2100      	movs	r1, #0
   b69e0:	7c00      	ldrb	r0, [r0, #16]
   b69e2:	f7fd ffd5 	bl	b4990 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b69e6:	f080 0001 	eor.w	r0, r0, #1
   b69ea:	b2c0      	uxtb	r0, r0
   b69ec:	e7d2      	b.n	b6994 <pinAvailable+0x8>
   b69ee:	3809      	subs	r0, #9
   b69f0:	2801      	cmp	r0, #1
   b69f2:	d8ee      	bhi.n	b69d2 <pinAvailable+0x46>
   b69f4:	f000 f8a0 	bl	b6b38 <_Z22__fetch_global_Serial1v>
   b69f8:	7c00      	ldrb	r0, [r0, #16]
   b69fa:	f7fe f831 	bl	b4a60 <hal_usart_is_enabled>
   b69fe:	e7f2      	b.n	b69e6 <pinAvailable+0x5a>
   b6a00:	2003e684 	.word	0x2003e684
   b6a04:	2003e688 	.word	0x2003e688

000b6a08 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6a08:	2823      	cmp	r0, #35	; 0x23
{
   b6a0a:	b538      	push	{r3, r4, r5, lr}
   b6a0c:	4604      	mov	r4, r0
   b6a0e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6a10:	d80a      	bhi.n	b6a28 <pinMode+0x20>
   b6a12:	29ff      	cmp	r1, #255	; 0xff
   b6a14:	d008      	beq.n	b6a28 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6a16:	f7ff ffb9 	bl	b698c <pinAvailable>
   b6a1a:	b128      	cbz	r0, b6a28 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6a1c:	4629      	mov	r1, r5
   b6a1e:	4620      	mov	r0, r4
}
   b6a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6a24:	f7fd bf6c 	b.w	b4900 <HAL_Pin_Mode>
}
   b6a28:	bd38      	pop	{r3, r4, r5, pc}

000b6a2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6a2a:	b538      	push	{r3, r4, r5, lr}
   b6a2c:	4604      	mov	r4, r0
   b6a2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a30:	f7fd ff6e 	bl	b4910 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6a34:	28ff      	cmp	r0, #255	; 0xff
   b6a36:	d010      	beq.n	b6a5a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6a38:	2806      	cmp	r0, #6
   b6a3a:	d804      	bhi.n	b6a46 <digitalWrite+0x1c>
   b6a3c:	234d      	movs	r3, #77	; 0x4d
   b6a3e:	fa23 f000 	lsr.w	r0, r3, r0
   b6a42:	07c3      	lsls	r3, r0, #31
   b6a44:	d409      	bmi.n	b6a5a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6a46:	4620      	mov	r0, r4
   b6a48:	f7ff ffa0 	bl	b698c <pinAvailable>
   b6a4c:	b128      	cbz	r0, b6a5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6a4e:	4629      	mov	r1, r5
   b6a50:	4620      	mov	r0, r4
}
   b6a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6a56:	f7fd bf63 	b.w	b4920 <HAL_GPIO_Write>
}
   b6a5a:	bd38      	pop	{r3, r4, r5, pc}

000b6a5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6a5c:	b510      	push	{r4, lr}
   b6a5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a60:	f7fd ff56 	bl	b4910 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6a64:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6a66:	b2db      	uxtb	r3, r3
   b6a68:	2b01      	cmp	r3, #1
   b6a6a:	d908      	bls.n	b6a7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6a6c:	4620      	mov	r0, r4
   b6a6e:	f7ff ff8d 	bl	b698c <pinAvailable>
   b6a72:	b120      	cbz	r0, b6a7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6a74:	4620      	mov	r0, r4
}
   b6a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6a7a:	f7fd bf59 	b.w	b4930 <HAL_GPIO_Read>
}
   b6a7e:	2000      	movs	r0, #0
   b6a80:	bd10      	pop	{r4, pc}

000b6a82 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a82:	4770      	bx	lr

000b6a84 <_Z17acquireWireBufferv>:
{
   b6a84:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6a86:	4b0a      	ldr	r3, [pc, #40]	; (b6ab0 <_Z17acquireWireBufferv+0x2c>)
   b6a88:	6003      	str	r3, [r0, #0]
   b6a8a:	2301      	movs	r3, #1
{
   b6a8c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6a8e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6a90:	4908      	ldr	r1, [pc, #32]	; (b6ab4 <_Z17acquireWireBufferv+0x30>)
   b6a92:	2020      	movs	r0, #32
   b6a94:	f000 f876 	bl	b6b84 <_ZnajRKSt9nothrow_t>
	};
   b6a98:	2520      	movs	r5, #32
   b6a9a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6a9c:	4905      	ldr	r1, [pc, #20]	; (b6ab4 <_Z17acquireWireBufferv+0x30>)
	};
   b6a9e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6aa0:	4628      	mov	r0, r5
   b6aa2:	f000 f86f 	bl	b6b84 <_ZnajRKSt9nothrow_t>
	};
   b6aa6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6aaa:	4620      	mov	r0, r4
   b6aac:	bd38      	pop	{r3, r4, r5, pc}
   b6aae:	bf00      	nop
   b6ab0:	00010018 	.word	0x00010018
   b6ab4:	000b7be8 	.word	0x000b7be8

000b6ab8 <_Z19__fetch_global_Wirev>:
{
   b6ab8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6aba:	4d0e      	ldr	r5, [pc, #56]	; (b6af4 <_Z19__fetch_global_Wirev+0x3c>)
   b6abc:	7829      	ldrb	r1, [r5, #0]
   b6abe:	f3bf 8f5b 	dmb	ish
   b6ac2:	f011 0401 	ands.w	r4, r1, #1
{
   b6ac6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ac8:	d111      	bne.n	b6aee <_Z19__fetch_global_Wirev+0x36>
   b6aca:	4628      	mov	r0, r5
   b6acc:	f7fd faf6 	bl	b40bc <__cxa_guard_acquire>
   b6ad0:	b168      	cbz	r0, b6aee <_Z19__fetch_global_Wirev+0x36>
   b6ad2:	4668      	mov	r0, sp
   b6ad4:	f7ff ffd6 	bl	b6a84 <_Z17acquireWireBufferv>
   b6ad8:	466a      	mov	r2, sp
   b6ada:	4621      	mov	r1, r4
   b6adc:	4806      	ldr	r0, [pc, #24]	; (b6af8 <_Z19__fetch_global_Wirev+0x40>)
   b6ade:	f7fe f9af 	bl	b4e40 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6ae2:	4628      	mov	r0, r5
   b6ae4:	f7fd faef 	bl	b40c6 <__cxa_guard_release>
   b6ae8:	4804      	ldr	r0, [pc, #16]	; (b6afc <_Z19__fetch_global_Wirev+0x44>)
   b6aea:	f000 fc6b 	bl	b73c4 <atexit>
	return wire;
}
   b6aee:	4802      	ldr	r0, [pc, #8]	; (b6af8 <_Z19__fetch_global_Wirev+0x40>)
   b6af0:	b007      	add	sp, #28
   b6af2:	bd30      	pop	{r4, r5, pc}
   b6af4:	2003e72c 	.word	0x2003e72c
   b6af8:	2003e730 	.word	0x2003e730
   b6afc:	000b6a83 	.word	0x000b6a83

000b6b00 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b00:	4770      	bx	lr
	...

000b6b04 <_Z20acquireSerial1Bufferv>:
{
   b6b04:	b538      	push	{r3, r4, r5, lr}
   b6b06:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6b08:	2514      	movs	r5, #20
   b6b0a:	462a      	mov	r2, r5
   b6b0c:	2100      	movs	r1, #0
   b6b0e:	f000 fc8f 	bl	b7430 <memset>
   b6b12:	8025      	strh	r5, [r4, #0]
   b6b14:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b16:	4907      	ldr	r1, [pc, #28]	; (b6b34 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6b18:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b1a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6b1c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b1e:	f000 f831 	bl	b6b84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b22:	4904      	ldr	r1, [pc, #16]	; (b6b34 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6b24:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b26:	4628      	mov	r0, r5
   b6b28:	f000 f82c 	bl	b6b84 <_ZnajRKSt9nothrow_t>
    };
   b6b2c:	60e0      	str	r0, [r4, #12]
}
   b6b2e:	4620      	mov	r0, r4
   b6b30:	bd38      	pop	{r3, r4, r5, pc}
   b6b32:	bf00      	nop
   b6b34:	000b7be8 	.word	0x000b7be8

000b6b38 <_Z22__fetch_global_Serial1v>:
{
   b6b38:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b3a:	4d0e      	ldr	r5, [pc, #56]	; (b6b74 <_Z22__fetch_global_Serial1v+0x3c>)
   b6b3c:	7829      	ldrb	r1, [r5, #0]
   b6b3e:	f3bf 8f5b 	dmb	ish
   b6b42:	f011 0401 	ands.w	r4, r1, #1
{
   b6b46:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b48:	d111      	bne.n	b6b6e <_Z22__fetch_global_Serial1v+0x36>
   b6b4a:	4628      	mov	r0, r5
   b6b4c:	f7fd fab6 	bl	b40bc <__cxa_guard_acquire>
   b6b50:	b168      	cbz	r0, b6b6e <_Z22__fetch_global_Serial1v+0x36>
   b6b52:	a801      	add	r0, sp, #4
   b6b54:	f7ff ffd6 	bl	b6b04 <_Z20acquireSerial1Bufferv>
   b6b58:	aa01      	add	r2, sp, #4
   b6b5a:	4621      	mov	r1, r4
   b6b5c:	4806      	ldr	r0, [pc, #24]	; (b6b78 <_Z22__fetch_global_Serial1v+0x40>)
   b6b5e:	f7ff fd95 	bl	b668c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6b62:	4628      	mov	r0, r5
   b6b64:	f7fd faaf 	bl	b40c6 <__cxa_guard_release>
   b6b68:	4804      	ldr	r0, [pc, #16]	; (b6b7c <_Z22__fetch_global_Serial1v+0x44>)
   b6b6a:	f000 fc2b 	bl	b73c4 <atexit>
    return serial1;
}
   b6b6e:	4802      	ldr	r0, [pc, #8]	; (b6b78 <_Z22__fetch_global_Serial1v+0x40>)
   b6b70:	b007      	add	sp, #28
   b6b72:	bd30      	pop	{r4, r5, pc}
   b6b74:	2003e744 	.word	0x2003e744
   b6b78:	2003e748 	.word	0x2003e748
   b6b7c:	000b6b01 	.word	0x000b6b01

000b6b80 <_ZnwjRKSt9nothrow_t>:
   b6b80:	f7fd ba89 	b.w	b4096 <_Znwj>

000b6b84 <_ZnajRKSt9nothrow_t>:
   b6b84:	f7fd ba89 	b.w	b409a <_Znaj>

000b6b88 <__aeabi_drsub>:
   b6b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6b8c:	e002      	b.n	b6b94 <__adddf3>
   b6b8e:	bf00      	nop

000b6b90 <__aeabi_dsub>:
   b6b90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6b94 <__adddf3>:
   b6b94:	b530      	push	{r4, r5, lr}
   b6b96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6b9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6b9e:	ea94 0f05 	teq	r4, r5
   b6ba2:	bf08      	it	eq
   b6ba4:	ea90 0f02 	teqeq	r0, r2
   b6ba8:	bf1f      	itttt	ne
   b6baa:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6bae:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6bb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6bb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6bba:	f000 80e2 	beq.w	b6d82 <__adddf3+0x1ee>
   b6bbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6bc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6bc6:	bfb8      	it	lt
   b6bc8:	426d      	neglt	r5, r5
   b6bca:	dd0c      	ble.n	b6be6 <__adddf3+0x52>
   b6bcc:	442c      	add	r4, r5
   b6bce:	ea80 0202 	eor.w	r2, r0, r2
   b6bd2:	ea81 0303 	eor.w	r3, r1, r3
   b6bd6:	ea82 0000 	eor.w	r0, r2, r0
   b6bda:	ea83 0101 	eor.w	r1, r3, r1
   b6bde:	ea80 0202 	eor.w	r2, r0, r2
   b6be2:	ea81 0303 	eor.w	r3, r1, r3
   b6be6:	2d36      	cmp	r5, #54	; 0x36
   b6be8:	bf88      	it	hi
   b6bea:	bd30      	pophi	{r4, r5, pc}
   b6bec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6bf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6bf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6bfc:	d002      	beq.n	b6c04 <__adddf3+0x70>
   b6bfe:	4240      	negs	r0, r0
   b6c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6c08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6c0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6c10:	d002      	beq.n	b6c18 <__adddf3+0x84>
   b6c12:	4252      	negs	r2, r2
   b6c14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6c18:	ea94 0f05 	teq	r4, r5
   b6c1c:	f000 80a7 	beq.w	b6d6e <__adddf3+0x1da>
   b6c20:	f1a4 0401 	sub.w	r4, r4, #1
   b6c24:	f1d5 0e20 	rsbs	lr, r5, #32
   b6c28:	db0d      	blt.n	b6c46 <__adddf3+0xb2>
   b6c2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6c2e:	fa22 f205 	lsr.w	r2, r2, r5
   b6c32:	1880      	adds	r0, r0, r2
   b6c34:	f141 0100 	adc.w	r1, r1, #0
   b6c38:	fa03 f20e 	lsl.w	r2, r3, lr
   b6c3c:	1880      	adds	r0, r0, r2
   b6c3e:	fa43 f305 	asr.w	r3, r3, r5
   b6c42:	4159      	adcs	r1, r3
   b6c44:	e00e      	b.n	b6c64 <__adddf3+0xd0>
   b6c46:	f1a5 0520 	sub.w	r5, r5, #32
   b6c4a:	f10e 0e20 	add.w	lr, lr, #32
   b6c4e:	2a01      	cmp	r2, #1
   b6c50:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6c54:	bf28      	it	cs
   b6c56:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6c5a:	fa43 f305 	asr.w	r3, r3, r5
   b6c5e:	18c0      	adds	r0, r0, r3
   b6c60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6c68:	d507      	bpl.n	b6c7a <__adddf3+0xe6>
   b6c6a:	f04f 0e00 	mov.w	lr, #0
   b6c6e:	f1dc 0c00 	rsbs	ip, ip, #0
   b6c72:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6c76:	eb6e 0101 	sbc.w	r1, lr, r1
   b6c7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6c7e:	d31b      	bcc.n	b6cb8 <__adddf3+0x124>
   b6c80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6c84:	d30c      	bcc.n	b6ca0 <__adddf3+0x10c>
   b6c86:	0849      	lsrs	r1, r1, #1
   b6c88:	ea5f 0030 	movs.w	r0, r0, rrx
   b6c8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6c90:	f104 0401 	add.w	r4, r4, #1
   b6c94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6c98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6c9c:	f080 809a 	bcs.w	b6dd4 <__adddf3+0x240>
   b6ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6ca4:	bf08      	it	eq
   b6ca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6caa:	f150 0000 	adcs.w	r0, r0, #0
   b6cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6cb2:	ea41 0105 	orr.w	r1, r1, r5
   b6cb6:	bd30      	pop	{r4, r5, pc}
   b6cb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6cbc:	4140      	adcs	r0, r0
   b6cbe:	eb41 0101 	adc.w	r1, r1, r1
   b6cc2:	3c01      	subs	r4, #1
   b6cc4:	bf28      	it	cs
   b6cc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6cca:	d2e9      	bcs.n	b6ca0 <__adddf3+0x10c>
   b6ccc:	f091 0f00 	teq	r1, #0
   b6cd0:	bf04      	itt	eq
   b6cd2:	4601      	moveq	r1, r0
   b6cd4:	2000      	moveq	r0, #0
   b6cd6:	fab1 f381 	clz	r3, r1
   b6cda:	bf08      	it	eq
   b6cdc:	3320      	addeq	r3, #32
   b6cde:	f1a3 030b 	sub.w	r3, r3, #11
   b6ce2:	f1b3 0220 	subs.w	r2, r3, #32
   b6ce6:	da0c      	bge.n	b6d02 <__adddf3+0x16e>
   b6ce8:	320c      	adds	r2, #12
   b6cea:	dd08      	ble.n	b6cfe <__adddf3+0x16a>
   b6cec:	f102 0c14 	add.w	ip, r2, #20
   b6cf0:	f1c2 020c 	rsb	r2, r2, #12
   b6cf4:	fa01 f00c 	lsl.w	r0, r1, ip
   b6cf8:	fa21 f102 	lsr.w	r1, r1, r2
   b6cfc:	e00c      	b.n	b6d18 <__adddf3+0x184>
   b6cfe:	f102 0214 	add.w	r2, r2, #20
   b6d02:	bfd8      	it	le
   b6d04:	f1c2 0c20 	rsble	ip, r2, #32
   b6d08:	fa01 f102 	lsl.w	r1, r1, r2
   b6d0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6d10:	bfdc      	itt	le
   b6d12:	ea41 010c 	orrle.w	r1, r1, ip
   b6d16:	4090      	lslle	r0, r2
   b6d18:	1ae4      	subs	r4, r4, r3
   b6d1a:	bfa2      	ittt	ge
   b6d1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6d20:	4329      	orrge	r1, r5
   b6d22:	bd30      	popge	{r4, r5, pc}
   b6d24:	ea6f 0404 	mvn.w	r4, r4
   b6d28:	3c1f      	subs	r4, #31
   b6d2a:	da1c      	bge.n	b6d66 <__adddf3+0x1d2>
   b6d2c:	340c      	adds	r4, #12
   b6d2e:	dc0e      	bgt.n	b6d4e <__adddf3+0x1ba>
   b6d30:	f104 0414 	add.w	r4, r4, #20
   b6d34:	f1c4 0220 	rsb	r2, r4, #32
   b6d38:	fa20 f004 	lsr.w	r0, r0, r4
   b6d3c:	fa01 f302 	lsl.w	r3, r1, r2
   b6d40:	ea40 0003 	orr.w	r0, r0, r3
   b6d44:	fa21 f304 	lsr.w	r3, r1, r4
   b6d48:	ea45 0103 	orr.w	r1, r5, r3
   b6d4c:	bd30      	pop	{r4, r5, pc}
   b6d4e:	f1c4 040c 	rsb	r4, r4, #12
   b6d52:	f1c4 0220 	rsb	r2, r4, #32
   b6d56:	fa20 f002 	lsr.w	r0, r0, r2
   b6d5a:	fa01 f304 	lsl.w	r3, r1, r4
   b6d5e:	ea40 0003 	orr.w	r0, r0, r3
   b6d62:	4629      	mov	r1, r5
   b6d64:	bd30      	pop	{r4, r5, pc}
   b6d66:	fa21 f004 	lsr.w	r0, r1, r4
   b6d6a:	4629      	mov	r1, r5
   b6d6c:	bd30      	pop	{r4, r5, pc}
   b6d6e:	f094 0f00 	teq	r4, #0
   b6d72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6d76:	bf06      	itte	eq
   b6d78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6d7c:	3401      	addeq	r4, #1
   b6d7e:	3d01      	subne	r5, #1
   b6d80:	e74e      	b.n	b6c20 <__adddf3+0x8c>
   b6d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6d86:	bf18      	it	ne
   b6d88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6d8c:	d029      	beq.n	b6de2 <__adddf3+0x24e>
   b6d8e:	ea94 0f05 	teq	r4, r5
   b6d92:	bf08      	it	eq
   b6d94:	ea90 0f02 	teqeq	r0, r2
   b6d98:	d005      	beq.n	b6da6 <__adddf3+0x212>
   b6d9a:	ea54 0c00 	orrs.w	ip, r4, r0
   b6d9e:	bf04      	itt	eq
   b6da0:	4619      	moveq	r1, r3
   b6da2:	4610      	moveq	r0, r2
   b6da4:	bd30      	pop	{r4, r5, pc}
   b6da6:	ea91 0f03 	teq	r1, r3
   b6daa:	bf1e      	ittt	ne
   b6dac:	2100      	movne	r1, #0
   b6dae:	2000      	movne	r0, #0
   b6db0:	bd30      	popne	{r4, r5, pc}
   b6db2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6db6:	d105      	bne.n	b6dc4 <__adddf3+0x230>
   b6db8:	0040      	lsls	r0, r0, #1
   b6dba:	4149      	adcs	r1, r1
   b6dbc:	bf28      	it	cs
   b6dbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6dc2:	bd30      	pop	{r4, r5, pc}
   b6dc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6dc8:	bf3c      	itt	cc
   b6dca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6dce:	bd30      	popcc	{r4, r5, pc}
   b6dd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6dd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6ddc:	f04f 0000 	mov.w	r0, #0
   b6de0:	bd30      	pop	{r4, r5, pc}
   b6de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6de6:	bf1a      	itte	ne
   b6de8:	4619      	movne	r1, r3
   b6dea:	4610      	movne	r0, r2
   b6dec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6df0:	bf1c      	itt	ne
   b6df2:	460b      	movne	r3, r1
   b6df4:	4602      	movne	r2, r0
   b6df6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6dfa:	bf06      	itte	eq
   b6dfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6e00:	ea91 0f03 	teqeq	r1, r3
   b6e04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6e08:	bd30      	pop	{r4, r5, pc}
   b6e0a:	bf00      	nop

000b6e0c <__aeabi_ui2d>:
   b6e0c:	f090 0f00 	teq	r0, #0
   b6e10:	bf04      	itt	eq
   b6e12:	2100      	moveq	r1, #0
   b6e14:	4770      	bxeq	lr
   b6e16:	b530      	push	{r4, r5, lr}
   b6e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6e20:	f04f 0500 	mov.w	r5, #0
   b6e24:	f04f 0100 	mov.w	r1, #0
   b6e28:	e750      	b.n	b6ccc <__adddf3+0x138>
   b6e2a:	bf00      	nop

000b6e2c <__aeabi_i2d>:
   b6e2c:	f090 0f00 	teq	r0, #0
   b6e30:	bf04      	itt	eq
   b6e32:	2100      	moveq	r1, #0
   b6e34:	4770      	bxeq	lr
   b6e36:	b530      	push	{r4, r5, lr}
   b6e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6e40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6e44:	bf48      	it	mi
   b6e46:	4240      	negmi	r0, r0
   b6e48:	f04f 0100 	mov.w	r1, #0
   b6e4c:	e73e      	b.n	b6ccc <__adddf3+0x138>
   b6e4e:	bf00      	nop

000b6e50 <__aeabi_f2d>:
   b6e50:	0042      	lsls	r2, r0, #1
   b6e52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6e56:	ea4f 0131 	mov.w	r1, r1, rrx
   b6e5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6e5e:	bf1f      	itttt	ne
   b6e60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6e64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6e68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6e6c:	4770      	bxne	lr
   b6e6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6e72:	bf08      	it	eq
   b6e74:	4770      	bxeq	lr
   b6e76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6e7a:	bf04      	itt	eq
   b6e7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6e80:	4770      	bxeq	lr
   b6e82:	b530      	push	{r4, r5, lr}
   b6e84:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6e8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6e90:	e71c      	b.n	b6ccc <__adddf3+0x138>
   b6e92:	bf00      	nop

000b6e94 <__aeabi_ul2d>:
   b6e94:	ea50 0201 	orrs.w	r2, r0, r1
   b6e98:	bf08      	it	eq
   b6e9a:	4770      	bxeq	lr
   b6e9c:	b530      	push	{r4, r5, lr}
   b6e9e:	f04f 0500 	mov.w	r5, #0
   b6ea2:	e00a      	b.n	b6eba <__aeabi_l2d+0x16>

000b6ea4 <__aeabi_l2d>:
   b6ea4:	ea50 0201 	orrs.w	r2, r0, r1
   b6ea8:	bf08      	it	eq
   b6eaa:	4770      	bxeq	lr
   b6eac:	b530      	push	{r4, r5, lr}
   b6eae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6eb2:	d502      	bpl.n	b6eba <__aeabi_l2d+0x16>
   b6eb4:	4240      	negs	r0, r0
   b6eb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6eba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ebe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ec2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6ec6:	f43f aed8 	beq.w	b6c7a <__adddf3+0xe6>
   b6eca:	f04f 0203 	mov.w	r2, #3
   b6ece:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6ed2:	bf18      	it	ne
   b6ed4:	3203      	addne	r2, #3
   b6ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6eda:	bf18      	it	ne
   b6edc:	3203      	addne	r2, #3
   b6ede:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6ee2:	f1c2 0320 	rsb	r3, r2, #32
   b6ee6:	fa00 fc03 	lsl.w	ip, r0, r3
   b6eea:	fa20 f002 	lsr.w	r0, r0, r2
   b6eee:	fa01 fe03 	lsl.w	lr, r1, r3
   b6ef2:	ea40 000e 	orr.w	r0, r0, lr
   b6ef6:	fa21 f102 	lsr.w	r1, r1, r2
   b6efa:	4414      	add	r4, r2
   b6efc:	e6bd      	b.n	b6c7a <__adddf3+0xe6>
   b6efe:	bf00      	nop

000b6f00 <__aeabi_dmul>:
   b6f00:	b570      	push	{r4, r5, r6, lr}
   b6f02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6f06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6f0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6f0e:	bf1d      	ittte	ne
   b6f10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6f14:	ea94 0f0c 	teqne	r4, ip
   b6f18:	ea95 0f0c 	teqne	r5, ip
   b6f1c:	f000 f8de 	bleq	b70dc <__aeabi_dmul+0x1dc>
   b6f20:	442c      	add	r4, r5
   b6f22:	ea81 0603 	eor.w	r6, r1, r3
   b6f26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6f2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6f2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6f32:	bf18      	it	ne
   b6f34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6f38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6f40:	d038      	beq.n	b6fb4 <__aeabi_dmul+0xb4>
   b6f42:	fba0 ce02 	umull	ip, lr, r0, r2
   b6f46:	f04f 0500 	mov.w	r5, #0
   b6f4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6f4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6f52:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6f56:	f04f 0600 	mov.w	r6, #0
   b6f5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6f5e:	f09c 0f00 	teq	ip, #0
   b6f62:	bf18      	it	ne
   b6f64:	f04e 0e01 	orrne.w	lr, lr, #1
   b6f68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6f6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6f70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6f74:	d204      	bcs.n	b6f80 <__aeabi_dmul+0x80>
   b6f76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6f7a:	416d      	adcs	r5, r5
   b6f7c:	eb46 0606 	adc.w	r6, r6, r6
   b6f80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6f84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6f88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6f8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6f90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6f94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6f98:	bf88      	it	hi
   b6f9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6f9e:	d81e      	bhi.n	b6fde <__aeabi_dmul+0xde>
   b6fa0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6fa4:	bf08      	it	eq
   b6fa6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6faa:	f150 0000 	adcs.w	r0, r0, #0
   b6fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6fb2:	bd70      	pop	{r4, r5, r6, pc}
   b6fb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6fb8:	ea46 0101 	orr.w	r1, r6, r1
   b6fbc:	ea40 0002 	orr.w	r0, r0, r2
   b6fc0:	ea81 0103 	eor.w	r1, r1, r3
   b6fc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6fc8:	bfc2      	ittt	gt
   b6fca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6fd2:	bd70      	popgt	{r4, r5, r6, pc}
   b6fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6fd8:	f04f 0e00 	mov.w	lr, #0
   b6fdc:	3c01      	subs	r4, #1
   b6fde:	f300 80ab 	bgt.w	b7138 <__aeabi_dmul+0x238>
   b6fe2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6fe6:	bfde      	ittt	le
   b6fe8:	2000      	movle	r0, #0
   b6fea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6fee:	bd70      	pople	{r4, r5, r6, pc}
   b6ff0:	f1c4 0400 	rsb	r4, r4, #0
   b6ff4:	3c20      	subs	r4, #32
   b6ff6:	da35      	bge.n	b7064 <__aeabi_dmul+0x164>
   b6ff8:	340c      	adds	r4, #12
   b6ffa:	dc1b      	bgt.n	b7034 <__aeabi_dmul+0x134>
   b6ffc:	f104 0414 	add.w	r4, r4, #20
   b7000:	f1c4 0520 	rsb	r5, r4, #32
   b7004:	fa00 f305 	lsl.w	r3, r0, r5
   b7008:	fa20 f004 	lsr.w	r0, r0, r4
   b700c:	fa01 f205 	lsl.w	r2, r1, r5
   b7010:	ea40 0002 	orr.w	r0, r0, r2
   b7014:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b701c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7020:	fa21 f604 	lsr.w	r6, r1, r4
   b7024:	eb42 0106 	adc.w	r1, r2, r6
   b7028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b702c:	bf08      	it	eq
   b702e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7032:	bd70      	pop	{r4, r5, r6, pc}
   b7034:	f1c4 040c 	rsb	r4, r4, #12
   b7038:	f1c4 0520 	rsb	r5, r4, #32
   b703c:	fa00 f304 	lsl.w	r3, r0, r4
   b7040:	fa20 f005 	lsr.w	r0, r0, r5
   b7044:	fa01 f204 	lsl.w	r2, r1, r4
   b7048:	ea40 0002 	orr.w	r0, r0, r2
   b704c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7054:	f141 0100 	adc.w	r1, r1, #0
   b7058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b705c:	bf08      	it	eq
   b705e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7062:	bd70      	pop	{r4, r5, r6, pc}
   b7064:	f1c4 0520 	rsb	r5, r4, #32
   b7068:	fa00 f205 	lsl.w	r2, r0, r5
   b706c:	ea4e 0e02 	orr.w	lr, lr, r2
   b7070:	fa20 f304 	lsr.w	r3, r0, r4
   b7074:	fa01 f205 	lsl.w	r2, r1, r5
   b7078:	ea43 0302 	orr.w	r3, r3, r2
   b707c:	fa21 f004 	lsr.w	r0, r1, r4
   b7080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7084:	fa21 f204 	lsr.w	r2, r1, r4
   b7088:	ea20 0002 	bic.w	r0, r0, r2
   b708c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7094:	bf08      	it	eq
   b7096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b709a:	bd70      	pop	{r4, r5, r6, pc}
   b709c:	f094 0f00 	teq	r4, #0
   b70a0:	d10f      	bne.n	b70c2 <__aeabi_dmul+0x1c2>
   b70a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b70a6:	0040      	lsls	r0, r0, #1
   b70a8:	eb41 0101 	adc.w	r1, r1, r1
   b70ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b70b0:	bf08      	it	eq
   b70b2:	3c01      	subeq	r4, #1
   b70b4:	d0f7      	beq.n	b70a6 <__aeabi_dmul+0x1a6>
   b70b6:	ea41 0106 	orr.w	r1, r1, r6
   b70ba:	f095 0f00 	teq	r5, #0
   b70be:	bf18      	it	ne
   b70c0:	4770      	bxne	lr
   b70c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b70c6:	0052      	lsls	r2, r2, #1
   b70c8:	eb43 0303 	adc.w	r3, r3, r3
   b70cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b70d0:	bf08      	it	eq
   b70d2:	3d01      	subeq	r5, #1
   b70d4:	d0f7      	beq.n	b70c6 <__aeabi_dmul+0x1c6>
   b70d6:	ea43 0306 	orr.w	r3, r3, r6
   b70da:	4770      	bx	lr
   b70dc:	ea94 0f0c 	teq	r4, ip
   b70e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b70e4:	bf18      	it	ne
   b70e6:	ea95 0f0c 	teqne	r5, ip
   b70ea:	d00c      	beq.n	b7106 <__aeabi_dmul+0x206>
   b70ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b70f0:	bf18      	it	ne
   b70f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b70f6:	d1d1      	bne.n	b709c <__aeabi_dmul+0x19c>
   b70f8:	ea81 0103 	eor.w	r1, r1, r3
   b70fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7100:	f04f 0000 	mov.w	r0, #0
   b7104:	bd70      	pop	{r4, r5, r6, pc}
   b7106:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b710a:	bf06      	itte	eq
   b710c:	4610      	moveq	r0, r2
   b710e:	4619      	moveq	r1, r3
   b7110:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7114:	d019      	beq.n	b714a <__aeabi_dmul+0x24a>
   b7116:	ea94 0f0c 	teq	r4, ip
   b711a:	d102      	bne.n	b7122 <__aeabi_dmul+0x222>
   b711c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7120:	d113      	bne.n	b714a <__aeabi_dmul+0x24a>
   b7122:	ea95 0f0c 	teq	r5, ip
   b7126:	d105      	bne.n	b7134 <__aeabi_dmul+0x234>
   b7128:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b712c:	bf1c      	itt	ne
   b712e:	4610      	movne	r0, r2
   b7130:	4619      	movne	r1, r3
   b7132:	d10a      	bne.n	b714a <__aeabi_dmul+0x24a>
   b7134:	ea81 0103 	eor.w	r1, r1, r3
   b7138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b713c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7140:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7144:	f04f 0000 	mov.w	r0, #0
   b7148:	bd70      	pop	{r4, r5, r6, pc}
   b714a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b714e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7152:	bd70      	pop	{r4, r5, r6, pc}

000b7154 <__aeabi_ddiv>:
   b7154:	b570      	push	{r4, r5, r6, lr}
   b7156:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b715a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b715e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7162:	bf1d      	ittte	ne
   b7164:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7168:	ea94 0f0c 	teqne	r4, ip
   b716c:	ea95 0f0c 	teqne	r5, ip
   b7170:	f000 f8a7 	bleq	b72c2 <__aeabi_ddiv+0x16e>
   b7174:	eba4 0405 	sub.w	r4, r4, r5
   b7178:	ea81 0e03 	eor.w	lr, r1, r3
   b717c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7180:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7184:	f000 8088 	beq.w	b7298 <__aeabi_ddiv+0x144>
   b7188:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b718c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7190:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7194:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7198:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b719c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b71a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b71a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b71a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b71ac:	429d      	cmp	r5, r3
   b71ae:	bf08      	it	eq
   b71b0:	4296      	cmpeq	r6, r2
   b71b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b71b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b71ba:	d202      	bcs.n	b71c2 <__aeabi_ddiv+0x6e>
   b71bc:	085b      	lsrs	r3, r3, #1
   b71be:	ea4f 0232 	mov.w	r2, r2, rrx
   b71c2:	1ab6      	subs	r6, r6, r2
   b71c4:	eb65 0503 	sbc.w	r5, r5, r3
   b71c8:	085b      	lsrs	r3, r3, #1
   b71ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b71ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b71d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b71d6:	ebb6 0e02 	subs.w	lr, r6, r2
   b71da:	eb75 0e03 	sbcs.w	lr, r5, r3
   b71de:	bf22      	ittt	cs
   b71e0:	1ab6      	subcs	r6, r6, r2
   b71e2:	4675      	movcs	r5, lr
   b71e4:	ea40 000c 	orrcs.w	r0, r0, ip
   b71e8:	085b      	lsrs	r3, r3, #1
   b71ea:	ea4f 0232 	mov.w	r2, r2, rrx
   b71ee:	ebb6 0e02 	subs.w	lr, r6, r2
   b71f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b71f6:	bf22      	ittt	cs
   b71f8:	1ab6      	subcs	r6, r6, r2
   b71fa:	4675      	movcs	r5, lr
   b71fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7200:	085b      	lsrs	r3, r3, #1
   b7202:	ea4f 0232 	mov.w	r2, r2, rrx
   b7206:	ebb6 0e02 	subs.w	lr, r6, r2
   b720a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b720e:	bf22      	ittt	cs
   b7210:	1ab6      	subcs	r6, r6, r2
   b7212:	4675      	movcs	r5, lr
   b7214:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7218:	085b      	lsrs	r3, r3, #1
   b721a:	ea4f 0232 	mov.w	r2, r2, rrx
   b721e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7222:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7226:	bf22      	ittt	cs
   b7228:	1ab6      	subcs	r6, r6, r2
   b722a:	4675      	movcs	r5, lr
   b722c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7230:	ea55 0e06 	orrs.w	lr, r5, r6
   b7234:	d018      	beq.n	b7268 <__aeabi_ddiv+0x114>
   b7236:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b723a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b723e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7242:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7246:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b724a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b724e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7252:	d1c0      	bne.n	b71d6 <__aeabi_ddiv+0x82>
   b7254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7258:	d10b      	bne.n	b7272 <__aeabi_ddiv+0x11e>
   b725a:	ea41 0100 	orr.w	r1, r1, r0
   b725e:	f04f 0000 	mov.w	r0, #0
   b7262:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7266:	e7b6      	b.n	b71d6 <__aeabi_ddiv+0x82>
   b7268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b726c:	bf04      	itt	eq
   b726e:	4301      	orreq	r1, r0
   b7270:	2000      	moveq	r0, #0
   b7272:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7276:	bf88      	it	hi
   b7278:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b727c:	f63f aeaf 	bhi.w	b6fde <__aeabi_dmul+0xde>
   b7280:	ebb5 0c03 	subs.w	ip, r5, r3
   b7284:	bf04      	itt	eq
   b7286:	ebb6 0c02 	subseq.w	ip, r6, r2
   b728a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b728e:	f150 0000 	adcs.w	r0, r0, #0
   b7292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7296:	bd70      	pop	{r4, r5, r6, pc}
   b7298:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b729c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b72a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b72a4:	bfc2      	ittt	gt
   b72a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b72aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b72ae:	bd70      	popgt	{r4, r5, r6, pc}
   b72b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72b4:	f04f 0e00 	mov.w	lr, #0
   b72b8:	3c01      	subs	r4, #1
   b72ba:	e690      	b.n	b6fde <__aeabi_dmul+0xde>
   b72bc:	ea45 0e06 	orr.w	lr, r5, r6
   b72c0:	e68d      	b.n	b6fde <__aeabi_dmul+0xde>
   b72c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b72c6:	ea94 0f0c 	teq	r4, ip
   b72ca:	bf08      	it	eq
   b72cc:	ea95 0f0c 	teqeq	r5, ip
   b72d0:	f43f af3b 	beq.w	b714a <__aeabi_dmul+0x24a>
   b72d4:	ea94 0f0c 	teq	r4, ip
   b72d8:	d10a      	bne.n	b72f0 <__aeabi_ddiv+0x19c>
   b72da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b72de:	f47f af34 	bne.w	b714a <__aeabi_dmul+0x24a>
   b72e2:	ea95 0f0c 	teq	r5, ip
   b72e6:	f47f af25 	bne.w	b7134 <__aeabi_dmul+0x234>
   b72ea:	4610      	mov	r0, r2
   b72ec:	4619      	mov	r1, r3
   b72ee:	e72c      	b.n	b714a <__aeabi_dmul+0x24a>
   b72f0:	ea95 0f0c 	teq	r5, ip
   b72f4:	d106      	bne.n	b7304 <__aeabi_ddiv+0x1b0>
   b72f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b72fa:	f43f aefd 	beq.w	b70f8 <__aeabi_dmul+0x1f8>
   b72fe:	4610      	mov	r0, r2
   b7300:	4619      	mov	r1, r3
   b7302:	e722      	b.n	b714a <__aeabi_dmul+0x24a>
   b7304:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7308:	bf18      	it	ne
   b730a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b730e:	f47f aec5 	bne.w	b709c <__aeabi_dmul+0x19c>
   b7312:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7316:	f47f af0d 	bne.w	b7134 <__aeabi_dmul+0x234>
   b731a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b731e:	f47f aeeb 	bne.w	b70f8 <__aeabi_dmul+0x1f8>
   b7322:	e712      	b.n	b714a <__aeabi_dmul+0x24a>

000b7324 <__aeabi_d2f>:
   b7324:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7328:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b732c:	bf24      	itt	cs
   b732e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7332:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7336:	d90d      	bls.n	b7354 <__aeabi_d2f+0x30>
   b7338:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b733c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7340:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7344:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7348:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b734c:	bf08      	it	eq
   b734e:	f020 0001 	biceq.w	r0, r0, #1
   b7352:	4770      	bx	lr
   b7354:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7358:	d121      	bne.n	b739e <__aeabi_d2f+0x7a>
   b735a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b735e:	bfbc      	itt	lt
   b7360:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7364:	4770      	bxlt	lr
   b7366:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b736a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b736e:	f1c2 0218 	rsb	r2, r2, #24
   b7372:	f1c2 0c20 	rsb	ip, r2, #32
   b7376:	fa10 f30c 	lsls.w	r3, r0, ip
   b737a:	fa20 f002 	lsr.w	r0, r0, r2
   b737e:	bf18      	it	ne
   b7380:	f040 0001 	orrne.w	r0, r0, #1
   b7384:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7388:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b738c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7390:	ea40 000c 	orr.w	r0, r0, ip
   b7394:	fa23 f302 	lsr.w	r3, r3, r2
   b7398:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b739c:	e7cc      	b.n	b7338 <__aeabi_d2f+0x14>
   b739e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b73a2:	d107      	bne.n	b73b4 <__aeabi_d2f+0x90>
   b73a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b73a8:	bf1e      	ittt	ne
   b73aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b73ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b73b2:	4770      	bxne	lr
   b73b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b73b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b73bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b73c0:	4770      	bx	lr
   b73c2:	bf00      	nop

000b73c4 <atexit>:
   b73c4:	2300      	movs	r3, #0
   b73c6:	4601      	mov	r1, r0
   b73c8:	461a      	mov	r2, r3
   b73ca:	4618      	mov	r0, r3
   b73cc:	f000 b94c 	b.w	b7668 <__register_exitproc>

000b73d0 <isprint>:
   b73d0:	4b02      	ldr	r3, [pc, #8]	; (b73dc <isprint+0xc>)
   b73d2:	4418      	add	r0, r3
   b73d4:	7840      	ldrb	r0, [r0, #1]
   b73d6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b73da:	4770      	bx	lr
   b73dc:	000b7c59 	.word	0x000b7c59

000b73e0 <memcpy>:
   b73e0:	440a      	add	r2, r1
   b73e2:	4291      	cmp	r1, r2
   b73e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b73e8:	d100      	bne.n	b73ec <memcpy+0xc>
   b73ea:	4770      	bx	lr
   b73ec:	b510      	push	{r4, lr}
   b73ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b73f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b73f6:	4291      	cmp	r1, r2
   b73f8:	d1f9      	bne.n	b73ee <memcpy+0xe>
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <memmove>:
   b73fc:	4288      	cmp	r0, r1
   b73fe:	b510      	push	{r4, lr}
   b7400:	eb01 0402 	add.w	r4, r1, r2
   b7404:	d902      	bls.n	b740c <memmove+0x10>
   b7406:	4284      	cmp	r4, r0
   b7408:	4623      	mov	r3, r4
   b740a:	d807      	bhi.n	b741c <memmove+0x20>
   b740c:	1e43      	subs	r3, r0, #1
   b740e:	42a1      	cmp	r1, r4
   b7410:	d008      	beq.n	b7424 <memmove+0x28>
   b7412:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7416:	f803 2f01 	strb.w	r2, [r3, #1]!
   b741a:	e7f8      	b.n	b740e <memmove+0x12>
   b741c:	4402      	add	r2, r0
   b741e:	4601      	mov	r1, r0
   b7420:	428a      	cmp	r2, r1
   b7422:	d100      	bne.n	b7426 <memmove+0x2a>
   b7424:	bd10      	pop	{r4, pc}
   b7426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b742a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b742e:	e7f7      	b.n	b7420 <memmove+0x24>

000b7430 <memset>:
   b7430:	4402      	add	r2, r0
   b7432:	4603      	mov	r3, r0
   b7434:	4293      	cmp	r3, r2
   b7436:	d100      	bne.n	b743a <memset+0xa>
   b7438:	4770      	bx	lr
   b743a:	f803 1b01 	strb.w	r1, [r3], #1
   b743e:	e7f9      	b.n	b7434 <memset+0x4>

000b7440 <srand>:
   b7440:	b538      	push	{r3, r4, r5, lr}
   b7442:	4b10      	ldr	r3, [pc, #64]	; (b7484 <srand+0x44>)
   b7444:	681d      	ldr	r5, [r3, #0]
   b7446:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7448:	4604      	mov	r4, r0
   b744a:	b9b3      	cbnz	r3, b747a <srand+0x3a>
   b744c:	2018      	movs	r0, #24
   b744e:	f7fd fc1b 	bl	b4c88 <malloc>
   b7452:	4602      	mov	r2, r0
   b7454:	63a8      	str	r0, [r5, #56]	; 0x38
   b7456:	b920      	cbnz	r0, b7462 <srand+0x22>
   b7458:	4b0b      	ldr	r3, [pc, #44]	; (b7488 <srand+0x48>)
   b745a:	480c      	ldr	r0, [pc, #48]	; (b748c <srand+0x4c>)
   b745c:	2142      	movs	r1, #66	; 0x42
   b745e:	f7fd fc3b 	bl	b4cd8 <__assert_func>
   b7462:	490b      	ldr	r1, [pc, #44]	; (b7490 <srand+0x50>)
   b7464:	4b0b      	ldr	r3, [pc, #44]	; (b7494 <srand+0x54>)
   b7466:	e9c0 1300 	strd	r1, r3, [r0]
   b746a:	4b0b      	ldr	r3, [pc, #44]	; (b7498 <srand+0x58>)
   b746c:	6083      	str	r3, [r0, #8]
   b746e:	230b      	movs	r3, #11
   b7470:	8183      	strh	r3, [r0, #12]
   b7472:	2100      	movs	r1, #0
   b7474:	2001      	movs	r0, #1
   b7476:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b747a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b747c:	2200      	movs	r2, #0
   b747e:	611c      	str	r4, [r3, #16]
   b7480:	615a      	str	r2, [r3, #20]
   b7482:	bd38      	pop	{r3, r4, r5, pc}
   b7484:	2003e5b8 	.word	0x2003e5b8
   b7488:	000b7be9 	.word	0x000b7be9
   b748c:	000b7c00 	.word	0x000b7c00
   b7490:	abcd330e 	.word	0xabcd330e
   b7494:	e66d1234 	.word	0xe66d1234
   b7498:	0005deec 	.word	0x0005deec

000b749c <strchr>:
   b749c:	b2c9      	uxtb	r1, r1
   b749e:	4603      	mov	r3, r0
   b74a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b74a4:	b11a      	cbz	r2, b74ae <strchr+0x12>
   b74a6:	428a      	cmp	r2, r1
   b74a8:	d1f9      	bne.n	b749e <strchr+0x2>
   b74aa:	4618      	mov	r0, r3
   b74ac:	4770      	bx	lr
   b74ae:	2900      	cmp	r1, #0
   b74b0:	bf18      	it	ne
   b74b2:	2300      	movne	r3, #0
   b74b4:	e7f9      	b.n	b74aa <strchr+0xe>

000b74b6 <strchrnul>:
   b74b6:	b510      	push	{r4, lr}
   b74b8:	4604      	mov	r4, r0
   b74ba:	f7ff ffef 	bl	b749c <strchr>
   b74be:	b918      	cbnz	r0, b74c8 <strchrnul+0x12>
   b74c0:	4620      	mov	r0, r4
   b74c2:	f000 f814 	bl	b74ee <strlen>
   b74c6:	4420      	add	r0, r4
   b74c8:	bd10      	pop	{r4, pc}

000b74ca <strcmp>:
   b74ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   b74ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   b74d2:	2a01      	cmp	r2, #1
   b74d4:	bf28      	it	cs
   b74d6:	429a      	cmpcs	r2, r3
   b74d8:	d0f7      	beq.n	b74ca <strcmp>
   b74da:	1ad0      	subs	r0, r2, r3
   b74dc:	4770      	bx	lr

000b74de <strcpy>:
   b74de:	4603      	mov	r3, r0
   b74e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b74e4:	f803 2b01 	strb.w	r2, [r3], #1
   b74e8:	2a00      	cmp	r2, #0
   b74ea:	d1f9      	bne.n	b74e0 <strcpy+0x2>
   b74ec:	4770      	bx	lr

000b74ee <strlen>:
   b74ee:	4603      	mov	r3, r0
   b74f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b74f4:	2a00      	cmp	r2, #0
   b74f6:	d1fb      	bne.n	b74f0 <strlen+0x2>
   b74f8:	1a18      	subs	r0, r3, r0
   b74fa:	3801      	subs	r0, #1
   b74fc:	4770      	bx	lr

000b74fe <strncmp>:
   b74fe:	b510      	push	{r4, lr}
   b7500:	b17a      	cbz	r2, b7522 <strncmp+0x24>
   b7502:	4603      	mov	r3, r0
   b7504:	3901      	subs	r1, #1
   b7506:	1884      	adds	r4, r0, r2
   b7508:	f813 0b01 	ldrb.w	r0, [r3], #1
   b750c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7510:	4290      	cmp	r0, r2
   b7512:	d101      	bne.n	b7518 <strncmp+0x1a>
   b7514:	42a3      	cmp	r3, r4
   b7516:	d101      	bne.n	b751c <strncmp+0x1e>
   b7518:	1a80      	subs	r0, r0, r2
   b751a:	bd10      	pop	{r4, pc}
   b751c:	2800      	cmp	r0, #0
   b751e:	d1f3      	bne.n	b7508 <strncmp+0xa>
   b7520:	e7fa      	b.n	b7518 <strncmp+0x1a>
   b7522:	4610      	mov	r0, r2
   b7524:	e7f9      	b.n	b751a <strncmp+0x1c>

000b7526 <strrchr>:
   b7526:	b538      	push	{r3, r4, r5, lr}
   b7528:	4603      	mov	r3, r0
   b752a:	460c      	mov	r4, r1
   b752c:	b969      	cbnz	r1, b754a <strrchr+0x24>
   b752e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7532:	f7ff bfb3 	b.w	b749c <strchr>
   b7536:	1c43      	adds	r3, r0, #1
   b7538:	4605      	mov	r5, r0
   b753a:	4621      	mov	r1, r4
   b753c:	4618      	mov	r0, r3
   b753e:	f7ff ffad 	bl	b749c <strchr>
   b7542:	2800      	cmp	r0, #0
   b7544:	d1f7      	bne.n	b7536 <strrchr+0x10>
   b7546:	4628      	mov	r0, r5
   b7548:	bd38      	pop	{r3, r4, r5, pc}
   b754a:	2500      	movs	r5, #0
   b754c:	e7f5      	b.n	b753a <strrchr+0x14>
	...

000b7550 <_strtol_l.constprop.0>:
   b7550:	2b01      	cmp	r3, #1
   b7552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7556:	d001      	beq.n	b755c <_strtol_l.constprop.0+0xc>
   b7558:	2b24      	cmp	r3, #36	; 0x24
   b755a:	d906      	bls.n	b756a <_strtol_l.constprop.0+0x1a>
   b755c:	f7fd fbb4 	bl	b4cc8 <__errno>
   b7560:	2316      	movs	r3, #22
   b7562:	6003      	str	r3, [r0, #0]
   b7564:	2000      	movs	r0, #0
   b7566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b756a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7650 <_strtol_l.constprop.0+0x100>
   b756e:	460d      	mov	r5, r1
   b7570:	462e      	mov	r6, r5
   b7572:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7576:	f814 700c 	ldrb.w	r7, [r4, ip]
   b757a:	f017 0708 	ands.w	r7, r7, #8
   b757e:	d1f7      	bne.n	b7570 <_strtol_l.constprop.0+0x20>
   b7580:	2c2d      	cmp	r4, #45	; 0x2d
   b7582:	d132      	bne.n	b75ea <_strtol_l.constprop.0+0x9a>
   b7584:	782c      	ldrb	r4, [r5, #0]
   b7586:	2701      	movs	r7, #1
   b7588:	1cb5      	adds	r5, r6, #2
   b758a:	2b00      	cmp	r3, #0
   b758c:	d05b      	beq.n	b7646 <_strtol_l.constprop.0+0xf6>
   b758e:	2b10      	cmp	r3, #16
   b7590:	d109      	bne.n	b75a6 <_strtol_l.constprop.0+0x56>
   b7592:	2c30      	cmp	r4, #48	; 0x30
   b7594:	d107      	bne.n	b75a6 <_strtol_l.constprop.0+0x56>
   b7596:	782c      	ldrb	r4, [r5, #0]
   b7598:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b759c:	2c58      	cmp	r4, #88	; 0x58
   b759e:	d14d      	bne.n	b763c <_strtol_l.constprop.0+0xec>
   b75a0:	786c      	ldrb	r4, [r5, #1]
   b75a2:	2310      	movs	r3, #16
   b75a4:	3502      	adds	r5, #2
   b75a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b75aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b75ae:	f04f 0c00 	mov.w	ip, #0
   b75b2:	fbb8 f9f3 	udiv	r9, r8, r3
   b75b6:	4666      	mov	r6, ip
   b75b8:	fb03 8a19 	mls	sl, r3, r9, r8
   b75bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b75c0:	f1be 0f09 	cmp.w	lr, #9
   b75c4:	d816      	bhi.n	b75f4 <_strtol_l.constprop.0+0xa4>
   b75c6:	4674      	mov	r4, lr
   b75c8:	42a3      	cmp	r3, r4
   b75ca:	dd24      	ble.n	b7616 <_strtol_l.constprop.0+0xc6>
   b75cc:	f1bc 0f00 	cmp.w	ip, #0
   b75d0:	db1e      	blt.n	b7610 <_strtol_l.constprop.0+0xc0>
   b75d2:	45b1      	cmp	r9, r6
   b75d4:	d31c      	bcc.n	b7610 <_strtol_l.constprop.0+0xc0>
   b75d6:	d101      	bne.n	b75dc <_strtol_l.constprop.0+0x8c>
   b75d8:	45a2      	cmp	sl, r4
   b75da:	db19      	blt.n	b7610 <_strtol_l.constprop.0+0xc0>
   b75dc:	fb06 4603 	mla	r6, r6, r3, r4
   b75e0:	f04f 0c01 	mov.w	ip, #1
   b75e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   b75e8:	e7e8      	b.n	b75bc <_strtol_l.constprop.0+0x6c>
   b75ea:	2c2b      	cmp	r4, #43	; 0x2b
   b75ec:	bf04      	itt	eq
   b75ee:	782c      	ldrbeq	r4, [r5, #0]
   b75f0:	1cb5      	addeq	r5, r6, #2
   b75f2:	e7ca      	b.n	b758a <_strtol_l.constprop.0+0x3a>
   b75f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b75f8:	f1be 0f19 	cmp.w	lr, #25
   b75fc:	d801      	bhi.n	b7602 <_strtol_l.constprop.0+0xb2>
   b75fe:	3c37      	subs	r4, #55	; 0x37
   b7600:	e7e2      	b.n	b75c8 <_strtol_l.constprop.0+0x78>
   b7602:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7606:	f1be 0f19 	cmp.w	lr, #25
   b760a:	d804      	bhi.n	b7616 <_strtol_l.constprop.0+0xc6>
   b760c:	3c57      	subs	r4, #87	; 0x57
   b760e:	e7db      	b.n	b75c8 <_strtol_l.constprop.0+0x78>
   b7610:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7614:	e7e6      	b.n	b75e4 <_strtol_l.constprop.0+0x94>
   b7616:	f1bc 0f00 	cmp.w	ip, #0
   b761a:	da05      	bge.n	b7628 <_strtol_l.constprop.0+0xd8>
   b761c:	2322      	movs	r3, #34	; 0x22
   b761e:	6003      	str	r3, [r0, #0]
   b7620:	4646      	mov	r6, r8
   b7622:	b942      	cbnz	r2, b7636 <_strtol_l.constprop.0+0xe6>
   b7624:	4630      	mov	r0, r6
   b7626:	e79e      	b.n	b7566 <_strtol_l.constprop.0+0x16>
   b7628:	b107      	cbz	r7, b762c <_strtol_l.constprop.0+0xdc>
   b762a:	4276      	negs	r6, r6
   b762c:	2a00      	cmp	r2, #0
   b762e:	d0f9      	beq.n	b7624 <_strtol_l.constprop.0+0xd4>
   b7630:	f1bc 0f00 	cmp.w	ip, #0
   b7634:	d000      	beq.n	b7638 <_strtol_l.constprop.0+0xe8>
   b7636:	1e69      	subs	r1, r5, #1
   b7638:	6011      	str	r1, [r2, #0]
   b763a:	e7f3      	b.n	b7624 <_strtol_l.constprop.0+0xd4>
   b763c:	2430      	movs	r4, #48	; 0x30
   b763e:	2b00      	cmp	r3, #0
   b7640:	d1b1      	bne.n	b75a6 <_strtol_l.constprop.0+0x56>
   b7642:	2308      	movs	r3, #8
   b7644:	e7af      	b.n	b75a6 <_strtol_l.constprop.0+0x56>
   b7646:	2c30      	cmp	r4, #48	; 0x30
   b7648:	d0a5      	beq.n	b7596 <_strtol_l.constprop.0+0x46>
   b764a:	230a      	movs	r3, #10
   b764c:	e7ab      	b.n	b75a6 <_strtol_l.constprop.0+0x56>
   b764e:	bf00      	nop
   b7650:	000b7c5a 	.word	0x000b7c5a

000b7654 <strtol>:
   b7654:	4613      	mov	r3, r2
   b7656:	460a      	mov	r2, r1
   b7658:	4601      	mov	r1, r0
   b765a:	4802      	ldr	r0, [pc, #8]	; (b7664 <strtol+0x10>)
   b765c:	6800      	ldr	r0, [r0, #0]
   b765e:	f7ff bf77 	b.w	b7550 <_strtol_l.constprop.0>
   b7662:	bf00      	nop
   b7664:	2003e5b8 	.word	0x2003e5b8

000b7668 <__register_exitproc>:
   b7668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b766c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7728 <__register_exitproc+0xc0>
   b7670:	4606      	mov	r6, r0
   b7672:	f8d8 0000 	ldr.w	r0, [r8]
   b7676:	461f      	mov	r7, r3
   b7678:	460d      	mov	r5, r1
   b767a:	4691      	mov	r9, r2
   b767c:	f000 f856 	bl	b772c <__retarget_lock_acquire_recursive>
   b7680:	4b25      	ldr	r3, [pc, #148]	; (b7718 <__register_exitproc+0xb0>)
   b7682:	681c      	ldr	r4, [r3, #0]
   b7684:	b934      	cbnz	r4, b7694 <__register_exitproc+0x2c>
   b7686:	4c25      	ldr	r4, [pc, #148]	; (b771c <__register_exitproc+0xb4>)
   b7688:	601c      	str	r4, [r3, #0]
   b768a:	4b25      	ldr	r3, [pc, #148]	; (b7720 <__register_exitproc+0xb8>)
   b768c:	b113      	cbz	r3, b7694 <__register_exitproc+0x2c>
   b768e:	681b      	ldr	r3, [r3, #0]
   b7690:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7694:	6863      	ldr	r3, [r4, #4]
   b7696:	2b1f      	cmp	r3, #31
   b7698:	dd07      	ble.n	b76aa <__register_exitproc+0x42>
   b769a:	f8d8 0000 	ldr.w	r0, [r8]
   b769e:	f000 f847 	bl	b7730 <__retarget_lock_release_recursive>
   b76a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b76a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b76aa:	b34e      	cbz	r6, b7700 <__register_exitproc+0x98>
   b76ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b76b0:	b988      	cbnz	r0, b76d6 <__register_exitproc+0x6e>
   b76b2:	4b1c      	ldr	r3, [pc, #112]	; (b7724 <__register_exitproc+0xbc>)
   b76b4:	b923      	cbnz	r3, b76c0 <__register_exitproc+0x58>
   b76b6:	f8d8 0000 	ldr.w	r0, [r8]
   b76ba:	f000 f838 	bl	b772e <__retarget_lock_release>
   b76be:	e7f0      	b.n	b76a2 <__register_exitproc+0x3a>
   b76c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b76c4:	f7fd fae0 	bl	b4c88 <malloc>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d0f4      	beq.n	b76b6 <__register_exitproc+0x4e>
   b76cc:	2300      	movs	r3, #0
   b76ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b76d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b76d6:	6863      	ldr	r3, [r4, #4]
   b76d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b76dc:	2201      	movs	r2, #1
   b76de:	409a      	lsls	r2, r3
   b76e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b76e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b76e8:	4313      	orrs	r3, r2
   b76ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b76ee:	2e02      	cmp	r6, #2
   b76f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b76f4:	bf02      	ittt	eq
   b76f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b76fa:	4313      	orreq	r3, r2
   b76fc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7700:	6863      	ldr	r3, [r4, #4]
   b7702:	f8d8 0000 	ldr.w	r0, [r8]
   b7706:	1c5a      	adds	r2, r3, #1
   b7708:	3302      	adds	r3, #2
   b770a:	6062      	str	r2, [r4, #4]
   b770c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7710:	f000 f80e 	bl	b7730 <__retarget_lock_release_recursive>
   b7714:	2000      	movs	r0, #0
   b7716:	e7c6      	b.n	b76a6 <__register_exitproc+0x3e>
   b7718:	2003e7e8 	.word	0x2003e7e8
   b771c:	2003e75c 	.word	0x2003e75c
   b7720:	00000000 	.word	0x00000000
   b7724:	000b4c89 	.word	0x000b4c89
   b7728:	2003e61c 	.word	0x2003e61c

000b772c <__retarget_lock_acquire_recursive>:
   b772c:	4770      	bx	lr

000b772e <__retarget_lock_release>:
   b772e:	4770      	bx	lr

000b7730 <__retarget_lock_release_recursive>:
   b7730:	4770      	bx	lr

000b7732 <link_code_end>:
	...

000b7734 <dynalib_user>:
   b7734:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7744:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7754:	7620 7269 7574 6c61 2000 2020 2020 6550      virtual.     Pe
   b7764:	6f73 203a 2e25 6c32 0066 2d2d 2d2d 4120     so: %.2lf.---- A
   b7774:	7070 696c 6163 6974 6e6f 4920 696e 2074     pplication Init 
   b7784:	2d2d 2d2d 2d00 2d2d 2d2d 2d2d 2d2d 2d2d     ----.-----------
   b7794:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0a0d     --------------..
   b77a4:	2000 2020 2020 6f4c 6461 6320 6c65 206c     .     Load cell 
   b77b4:	6c63 6369 206b 2020 2020 0a0d 2000 2020     click     ...   
   b77c4:	5420 7261 2065 6874 2065 6373 6c61 2065      Tare the scale 
   b77d4:	203a 2020 6843 6e61 656e 206c 2c41 2020     :   Channel A,  
   b77e4:	6147 6574 3620 2034 0d20 000a 4920 206e     Gate 64  ... In 
   b77f4:	6874 2065 6f66 6c6c 776f 6e69 2067 3031     the following 10
   b7804:	7320 6365 6e6f 7364 7020 656c 7361 2065      seconds please 
   b7814:	4552 4f4d 4556 6120 6c6c 6f20 6a62 6365     REMOVE all objec
   b7824:	2074 7266 6d6f 7420 6568 7320 6163 656c     t from the scale
   b7834:	0d2e 000a 2020 2020 7453 7261 2074 6174     ....    Start ta
   b7844:	6572 7320 6163 656c 2073 2020 0d20 000a     re scales    ...
   b7854:	2020 2020 6154 7272 6e69 2067 6f63 706d         Tarring comp
   b7864:	656c 6574 2064 0a0d 2000 6e49 7420 6568     leted ... In the
   b7874:	6620 6c6f 6f6c 6977 676e 3120 2030 6573      following 10 se
   b7884:	6f63 646e 2073 6c70 6361 2065 3035 3030     conds place 5000
   b7894:	2067 6577 6769 7468 6520 6174 6f6c 206e     g weight etalon 
   b78a4:	6e6f 7420 6568 7320 6163 656c 6620 726f     on the scale for
   b78b4:	6320 6c61 6269 6172 6974 6e6f 7020 7275      calibration pur
   b78c4:	6f70 6573 0d2e 000a 2020 2020 7453 7261     pose....    Star
   b78d4:	2074 6163 696c 7262 7461 6f69 206e 2020     t calibration   
   b78e4:	0d20 000a 2020 2020 6143 696c 7262 7461      ...    Calibrat
   b78f4:	6f69 206e 4420 6e6f 2065 2020 0d20 000a     ion  Done    ...
   b7904:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   b7914:	202d 202d 202d 202d 0d2d 000a 2020 5320     - - - - -...   S
   b7924:	6174 7472 6d20 6165 7573 6572 656d 746e     tart measurement
   b7934:	2073 203a 0d20 000a 2020 4320 6c61 6269     s :  ...   Calib
   b7944:	6172 6974 6e6f 2020 7245 6f72 2072 2020     ration  Error   
   b7954:	0a0d 6100 7070 0000                         ...app..

000b795c <_ZTVN5spark10LogHandlerE>:
	...
   b796c:	40a5 000b 40cd 000b                         .@...@..

000b7974 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b797c:	40d9 000b 410d 000b 5eed 000b 40cf 000b     .@...A...^...@..

000b798c <_ZTVN5spark13EthernetClassE>:
	...
   b7994:	4dcb 000b 4dc1 000b 4db7 000b 4dad 000b     .M...M...M...M..
   b79a4:	4da1 000b 4d95 000b 6245 000b 624d 000b     .M...M..Eb..Mb..
   b79b4:	4d89 000b 4d81 000b 4d77 000b 4d6d 000b     .M...M..wM..mM..
   b79c4:	627d 000b                                   }b..

000b79c8 <_ZTV7TwoWire>:
	...
   b79d0:	4de9 000b 4e33 000b 4e0b 000b 4deb 000b     .M..3N...N...M..
   b79e0:	4e13 000b 4e1b 000b 4e23 000b 4e2b 000b     .N...N..#N..+N..

000b79f0 <_ZTV9IPAddress>:
	...
   b79f8:	4e8d 000b 4e7d 000b 4e7f 000b 6425 2500     .N..}N...N..%d.%
   b7a08:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b7a18:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b7a28:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b7a38:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   b7a48:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   b7a58:	6400 7465 6961 736c 3d20 0020 006d 6e6c     .details = .m.ln
   b7a68:	6600 006e 0074 6f63 6564 6400 7465 6961     .fn.t.code.detai
   b7a78:	006c 0000                                   l...

000b7a7c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7a84:	5339 000b 535f 000b 531d 000b 4f9b 000b     9S.._S...S...O..

000b7a94 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7a9c:	5795 000b 57ad 000b 5eed 000b 40cf 000b     .W...W...^...@..

000b7aac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7ab4:	57c1 000b 57d5 000b 6091 000b 5325 000b     .W...W...`..%S..

000b7ac4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7acc:	5337 000b 536d 000b 5e51 000b 5327 000b     7S..mS..Q^..'S..

000b7adc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7ae4:	5335 000b 537b 000b 56fd 000b 539d 000b     5S..{S...V...S..

000b7af4 <_ZTVN5spark12NetworkClassE>:
	...
   b7afc:	6205 000b 620f 000b 6219 000b 6223 000b     .b...b...b..#b..
   b7b0c:	622d 000b 6239 000b 6245 000b 624d 000b     -b..9b..Eb..Mb..
   b7b1c:	6255 000b 6261 000b 6269 000b 6273 000b     Ub..ab..ib..sb..
   b7b2c:	627d 000b 5925 252d 2d6d 6425 2554 3a48     }b..%Y-%m-%dT%H:
   b7b3c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7b4c <_ZTV11USARTSerial>:
	...
   b7b54:	6611 000b 667d 000b 6655 000b 6369 000b     .f..}f..Uf..ic..
   b7b64:	6625 000b 6641 000b 6633 000b 664f 000b     %f..Af..3f..Of..
   b7b74:	6613 000b 6617 000b                         .f...f..

000b7b7c <_ZTV9USBSerial>:
	...
   b7b84:	66cf 000b 6737 000b 670d 000b 6369 000b     .f..7g...g..ic..
   b7b94:	66ff 000b 66d1 000b 66e1 000b 6731 000b     .f...f...f..1g..
   b7ba4:	66f1 000b 66c9 000b                         .f...f..

000b7bac <_ZTVN5spark9WiFiClassE>:
	...
   b7bb4:	6837 000b 682d 000b 6823 000b 67d9 000b     7h..-h..#h...g..
   b7bc4:	6817 000b 680b 000b 6245 000b 624d 000b     .h...h..Eb..Mb..
   b7bd4:	67ff 000b 67f7 000b 67ed 000b 67e3 000b     .g...g...g...g..
   b7be4:	627d 000b                                   }b..

000b7be8 <_ZSt7nothrow>:
   b7be8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7bf8:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7c08:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7c18:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7c28:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7c38:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7c48:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7c59 <_ctype_>:
   b7c59:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7c69:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7c79:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7c89:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7c99:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7ca9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7cb9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7cc9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7cd9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7d5a <link_const_variable_data_end>:
	...

000b7d5c <link_constructors_location>:
   b7d5c:	000b4441 	.word	0x000b4441
   b7d60:	000b4d5d 	.word	0x000b4d5d
   b7d64:	000b4dd5 	.word	0x000b4dd5
   b7d68:	000b5edd 	.word	0x000b5edd
   b7d6c:	000b6355 	.word	0x000b6355
   b7d70:	000b6475 	.word	0x000b6475
   b7d74:	000b65d9 	.word	0x000b65d9
   b7d78:	000b65fd 	.word	0x000b65fd
   b7d7c:	000b6841 	.word	0x000b6841
