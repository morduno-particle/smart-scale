
/Users/manuelorduno/Documents/GitHub/smart-scale/target/5.3.1/p2/smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb028  085fa088  0000b028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004fcc  023fb030  085fa090  0000b030  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007a934  085ff05c  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000063c  1007a9ac  1007a9ac  0002a9ac  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff0d4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000ee0  085ff0d8  085ff0d8  0001f0d8  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f0d8  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001538f7  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00016a4f  00000000  00000000  001738f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040f6b  00000000  00000000  0018a346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000030b0  00000000  00000000  001cb2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bd38  00000000  00000000  001ce361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a0fb  00000000  00000000  001da099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004b06b  00000000  00000000  00204194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce1b4  00000000  00000000  0024f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008c8c  00000000  00000000  0031d3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007a934 	.word	0x1007a934
 85fa058:	085ff05c 	.word	0x085ff05c
 85fa05c:	1007a9ac 	.word	0x1007a9ac
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007a9ac 	.word	0x1007a9ac
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fb028 	.word	0x023fb028
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffffc 	.word	0x023ffffc

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fb030 <__aeabi_drsub>:
 23fb030:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fb034:	e002      	b.n	23fb03c <__adddf3>
 23fb036:	bf00      	nop

023fb038 <__aeabi_dsub>:
 23fb038:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fb03c <__adddf3>:
 23fb03c:	b530      	push	{r4, r5, lr}
 23fb03e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fb042:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fb046:	ea94 0f05 	teq	r4, r5
 23fb04a:	bf08      	it	eq
 23fb04c:	ea90 0f02 	teqeq	r0, r2
 23fb050:	bf1f      	itttt	ne
 23fb052:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fb056:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fb05a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fb05e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb062:	f000 80e2 	beq.w	23fb22a <__adddf3+0x1ee>
 23fb066:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fb06a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fb06e:	bfb8      	it	lt
 23fb070:	426d      	neglt	r5, r5
 23fb072:	dd0c      	ble.n	23fb08e <__adddf3+0x52>
 23fb074:	442c      	add	r4, r5
 23fb076:	ea80 0202 	eor.w	r2, r0, r2
 23fb07a:	ea81 0303 	eor.w	r3, r1, r3
 23fb07e:	ea82 0000 	eor.w	r0, r2, r0
 23fb082:	ea83 0101 	eor.w	r1, r3, r1
 23fb086:	ea80 0202 	eor.w	r2, r0, r2
 23fb08a:	ea81 0303 	eor.w	r3, r1, r3
 23fb08e:	2d36      	cmp	r5, #54	; 0x36
 23fb090:	bf88      	it	hi
 23fb092:	bd30      	pophi	{r4, r5, pc}
 23fb094:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb098:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb09c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fb0a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fb0a4:	d002      	beq.n	23fb0ac <__adddf3+0x70>
 23fb0a6:	4240      	negs	r0, r0
 23fb0a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb0ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fb0b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb0b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fb0b8:	d002      	beq.n	23fb0c0 <__adddf3+0x84>
 23fb0ba:	4252      	negs	r2, r2
 23fb0bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fb0c0:	ea94 0f05 	teq	r4, r5
 23fb0c4:	f000 80a7 	beq.w	23fb216 <__adddf3+0x1da>
 23fb0c8:	f1a4 0401 	sub.w	r4, r4, #1
 23fb0cc:	f1d5 0e20 	rsbs	lr, r5, #32
 23fb0d0:	db0d      	blt.n	23fb0ee <__adddf3+0xb2>
 23fb0d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fb0d6:	fa22 f205 	lsr.w	r2, r2, r5
 23fb0da:	1880      	adds	r0, r0, r2
 23fb0dc:	f141 0100 	adc.w	r1, r1, #0
 23fb0e0:	fa03 f20e 	lsl.w	r2, r3, lr
 23fb0e4:	1880      	adds	r0, r0, r2
 23fb0e6:	fa43 f305 	asr.w	r3, r3, r5
 23fb0ea:	4159      	adcs	r1, r3
 23fb0ec:	e00e      	b.n	23fb10c <__adddf3+0xd0>
 23fb0ee:	f1a5 0520 	sub.w	r5, r5, #32
 23fb0f2:	f10e 0e20 	add.w	lr, lr, #32
 23fb0f6:	2a01      	cmp	r2, #1
 23fb0f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fb0fc:	bf28      	it	cs
 23fb0fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fb102:	fa43 f305 	asr.w	r3, r3, r5
 23fb106:	18c0      	adds	r0, r0, r3
 23fb108:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fb10c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb110:	d507      	bpl.n	23fb122 <__adddf3+0xe6>
 23fb112:	f04f 0e00 	mov.w	lr, #0
 23fb116:	f1dc 0c00 	rsbs	ip, ip, #0
 23fb11a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fb11e:	eb6e 0101 	sbc.w	r1, lr, r1
 23fb122:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fb126:	d31b      	bcc.n	23fb160 <__adddf3+0x124>
 23fb128:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fb12c:	d30c      	bcc.n	23fb148 <__adddf3+0x10c>
 23fb12e:	0849      	lsrs	r1, r1, #1
 23fb130:	ea5f 0030 	movs.w	r0, r0, rrx
 23fb134:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fb138:	f104 0401 	add.w	r4, r4, #1
 23fb13c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fb140:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fb144:	f080 809a 	bcs.w	23fb27c <__adddf3+0x240>
 23fb148:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fb14c:	bf08      	it	eq
 23fb14e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb152:	f150 0000 	adcs.w	r0, r0, #0
 23fb156:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb15a:	ea41 0105 	orr.w	r1, r1, r5
 23fb15e:	bd30      	pop	{r4, r5, pc}
 23fb160:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fb164:	4140      	adcs	r0, r0
 23fb166:	eb41 0101 	adc.w	r1, r1, r1
 23fb16a:	3c01      	subs	r4, #1
 23fb16c:	bf28      	it	cs
 23fb16e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fb172:	d2e9      	bcs.n	23fb148 <__adddf3+0x10c>
 23fb174:	f091 0f00 	teq	r1, #0
 23fb178:	bf04      	itt	eq
 23fb17a:	4601      	moveq	r1, r0
 23fb17c:	2000      	moveq	r0, #0
 23fb17e:	fab1 f381 	clz	r3, r1
 23fb182:	bf08      	it	eq
 23fb184:	3320      	addeq	r3, #32
 23fb186:	f1a3 030b 	sub.w	r3, r3, #11
 23fb18a:	f1b3 0220 	subs.w	r2, r3, #32
 23fb18e:	da0c      	bge.n	23fb1aa <__adddf3+0x16e>
 23fb190:	320c      	adds	r2, #12
 23fb192:	dd08      	ble.n	23fb1a6 <__adddf3+0x16a>
 23fb194:	f102 0c14 	add.w	ip, r2, #20
 23fb198:	f1c2 020c 	rsb	r2, r2, #12
 23fb19c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fb1a0:	fa21 f102 	lsr.w	r1, r1, r2
 23fb1a4:	e00c      	b.n	23fb1c0 <__adddf3+0x184>
 23fb1a6:	f102 0214 	add.w	r2, r2, #20
 23fb1aa:	bfd8      	it	le
 23fb1ac:	f1c2 0c20 	rsble	ip, r2, #32
 23fb1b0:	fa01 f102 	lsl.w	r1, r1, r2
 23fb1b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fb1b8:	bfdc      	itt	le
 23fb1ba:	ea41 010c 	orrle.w	r1, r1, ip
 23fb1be:	4090      	lslle	r0, r2
 23fb1c0:	1ae4      	subs	r4, r4, r3
 23fb1c2:	bfa2      	ittt	ge
 23fb1c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fb1c8:	4329      	orrge	r1, r5
 23fb1ca:	bd30      	popge	{r4, r5, pc}
 23fb1cc:	ea6f 0404 	mvn.w	r4, r4
 23fb1d0:	3c1f      	subs	r4, #31
 23fb1d2:	da1c      	bge.n	23fb20e <__adddf3+0x1d2>
 23fb1d4:	340c      	adds	r4, #12
 23fb1d6:	dc0e      	bgt.n	23fb1f6 <__adddf3+0x1ba>
 23fb1d8:	f104 0414 	add.w	r4, r4, #20
 23fb1dc:	f1c4 0220 	rsb	r2, r4, #32
 23fb1e0:	fa20 f004 	lsr.w	r0, r0, r4
 23fb1e4:	fa01 f302 	lsl.w	r3, r1, r2
 23fb1e8:	ea40 0003 	orr.w	r0, r0, r3
 23fb1ec:	fa21 f304 	lsr.w	r3, r1, r4
 23fb1f0:	ea45 0103 	orr.w	r1, r5, r3
 23fb1f4:	bd30      	pop	{r4, r5, pc}
 23fb1f6:	f1c4 040c 	rsb	r4, r4, #12
 23fb1fa:	f1c4 0220 	rsb	r2, r4, #32
 23fb1fe:	fa20 f002 	lsr.w	r0, r0, r2
 23fb202:	fa01 f304 	lsl.w	r3, r1, r4
 23fb206:	ea40 0003 	orr.w	r0, r0, r3
 23fb20a:	4629      	mov	r1, r5
 23fb20c:	bd30      	pop	{r4, r5, pc}
 23fb20e:	fa21 f004 	lsr.w	r0, r1, r4
 23fb212:	4629      	mov	r1, r5
 23fb214:	bd30      	pop	{r4, r5, pc}
 23fb216:	f094 0f00 	teq	r4, #0
 23fb21a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fb21e:	bf06      	itte	eq
 23fb220:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fb224:	3401      	addeq	r4, #1
 23fb226:	3d01      	subne	r5, #1
 23fb228:	e74e      	b.n	23fb0c8 <__adddf3+0x8c>
 23fb22a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb22e:	bf18      	it	ne
 23fb230:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb234:	d029      	beq.n	23fb28a <__adddf3+0x24e>
 23fb236:	ea94 0f05 	teq	r4, r5
 23fb23a:	bf08      	it	eq
 23fb23c:	ea90 0f02 	teqeq	r0, r2
 23fb240:	d005      	beq.n	23fb24e <__adddf3+0x212>
 23fb242:	ea54 0c00 	orrs.w	ip, r4, r0
 23fb246:	bf04      	itt	eq
 23fb248:	4619      	moveq	r1, r3
 23fb24a:	4610      	moveq	r0, r2
 23fb24c:	bd30      	pop	{r4, r5, pc}
 23fb24e:	ea91 0f03 	teq	r1, r3
 23fb252:	bf1e      	ittt	ne
 23fb254:	2100      	movne	r1, #0
 23fb256:	2000      	movne	r0, #0
 23fb258:	bd30      	popne	{r4, r5, pc}
 23fb25a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fb25e:	d105      	bne.n	23fb26c <__adddf3+0x230>
 23fb260:	0040      	lsls	r0, r0, #1
 23fb262:	4149      	adcs	r1, r1
 23fb264:	bf28      	it	cs
 23fb266:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fb26a:	bd30      	pop	{r4, r5, pc}
 23fb26c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fb270:	bf3c      	itt	cc
 23fb272:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fb276:	bd30      	popcc	{r4, r5, pc}
 23fb278:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb27c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fb280:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb284:	f04f 0000 	mov.w	r0, #0
 23fb288:	bd30      	pop	{r4, r5, pc}
 23fb28a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb28e:	bf1a      	itte	ne
 23fb290:	4619      	movne	r1, r3
 23fb292:	4610      	movne	r0, r2
 23fb294:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fb298:	bf1c      	itt	ne
 23fb29a:	460b      	movne	r3, r1
 23fb29c:	4602      	movne	r2, r0
 23fb29e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb2a2:	bf06      	itte	eq
 23fb2a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fb2a8:	ea91 0f03 	teqeq	r1, r3
 23fb2ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fb2b0:	bd30      	pop	{r4, r5, pc}
 23fb2b2:	bf00      	nop

023fb2b4 <__aeabi_ui2d>:
 23fb2b4:	f090 0f00 	teq	r0, #0
 23fb2b8:	bf04      	itt	eq
 23fb2ba:	2100      	moveq	r1, #0
 23fb2bc:	4770      	bxeq	lr
 23fb2be:	b530      	push	{r4, r5, lr}
 23fb2c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb2c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb2c8:	f04f 0500 	mov.w	r5, #0
 23fb2cc:	f04f 0100 	mov.w	r1, #0
 23fb2d0:	e750      	b.n	23fb174 <__adddf3+0x138>
 23fb2d2:	bf00      	nop

023fb2d4 <__aeabi_i2d>:
 23fb2d4:	f090 0f00 	teq	r0, #0
 23fb2d8:	bf04      	itt	eq
 23fb2da:	2100      	moveq	r1, #0
 23fb2dc:	4770      	bxeq	lr
 23fb2de:	b530      	push	{r4, r5, lr}
 23fb2e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb2e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb2e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fb2ec:	bf48      	it	mi
 23fb2ee:	4240      	negmi	r0, r0
 23fb2f0:	f04f 0100 	mov.w	r1, #0
 23fb2f4:	e73e      	b.n	23fb174 <__adddf3+0x138>
 23fb2f6:	bf00      	nop

023fb2f8 <__aeabi_f2d>:
 23fb2f8:	0042      	lsls	r2, r0, #1
 23fb2fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fb2fe:	ea4f 0131 	mov.w	r1, r1, rrx
 23fb302:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fb306:	bf1f      	itttt	ne
 23fb308:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fb30c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fb310:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fb314:	4770      	bxne	lr
 23fb316:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fb31a:	bf08      	it	eq
 23fb31c:	4770      	bxeq	lr
 23fb31e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fb322:	bf04      	itt	eq
 23fb324:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fb328:	4770      	bxeq	lr
 23fb32a:	b530      	push	{r4, r5, lr}
 23fb32c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fb330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb338:	e71c      	b.n	23fb174 <__adddf3+0x138>
 23fb33a:	bf00      	nop

023fb33c <__aeabi_ul2d>:
 23fb33c:	ea50 0201 	orrs.w	r2, r0, r1
 23fb340:	bf08      	it	eq
 23fb342:	4770      	bxeq	lr
 23fb344:	b530      	push	{r4, r5, lr}
 23fb346:	f04f 0500 	mov.w	r5, #0
 23fb34a:	e00a      	b.n	23fb362 <__aeabi_l2d+0x16>

023fb34c <__aeabi_l2d>:
 23fb34c:	ea50 0201 	orrs.w	r2, r0, r1
 23fb350:	bf08      	it	eq
 23fb352:	4770      	bxeq	lr
 23fb354:	b530      	push	{r4, r5, lr}
 23fb356:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fb35a:	d502      	bpl.n	23fb362 <__aeabi_l2d+0x16>
 23fb35c:	4240      	negs	r0, r0
 23fb35e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb362:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb366:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb36a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fb36e:	f43f aed8 	beq.w	23fb122 <__adddf3+0xe6>
 23fb372:	f04f 0203 	mov.w	r2, #3
 23fb376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb37a:	bf18      	it	ne
 23fb37c:	3203      	addne	r2, #3
 23fb37e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb382:	bf18      	it	ne
 23fb384:	3203      	addne	r2, #3
 23fb386:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fb38a:	f1c2 0320 	rsb	r3, r2, #32
 23fb38e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fb392:	fa20 f002 	lsr.w	r0, r0, r2
 23fb396:	fa01 fe03 	lsl.w	lr, r1, r3
 23fb39a:	ea40 000e 	orr.w	r0, r0, lr
 23fb39e:	fa21 f102 	lsr.w	r1, r1, r2
 23fb3a2:	4414      	add	r4, r2
 23fb3a4:	e6bd      	b.n	23fb122 <__adddf3+0xe6>
 23fb3a6:	bf00      	nop

023fb3a8 <__aeabi_dmul>:
 23fb3a8:	b570      	push	{r4, r5, r6, lr}
 23fb3aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb3ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb3b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb3b6:	bf1d      	ittte	ne
 23fb3b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb3bc:	ea94 0f0c 	teqne	r4, ip
 23fb3c0:	ea95 0f0c 	teqne	r5, ip
 23fb3c4:	f000 f8de 	bleq	23fb584 <__aeabi_dmul+0x1dc>
 23fb3c8:	442c      	add	r4, r5
 23fb3ca:	ea81 0603 	eor.w	r6, r1, r3
 23fb3ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fb3d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fb3d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fb3da:	bf18      	it	ne
 23fb3dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fb3e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb3e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb3e8:	d038      	beq.n	23fb45c <__aeabi_dmul+0xb4>
 23fb3ea:	fba0 ce02 	umull	ip, lr, r0, r2
 23fb3ee:	f04f 0500 	mov.w	r5, #0
 23fb3f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fb3f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fb3fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fb3fe:	f04f 0600 	mov.w	r6, #0
 23fb402:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fb406:	f09c 0f00 	teq	ip, #0
 23fb40a:	bf18      	it	ne
 23fb40c:	f04e 0e01 	orrne.w	lr, lr, #1
 23fb410:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fb414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fb418:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fb41c:	d204      	bcs.n	23fb428 <__aeabi_dmul+0x80>
 23fb41e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fb422:	416d      	adcs	r5, r5
 23fb424:	eb46 0606 	adc.w	r6, r6, r6
 23fb428:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fb42c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fb430:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fb434:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fb438:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fb43c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb440:	bf88      	it	hi
 23fb442:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb446:	d81e      	bhi.n	23fb486 <__aeabi_dmul+0xde>
 23fb448:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fb44c:	bf08      	it	eq
 23fb44e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fb452:	f150 0000 	adcs.w	r0, r0, #0
 23fb456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb45a:	bd70      	pop	{r4, r5, r6, pc}
 23fb45c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fb460:	ea46 0101 	orr.w	r1, r6, r1
 23fb464:	ea40 0002 	orr.w	r0, r0, r2
 23fb468:	ea81 0103 	eor.w	r1, r1, r3
 23fb46c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fb470:	bfc2      	ittt	gt
 23fb472:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb47a:	bd70      	popgt	{r4, r5, r6, pc}
 23fb47c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb480:	f04f 0e00 	mov.w	lr, #0
 23fb484:	3c01      	subs	r4, #1
 23fb486:	f300 80ab 	bgt.w	23fb5e0 <__aeabi_dmul+0x238>
 23fb48a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fb48e:	bfde      	ittt	le
 23fb490:	2000      	movle	r0, #0
 23fb492:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fb496:	bd70      	pople	{r4, r5, r6, pc}
 23fb498:	f1c4 0400 	rsb	r4, r4, #0
 23fb49c:	3c20      	subs	r4, #32
 23fb49e:	da35      	bge.n	23fb50c <__aeabi_dmul+0x164>
 23fb4a0:	340c      	adds	r4, #12
 23fb4a2:	dc1b      	bgt.n	23fb4dc <__aeabi_dmul+0x134>
 23fb4a4:	f104 0414 	add.w	r4, r4, #20
 23fb4a8:	f1c4 0520 	rsb	r5, r4, #32
 23fb4ac:	fa00 f305 	lsl.w	r3, r0, r5
 23fb4b0:	fa20 f004 	lsr.w	r0, r0, r4
 23fb4b4:	fa01 f205 	lsl.w	r2, r1, r5
 23fb4b8:	ea40 0002 	orr.w	r0, r0, r2
 23fb4bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fb4c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb4c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb4c8:	fa21 f604 	lsr.w	r6, r1, r4
 23fb4cc:	eb42 0106 	adc.w	r1, r2, r6
 23fb4d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb4d4:	bf08      	it	eq
 23fb4d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb4da:	bd70      	pop	{r4, r5, r6, pc}
 23fb4dc:	f1c4 040c 	rsb	r4, r4, #12
 23fb4e0:	f1c4 0520 	rsb	r5, r4, #32
 23fb4e4:	fa00 f304 	lsl.w	r3, r0, r4
 23fb4e8:	fa20 f005 	lsr.w	r0, r0, r5
 23fb4ec:	fa01 f204 	lsl.w	r2, r1, r4
 23fb4f0:	ea40 0002 	orr.w	r0, r0, r2
 23fb4f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb4f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb4fc:	f141 0100 	adc.w	r1, r1, #0
 23fb500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb504:	bf08      	it	eq
 23fb506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb50a:	bd70      	pop	{r4, r5, r6, pc}
 23fb50c:	f1c4 0520 	rsb	r5, r4, #32
 23fb510:	fa00 f205 	lsl.w	r2, r0, r5
 23fb514:	ea4e 0e02 	orr.w	lr, lr, r2
 23fb518:	fa20 f304 	lsr.w	r3, r0, r4
 23fb51c:	fa01 f205 	lsl.w	r2, r1, r5
 23fb520:	ea43 0302 	orr.w	r3, r3, r2
 23fb524:	fa21 f004 	lsr.w	r0, r1, r4
 23fb528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb52c:	fa21 f204 	lsr.w	r2, r1, r4
 23fb530:	ea20 0002 	bic.w	r0, r0, r2
 23fb534:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fb538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb53c:	bf08      	it	eq
 23fb53e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb542:	bd70      	pop	{r4, r5, r6, pc}
 23fb544:	f094 0f00 	teq	r4, #0
 23fb548:	d10f      	bne.n	23fb56a <__aeabi_dmul+0x1c2>
 23fb54a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fb54e:	0040      	lsls	r0, r0, #1
 23fb550:	eb41 0101 	adc.w	r1, r1, r1
 23fb554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb558:	bf08      	it	eq
 23fb55a:	3c01      	subeq	r4, #1
 23fb55c:	d0f7      	beq.n	23fb54e <__aeabi_dmul+0x1a6>
 23fb55e:	ea41 0106 	orr.w	r1, r1, r6
 23fb562:	f095 0f00 	teq	r5, #0
 23fb566:	bf18      	it	ne
 23fb568:	4770      	bxne	lr
 23fb56a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fb56e:	0052      	lsls	r2, r2, #1
 23fb570:	eb43 0303 	adc.w	r3, r3, r3
 23fb574:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fb578:	bf08      	it	eq
 23fb57a:	3d01      	subeq	r5, #1
 23fb57c:	d0f7      	beq.n	23fb56e <__aeabi_dmul+0x1c6>
 23fb57e:	ea43 0306 	orr.w	r3, r3, r6
 23fb582:	4770      	bx	lr
 23fb584:	ea94 0f0c 	teq	r4, ip
 23fb588:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb58c:	bf18      	it	ne
 23fb58e:	ea95 0f0c 	teqne	r5, ip
 23fb592:	d00c      	beq.n	23fb5ae <__aeabi_dmul+0x206>
 23fb594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb598:	bf18      	it	ne
 23fb59a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb59e:	d1d1      	bne.n	23fb544 <__aeabi_dmul+0x19c>
 23fb5a0:	ea81 0103 	eor.w	r1, r1, r3
 23fb5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb5a8:	f04f 0000 	mov.w	r0, #0
 23fb5ac:	bd70      	pop	{r4, r5, r6, pc}
 23fb5ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb5b2:	bf06      	itte	eq
 23fb5b4:	4610      	moveq	r0, r2
 23fb5b6:	4619      	moveq	r1, r3
 23fb5b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb5bc:	d019      	beq.n	23fb5f2 <__aeabi_dmul+0x24a>
 23fb5be:	ea94 0f0c 	teq	r4, ip
 23fb5c2:	d102      	bne.n	23fb5ca <__aeabi_dmul+0x222>
 23fb5c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fb5c8:	d113      	bne.n	23fb5f2 <__aeabi_dmul+0x24a>
 23fb5ca:	ea95 0f0c 	teq	r5, ip
 23fb5ce:	d105      	bne.n	23fb5dc <__aeabi_dmul+0x234>
 23fb5d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fb5d4:	bf1c      	itt	ne
 23fb5d6:	4610      	movne	r0, r2
 23fb5d8:	4619      	movne	r1, r3
 23fb5da:	d10a      	bne.n	23fb5f2 <__aeabi_dmul+0x24a>
 23fb5dc:	ea81 0103 	eor.w	r1, r1, r3
 23fb5e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb5e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb5e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb5ec:	f04f 0000 	mov.w	r0, #0
 23fb5f0:	bd70      	pop	{r4, r5, r6, pc}
 23fb5f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb5f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fb5fa:	bd70      	pop	{r4, r5, r6, pc}

023fb5fc <__aeabi_ddiv>:
 23fb5fc:	b570      	push	{r4, r5, r6, lr}
 23fb5fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb60a:	bf1d      	ittte	ne
 23fb60c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb610:	ea94 0f0c 	teqne	r4, ip
 23fb614:	ea95 0f0c 	teqne	r5, ip
 23fb618:	f000 f8a7 	bleq	23fb76a <__aeabi_ddiv+0x16e>
 23fb61c:	eba4 0405 	sub.w	r4, r4, r5
 23fb620:	ea81 0e03 	eor.w	lr, r1, r3
 23fb624:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb628:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb62c:	f000 8088 	beq.w	23fb740 <__aeabi_ddiv+0x144>
 23fb630:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb634:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fb638:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fb63c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fb640:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fb644:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fb648:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fb64c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fb650:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fb654:	429d      	cmp	r5, r3
 23fb656:	bf08      	it	eq
 23fb658:	4296      	cmpeq	r6, r2
 23fb65a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fb65e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fb662:	d202      	bcs.n	23fb66a <__aeabi_ddiv+0x6e>
 23fb664:	085b      	lsrs	r3, r3, #1
 23fb666:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb66a:	1ab6      	subs	r6, r6, r2
 23fb66c:	eb65 0503 	sbc.w	r5, r5, r3
 23fb670:	085b      	lsrs	r3, r3, #1
 23fb672:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fb67a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fb67e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb682:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb686:	bf22      	ittt	cs
 23fb688:	1ab6      	subcs	r6, r6, r2
 23fb68a:	4675      	movcs	r5, lr
 23fb68c:	ea40 000c 	orrcs.w	r0, r0, ip
 23fb690:	085b      	lsrs	r3, r3, #1
 23fb692:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb696:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb69a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb69e:	bf22      	ittt	cs
 23fb6a0:	1ab6      	subcs	r6, r6, r2
 23fb6a2:	4675      	movcs	r5, lr
 23fb6a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fb6a8:	085b      	lsrs	r3, r3, #1
 23fb6aa:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb6ae:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb6b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb6b6:	bf22      	ittt	cs
 23fb6b8:	1ab6      	subcs	r6, r6, r2
 23fb6ba:	4675      	movcs	r5, lr
 23fb6bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fb6c0:	085b      	lsrs	r3, r3, #1
 23fb6c2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb6c6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb6ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb6ce:	bf22      	ittt	cs
 23fb6d0:	1ab6      	subcs	r6, r6, r2
 23fb6d2:	4675      	movcs	r5, lr
 23fb6d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb6d8:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb6dc:	d018      	beq.n	23fb710 <__aeabi_ddiv+0x114>
 23fb6de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb6e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb6e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb6ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb6ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb6f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb6f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb6fa:	d1c0      	bne.n	23fb67e <__aeabi_ddiv+0x82>
 23fb6fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb700:	d10b      	bne.n	23fb71a <__aeabi_ddiv+0x11e>
 23fb702:	ea41 0100 	orr.w	r1, r1, r0
 23fb706:	f04f 0000 	mov.w	r0, #0
 23fb70a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb70e:	e7b6      	b.n	23fb67e <__aeabi_ddiv+0x82>
 23fb710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb714:	bf04      	itt	eq
 23fb716:	4301      	orreq	r1, r0
 23fb718:	2000      	moveq	r0, #0
 23fb71a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb71e:	bf88      	it	hi
 23fb720:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb724:	f63f aeaf 	bhi.w	23fb486 <__aeabi_dmul+0xde>
 23fb728:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb72c:	bf04      	itt	eq
 23fb72e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb736:	f150 0000 	adcs.w	r0, r0, #0
 23fb73a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb73e:	bd70      	pop	{r4, r5, r6, pc}
 23fb740:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb744:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb748:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb74c:	bfc2      	ittt	gt
 23fb74e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb756:	bd70      	popgt	{r4, r5, r6, pc}
 23fb758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb75c:	f04f 0e00 	mov.w	lr, #0
 23fb760:	3c01      	subs	r4, #1
 23fb762:	e690      	b.n	23fb486 <__aeabi_dmul+0xde>
 23fb764:	ea45 0e06 	orr.w	lr, r5, r6
 23fb768:	e68d      	b.n	23fb486 <__aeabi_dmul+0xde>
 23fb76a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb76e:	ea94 0f0c 	teq	r4, ip
 23fb772:	bf08      	it	eq
 23fb774:	ea95 0f0c 	teqeq	r5, ip
 23fb778:	f43f af3b 	beq.w	23fb5f2 <__aeabi_dmul+0x24a>
 23fb77c:	ea94 0f0c 	teq	r4, ip
 23fb780:	d10a      	bne.n	23fb798 <__aeabi_ddiv+0x19c>
 23fb782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb786:	f47f af34 	bne.w	23fb5f2 <__aeabi_dmul+0x24a>
 23fb78a:	ea95 0f0c 	teq	r5, ip
 23fb78e:	f47f af25 	bne.w	23fb5dc <__aeabi_dmul+0x234>
 23fb792:	4610      	mov	r0, r2
 23fb794:	4619      	mov	r1, r3
 23fb796:	e72c      	b.n	23fb5f2 <__aeabi_dmul+0x24a>
 23fb798:	ea95 0f0c 	teq	r5, ip
 23fb79c:	d106      	bne.n	23fb7ac <__aeabi_ddiv+0x1b0>
 23fb79e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb7a2:	f43f aefd 	beq.w	23fb5a0 <__aeabi_dmul+0x1f8>
 23fb7a6:	4610      	mov	r0, r2
 23fb7a8:	4619      	mov	r1, r3
 23fb7aa:	e722      	b.n	23fb5f2 <__aeabi_dmul+0x24a>
 23fb7ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb7b0:	bf18      	it	ne
 23fb7b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb7b6:	f47f aec5 	bne.w	23fb544 <__aeabi_dmul+0x19c>
 23fb7ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb7be:	f47f af0d 	bne.w	23fb5dc <__aeabi_dmul+0x234>
 23fb7c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb7c6:	f47f aeeb 	bne.w	23fb5a0 <__aeabi_dmul+0x1f8>
 23fb7ca:	e712      	b.n	23fb5f2 <__aeabi_dmul+0x24a>

023fb7cc <__aeabi_d2f>:
 23fb7cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb7d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fb7d4:	bf24      	itt	cs
 23fb7d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fb7da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fb7de:	d90d      	bls.n	23fb7fc <__aeabi_d2f+0x30>
 23fb7e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fb7e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fb7e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fb7ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fb7f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fb7f4:	bf08      	it	eq
 23fb7f6:	f020 0001 	biceq.w	r0, r0, #1
 23fb7fa:	4770      	bx	lr
 23fb7fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fb800:	d121      	bne.n	23fb846 <__aeabi_d2f+0x7a>
 23fb802:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fb806:	bfbc      	itt	lt
 23fb808:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fb80c:	4770      	bxlt	lr
 23fb80e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb812:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fb816:	f1c2 0218 	rsb	r2, r2, #24
 23fb81a:	f1c2 0c20 	rsb	ip, r2, #32
 23fb81e:	fa10 f30c 	lsls.w	r3, r0, ip
 23fb822:	fa20 f002 	lsr.w	r0, r0, r2
 23fb826:	bf18      	it	ne
 23fb828:	f040 0001 	orrne.w	r0, r0, #1
 23fb82c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fb834:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fb838:	ea40 000c 	orr.w	r0, r0, ip
 23fb83c:	fa23 f302 	lsr.w	r3, r3, r2
 23fb840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fb844:	e7cc      	b.n	23fb7e0 <__aeabi_d2f+0x14>
 23fb846:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fb84a:	d107      	bne.n	23fb85c <__aeabi_d2f+0x90>
 23fb84c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fb850:	bf1e      	ittt	ne
 23fb852:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fb856:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fb85a:	4770      	bxne	lr
 23fb85c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fb860:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fb864:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fb868:	4770      	bx	lr
 23fb86a:	bf00      	nop

023fb86c <strcmp>:
 23fb86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb870:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb874:	2a01      	cmp	r2, #1
 23fb876:	bf28      	it	cs
 23fb878:	429a      	cmpcs	r2, r3
 23fb87a:	d0f7      	beq.n	23fb86c <strcmp>
 23fb87c:	1ad0      	subs	r0, r2, r3
 23fb87e:	4770      	bx	lr

023fb880 <strlen>:
 23fb880:	4603      	mov	r3, r0
 23fb882:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb886:	2a00      	cmp	r2, #0
 23fb888:	d1fb      	bne.n	23fb882 <strlen+0x2>
 23fb88a:	1a18      	subs	r0, r3, r0
 23fb88c:	3801      	subs	r0, #1
 23fb88e:	4770      	bx	lr

023fb890 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb890:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb892:	f003 fd63 	bl	23ff35c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb896:	2500      	movs	r5, #0
 23fb898:	4e05      	ldr	r6, [pc, #20]	; (23fb8b0 <module_user_init+0x20>)
 23fb89a:	4c06      	ldr	r4, [pc, #24]	; (23fb8b4 <module_user_init+0x24>)
 23fb89c:	1ba4      	subs	r4, r4, r6
 23fb89e:	08a4      	lsrs	r4, r4, #2
 23fb8a0:	42ac      	cmp	r4, r5
 23fb8a2:	d100      	bne.n	23fb8a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb8a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb8a6:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb8aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb8ac:	3501      	adds	r5, #1
 23fb8ae:	e7f7      	b.n	23fb8a0 <module_user_init+0x10>
 23fb8b0:	023fffd8 	.word	0x023fffd8
 23fb8b4:	023ffffc 	.word	0x023ffffc

023fb8b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb8b8:	f000 ba94 	b.w	23fbde4 <setup>

023fb8bc <module_user_loop>:
}

void module_user_loop() {
 23fb8bc:	b508      	push	{r3, lr}
    loop();
 23fb8be:	f000 f92b 	bl	23fbb18 <loop>
    _post_loop();
}
 23fb8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb8c6:	f003 bd01 	b.w	23ff2cc <_post_loop>

023fb8ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb8ca:	f001 bb21 	b.w	23fcf10 <malloc>

023fb8ce <_Znaj>:
 23fb8ce:	f001 bb1f 	b.w	23fcf10 <malloc>

023fb8d2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb8d2:	f001 bb2b 	b.w	23fcf2c <free>
	...

023fb8d8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb8d8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb8da:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb8dc:	4a02      	ldr	r2, [pc, #8]	; (23fb8e8 <__cxa_pure_virtual+0x10>)
 23fb8de:	4903      	ldr	r1, [pc, #12]	; (23fb8ec <__cxa_pure_virtual+0x14>)
 23fb8e0:	f001 f980 	bl	23fcbe4 <panic_>
  while (1);
 23fb8e4:	e7fe      	b.n	23fb8e4 <__cxa_pure_virtual+0xc>
 23fb8e6:	bf00      	nop
 23fb8e8:	023fc731 	.word	0x023fc731
 23fb8ec:	023ffa40 	.word	0x023ffa40

023fb8f0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb8f0:	7800      	ldrb	r0, [r0, #0]
 23fb8f2:	fab0 f080 	clz	r0, r0
 23fb8f6:	0940      	lsrs	r0, r0, #5
 23fb8f8:	4770      	bx	lr

023fb8fa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb8fa:	2301      	movs	r3, #1
 23fb8fc:	7003      	strb	r3, [r0, #0]
 23fb8fe:	4770      	bx	lr

023fb900 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb900:	4770      	bx	lr
	...

023fb904 <_Z10tare_scale6String>:
}

// Particle Cloud Functions must return quickly! Set a boolean to do logic in loop() 
int tare_scale(String cmd)
{
    tareScale = true;
 23fb904:	2201      	movs	r2, #1
 23fb906:	4b02      	ldr	r3, [pc, #8]	; (23fb910 <_Z10tare_scale6String+0xc>)
    return 0;
 23fb908:	2000      	movs	r0, #0
    tareScale = true;
 23fb90a:	701a      	strb	r2, [r3, #0]
 23fb90c:	4770      	bx	lr
 23fb90e:	bf00      	nop
 23fb910:	1007ae34 	.word	0x1007ae34

023fb914 <_Z15calibrate_scale6String>:
{
 23fb914:	b508      	push	{r3, lr}
    weightRef = (uint16_t)cmd.toInt();
 23fb916:	f003 fb64 	bl	23fefe2 <_ZNK6String5toIntEv>
    calibrateScale = true;
 23fb91a:	2201      	movs	r2, #1
    weightRef = (uint16_t)cmd.toInt();
 23fb91c:	4b02      	ldr	r3, [pc, #8]	; (23fb928 <_Z15calibrate_scale6String+0x14>)
 23fb91e:	8018      	strh	r0, [r3, #0]
    calibrateScale = true;
 23fb920:	4b02      	ldr	r3, [pc, #8]	; (23fb92c <_Z15calibrate_scale6String+0x18>)
}
 23fb922:	2000      	movs	r0, #0
    calibrateScale = true;
 23fb924:	701a      	strb	r2, [r3, #0]
}
 23fb926:	bd08      	pop	{r3, pc}
 23fb928:	1007ae3c 	.word	0x1007ae3c
 23fb92c:	1007add4 	.word	0x1007add4

023fb930 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb930:	b510      	push	{r4, lr}
 23fb932:	4604      	mov	r4, r0
 23fb934:	4b09      	ldr	r3, [pc, #36]	; (23fb95c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb936:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb938:	f002 fb72 	bl	23fe020 <_ZN5spark10LogManager8instanceEv>
 23fb93c:	4621      	mov	r1, r4
 23fb93e:	f002 fda9 	bl	23fe494 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb942:	f003 fc33 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fb946:	f003 fc23 	bl	23ff190 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb94a:	4620      	mov	r0, r4
 23fb94c:	4b04      	ldr	r3, [pc, #16]	; (23fb960 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb94e:	f840 3b04 	str.w	r3, [r0], #4
 23fb952:	f002 fc3b 	bl	23fe1cc <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb956:	4620      	mov	r0, r4
 23fb958:	bd10      	pop	{r4, pc}
 23fb95a:	bf00      	nop
 23fb95c:	023ffbc0 	.word	0x023ffbc0
 23fb960:	023ffba8 	.word	0x023ffba8

023fb964 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb964:	b510      	push	{r4, lr}
 23fb966:	4604      	mov	r4, r0
    }
 23fb968:	f7ff ffe2 	bl	23fb930 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb96c:	4620      	mov	r0, r4
 23fb96e:	2124      	movs	r1, #36	; 0x24
 23fb970:	f7ff ffaf 	bl	23fb8d2 <_ZdlPvj>
 23fb974:	4620      	mov	r0, r4
 23fb976:	bd10      	pop	{r4, pc}

023fb978 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb978:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb97a:	f04f 0c20 	mov.w	ip, #32
 23fb97e:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb980:	b500      	push	{lr}
 23fb982:	b08c      	sub	sp, #48	; 0x30
 23fb984:	aa0d      	add	r2, sp, #52	; 0x34
 23fb986:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb98a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb98e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb992:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb994:	6801      	ldr	r1, [r0, #0]
 23fb996:	aa04      	add	r2, sp, #16
 23fb998:	201e      	movs	r0, #30
 23fb99a:	f001 f931 	bl	23fcc00 <log_message_v>
}
 23fb99e:	b00c      	add	sp, #48	; 0x30
 23fb9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb9a4:	b003      	add	sp, #12
 23fb9a6:	4770      	bx	lr

023fb9a8 <_Z14loadcell2_initv>:
{
 23fb9a8:	b530      	push	{r4, r5, lr}
 23fb9aa:	b085      	sub	sp, #20
    loadcell2_cfg_setup( &cfg );
 23fb9ac:	a801      	add	r0, sp, #4
 23fb9ae:	f000 fb4e 	bl	23fc04e <_Z19loadcell2_cfg_setupP15loadcell2_cfg_t>
    LOADCELL2_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fb9b2:	2301      	movs	r3, #1
 23fb9b4:	f8ad 3004 	strh.w	r3, [sp, #4]
 23fb9b8:	2313      	movs	r3, #19
    loadcell2_init( &loadcell2, &cfg );
 23fb9ba:	4c1b      	ldr	r4, [pc, #108]	; (23fba28 <_Z14loadcell2_initv+0x80>)
    Log.info("Reset all registers");
 23fb9bc:	4d1b      	ldr	r5, [pc, #108]	; (23fba2c <_Z14loadcell2_initv+0x84>)
    loadcell2_init( &loadcell2, &cfg );
 23fb9be:	a901      	add	r1, sp, #4
 23fb9c0:	4620      	mov	r0, r4
    LOADCELL2_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fb9c2:	f88d 3006 	strb.w	r3, [sp, #6]
    loadcell2_init( &loadcell2, &cfg );
 23fb9c6:	f000 fb4b 	bl	23fc060 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t>
    delay(100);
 23fb9ca:	2064      	movs	r0, #100	; 0x64
 23fb9cc:	f001 fb1e 	bl	23fd00c <delay>
    Log.info("Reset all registers");
 23fb9d0:	4917      	ldr	r1, [pc, #92]	; (23fba30 <_Z14loadcell2_initv+0x88>)
 23fb9d2:	4628      	mov	r0, r5
 23fb9d4:	f7ff ffd0 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_reset(&loadcell2);
 23fb9d8:	4620      	mov	r0, r4
 23fb9da:	f000 fb8d 	bl	23fc0f8 <_Z15loadcell2_resetP11loadcell2_t>
    delay(100);
 23fb9de:	2064      	movs	r0, #100	; 0x64
 23fb9e0:	f001 fb14 	bl	23fd00c <delay>
    Log.info("Power on");
 23fb9e4:	4913      	ldr	r1, [pc, #76]	; (23fba34 <_Z14loadcell2_initv+0x8c>)
 23fb9e6:	4628      	mov	r0, r5
 23fb9e8:	f7ff ffc6 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_power_on(&loadcell2);
 23fb9ec:	4620      	mov	r0, r4
 23fb9ee:	f000 fba9 	bl	23fc144 <_Z18loadcell2_power_onP11loadcell2_t>
    delay(100);
 23fb9f2:	2064      	movs	r0, #100	; 0x64
 23fb9f4:	f001 fb0a 	bl	23fd00c <delay>
    Log.info("Set default config");
 23fb9f8:	490f      	ldr	r1, [pc, #60]	; (23fba38 <_Z14loadcell2_initv+0x90>)
 23fb9fa:	4628      	mov	r0, r5
 23fb9fc:	f7ff ffbc 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_default_cfg( &loadcell2 );
 23fba00:	4620      	mov	r0, r4
 23fba02:	f000 fc76 	bl	23fc2f2 <_Z21loadcell2_default_cfgP11loadcell2_t>
//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
inline void Delay_1000ms( ) {delay(1000);}
inline void Delay_ms(unsigned long ms) {delay(ms);}
 23fba06:	2064      	movs	r0, #100	; 0x64
 23fba08:	f001 fb00 	bl	23fd00c <delay>
    Log.info("Calibrate AFE");
 23fba0c:	490b      	ldr	r1, [pc, #44]	; (23fba3c <_Z14loadcell2_initv+0x94>)
 23fba0e:	4628      	mov	r0, r5
 23fba10:	f7ff ffb2 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_calibrate_afe(&loadcell2);
 23fba14:	4620      	mov	r0, r4
 23fba16:	f000 fc80 	bl	23fc31a <_Z23loadcell2_calibrate_afeP11loadcell2_t>
    delay(1000);
 23fba1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fba1e:	f001 faf5 	bl	23fd00c <delay>
}
 23fba22:	b005      	add	sp, #20
 23fba24:	bd30      	pop	{r4, r5, pc}
 23fba26:	bf00      	nop
 23fba28:	1007a9bc 	.word	0x1007a9bc
 23fba2c:	1007ae68 	.word	0x1007ae68
 23fba30:	023ffa55 	.word	0x023ffa55
 23fba34:	023ffa69 	.word	0x023ffa69
 23fba38:	023ffa72 	.word	0x023ffa72
 23fba3c:	023ffa85 	.word	0x023ffa85

023fba40 <_Z14publishToCloudv>:
{
 23fba40:	b530      	push	{r4, r5, lr}
    memset(buf, 0, sizeof(buf));
 23fba42:	4b2d      	ldr	r3, [pc, #180]	; (23fbaf8 <_Z14publishToCloudv+0xb8>)
{
 23fba44:	b08b      	sub	sp, #44	; 0x2c
    memset(buf, 0, sizeof(buf));
 23fba46:	2100      	movs	r1, #0
 23fba48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23fba4c:	4618      	mov	r0, r3
 23fba4e:	f003 fe5e 	bl	23ff70e <memset>
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 23fba52:	2400      	movs	r4, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23fba54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23fba58:	4a28      	ldr	r2, [pc, #160]	; (23fbafc <_Z14publishToCloudv+0xbc>)
 23fba5a:	9007      	str	r0, [sp, #28]
    writer.beginObject();
 23fba5c:	a805      	add	r0, sp, #20
 23fba5e:	e9cd 3408 	strd	r3, r4, [sp, #32]
        state_(BEGIN) {
 23fba62:	f88d 4018 	strb.w	r4, [sp, #24]
        n_(0) {
 23fba66:	9205      	str	r2, [sp, #20]
 23fba68:	f002 f88f 	bl	23fdb8a <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name, strlen(name));
 23fba6c:	2206      	movs	r2, #6
 23fba6e:	4924      	ldr	r1, [pc, #144]	; (23fbb00 <_Z14publishToCloudv+0xc0>)
 23fba70:	a805      	add	r0, sp, #20
 23fba72:	f002 f92d 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
        writer.name("weight").value(weight_gr);
 23fba76:	4b23      	ldr	r3, [pc, #140]	; (23fbb04 <_Z14publishToCloudv+0xc4>)
 23fba78:	4605      	mov	r5, r0
 23fba7a:	6818      	ldr	r0, [r3, #0]
 23fba7c:	f7ff fc3c 	bl	23fb2f8 <__aeabi_f2d>
 23fba80:	ec41 0b10 	vmov	d0, r0, r1
 23fba84:	4628      	mov	r0, r5
 23fba86:	f002 f8b1 	bl	23fdbec <_ZN5spark10JSONWriter5valueEd>
 23fba8a:	220b      	movs	r2, #11
 23fba8c:	491e      	ldr	r1, [pc, #120]	; (23fbb08 <_Z14publishToCloudv+0xc8>)
 23fba8e:	a805      	add	r0, sp, #20
 23fba90:	f002 f91e 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
        writer.name("temperature").value(temp_c);
 23fba94:	4b1d      	ldr	r3, [pc, #116]	; (23fbb0c <_Z14publishToCloudv+0xcc>)
 23fba96:	4605      	mov	r5, r0
 23fba98:	6818      	ldr	r0, [r3, #0]
 23fba9a:	f7ff fc2d 	bl	23fb2f8 <__aeabi_f2d>
 23fba9e:	ec41 0b10 	vmov	d0, r0, r1
 23fbaa2:	4628      	mov	r0, r5
 23fbaa4:	f002 f8a2 	bl	23fdbec <_ZN5spark10JSONWriter5valueEd>
    writer.endObject();
 23fbaa8:	a805      	add	r0, sp, #20
 23fbaaa:	f002 f858 	bl	23fdb5e <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 23fbaae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 23fbab2:	4293      	cmp	r3, r2
 23fbab4:	bf28      	it	cs
 23fbab6:	4613      	movcs	r3, r2
 23fbab8:	9a07      	ldr	r2, [sp, #28]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fbaba:	4915      	ldr	r1, [pc, #84]	; (23fbb10 <_Z14publishToCloudv+0xd0>)
 23fbabc:	54d4      	strb	r4, [r2, r3]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fbabe:	4b15      	ldr	r3, [pc, #84]	; (23fbb14 <_Z14publishToCloudv+0xd4>)
 23fbac0:	9a07      	ldr	r2, [sp, #28]
 23fbac2:	781b      	ldrb	r3, [r3, #0]
 23fbac4:	a803      	add	r0, sp, #12
 23fbac6:	f88d 3000 	strb.w	r3, [sp]
 23fbaca:	233c      	movs	r3, #60	; 0x3c
 23fbacc:	f001 fc58 	bl	23fd380 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fbad0:	9c04      	ldr	r4, [sp, #16]
 23fbad2:	b17c      	cbz	r4, 23fbaf4 <_Z14publishToCloudv+0xb4>
      if (--_M_use_count == 0)
 23fbad4:	6863      	ldr	r3, [r4, #4]
 23fbad6:	3b01      	subs	r3, #1
 23fbad8:	6063      	str	r3, [r4, #4]
 23fbada:	b95b      	cbnz	r3, 23fbaf4 <_Z14publishToCloudv+0xb4>
          _M_dispose();
 23fbadc:	6823      	ldr	r3, [r4, #0]
 23fbade:	4620      	mov	r0, r4
 23fbae0:	689b      	ldr	r3, [r3, #8]
 23fbae2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fbae4:	68a3      	ldr	r3, [r4, #8]
 23fbae6:	3b01      	subs	r3, #1
 23fbae8:	60a3      	str	r3, [r4, #8]
 23fbaea:	b91b      	cbnz	r3, 23fbaf4 <_Z14publishToCloudv+0xb4>
            _M_destroy();
 23fbaec:	6823      	ldr	r3, [r4, #0]
 23fbaee:	4620      	mov	r0, r4
 23fbaf0:	68db      	ldr	r3, [r3, #12]
 23fbaf2:	4798      	blx	r3
}
 23fbaf4:	b00b      	add	sp, #44	; 0x2c
 23fbaf6:	bd30      	pop	{r4, r5, pc}
 23fbaf8:	1007a9d4 	.word	0x1007a9d4
 23fbafc:	023ffc7c 	.word	0x023ffc7c
 23fbb00:	023ffa93 	.word	0x023ffa93
 23fbb04:	1007a9d0 	.word	0x1007a9d0
 23fbb08:	023ffa9a 	.word	0x023ffa9a
 23fbb0c:	1007ae38 	.word	0x1007ae38
 23fbb10:	023ffaa6 	.word	0x023ffaa6
 23fbb14:	1007a9b8 	.word	0x1007a9b8

023fbb18 <loop>:
{
 23fbb18:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fbb1a:	f000 fe17 	bl	23fc74c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastRead >= readPeriod.count())
 23fbb1e:	4c4d      	ldr	r4, [pc, #308]	; (23fbc54 <loop+0x13c>)
 23fbb20:	6823      	ldr	r3, [r4, #0]
 23fbb22:	1ac0      	subs	r0, r0, r3
 23fbb24:	f241 3387 	movw	r3, #4999	; 0x1387
 23fbb28:	4298      	cmp	r0, r3
 23fbb2a:	d916      	bls.n	23fbb5a <loop+0x42>
 23fbb2c:	f000 fe0e 	bl	23fc74c <HAL_Timer_Get_Milli_Seconds>
        weight_gr = loadcell2_get_weight(&loadcell2, &cell_data);
 23fbb30:	4949      	ldr	r1, [pc, #292]	; (23fbc58 <loop+0x140>)
        lastRead = millis();
 23fbb32:	6020      	str	r0, [r4, #0]
        weight_gr = loadcell2_get_weight(&loadcell2, &cell_data);
 23fbb34:	4849      	ldr	r0, [pc, #292]	; (23fbc5c <loop+0x144>)
 23fbb36:	f000 fcbf 	bl	23fc4b8 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t>
 23fbb3a:	4b49      	ldr	r3, [pc, #292]	; (23fbc60 <loop+0x148>)
 23fbb3c:	ee10 0a10 	vmov	r0, s0
 23fbb40:	ed83 0a00 	vstr	s0, [r3]
        Log.info("Weight: %.2f", weight_gr);
 23fbb44:	f7ff fbd8 	bl	23fb2f8 <__aeabi_f2d>
 23fbb48:	4602      	mov	r2, r0
 23fbb4a:	460b      	mov	r3, r1
 23fbb4c:	4845      	ldr	r0, [pc, #276]	; (23fbc64 <loop+0x14c>)
 23fbb4e:	4946      	ldr	r1, [pc, #280]	; (23fbc68 <loop+0x150>)
 23fbb50:	f7ff ff12 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        temp_c = 4.2;
 23fbb54:	4b45      	ldr	r3, [pc, #276]	; (23fbc6c <loop+0x154>)
 23fbb56:	4a46      	ldr	r2, [pc, #280]	; (23fbc70 <loop+0x158>)
 23fbb58:	601a      	str	r2, [r3, #0]
 23fbb5a:	f000 fdf7 	bl	23fc74c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastPublish >= publishPeriod.count())
 23fbb5e:	4c45      	ldr	r4, [pc, #276]	; (23fbc74 <loop+0x15c>)
 23fbb60:	6823      	ldr	r3, [r4, #0]
 23fbb62:	1ac0      	subs	r0, r0, r3
 23fbb64:	4b44      	ldr	r3, [pc, #272]	; (23fbc78 <loop+0x160>)
 23fbb66:	4298      	cmp	r0, r3
 23fbb68:	d907      	bls.n	23fbb7a <loop+0x62>
 23fbb6a:	f000 fdef 	bl	23fc74c <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 23fbb6e:	6020      	str	r0, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fbb70:	f001 f8fc 	bl	23fcd6c <spark_cloud_flag_connected>
        if (Particle.connected()) 
 23fbb74:	b108      	cbz	r0, 23fbb7a <loop+0x62>
            publishToCloud();
 23fbb76:	f7ff ff63 	bl	23fba40 <_Z14publishToCloudv>
    if (tareScale == true)
 23fbb7a:	4b40      	ldr	r3, [pc, #256]	; (23fbc7c <loop+0x164>)
 23fbb7c:	781a      	ldrb	r2, [r3, #0]
 23fbb7e:	b1c2      	cbz	r2, 23fbbb2 <loop+0x9a>
        tareScale = false;
 23fbb80:	2400      	movs	r4, #0
        Log.info("Tarring the scale");
 23fbb82:	493f      	ldr	r1, [pc, #252]	; (23fbc80 <loop+0x168>)
 23fbb84:	4837      	ldr	r0, [pc, #220]	; (23fbc64 <loop+0x14c>)
        tareScale = false;
 23fbb86:	701c      	strb	r4, [r3, #0]
        Log.info("Tarring the scale");
 23fbb88:	f7ff fef6 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        loadcell2_tare(&loadcell2, &cell_data);
 23fbb8c:	4932      	ldr	r1, [pc, #200]	; (23fbc58 <loop+0x140>)
 23fbb8e:	4833      	ldr	r0, [pc, #204]	; (23fbc5c <loop+0x144>)
 23fbb90:	f000 fbee 	bl	23fc370 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t>
        delay(500);
 23fbb94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fbb98:	f001 fa38 	bl	23fd00c <delay>
        Log.info("Tarring complete");
 23fbb9c:	4939      	ldr	r1, [pc, #228]	; (23fbc84 <loop+0x16c>)
 23fbb9e:	4831      	ldr	r0, [pc, #196]	; (23fbc64 <loop+0x14c>)
 23fbba0:	f7ff feea 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        EEPROM.put(tareOffsetAddr, cell_data.tare);
 23fbba4:	f003 fc5c 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23fbba8:	2204      	movs	r2, #4
 23fbbaa:	4620      	mov	r0, r4
 23fbbac:	492a      	ldr	r1, [pc, #168]	; (23fbc58 <loop+0x140>)
 23fbbae:	f000 fdf7 	bl	23fc7a0 <HAL_EEPROM_Put>
    if (calibrateScale == true)
 23fbbb2:	4b35      	ldr	r3, [pc, #212]	; (23fbc88 <loop+0x170>)
 23fbbb4:	781a      	ldrb	r2, [r3, #0]
 23fbbb6:	2a00      	cmp	r2, #0
 23fbbb8:	d04a      	beq.n	23fbc50 <loop+0x138>
        calibrateScale = false;
 23fbbba:	2200      	movs	r2, #0
        if (loadcell2_calibration(&loadcell2, weightRef, &cell_data ) == LOADCELL2_GET_RESULT_OK)
 23fbbbc:	4c33      	ldr	r4, [pc, #204]	; (23fbc8c <loop+0x174>)
        Log.info("Start calibration");
 23fbbbe:	4934      	ldr	r1, [pc, #208]	; (23fbc90 <loop+0x178>)
 23fbbc0:	4828      	ldr	r0, [pc, #160]	; (23fbc64 <loop+0x14c>)
        calibrateScale = false;
 23fbbc2:	701a      	strb	r2, [r3, #0]
        Log.info("Start calibration");
 23fbbc4:	f7ff fed8 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        if (loadcell2_calibration(&loadcell2, weightRef, &cell_data ) == LOADCELL2_GET_RESULT_OK)
 23fbbc8:	4a23      	ldr	r2, [pc, #140]	; (23fbc58 <loop+0x140>)
 23fbbca:	8821      	ldrh	r1, [r4, #0]
 23fbbcc:	4823      	ldr	r0, [pc, #140]	; (23fbc5c <loop+0x144>)
 23fbbce:	f000 fbfd 	bl	23fc3cc <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t>
 23fbbd2:	2801      	cmp	r0, #1
 23fbbd4:	d138      	bne.n	23fbc48 <loop+0x130>
            Log.info("Calibration complete");
 23fbbd6:	492f      	ldr	r1, [pc, #188]	; (23fbc94 <loop+0x17c>)
 23fbbd8:	4822      	ldr	r0, [pc, #136]	; (23fbc64 <loop+0x14c>)
 23fbbda:	f7ff fecd 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
            EEPROM.put(weightRefAddr, weightRef);
 23fbbde:	f003 fc3f 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbbe2:	2202      	movs	r2, #2
 23fbbe4:	4621      	mov	r1, r4
 23fbbe6:	200a      	movs	r0, #10
 23fbbe8:	f000 fdda 	bl	23fc7a0 <HAL_EEPROM_Put>
            if (weightRef == LOADCELL2_WEIGHT_100G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_100g);
 23fbbec:	8823      	ldrh	r3, [r4, #0]
 23fbbee:	2b64      	cmp	r3, #100	; 0x64
 23fbbf0:	d108      	bne.n	23fbc04 <loop+0xec>
 23fbbf2:	f003 fc35 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbbf6:	2204      	movs	r2, #4
 23fbbf8:	4927      	ldr	r1, [pc, #156]	; (23fbc98 <loop+0x180>)
 23fbbfa:	2014      	movs	r0, #20
}
 23fbbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fbc00:	f000 bdce 	b.w	23fc7a0 <HAL_EEPROM_Put>
            else if (weightRef == LOADCELL2_WEIGHT_500G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_500g);
 23fbc04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 23fbc08:	d104      	bne.n	23fbc14 <loop+0xfc>
 23fbc0a:	f003 fc29 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbc0e:	2204      	movs	r2, #4
 23fbc10:	4922      	ldr	r1, [pc, #136]	; (23fbc9c <loop+0x184>)
 23fbc12:	e7f2      	b.n	23fbbfa <loop+0xe2>
            else if (weightRef == LOADCELL2_WEIGHT_1000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_1000g);
 23fbc14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fbc18:	d104      	bne.n	23fbc24 <loop+0x10c>
 23fbc1a:	f003 fc21 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbc1e:	2204      	movs	r2, #4
 23fbc20:	491f      	ldr	r1, [pc, #124]	; (23fbca0 <loop+0x188>)
 23fbc22:	e7ea      	b.n	23fbbfa <loop+0xe2>
            else if (weightRef == LOADCELL2_WEIGHT_5000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_5000g);
 23fbc24:	f241 3288 	movw	r2, #5000	; 0x1388
 23fbc28:	4293      	cmp	r3, r2
 23fbc2a:	d104      	bne.n	23fbc36 <loop+0x11e>
 23fbc2c:	f003 fc18 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbc30:	2204      	movs	r2, #4
 23fbc32:	491c      	ldr	r1, [pc, #112]	; (23fbca4 <loop+0x18c>)
 23fbc34:	e7e1      	b.n	23fbbfa <loop+0xe2>
            else if (weightRef == LOADCELL2_WEIGHT_10000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_10000g);
 23fbc36:	f242 7210 	movw	r2, #10000	; 0x2710
 23fbc3a:	4293      	cmp	r3, r2
 23fbc3c:	d108      	bne.n	23fbc50 <loop+0x138>
 23fbc3e:	f003 fc0f 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbc42:	2204      	movs	r2, #4
 23fbc44:	4918      	ldr	r1, [pc, #96]	; (23fbca8 <loop+0x190>)
 23fbc46:	e7d8      	b.n	23fbbfa <loop+0xe2>
            Log.info("Calibration error");
 23fbc48:	4918      	ldr	r1, [pc, #96]	; (23fbcac <loop+0x194>)
 23fbc4a:	4806      	ldr	r0, [pc, #24]	; (23fbc64 <loop+0x14c>)
 23fbc4c:	f7ff fe94 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
}
 23fbc50:	bd10      	pop	{r4, pc}
 23fbc52:	bf00      	nop
 23fbc54:	1007ae0c 	.word	0x1007ae0c
 23fbc58:	1007add8 	.word	0x1007add8
 23fbc5c:	1007a9bc 	.word	0x1007a9bc
 23fbc60:	1007a9d0 	.word	0x1007a9d0
 23fbc64:	1007ae68 	.word	0x1007ae68
 23fbc68:	023ffab4 	.word	0x023ffab4
 23fbc6c:	1007ae38 	.word	0x1007ae38
 23fbc70:	40866666 	.word	0x40866666
 23fbc74:	1007ae08 	.word	0x1007ae08
 23fbc78:	00057e3f 	.word	0x00057e3f
 23fbc7c:	1007ae34 	.word	0x1007ae34
 23fbc80:	023ffac1 	.word	0x023ffac1
 23fbc84:	023ffad3 	.word	0x023ffad3
 23fbc88:	1007add4 	.word	0x1007add4
 23fbc8c:	1007ae3c 	.word	0x1007ae3c
 23fbc90:	023ffae4 	.word	0x023ffae4
 23fbc94:	023ffaf6 	.word	0x023ffaf6
 23fbc98:	1007ade0 	.word	0x1007ade0
 23fbc9c:	1007ade8 	.word	0x1007ade8
 23fbca0:	1007adf0 	.word	0x1007adf0
 23fbca4:	1007adf8 	.word	0x1007adf8
 23fbca8:	1007ae00 	.word	0x1007ae00
 23fbcac:	023ffb0b 	.word	0x023ffb0b

023fbcb0 <_Z23readCalibrationSettingsv>:
{
 23fbcb0:	b500      	push	{lr}
 23fbcb2:	ed2d 8b02 	vpush	{d8}
 23fbcb6:	b085      	sub	sp, #20
    EEPROM.get(tareOffsetAddr, tareOffsetVal);
 23fbcb8:	f003 fbd2 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23fbcbc:	2204      	movs	r2, #4
 23fbcbe:	2000      	movs	r0, #0
 23fbcc0:	a902      	add	r1, sp, #8
 23fbcc2:	f000 fd5f 	bl	23fc784 <HAL_EEPROM_Get>
    if (tareOffsetVal == 0xFFFFFFFF)
 23fbcc6:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 23fbdc0 <_Z23readCalibrationSettingsv+0x110>
 23fbcca:	eddd 7a02 	vldr	s15, [sp, #8]
 23fbcce:	eef4 7a48 	vcmp.f32	s15, s16
 23fbcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fbcd6:	d136      	bne.n	23fbd46 <_Z23readCalibrationSettingsv+0x96>
        Log.info("No tarring found. Perfoming a tare.");
 23fbcd8:	493a      	ldr	r1, [pc, #232]	; (23fbdc4 <_Z23readCalibrationSettingsv+0x114>)
 23fbcda:	483b      	ldr	r0, [pc, #236]	; (23fbdc8 <_Z23readCalibrationSettingsv+0x118>)
 23fbcdc:	f7ff fe4c 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        tareScale = true;
 23fbce0:	2201      	movs	r2, #1
 23fbce2:	4b3a      	ldr	r3, [pc, #232]	; (23fbdcc <_Z23readCalibrationSettingsv+0x11c>)
 23fbce4:	701a      	strb	r2, [r3, #0]
    EEPROM.get(weightRefAddr, weightRefVal);
 23fbce6:	f003 fbbb 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbcea:	2202      	movs	r2, #2
 23fbcec:	200a      	movs	r0, #10
 23fbcee:	f10d 0106 	add.w	r1, sp, #6
 23fbcf2:	f000 fd47 	bl	23fc784 <HAL_EEPROM_Get>
    if (weightRefVal == 0xFFFF)
 23fbcf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fbcfa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23fbcfe:	429a      	cmp	r2, r3
 23fbd00:	d107      	bne.n	23fbd12 <_Z23readCalibrationSettingsv+0x62>
        Log.info("No weight ref found.");
 23fbd02:	4933      	ldr	r1, [pc, #204]	; (23fbdd0 <_Z23readCalibrationSettingsv+0x120>)
 23fbd04:	4830      	ldr	r0, [pc, #192]	; (23fbdc8 <_Z23readCalibrationSettingsv+0x118>)
 23fbd06:	f7ff fe37 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        weightRef = 1000;
 23fbd0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fbd0e:	4b31      	ldr	r3, [pc, #196]	; (23fbdd4 <_Z23readCalibrationSettingsv+0x124>)
 23fbd10:	801a      	strh	r2, [r3, #0]
    EEPROM.get(calibrationFactorAddr, calibrationFactorVal);
 23fbd12:	f003 fba5 	bl	23ff460 <_Z21__fetch_global_EEPROMv>
 23fbd16:	2204      	movs	r2, #4
 23fbd18:	2014      	movs	r0, #20
 23fbd1a:	a903      	add	r1, sp, #12
 23fbd1c:	f000 fd32 	bl	23fc784 <HAL_EEPROM_Get>
    if (calibrationFactorVal == 0xFFFFFFFF)
 23fbd20:	eddd 7a03 	vldr	s15, [sp, #12]
 23fbd24:	eef4 7a48 	vcmp.f32	s15, s16
 23fbd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fbd2c:	d111      	bne.n	23fbd52 <_Z23readCalibrationSettingsv+0xa2>
        Log.info("No calibration value found. Performing a calibration.");
 23fbd2e:	492a      	ldr	r1, [pc, #168]	; (23fbdd8 <_Z23readCalibrationSettingsv+0x128>)
 23fbd30:	4825      	ldr	r0, [pc, #148]	; (23fbdc8 <_Z23readCalibrationSettingsv+0x118>)
 23fbd32:	f7ff fe21 	bl	23fb978 <_ZNK5spark6Logger4infoEPKcz>
        calibrateScale = true;
 23fbd36:	2201      	movs	r2, #1
 23fbd38:	4b28      	ldr	r3, [pc, #160]	; (23fbddc <_Z23readCalibrationSettingsv+0x12c>)
 23fbd3a:	701a      	strb	r2, [r3, #0]
}
 23fbd3c:	b005      	add	sp, #20
 23fbd3e:	ecbd 8b02 	vpop	{d8}
 23fbd42:	f85d fb04 	ldr.w	pc, [sp], #4
        cell_data.tare_ok = LOADCELL2_DATA_OK;
 23fbd46:	2201      	movs	r2, #1
        cell_data.tare = tareOffsetVal;
 23fbd48:	4b25      	ldr	r3, [pc, #148]	; (23fbde0 <_Z23readCalibrationSettingsv+0x130>)
 23fbd4a:	edc3 7a00 	vstr	s15, [r3]
        cell_data.tare_ok = LOADCELL2_DATA_OK;
 23fbd4e:	711a      	strb	r2, [r3, #4]
 23fbd50:	e7c9      	b.n	23fbce6 <_Z23readCalibrationSettingsv+0x36>
        switch (weightRefVal)
 23fbd52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23fbd56:	4b22      	ldr	r3, [pc, #136]	; (23fbde0 <_Z23readCalibrationSettingsv+0x130>)
 23fbd58:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 23fbd5c:	d024      	beq.n	23fbda8 <_Z23readCalibrationSettingsv+0xf8>
 23fbd5e:	d80b      	bhi.n	23fbd78 <_Z23readCalibrationSettingsv+0xc8>
 23fbd60:	2a64      	cmp	r2, #100	; 0x64
 23fbd62:	d017      	beq.n	23fbd94 <_Z23readCalibrationSettingsv+0xe4>
 23fbd64:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 23fbd68:	d019      	beq.n	23fbd9e <_Z23readCalibrationSettingsv+0xee>
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fbd6a:	2200      	movs	r2, #0
 23fbd6c:	731a      	strb	r2, [r3, #12]
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fbd6e:	751a      	strb	r2, [r3, #20]
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbd70:	771a      	strb	r2, [r3, #28]
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbd72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 23fbd76:	e00a      	b.n	23fbd8e <_Z23readCalibrationSettingsv+0xde>
        switch (weightRefVal)
 23fbd78:	f241 3188 	movw	r1, #5000	; 0x1388
 23fbd7c:	428a      	cmp	r2, r1
 23fbd7e:	d018      	beq.n	23fbdb2 <_Z23readCalibrationSettingsv+0x102>
 23fbd80:	f242 7110 	movw	r1, #10000	; 0x2710
 23fbd84:	428a      	cmp	r2, r1
 23fbd86:	d1f0      	bne.n	23fbd6a <_Z23readCalibrationSettingsv+0xba>
                cell_data.weight_coeff_10000g = calibrationFactorVal;
 23fbd88:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
                cell_data.weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fbd8c:	2201      	movs	r2, #1
                cell_data.weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbd8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 23fbd92:	e7d3      	b.n	23fbd3c <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fbd94:	2201      	movs	r2, #1
                cell_data.weight_coeff_100g = calibrationFactorVal;
 23fbd96:	edc3 7a02 	vstr	s15, [r3, #8]
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fbd9a:	731a      	strb	r2, [r3, #12]
                break;
 23fbd9c:	e7ce      	b.n	23fbd3c <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fbd9e:	2201      	movs	r2, #1
                cell_data.weight_coeff_500g = calibrationFactorVal;
 23fbda0:	edc3 7a04 	vstr	s15, [r3, #16]
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fbda4:	751a      	strb	r2, [r3, #20]
                break;
 23fbda6:	e7c9      	b.n	23fbd3c <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fbda8:	2201      	movs	r2, #1
                cell_data.weight_coeff_1000g = calibrationFactorVal;
 23fbdaa:	edc3 7a06 	vstr	s15, [r3, #24]
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fbdae:	771a      	strb	r2, [r3, #28]
                break;
 23fbdb0:	e7c4      	b.n	23fbd3c <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fbdb2:	2201      	movs	r2, #1
                cell_data.weight_coeff_5000g = calibrationFactorVal;
 23fbdb4:	edc3 7a08 	vstr	s15, [r3, #32]
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fbdb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 23fbdbc:	e7be      	b.n	23fbd3c <_Z23readCalibrationSettingsv+0x8c>
 23fbdbe:	bf00      	nop
 23fbdc0:	4f800000 	.word	0x4f800000
 23fbdc4:	023ffb1d 	.word	0x023ffb1d
 23fbdc8:	1007ae68 	.word	0x1007ae68
 23fbdcc:	1007ae34 	.word	0x1007ae34
 23fbdd0:	023ffb41 	.word	0x023ffb41
 23fbdd4:	1007ae3c 	.word	0x1007ae3c
 23fbdd8:	023ffb56 	.word	0x023ffb56
 23fbddc:	1007add4 	.word	0x1007add4
 23fbde0:	1007add8 	.word	0x1007add8

023fbde4 <setup>:
{
 23fbde4:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fbde6:	2000      	movs	r0, #0
 23fbde8:	f000 fce8 	bl	23fc7bc <hal_timer_millis>
        while (_while() && !_condition()) {
 23fbdec:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23fbdf0:	4604      	mov	r4, r0
 23fbdf2:	2000      	movs	r0, #0
 23fbdf4:	f000 fce2 	bl	23fc7bc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fbdf8:	1b00      	subs	r0, r0, r4
 23fbdfa:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fbdfe:	42a8      	cmp	r0, r5
 23fbe00:	f171 0300 	sbcs.w	r3, r1, #0
 23fbe04:	d207      	bcs.n	23fbe16 <setup+0x32>
  waitFor(Serial.isConnected, 10000);
 23fbe06:	f003 f9d1 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fbe0a:	f003 f9c4 	bl	23ff196 <_ZN9USBSerial11isConnectedEv>
 23fbe0e:	b910      	cbnz	r0, 23fbe16 <setup+0x32>
            spark_process();
 23fbe10:	f000 ff90 	bl	23fcd34 <spark_process>
        while (_while() && !_condition()) {
 23fbe14:	e7ed      	b.n	23fbdf2 <setup+0xe>
 23fbe16:	f003 f9c9 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fbe1a:	f003 f9bc 	bl	23ff196 <_ZN9USBSerial11isConnectedEv>
  delay(1000);
 23fbe1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fbe22:	f001 f8f3 	bl	23fd00c <delay>
  loadcell2_init();
 23fbe26:	f7ff fdbf 	bl	23fb9a8 <_Z14loadcell2_initv>
  readCalibrationSettings();
 23fbe2a:	f7ff ff41 	bl	23fbcb0 <_Z23readCalibrationSettingsv>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23fbe2e:	4a07      	ldr	r2, [pc, #28]	; (23fbe4c <setup+0x68>)
 23fbe30:	4907      	ldr	r1, [pc, #28]	; (23fbe50 <setup+0x6c>)
 23fbe32:	4808      	ldr	r0, [pc, #32]	; (23fbe54 <setup+0x70>)
 23fbe34:	f001 f9b1 	bl	23fd19a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23fbe38:	4a07      	ldr	r2, [pc, #28]	; (23fbe58 <setup+0x74>)
 23fbe3a:	4908      	ldr	r1, [pc, #32]	; (23fbe5c <setup+0x78>)
 23fbe3c:	4805      	ldr	r0, [pc, #20]	; (23fbe54 <setup+0x70>)
 23fbe3e:	f001 f9ac 	bl	23fd19a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
}
 23fbe42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23fbe46:	f000 bf83 	b.w	23fcd50 <spark_cloud_flag_connect>
 23fbe4a:	bf00      	nop
 23fbe4c:	023ffb8c 	.word	0x023ffb8c
 23fbe50:	023fb905 	.word	0x023fb905
 23fbe54:	023fd16f 	.word	0x023fd16f
 23fbe58:	023ffb91 	.word	0x023ffb91
 23fbe5c:	023fb915 	.word	0x023fb915

023fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbe62:	2614      	movs	r6, #20
 23fbe64:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbe6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbe6e:	42ae      	cmp	r6, r5
 23fbe70:	d004      	beq.n	23fbe7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbe72:	4628      	mov	r0, r5
 23fbe74:	f003 f814 	bl	23feea0 <_ZN6StringD1Ev>
 23fbe78:	3514      	adds	r5, #20
 23fbe7a:	e7f8      	b.n	23fbe6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbe7c:	6820      	ldr	r0, [r4, #0]
 23fbe7e:	f001 f855 	bl	23fcf2c <free>
    AllocatorT::free(data_);
}
 23fbe82:	4620      	mov	r0, r4
 23fbe84:	bd70      	pop	{r4, r5, r6, pc}

023fbe86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fbe86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
 23fbe8a:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
 23fbe8e:	4607      	mov	r7, r0
        if (n > 0) {
 23fbe90:	dd38      	ble.n	23fbf04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fbe92:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
 23fbe96:	fb09 f008 	mul.w	r0, r9, r8
 23fbe9a:	f001 f839 	bl	23fcf10 <malloc>
            if (!d) {
 23fbe9e:	4605      	mov	r5, r0
 23fbea0:	b3c0      	cbz	r0, 23fbf14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x8e>
            move(d, data_, data_ + size_);
 23fbea2:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
 23fbea6:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fbea8:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
 23fbeac:	d215      	bcs.n	23fbeda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
 23fbeae:	4286      	cmp	r6, r0
 23fbeb0:	d914      	bls.n	23fbedc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
 23fbeb2:	3e14      	subs	r6, #20
            dest += end - p - 1;
 23fbeb4:	f1a4 0914 	sub.w	r9, r4, #20
 23fbeb8:	1b34      	subs	r4, r6, r4
 23fbeba:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fbebc:	45b1      	cmp	r9, r6
 23fbebe:	d022      	beq.n	23fbf06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
 23fbec0:	b12c      	cbz	r4, 23fbece <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
 23fbec2:	4631      	mov	r1, r6
 23fbec4:	4620      	mov	r0, r4
 23fbec6:	f003 f867 	bl	23fef98 <_ZN6StringC1EOS_>
 23fbeca:	7c33      	ldrb	r3, [r6, #16]
 23fbecc:	7423      	strb	r3, [r4, #16]
 23fbece:	4630      	mov	r0, r6
 23fbed0:	f002 ffe6 	bl	23feea0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fbed4:	3e14      	subs	r6, #20
 23fbed6:	3c14      	subs	r4, #20
 23fbed8:	e7f0      	b.n	23fbebc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
 23fbeda:	d014      	beq.n	23fbf06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
 23fbedc:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
 23fbede:	42a6      	cmp	r6, r4
 23fbee0:	d011      	beq.n	23fbf06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
 23fbee2:	f1b9 0f00 	cmp.w	r9, #0
 23fbee6:	d006      	beq.n	23fbef6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x70>
 23fbee8:	4621      	mov	r1, r4
 23fbeea:	4648      	mov	r0, r9
 23fbeec:	f003 f854 	bl	23fef98 <_ZN6StringC1EOS_>
 23fbef0:	7c23      	ldrb	r3, [r4, #16]
 23fbef2:	f889 3010 	strb.w	r3, [r9, #16]
 23fbef6:	4620      	mov	r0, r4
 23fbef8:	f002 ffd2 	bl	23feea0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fbefc:	3414      	adds	r4, #20
 23fbefe:	f109 0914 	add.w	r9, r9, #20
 23fbf02:	e7ec      	b.n	23fbede <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
 23fbf04:	2500      	movs	r5, #0
    ::free(ptr);
 23fbf06:	6838      	ldr	r0, [r7, #0]
 23fbf08:	f001 f810 	bl	23fcf2c <free>
        return true;
 23fbf0c:	2001      	movs	r0, #1
        data_ = d;
 23fbf0e:	603d      	str	r5, [r7, #0]
        capacity_ = n;
 23fbf10:	f8c7 8008 	str.w	r8, [r7, #8]
    }
 23fbf14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fbf18:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fbf1e:	e9c0 3300 	strd	r3, r3, [r0]
 23fbf22:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf24:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf26:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf28:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf2a:	4299      	cmp	r1, r3
 23fbf2c:	dd17      	ble.n	23fbf5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
 23fbf2e:	f7ff ffaa 	bl	23fbe86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fbf32:	b1a0      	cbz	r0, 23fbf5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbf34:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fbf38:	f04f 0814 	mov.w	r8, #20
 23fbf3c:	fb08 6803 	mla	r8, r8, r3, r6
 23fbf40:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 23fbf42:	45b0      	cmp	r8, r6
 23fbf44:	d009      	beq.n	23fbf5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
 23fbf46:	b12f      	cbz	r7, 23fbf54 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
 23fbf48:	4631      	mov	r1, r6
 23fbf4a:	4638      	mov	r0, r7
 23fbf4c:	f003 f83e 	bl	23fefcc <_ZN6StringC1ERKS_>
 23fbf50:	7c33      	ldrb	r3, [r6, #16]
 23fbf52:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
 23fbf54:	3614      	adds	r6, #20
 23fbf56:	3714      	adds	r7, #20
 23fbf58:	e7f3      	b.n	23fbf42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
 23fbf5a:	686b      	ldr	r3, [r5, #4]
 23fbf5c:	6063      	str	r3, [r4, #4]
}
 23fbf5e:	4620      	mov	r0, r4
 23fbf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbf64 <_GLOBAL__sub_I_SystemMode>:
 23fbf64:	b530      	push	{r4, r5, lr}
        val_(val) {
 23fbf66:	2400      	movs	r4, #0
 23fbf68:	4b2f      	ldr	r3, [pc, #188]	; (23fc028 <_GLOBAL__sub_I_SystemMode+0xc4>)
 23fbf6a:	b093      	sub	sp, #76	; 0x4c
SYSTEM_THREAD(ENABLED);
 23fbf6c:	4621      	mov	r1, r4
 23fbf6e:	2001      	movs	r0, #1
 23fbf70:	701c      	strb	r4, [r3, #0]
 23fbf72:	f000 fe8b 	bl	23fcc8c <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 23fbf76:	4b2d      	ldr	r3, [pc, #180]	; (23fc02c <_GLOBAL__sub_I_SystemMode+0xc8>)
    SleepResult() {}
 23fbf78:	4a2d      	ldr	r2, [pc, #180]	; (23fc030 <_GLOBAL__sub_I_SystemMode+0xcc>)
        set_system_mode(mode);
 23fbf7a:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23fbf7c:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fbf80:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fbf82:	f000 fe67 	bl	23fcc54 <set_system_mode>
        level_(level) {
 23fbf86:	492b      	ldr	r1, [pc, #172]	; (23fc034 <_GLOBAL__sub_I_SystemMode+0xd0>)
 23fbf88:	a80d      	add	r0, sp, #52	; 0x34
 23fbf8a:	f002 ffd4 	bl	23fef36 <_ZN6StringC1EPK19__FlashStringHelper>
 23fbf8e:	2101      	movs	r1, #1
    if (n > 0 && realloc(n)) {
 23fbf90:	a801      	add	r0, sp, #4
        capacity_(0) {
 23fbf92:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fbf96:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 23fbf9a:	9403      	str	r4, [sp, #12]
    if (n > 0 && realloc(n)) {
 23fbf9c:	f7ff ff73 	bl	23fbe86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fbfa0:	b150      	cbz	r0, 23fbfb8 <_GLOBAL__sub_I_SystemMode+0x54>
        copy(data_, values.begin(), values.end());
 23fbfa2:	9c01      	ldr	r4, [sp, #4]
            new(dest) T(*p);
 23fbfa4:	b134      	cbz	r4, 23fbfb4 <_GLOBAL__sub_I_SystemMode+0x50>
class LogCategoryFilter {
 23fbfa6:	4620      	mov	r0, r4
 23fbfa8:	a90d      	add	r1, sp, #52	; 0x34
 23fbfaa:	f003 f80f 	bl	23fefcc <_ZN6StringC1ERKS_>
 23fbfae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 23fbfb2:	7423      	strb	r3, [r4, #16]
        size_ = n;
 23fbfb4:	2301      	movs	r3, #1
 23fbfb6:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fbfb8:	f003 f8f8 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fbfbc:	4605      	mov	r5, r0
 23fbfbe:	a901      	add	r1, sp, #4
 23fbfc0:	a804      	add	r0, sp, #16
 23fbfc2:	f7ff ffa9 	bl	23fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fbfc6:	a904      	add	r1, sp, #16
 23fbfc8:	a807      	add	r0, sp, #28
 23fbfca:	f7ff ffa5 	bl	23fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fbfce:	4c1a      	ldr	r4, [pc, #104]	; (23fc038 <_GLOBAL__sub_I_SystemMode+0xd4>)
 23fbfd0:	4b1a      	ldr	r3, [pc, #104]	; (23fc03c <_GLOBAL__sub_I_SystemMode+0xd8>)
 23fbfd2:	a907      	add	r1, sp, #28
 23fbfd4:	6023      	str	r3, [r4, #0]
 23fbfd6:	a80a      	add	r0, sp, #40	; 0x28
 23fbfd8:	f7ff ff9e 	bl	23fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fbfdc:	aa0a      	add	r2, sp, #40	; 0x28
 23fbfde:	2128      	movs	r1, #40	; 0x28
 23fbfe0:	1d20      	adds	r0, r4, #4
 23fbfe2:	f002 fb39 	bl	23fe658 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fbfe6:	a80a      	add	r0, sp, #40	; 0x28
 23fbfe8:	f7ff ff3a 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fbfec:	a807      	add	r0, sp, #28
 23fbfee:	f7ff ff37 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fbff2:	4b13      	ldr	r3, [pc, #76]	; (23fc040 <_GLOBAL__sub_I_SystemMode+0xdc>)
 23fbff4:	6225      	str	r5, [r4, #32]
 23fbff6:	6023      	str	r3, [r4, #0]
 23fbff8:	a804      	add	r0, sp, #16
 23fbffa:	f7ff ff31 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fbffe:	4b11      	ldr	r3, [pc, #68]	; (23fc044 <_GLOBAL__sub_I_SystemMode+0xe0>)
 23fc000:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc002:	f003 f8d3 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fc006:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc00a:	f003 f8bd 	bl	23ff188 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc00e:	f002 f807 	bl	23fe020 <_ZN5spark10LogManager8instanceEv>
 23fc012:	4621      	mov	r1, r4
 23fc014:	f002 f9f8 	bl	23fe408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});
 23fc018:	a801      	add	r0, sp, #4
 23fc01a:	f7ff ff21 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
 23fc01e:	a80d      	add	r0, sp, #52	; 0x34
 23fc020:	f002 ff3e 	bl	23feea0 <_ZN6StringD1Ev>
 23fc024:	b013      	add	sp, #76	; 0x4c
 23fc026:	bd30      	pop	{r4, r5, pc}
 23fc028:	1007a9b8 	.word	0x1007a9b8
 23fc02c:	1007a9ac 	.word	0x1007a9ac
 23fc030:	ffff0000 	.word	0xffff0000
 23fc034:	023ffb9b 	.word	0x023ffb9b
 23fc038:	1007ae10 	.word	0x1007ae10
 23fc03c:	023ffba8 	.word	0x023ffba8
 23fc040:	023ffd18 	.word	0x023ffd18
 23fc044:	023ffbc0 	.word	0x023ffbc0

023fc048 <_Z9Delay_1msv>:
inline void Delay_1ms( ) {delay(1);}
 23fc048:	2001      	movs	r0, #1
 23fc04a:	f000 bfdf 	b.w	23fd00c <delay>

023fc04e <_Z19loadcell2_cfg_setupP15loadcell2_cfg_t>:

void loadcell2_cfg_setup ( loadcell2_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fc04e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fc052:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;
    
    // Additional gpio pins

    cfg->rdy = HAL_PIN_NC;
 23fc054:	7083      	strb	r3, [r0, #2]

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fc056:	2300      	movs	r3, #0
 23fc058:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = LOADCELL2_SLAVE_ADDRESS;
 23fc05a:	232a      	movs	r3, #42	; 0x2a
 23fc05c:	7203      	strb	r3, [r0, #8]
}
 23fc05e:	4770      	bx	lr

023fc060 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t>:

LOADCELL2_RETVAL loadcell2_init ( loadcell2_t *ctx, loadcell2_cfg_t *cfg )
{
 23fc060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fc062:	460c      	mov	r4, r1
 23fc064:	4605      	mov	r5, r0
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fc066:	a801      	add	r0, sp, #4
 23fc068:	f000 fa90 	bl	23fc58c <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fc06c:	6863      	ldr	r3, [r4, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc06e:	1d2e      	adds	r6, r5, #4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fc070:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fc072:	7823      	ldrb	r3, [r4, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc074:	4630      	mov	r0, r6
    i2c_cfg.scl    = cfg->scl;
 23fc076:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fc07a:	7863      	ldrb	r3, [r4, #1]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc07c:	a901      	add	r1, sp, #4
    i2c_cfg.sda    = cfg->sda;
 23fc07e:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fc082:	7a23      	ldrb	r3, [r4, #8]
 23fc084:	742b      	strb	r3, [r5, #16]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc086:	f000 fa93 	bl	23fc5b0 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fc08a:	3001      	adds	r0, #1
 23fc08c:	d00e      	beq.n	23fc0ac <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t+0x4c>
    {
        return LOADCELL2_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fc08e:	7c29      	ldrb	r1, [r5, #16]
 23fc090:	4630      	mov	r0, r6
 23fc092:	f000 faab 	bl	23fc5ec <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fc096:	6861      	ldr	r1, [r4, #4]
 23fc098:	4630      	mov	r0, r6
 23fc09a:	f000 fa99 	bl	23fc5d0 <_Z20i2c_master_set_speedP12i2c_master_tm>

    // Input pins

    digital_in_init( &ctx->rdy, cfg->rdy );
 23fc09e:	4628      	mov	r0, r5
 23fc0a0:	78a1      	ldrb	r1, [r4, #2]
 23fc0a2:	f000 fa67 	bl	23fc574 <_Z15digital_in_initP12digital_in_th>
    
    return LOADCELL2_OK;
 23fc0a6:	2000      	movs	r0, #0
}
 23fc0a8:	b004      	add	sp, #16
 23fc0aa:	bd70      	pop	{r4, r5, r6, pc}
        return LOADCELL2_INIT_ERROR;
 23fc0ac:	20ff      	movs	r0, #255	; 0xff
 23fc0ae:	e7fb      	b.n	23fc0a8 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t+0x48>

023fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>:

    loadcell2_enable_dec_cap( ctx );
}

void loadcell2_generic_write ( loadcell2_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
 23fc0b0:	b510      	push	{r4, lr}
 23fc0b2:	b0c0      	sub	sp, #256	; 0x100
    uint8_t tx_buf[ 256 ];
    uint8_t cnt;
    
    tx_buf[ 0 ] = reg;
 23fc0b4:	f88d 1000 	strb.w	r1, [sp]
    
    for ( cnt = 1; cnt <= len; cnt++ )
 23fc0b8:	2101      	movs	r1, #1
 23fc0ba:	4299      	cmp	r1, r3
 23fc0bc:	d807      	bhi.n	23fc0ce <_Z23loadcell2_generic_writeP11loadcell2_thPhh+0x1e>
    {
        tx_buf[ cnt ] = data_buf[ cnt - 1 ]; 
 23fc0be:	1854      	adds	r4, r2, r1
 23fc0c0:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 23fc0c4:	f80d 4001 	strb.w	r4, [sp, r1]
    for ( cnt = 1; cnt <= len; cnt++ )
 23fc0c8:	3101      	adds	r1, #1
 23fc0ca:	b2c9      	uxtb	r1, r1
 23fc0cc:	e7f5      	b.n	23fc0ba <_Z23loadcell2_generic_writeP11loadcell2_thPhh+0xa>
    }
    
    i2c_master_write( &ctx->i2c, tx_buf, len + 1 );   
 23fc0ce:	4669      	mov	r1, sp
 23fc0d0:	1c5a      	adds	r2, r3, #1
 23fc0d2:	3004      	adds	r0, #4
 23fc0d4:	f000 fa90 	bl	23fc5f8 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fc0d8:	b040      	add	sp, #256	; 0x100
 23fc0da:	bd10      	pop	{r4, pc}

023fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>:

void loadcell2_generic_read ( loadcell2_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
 23fc0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2c_master_write_then_read( &ctx->i2c, &reg, 1, data_buf, len );
 23fc0de:	3004      	adds	r0, #4
{
 23fc0e0:	f88d 100f 	strb.w	r1, [sp, #15]
    i2c_master_write_then_read( &ctx->i2c, &reg, 1, data_buf, len );
 23fc0e4:	9300      	str	r3, [sp, #0]
 23fc0e6:	f10d 010f 	add.w	r1, sp, #15
 23fc0ea:	4613      	mov	r3, r2
 23fc0ec:	2201      	movs	r2, #1
 23fc0ee:	f000 faa1 	bl	23fc634 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j>
}
 23fc0f2:	b005      	add	sp, #20
 23fc0f4:	f85d fb04 	ldr.w	pc, [sp], #4

023fc0f8 <_Z15loadcell2_resetP11loadcell2_t>:
        return LOADCELL2_ERROR;
    }
}

void loadcell2_reset ( loadcell2_t *ctx )
{
 23fc0f8:	b513      	push	{r0, r1, r4, lr}
 23fc0fa:	4604      	mov	r4, r0
    uint8_t tmp;
    
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc0fc:	f10d 0207 	add.w	r2, sp, #7
 23fc100:	2301      	movs	r3, #1
 23fc102:	2100      	movs	r1, #0
 23fc104:	f7ff ffea 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    
    tmp |= LOADCELL2_RR;
 23fc108:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc10c:	4620      	mov	r0, r4
    tmp |= LOADCELL2_RR;
 23fc10e:	f043 0301 	orr.w	r3, r3, #1
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc112:	f10d 0207 	add.w	r2, sp, #7
 23fc116:	2100      	movs	r1, #0
    tmp |= LOADCELL2_RR;
 23fc118:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc11c:	2301      	movs	r3, #1
 23fc11e:	f7ff ffc7 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS

static void dev_rst_delay( void )
{
    Delay_1ms( );
 23fc122:	f7ff ff91 	bl	23fc048 <_Z9Delay_1msv>
    tmp &= 0xFE;
 23fc126:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc12a:	2100      	movs	r1, #0
    tmp &= 0xFE;
 23fc12c:	f023 0301 	bic.w	r3, r3, #1
 23fc130:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc134:	4620      	mov	r0, r4
 23fc136:	2301      	movs	r3, #1
 23fc138:	f10d 0207 	add.w	r2, sp, #7
 23fc13c:	f7ff ffb8 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc140:	b002      	add	sp, #8
 23fc142:	bd10      	pop	{r4, pc}

023fc144 <_Z18loadcell2_power_onP11loadcell2_t>:
{
 23fc144:	b513      	push	{r0, r1, r4, lr}
 23fc146:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc148:	f10d 0207 	add.w	r2, sp, #7
 23fc14c:	2301      	movs	r3, #1
 23fc14e:	2100      	movs	r1, #0
 23fc150:	f7ff ffc4 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp |= LOADCELL2_PUA;
 23fc154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc158:	4620      	mov	r0, r4
    tmp |= LOADCELL2_PUA;
 23fc15a:	f043 0306 	orr.w	r3, r3, #6
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc15e:	f10d 0207 	add.w	r2, sp, #7
 23fc162:	2100      	movs	r1, #0
    tmp |= LOADCELL2_PUA;
 23fc164:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc168:	2301      	movs	r3, #1
 23fc16a:	f7ff ffa1 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
    Delay_1ms( );
 23fc16e:	f7ff ff6b 	bl	23fc048 <_Z9Delay_1msv>
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc172:	4620      	mov	r0, r4
 23fc174:	2301      	movs	r3, #1
 23fc176:	2100      	movs	r1, #0
 23fc178:	f10d 0207 	add.w	r2, sp, #7
 23fc17c:	f7ff ffae 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    if ( ( tmp & LOADCELL2_PUR ) != LOADCELL2_ERROR )
 23fc180:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 23fc184:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 23fc188:	b002      	add	sp, #8
 23fc18a:	bd10      	pop	{r4, pc}

023fc18c <_Z25loadcell2_set_ldo_voltageP11loadcell2_t>:
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc18c:	2301      	movs	r3, #1
{
 23fc18e:	b513      	push	{r0, r1, r4, lr}
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc190:	4619      	mov	r1, r3
 23fc192:	f10d 0207 	add.w	r2, sp, #7
{
 23fc196:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc198:	f7ff ffa0 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xC7;
 23fc19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc1a0:	4620      	mov	r0, r4
    tmp &= 0xC7;
 23fc1a2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    tmp |= 0x20;
 23fc1a6:	f043 0320 	orr.w	r3, r3, #32
 23fc1aa:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc1ae:	2301      	movs	r3, #1
 23fc1b0:	f10d 0207 	add.w	r2, sp, #7
 23fc1b4:	4619      	mov	r1, r3
 23fc1b6:	f7ff ff7b 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc1ba:	4620      	mov	r0, r4
 23fc1bc:	f10d 0207 	add.w	r2, sp, #7
 23fc1c0:	2301      	movs	r3, #1
 23fc1c2:	2100      	movs	r1, #0
 23fc1c4:	f7ff ff8a 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp |= LOADCELL2_AVDDS;
 23fc1c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc1cc:	2100      	movs	r1, #0
    tmp |= LOADCELL2_AVDDS;
 23fc1ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23fc1d2:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fc1d6:	4620      	mov	r0, r4
 23fc1d8:	2301      	movs	r3, #1
 23fc1da:	f10d 0207 	add.w	r2, sp, #7
 23fc1de:	f7ff ff67 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc1e2:	b002      	add	sp, #8
 23fc1e4:	bd10      	pop	{r4, pc}

023fc1e6 <_Z18loadcell2_set_gainP11loadcell2_th>:
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc1e6:	2301      	movs	r3, #1
{
 23fc1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc1ea:	460d      	mov	r5, r1
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc1ec:	f10d 0207 	add.w	r2, sp, #7
 23fc1f0:	4619      	mov	r1, r3
{
 23fc1f2:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc1f4:	f7ff ff72 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xF8;
 23fc1f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch ( gain_val )
 23fc1fc:	2d10      	cmp	r5, #16
    tmp &= 0xF8;
 23fc1fe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    switch ( gain_val )
 23fc202:	d023      	beq.n	23fc24c <_Z18loadcell2_set_gainP11loadcell2_th+0x66>
 23fc204:	d810      	bhi.n	23fc228 <_Z18loadcell2_set_gainP11loadcell2_th+0x42>
 23fc206:	2d04      	cmp	r5, #4
 23fc208:	d01a      	beq.n	23fc240 <_Z18loadcell2_set_gainP11loadcell2_th+0x5a>
 23fc20a:	2d08      	cmp	r5, #8
 23fc20c:	d01b      	beq.n	23fc246 <_Z18loadcell2_set_gainP11loadcell2_th+0x60>
 23fc20e:	2d02      	cmp	r5, #2
 23fc210:	d013      	beq.n	23fc23a <_Z18loadcell2_set_gainP11loadcell2_th+0x54>
            tmp |= LOADCELL2_GAIN_x128;
 23fc212:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fc216:	2301      	movs	r3, #1
 23fc218:	4620      	mov	r0, r4
 23fc21a:	4619      	mov	r1, r3
 23fc21c:	f10d 0207 	add.w	r2, sp, #7
 23fc220:	f7ff ff46 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc224:	b003      	add	sp, #12
 23fc226:	bd30      	pop	{r4, r5, pc}
    switch ( gain_val )
 23fc228:	2d40      	cmp	r5, #64	; 0x40
 23fc22a:	d012      	beq.n	23fc252 <_Z18loadcell2_set_gainP11loadcell2_th+0x6c>
 23fc22c:	2d80      	cmp	r5, #128	; 0x80
 23fc22e:	d013      	beq.n	23fc258 <_Z18loadcell2_set_gainP11loadcell2_th+0x72>
 23fc230:	2d20      	cmp	r5, #32
 23fc232:	d1ee      	bne.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x32;
 23fc234:	f043 0305 	orr.w	r3, r3, #5
 23fc238:	e7eb      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x2;
 23fc23a:	f043 0301 	orr.w	r3, r3, #1
 23fc23e:	e7e8      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x4;
 23fc240:	f043 0302 	orr.w	r3, r3, #2
 23fc244:	e7e5      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x8;
 23fc246:	f043 0303 	orr.w	r3, r3, #3
 23fc24a:	e7e2      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x16;
 23fc24c:	f043 0304 	orr.w	r3, r3, #4
 23fc250:	e7df      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x64;
 23fc252:	f043 0306 	orr.w	r3, r3, #6
 23fc256:	e7dc      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x128;
 23fc258:	f043 0307 	orr.w	r3, r3, #7
 23fc25c:	e7d9      	b.n	23fc212 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>

023fc25e <_Z25loadcell2_set_sample_rateP11loadcell2_th>:
{
 23fc25e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc260:	460c      	mov	r4, r1
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc262:	2301      	movs	r3, #1
 23fc264:	2102      	movs	r1, #2
 23fc266:	f10d 0207 	add.w	r2, sp, #7
{
 23fc26a:	4605      	mov	r5, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc26c:	f7ff ff36 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0x8F;
 23fc270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch ( rate_sps )
 23fc274:	2c28      	cmp	r4, #40	; 0x28
    tmp &= 0x8F;
 23fc276:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    switch ( rate_sps )
 23fc27a:	d010      	beq.n	23fc29e <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x40>
 23fc27c:	2c50      	cmp	r4, #80	; 0x50
 23fc27e:	d011      	beq.n	23fc2a4 <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x46>
 23fc280:	2c14      	cmp	r4, #20
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_20;
 23fc282:	bf08      	it	eq
 23fc284:	f043 0310 	orreq.w	r3, r3, #16
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_80;
 23fc288:	f88d 3007 	strb.w	r3, [sp, #7]
	loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc28c:	2102      	movs	r1, #2
 23fc28e:	2301      	movs	r3, #1
 23fc290:	4628      	mov	r0, r5
 23fc292:	f10d 0207 	add.w	r2, sp, #7
 23fc296:	f7ff ff0b 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc29a:	b003      	add	sp, #12
 23fc29c:	bd30      	pop	{r4, r5, pc}
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_40;
 23fc29e:	f043 0320 	orr.w	r3, r3, #32
 23fc2a2:	e7f1      	b.n	23fc288 <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x2a>
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_80;
 23fc2a4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 23fc2a8:	e7ee      	b.n	23fc288 <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x2a>

023fc2aa <_Z26loadcell2_turn_off_clk_chpP11loadcell2_t>:
    tmp = 0x30;
 23fc2aa:	2330      	movs	r3, #48	; 0x30
{
 23fc2ac:	b507      	push	{r0, r1, r2, lr}
    loadcell2_generic_write( ctx, LOADCELL2_REG_ADC_REG, &tmp, 1 );
 23fc2ae:	2115      	movs	r1, #21
    tmp = 0x30;
 23fc2b0:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_ADC_REG, &tmp, 1 );
 23fc2b4:	f10d 0207 	add.w	r2, sp, #7
 23fc2b8:	2301      	movs	r3, #1
 23fc2ba:	f7ff fef9 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc2be:	b003      	add	sp, #12
 23fc2c0:	f85d fb04 	ldr.w	pc, [sp], #4

023fc2c4 <_Z24loadcell2_enable_dec_capP11loadcell2_t>:
{
 23fc2c4:	b513      	push	{r0, r1, r4, lr}
 23fc2c6:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fc2c8:	f10d 0207 	add.w	r2, sp, #7
 23fc2cc:	2301      	movs	r3, #1
 23fc2ce:	211c      	movs	r1, #28
 23fc2d0:	f7ff ff04 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0x7F;
 23fc2d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fc2d8:	211c      	movs	r1, #28
    tmp |= 0x80;
 23fc2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23fc2de:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fc2e2:	4620      	mov	r0, r4
 23fc2e4:	2301      	movs	r3, #1
 23fc2e6:	f10d 0207 	add.w	r2, sp, #7
 23fc2ea:	f7ff fee1 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc2ee:	b002      	add	sp, #8
 23fc2f0:	bd10      	pop	{r4, pc}

023fc2f2 <_Z21loadcell2_default_cfgP11loadcell2_t>:
{
 23fc2f2:	b510      	push	{r4, lr}
 23fc2f4:	4604      	mov	r4, r0
    loadcell2_set_ldo_voltage ( ctx );
 23fc2f6:	f7ff ff49 	bl	23fc18c <_Z25loadcell2_set_ldo_voltageP11loadcell2_t>
    loadcell2_set_gain( ctx, LOADCELL2_GAIN_VAL_x128 );
 23fc2fa:	4620      	mov	r0, r4
 23fc2fc:	2180      	movs	r1, #128	; 0x80
 23fc2fe:	f7ff ff72 	bl	23fc1e6 <_Z18loadcell2_set_gainP11loadcell2_th>
    loadcell2_set_sample_rate( ctx, LOADCELL2_CONV_RATE_SPS_80 );
 23fc302:	4620      	mov	r0, r4
 23fc304:	2150      	movs	r1, #80	; 0x50
 23fc306:	f7ff ffaa 	bl	23fc25e <_Z25loadcell2_set_sample_rateP11loadcell2_th>
    loadcell2_turn_off_clk_chp( ctx );
 23fc30a:	4620      	mov	r0, r4
 23fc30c:	f7ff ffcd 	bl	23fc2aa <_Z26loadcell2_turn_off_clk_chpP11loadcell2_t>
    loadcell2_enable_dec_cap( ctx );
 23fc310:	4620      	mov	r0, r4
}
 23fc312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadcell2_enable_dec_cap( ctx );
 23fc316:	f7ff bfd5 	b.w	23fc2c4 <_Z24loadcell2_enable_dec_capP11loadcell2_t>

023fc31a <_Z23loadcell2_calibrate_afeP11loadcell2_t>:
{
 23fc31a:	b513      	push	{r0, r1, r4, lr}
 23fc31c:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc31e:	f10d 0207 	add.w	r2, sp, #7
 23fc322:	2301      	movs	r3, #1
 23fc324:	2102      	movs	r1, #2
 23fc326:	f7ff fed9 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xFB;
 23fc32a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc32e:	2102      	movs	r1, #2
    tmp &= 0xFB;
 23fc330:	f023 0304 	bic.w	r3, r3, #4
    tmp |= 0x04;
 23fc334:	f043 0304 	orr.w	r3, r3, #4
 23fc338:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fc33c:	4620      	mov	r0, r4
 23fc33e:	2301      	movs	r3, #1
 23fc340:	f10d 0207 	add.w	r2, sp, #7
 23fc344:	f7ff feb4 	bl	23fc0b0 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fc348:	b002      	add	sp, #8
 23fc34a:	bd10      	pop	{r4, pc}

023fc34c <_Z20loadcell2_get_resultP11loadcell2_t>:
{
 23fc34c:	b507      	push	{r0, r1, r2, lr}
    loadcell2_generic_read( ctx, LOADCELL2_REG_ADC_B2, rx_buf, 3 );
 23fc34e:	2303      	movs	r3, #3
 23fc350:	2112      	movs	r1, #18
 23fc352:	aa01      	add	r2, sp, #4
 23fc354:	f7ff fec2 	bl	23fc0dc <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    result |= rx_buf[ 1 ];
 23fc358:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    result |= rx_buf[ 2 ];
 23fc35c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 23fc360:	ba5b      	rev16	r3, r3
 23fc362:	b29b      	uxth	r3, r3
}
 23fc364:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 23fc368:	b003      	add	sp, #12
 23fc36a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc370 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t>:
{
 23fc370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc372:	4607      	mov	r7, r0
 23fc374:	460e      	mov	r6, r1
 23fc376:	2405      	movs	r4, #5
        results = loadcell2_get_result( ctx );
 23fc378:	4638      	mov	r0, r7
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
 23fc37a:	3c01      	subs	r4, #1
        results = loadcell2_get_result( ctx );
 23fc37c:	f7ff ffe6 	bl	23fc34c <_Z20loadcell2_get_resultP11loadcell2_t>
}

static void dev_measure_delay ( void )
{
    Delay_1ms( );
 23fc380:	f7ff fe62 	bl	23fc048 <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
 23fc384:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23fc388:	d1f6      	bne.n	23fc378 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x8>
 23fc38a:	2564      	movs	r5, #100	; 0x64
        results = loadcell2_get_result( ctx );
 23fc38c:	4638      	mov	r0, r7
 23fc38e:	f7ff ffdd 	bl	23fc34c <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
 23fc392:	3d01      	subs	r5, #1
        sum_val += results;
 23fc394:	4404      	add	r4, r0
    Delay_1ms( );
 23fc396:	f7ff fe57 	bl	23fc048 <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
 23fc39a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fc39e:	d1f5      	bne.n	23fc38c <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x1c>
    average_val = ( float ) sum_val;
 23fc3a0:	ee07 4a90 	vmov	s15, r4
    average_val /= 100.0;
 23fc3a4:	eddf 6a08 	vldr	s13, [pc, #32]	; 23fc3c8 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x58>
    average_val = ( float ) sum_val;
 23fc3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cell_data->tare_ok = LOADCELL2_DATA_OK;
 23fc3ac:	2301      	movs	r3, #1
    average_val /= 100.0;
 23fc3ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    cell_data->tare_ok = LOADCELL2_DATA_OK;
 23fc3b2:	7133      	strb	r3, [r6, #4]
    cell_data->tare = average_val;
 23fc3b4:	ed86 7a00 	vstr	s14, [r6]
    cell_data->weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fc3b8:	7335      	strb	r5, [r6, #12]
    cell_data->weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fc3ba:	7535      	strb	r5, [r6, #20]
    cell_data->weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc3bc:	7735      	strb	r5, [r6, #28]
    cell_data->weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc3be:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    cell_data->weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc3c2:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
}
 23fc3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc3c8:	42c80000 	.word	0x42c80000

023fc3cc <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t>:
{
 23fc3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc3d0:	4680      	mov	r8, r0
 23fc3d2:	ed2d 8b02 	vpush	{d8}
 23fc3d6:	460e      	mov	r6, r1
 23fc3d8:	4615      	mov	r5, r2
    tare_val = cell_data->tare;
 23fc3da:	ed92 8a00 	vldr	s16, [r2]
 23fc3de:	2414      	movs	r4, #20
    sum_val = 0;
 23fc3e0:	2700      	movs	r7, #0
        results = loadcell2_get_result( ctx );
 23fc3e2:	4640      	mov	r0, r8
 23fc3e4:	f7ff ffb2 	bl	23fc34c <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fc3e8:	3c01      	subs	r4, #1
        sum_val += results;
 23fc3ea:	4407      	add	r7, r0
    Delay_1ms( );
 23fc3ec:	f7ff fe2c 	bl	23fc048 <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fc3f0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23fc3f4:	d1f5      	bne.n	23fc3e2 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x16>
    average_val = ( float ) sum_val;
 23fc3f6:	ee07 7a90 	vmov	s15, r7
    average_val /= 20.0;
 23fc3fa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
    average_val = ( float ) sum_val;
 23fc3fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    average_val /= 20.0;
 23fc402:	eec7 7a26 	vdiv.f32	s15, s14, s13
    switch ( cal_val )
 23fc406:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    weight_val = average_val - tare_val;
 23fc40a:	ee77 7ac8 	vsub.f32	s15, s15, s16
    switch ( cal_val )
 23fc40e:	d036      	beq.n	23fc47e <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xb2>
 23fc410:	d80d      	bhi.n	23fc42e <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x62>
 23fc412:	2e64      	cmp	r6, #100	; 0x64
 23fc414:	d01d      	beq.n	23fc452 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x86>
 23fc416:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 23fc41a:	d027      	beq.n	23fc46c <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xa0>
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fc41c:	2300      	movs	r3, #0
 23fc41e:	732b      	strb	r3, [r5, #12]
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fc420:	752b      	strb	r3, [r5, #20]
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc422:	772b      	strb	r3, [r5, #28]
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc424:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fc428:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
            break;
 23fc42c:	e019      	b.n	23fc462 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
    switch ( cal_val )
 23fc42e:	f241 3388 	movw	r3, #5000	; 0x1388
 23fc432:	429e      	cmp	r6, r3
 23fc434:	d02c      	beq.n	23fc490 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xc4>
 23fc436:	f242 7310 	movw	r3, #10000	; 0x2710
 23fc43a:	429e      	cmp	r6, r3
 23fc43c:	d1ee      	bne.n	23fc41c <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x50>
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fc43e:	eddf 6a19 	vldr	s13, [pc, #100]	; 23fc4a4 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xd8>
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fc442:	2401      	movs	r4, #1
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fc444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fc448:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fc44c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
            break;
 23fc450:	e007      	b.n	23fc462 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_100g = 100.0 / weight_val;
 23fc452:	eddf 6a15 	vldr	s13, [pc, #84]	; 23fc4a8 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xdc>
 23fc456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fc45a:	2401      	movs	r4, #1
            cell_data->weight_coeff_100g = 100.0 / weight_val;
 23fc45c:	ed85 7a02 	vstr	s14, [r5, #8]
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fc460:	732c      	strb	r4, [r5, #12]
}
 23fc462:	4620      	mov	r0, r4
 23fc464:	ecbd 8b02 	vpop	{d8}
 23fc468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fc46c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 23fc4ac <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe0>
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fc470:	2401      	movs	r4, #1
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fc472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fc476:	752c      	strb	r4, [r5, #20]
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fc478:	ed85 7a04 	vstr	s14, [r5, #16]
            break;
 23fc47c:	e7f1      	b.n	23fc462 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fc47e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 23fc4b0 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe4>
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fc482:	2401      	movs	r4, #1
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fc484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fc488:	772c      	strb	r4, [r5, #28]
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fc48a:	ed85 7a06 	vstr	s14, [r5, #24]
            break;
 23fc48e:	e7e8      	b.n	23fc462 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fc490:	eddf 6a08 	vldr	s13, [pc, #32]	; 23fc4b4 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe8>
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fc494:	2401      	movs	r4, #1
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fc496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fc49a:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fc49e:	ed85 7a08 	vstr	s14, [r5, #32]
            break;
 23fc4a2:	e7de      	b.n	23fc462 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
 23fc4a4:	461c4000 	.word	0x461c4000
 23fc4a8:	42c80000 	.word	0x42c80000
 23fc4ac:	43fa0000 	.word	0x43fa0000
 23fc4b0:	447a0000 	.word	0x447a0000
 23fc4b4:	459c4000 	.word	0x459c4000

023fc4b8 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t>:
{
 23fc4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc4ba:	ed2d 8b02 	vpush	{d8}
 23fc4be:	4607      	mov	r7, r0
 23fc4c0:	460c      	mov	r4, r1
    tare_val = cell_data->tare;
 23fc4c2:	ed91 8a00 	vldr	s16, [r1]
 23fc4c6:	2614      	movs	r6, #20
    sum_val = 0;
 23fc4c8:	2500      	movs	r5, #0
        results = loadcell2_get_result( ctx );
 23fc4ca:	4638      	mov	r0, r7
 23fc4cc:	f7ff ff3e 	bl	23fc34c <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fc4d0:	3e01      	subs	r6, #1
        sum_val += results;
 23fc4d2:	4405      	add	r5, r0
    Delay_1ms( );
 23fc4d4:	f7ff fdb8 	bl	23fc048 <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fc4d8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23fc4dc:	d1f5      	bne.n	23fc4ca <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x12>
    average_val = ( float ) sum_val;
 23fc4de:	ee07 5a90 	vmov	s15, r5
    average_val /= 20.0;
 23fc4e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
    average_val = ( float ) sum_val;
 23fc4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    average_val /= 20.0;
 23fc4ea:	ee87 0a87 	vdiv.f32	s0, s15, s14
    if ( cell_data->weight_data_100g_ok == LOADCELL2_DATA_OK )
 23fc4ee:	7b23      	ldrb	r3, [r4, #12]
    weight_val = average_val - tare_val;
 23fc4f0:	ee30 0a48 	vsub.f32	s0, s0, s16
    if ( cell_data->weight_data_100g_ok == LOADCELL2_DATA_OK )
 23fc4f4:	2b01      	cmp	r3, #1
 23fc4f6:	d10d      	bne.n	23fc514 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x5c>
        weight_val *= cell_data->weight_coeff_100g;
 23fc4f8:	edd4 7a02 	vldr	s15, [r4, #8]
        weight_val *= cell_data->weight_coeff_500g;
 23fc4fc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 23fc500:	ecbd 8b02 	vpop	{d8}
    if ( weight_val < 0 )
 23fc504:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23fc508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        weight_val = 0.0;
 23fc50c:	bf48      	it	mi
 23fc50e:	ed9f 0a18 	vldrmi	s0, [pc, #96]	; 23fc570 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0xb8>
}
 23fc512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( cell_data->weight_data_500g_ok == LOADCELL2_DATA_OK )
 23fc514:	7d23      	ldrb	r3, [r4, #20]
 23fc516:	2b01      	cmp	r3, #1
 23fc518:	d102      	bne.n	23fc520 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x68>
        weight_val *= cell_data->weight_coeff_500g;
 23fc51a:	edd4 7a04 	vldr	s15, [r4, #16]
 23fc51e:	e7ed      	b.n	23fc4fc <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_1000g_ok == LOADCELL2_DATA_OK )
 23fc520:	7f23      	ldrb	r3, [r4, #28]
 23fc522:	2b01      	cmp	r3, #1
 23fc524:	d102      	bne.n	23fc52c <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x74>
        weight_val *= cell_data->weight_coeff_1000g;
 23fc526:	edd4 7a06 	vldr	s15, [r4, #24]
 23fc52a:	e7e7      	b.n	23fc4fc <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_5000g_ok == LOADCELL2_DATA_OK )
 23fc52c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 23fc530:	2b01      	cmp	r3, #1
 23fc532:	d102      	bne.n	23fc53a <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x82>
        weight_val *= cell_data->weight_coeff_5000g;
 23fc534:	edd4 7a08 	vldr	s15, [r4, #32]
 23fc538:	e7e0      	b.n	23fc4fc <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_10000g_ok == LOADCELL2_DATA_OK )
 23fc53a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23fc53e:	2b01      	cmp	r3, #1
 23fc540:	d102      	bne.n	23fc548 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x90>
        weight_val *= cell_data->weight_coeff_10000g;
 23fc542:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 23fc546:	e7d9      	b.n	23fc4fc <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
        weight_val *= LOADCELL2_DEFAULT_WEIGHT_SCALE_COEFFICIENT;
 23fc548:	ee10 0a10 	vmov	r0, s0
 23fc54c:	f7fe fed4 	bl	23fb2f8 <__aeabi_f2d>
 23fc550:	a305      	add	r3, pc, #20	; (adr r3, 23fc568 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0xb0>)
 23fc552:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc556:	f7fe ff27 	bl	23fb3a8 <__aeabi_dmul>
 23fc55a:	f7ff f937 	bl	23fb7cc <__aeabi_d2f>
 23fc55e:	ee00 0a10 	vmov	s0, r0
 23fc562:	e7cd      	b.n	23fc500 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x48>
 23fc564:	f3af 8000 	nop.w
 23fc568:	616a3715 	.word	0x616a3715
 23fc56c:	3fb6a7a5 	.word	0x3fb6a7a5
 23fc570:	00000000 	.word	0x00000000

023fc574 <_Z15digital_in_initP12digital_in_th>:

#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fc574:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fc576:	460c      	mov	r4, r1
 23fc578:	b921      	cbnz	r1, 23fc584 <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fc57a:	7800      	ldrb	r0, [r0, #0]
 23fc57c:	f002 ff5e 	bl	23ff43c <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fc580:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fc582:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fc584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc588:	e7fb      	b.n	23fc582 <_Z15digital_in_initP12digital_in_th+0xe>
	...

023fc58c <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{   
 23fc58c:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fc58e:	2400      	movs	r4, #0
 23fc590:	4b05      	ldr	r3, [pc, #20]	; (23fc5a8 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fc592:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fc594:	4b05      	ldr	r3, [pc, #20]	; (23fc5ac <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fc596:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fc598:	f002 ff94 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc59c:	4621      	mov	r1, r4
}
 23fc59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fc5a2:	f001 b8df 	b.w	23fd764 <_ZN7TwoWire8setSpeedEm>
 23fc5a6:	bf00      	nop
 23fc5a8:	1007ae3e 	.word	0x1007ae3e
 23fc5ac:	1007ae40 	.word	0x1007ae40

023fc5b0 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{   
 23fc5b0:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fc5b2:	f002 ff87 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc5b6:	4b05      	ldr	r3, [pc, #20]	; (23fc5cc <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fc5b8:	6819      	ldr	r1, [r3, #0]
 23fc5ba:	f001 f8d3 	bl	23fd764 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fc5be:	f002 ff81 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc5c2:	f001 f8d3 	bl	23fd76c <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc5c6:	2000      	movs	r0, #0
 23fc5c8:	bd08      	pop	{r3, pc}
 23fc5ca:	bf00      	nop
 23fc5cc:	1007ae40 	.word	0x1007ae40

023fc5d0 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{    
 23fc5d0:	b510      	push	{r4, lr}
 23fc5d2:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fc5d4:	4b04      	ldr	r3, [pc, #16]	; (23fc5e8 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fc5d6:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fc5d8:	f002 ff74 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc5dc:	4621      	mov	r1, r4
 23fc5de:	f001 f8c1 	bl	23fd764 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc5e2:	2000      	movs	r0, #0
 23fc5e4:	bd10      	pop	{r4, pc}
 23fc5e6:	bf00      	nop
 23fc5e8:	1007ae40 	.word	0x1007ae40

023fc5ec <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{    
    addr = address;                 //set function parameter to global variable
 23fc5ec:	4b01      	ldr	r3, [pc, #4]	; (23fc5f4 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc5ee:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fc5f0:	7019      	strb	r1, [r3, #0]
}
 23fc5f2:	4770      	bx	lr
 23fc5f4:	1007ae3e 	.word	0x1007ae3e

023fc5f8 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{   
 23fc5f8:	b513      	push	{r0, r1, r4, lr}
 23fc5fa:	460c      	mov	r4, r1
 23fc5fc:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fc5fe:	f002 ff61 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc602:	4b0b      	ldr	r3, [pc, #44]	; (23fc630 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fc604:	7819      	ldrb	r1, [r3, #0]
 23fc606:	f001 f8e0 	bl	23fd7ca <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fc60a:	f002 ff5b 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc60e:	6803      	ldr	r3, [r0, #0]
 23fc610:	4621      	mov	r1, r4
 23fc612:	68db      	ldr	r3, [r3, #12]
 23fc614:	9a01      	ldr	r2, [sp, #4]
 23fc616:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)         //send stop condition (true)
 23fc618:	f002 ff54 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc61c:	2101      	movs	r1, #1
 23fc61e:	f001 f8d8 	bl	23fd7d2 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;                  //return status
    }
    return I2C_MASTER_ERROR;                        //return status    
}
 23fc622:	3801      	subs	r0, #1
 23fc624:	bf18      	it	ne
 23fc626:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fc62a:	b002      	add	sp, #8
 23fc62c:	bd10      	pop	{r4, pc}
 23fc62e:	bf00      	nop
 23fc630:	1007ae3e 	.word	0x1007ae3e

023fc634 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j>:
    return I2C_MASTER_ERROR;            //return status
}

//i2c write (dummy write) then read operation
int8_t i2c_master_write_then_read(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data, uint8_t *read_data_buf, size_t len_read_data)
{   
 23fc634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    //local variable
    uint8_t temp;     //variable for determining error

    //write
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fc638:	4e19      	ldr	r6, [pc, #100]	; (23fc6a0 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x6c>)
{   
 23fc63a:	460c      	mov	r4, r1
 23fc63c:	461d      	mov	r5, r3
 23fc63e:	9201      	str	r2, [sp, #4]
 23fc640:	f8dd 8020 	ldr.w	r8, [sp, #32]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fc644:	f002 ff3e 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc648:	7831      	ldrb	r1, [r6, #0]
 23fc64a:	f001 f8be 	bl	23fd7ca <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fc64e:	f002 ff39 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc652:	6803      	ldr	r3, [r0, #0]
 23fc654:	9a01      	ldr	r2, [sp, #4]
 23fc656:	68db      	ldr	r3, [r3, #12]
 23fc658:	4621      	mov	r1, r4
 23fc65a:	4798      	blx	r3
    Wire.endTransmission(FALSE);                    //send restart condition (false)
 23fc65c:	f002 ff32 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc660:	2100      	movs	r1, #0
 23fc662:	f001 f8b6 	bl	23fd7d2 <_ZN7TwoWire15endTransmissionEh>

    //read
    temp = Wire.requestFrom(addr, len_read_data, true);     //true signals send stop after read
 23fc666:	f002 ff2d 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc66a:	7831      	ldrb	r1, [r6, #0]
 23fc66c:	2301      	movs	r3, #1
 23fc66e:	4642      	mov	r2, r8
 23fc670:	f001 f899 	bl	23fd7a6 <_ZN7TwoWire11requestFromEhjh>
 23fc674:	2600      	movs	r6, #0
 23fc676:	b2c4      	uxtb	r4, r0
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fc678:	b2f7      	uxtb	r7, r6
 23fc67a:	45b8      	cmp	r8, r7
 23fc67c:	f106 0601 	add.w	r6, r6, #1
 23fc680:	d906      	bls.n	23fc690 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x5c>
    {
        read_data_buf[ii] = Wire.read();                    //write pointer function parameter
 23fc682:	f002 ff1f 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23fc686:	6803      	ldr	r3, [r0, #0]
 23fc688:	695b      	ldr	r3, [r3, #20]
 23fc68a:	4798      	blx	r3
 23fc68c:	55e8      	strb	r0, [r5, r7]
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fc68e:	e7f3      	b.n	23fc678 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x44>
    }

    //logic for successful transfer
    if(temp != 0)                       //requestFrom() returns 0 if timeout occurs
 23fc690:	fab4 f084 	clz	r0, r4
 23fc694:	0940      	lsrs	r0, r0, #5
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;            //return status
}
 23fc696:	4240      	negs	r0, r0
 23fc698:	b002      	add	sp, #8
 23fc69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc69e:	bf00      	nop
 23fc6a0:	1007ae3e 	.word	0x1007ae3e

023fc6a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc6a4:	b509      	push	{r0, r3, lr}
 23fc6a6:	4804      	ldr	r0, [pc, #16]	; (23fc6b8 <os_mutex_recursive_create+0x14>)
 23fc6a8:	6800      	ldr	r0, [r0, #0]
 23fc6aa:	4b04      	ldr	r3, [pc, #16]	; (23fc6bc <os_mutex_recursive_create+0x18>)
 23fc6ac:	4403      	add	r3, r0
 23fc6ae:	681b      	ldr	r3, [r3, #0]
 23fc6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc6b2:	9302      	str	r3, [sp, #8]
 23fc6b4:	bd09      	pop	{r0, r3, pc}
 23fc6b6:	0000      	.short	0x0000
 23fc6b8:	1007a934 	.word	0x1007a934
 23fc6bc:	00000030 	.word	0x00000030

023fc6c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc6c0:	b509      	push	{r0, r3, lr}
 23fc6c2:	4804      	ldr	r0, [pc, #16]	; (23fc6d4 <os_mutex_recursive_destroy+0x14>)
 23fc6c4:	6800      	ldr	r0, [r0, #0]
 23fc6c6:	4b04      	ldr	r3, [pc, #16]	; (23fc6d8 <os_mutex_recursive_destroy+0x18>)
 23fc6c8:	4403      	add	r3, r0
 23fc6ca:	681b      	ldr	r3, [r3, #0]
 23fc6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc6ce:	9302      	str	r3, [sp, #8]
 23fc6d0:	bd09      	pop	{r0, r3, pc}
 23fc6d2:	0000      	.short	0x0000
 23fc6d4:	1007a934 	.word	0x1007a934
 23fc6d8:	00000030 	.word	0x00000030

023fc6dc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc6dc:	b509      	push	{r0, r3, lr}
 23fc6de:	4804      	ldr	r0, [pc, #16]	; (23fc6f0 <os_mutex_recursive_lock+0x14>)
 23fc6e0:	6800      	ldr	r0, [r0, #0]
 23fc6e2:	4b04      	ldr	r3, [pc, #16]	; (23fc6f4 <os_mutex_recursive_lock+0x18>)
 23fc6e4:	4403      	add	r3, r0
 23fc6e6:	681b      	ldr	r3, [r3, #0]
 23fc6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc6ea:	9302      	str	r3, [sp, #8]
 23fc6ec:	bd09      	pop	{r0, r3, pc}
 23fc6ee:	0000      	.short	0x0000
 23fc6f0:	1007a934 	.word	0x1007a934
 23fc6f4:	00000030 	.word	0x00000030

023fc6f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc6f8:	b509      	push	{r0, r3, lr}
 23fc6fa:	4804      	ldr	r0, [pc, #16]	; (23fc70c <os_mutex_recursive_unlock+0x14>)
 23fc6fc:	6800      	ldr	r0, [r0, #0]
 23fc6fe:	4b04      	ldr	r3, [pc, #16]	; (23fc710 <os_mutex_recursive_unlock+0x18>)
 23fc700:	4403      	add	r3, r0
 23fc702:	681b      	ldr	r3, [r3, #0]
 23fc704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc706:	9302      	str	r3, [sp, #8]
 23fc708:	bd09      	pop	{r0, r3, pc}
 23fc70a:	0000      	.short	0x0000
 23fc70c:	1007a934 	.word	0x1007a934
 23fc710:	00000030 	.word	0x00000030

023fc714 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc714:	b509      	push	{r0, r3, lr}
 23fc716:	4804      	ldr	r0, [pc, #16]	; (23fc728 <HAL_RNG_GetRandomNumber+0x14>)
 23fc718:	6800      	ldr	r0, [r0, #0]
 23fc71a:	4b04      	ldr	r3, [pc, #16]	; (23fc72c <HAL_RNG_GetRandomNumber+0x18>)
 23fc71c:	4403      	add	r3, r0
 23fc71e:	681b      	ldr	r3, [r3, #0]
 23fc720:	685b      	ldr	r3, [r3, #4]
 23fc722:	9302      	str	r3, [sp, #8]
 23fc724:	bd09      	pop	{r0, r3, pc}
 23fc726:	0000      	.short	0x0000
 23fc728:	1007a934 	.word	0x1007a934
 23fc72c:	00000000 	.word	0x00000000

023fc730 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc730:	b509      	push	{r0, r3, lr}
 23fc732:	4804      	ldr	r0, [pc, #16]	; (23fc744 <HAL_Delay_Microseconds+0x14>)
 23fc734:	6800      	ldr	r0, [r0, #0]
 23fc736:	4b04      	ldr	r3, [pc, #16]	; (23fc748 <HAL_Delay_Microseconds+0x18>)
 23fc738:	4403      	add	r3, r0
 23fc73a:	681b      	ldr	r3, [r3, #0]
 23fc73c:	68db      	ldr	r3, [r3, #12]
 23fc73e:	9302      	str	r3, [sp, #8]
 23fc740:	bd09      	pop	{r0, r3, pc}
 23fc742:	0000      	.short	0x0000
 23fc744:	1007a934 	.word	0x1007a934
 23fc748:	00000000 	.word	0x00000000

023fc74c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc74c:	b509      	push	{r0, r3, lr}
 23fc74e:	4804      	ldr	r0, [pc, #16]	; (23fc760 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc750:	6800      	ldr	r0, [r0, #0]
 23fc752:	4b04      	ldr	r3, [pc, #16]	; (23fc764 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc754:	4403      	add	r3, r0
 23fc756:	681b      	ldr	r3, [r3, #0]
 23fc758:	695b      	ldr	r3, [r3, #20]
 23fc75a:	9302      	str	r3, [sp, #8]
 23fc75c:	bd09      	pop	{r0, r3, pc}
 23fc75e:	0000      	.short	0x0000
 23fc760:	1007a934 	.word	0x1007a934
 23fc764:	00000000 	.word	0x00000000

023fc768 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23fc768:	b509      	push	{r0, r3, lr}
 23fc76a:	4804      	ldr	r0, [pc, #16]	; (23fc77c <HAL_EEPROM_Init+0x14>)
 23fc76c:	6800      	ldr	r0, [r0, #0]
 23fc76e:	4b04      	ldr	r3, [pc, #16]	; (23fc780 <HAL_EEPROM_Init+0x18>)
 23fc770:	4403      	add	r3, r0
 23fc772:	681b      	ldr	r3, [r3, #0]
 23fc774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc776:	9302      	str	r3, [sp, #8]
 23fc778:	bd09      	pop	{r0, r3, pc}
 23fc77a:	0000      	.short	0x0000
 23fc77c:	1007a934 	.word	0x1007a934
 23fc780:	00000000 	.word	0x00000000

023fc784 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23fc784:	b509      	push	{r0, r3, lr}
 23fc786:	4804      	ldr	r0, [pc, #16]	; (23fc798 <HAL_EEPROM_Get+0x14>)
 23fc788:	6800      	ldr	r0, [r0, #0]
 23fc78a:	4b04      	ldr	r3, [pc, #16]	; (23fc79c <HAL_EEPROM_Get+0x18>)
 23fc78c:	4403      	add	r3, r0
 23fc78e:	681b      	ldr	r3, [r3, #0]
 23fc790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc792:	9302      	str	r3, [sp, #8]
 23fc794:	bd09      	pop	{r0, r3, pc}
 23fc796:	0000      	.short	0x0000
 23fc798:	1007a934 	.word	0x1007a934
 23fc79c:	00000000 	.word	0x00000000

023fc7a0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23fc7a0:	b509      	push	{r0, r3, lr}
 23fc7a2:	4804      	ldr	r0, [pc, #16]	; (23fc7b4 <HAL_EEPROM_Put+0x14>)
 23fc7a4:	6800      	ldr	r0, [r0, #0]
 23fc7a6:	4b04      	ldr	r3, [pc, #16]	; (23fc7b8 <HAL_EEPROM_Put+0x18>)
 23fc7a8:	4403      	add	r3, r0
 23fc7aa:	681b      	ldr	r3, [r3, #0]
 23fc7ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc7ae:	9302      	str	r3, [sp, #8]
 23fc7b0:	bd09      	pop	{r0, r3, pc}
 23fc7b2:	0000      	.short	0x0000
 23fc7b4:	1007a934 	.word	0x1007a934
 23fc7b8:	00000000 	.word	0x00000000

023fc7bc <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc7bc:	b509      	push	{r0, r3, lr}
 23fc7be:	4804      	ldr	r0, [pc, #16]	; (23fc7d0 <hal_timer_millis+0x14>)
 23fc7c0:	6800      	ldr	r0, [r0, #0]
 23fc7c2:	4b04      	ldr	r3, [pc, #16]	; (23fc7d4 <hal_timer_millis+0x18>)
 23fc7c4:	4403      	add	r3, r0
 23fc7c6:	681b      	ldr	r3, [r3, #0]
 23fc7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc7ca:	9302      	str	r3, [sp, #8]
 23fc7cc:	bd09      	pop	{r0, r3, pc}
 23fc7ce:	0000      	.short	0x0000
 23fc7d0:	1007a934 	.word	0x1007a934
 23fc7d4:	00000000 	.word	0x00000000

023fc7d8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc7d8:	b509      	push	{r0, r3, lr}
 23fc7da:	4804      	ldr	r0, [pc, #16]	; (23fc7ec <hal_gpio_mode+0x14>)
 23fc7dc:	6800      	ldr	r0, [r0, #0]
 23fc7de:	4b04      	ldr	r3, [pc, #16]	; (23fc7f0 <hal_gpio_mode+0x18>)
 23fc7e0:	4403      	add	r3, r0
 23fc7e2:	681b      	ldr	r3, [r3, #0]
 23fc7e4:	689b      	ldr	r3, [r3, #8]
 23fc7e6:	9302      	str	r3, [sp, #8]
 23fc7e8:	bd09      	pop	{r0, r3, pc}
 23fc7ea:	0000      	.short	0x0000
 23fc7ec:	1007a934 	.word	0x1007a934
 23fc7f0:	00000014 	.word	0x00000014

023fc7f4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fc7f4:	b509      	push	{r0, r3, lr}
 23fc7f6:	4804      	ldr	r0, [pc, #16]	; (23fc808 <hal_i2c_set_speed+0x14>)
 23fc7f8:	6800      	ldr	r0, [r0, #0]
 23fc7fa:	4b04      	ldr	r3, [pc, #16]	; (23fc80c <hal_i2c_set_speed+0x18>)
 23fc7fc:	4403      	add	r3, r0
 23fc7fe:	681b      	ldr	r3, [r3, #0]
 23fc800:	681b      	ldr	r3, [r3, #0]
 23fc802:	9302      	str	r3, [sp, #8]
 23fc804:	bd09      	pop	{r0, r3, pc}
 23fc806:	0000      	.short	0x0000
 23fc808:	1007a934 	.word	0x1007a934
 23fc80c:	00000010 	.word	0x00000010

023fc810 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc810:	b509      	push	{r0, r3, lr}
 23fc812:	4804      	ldr	r0, [pc, #16]	; (23fc824 <hal_i2c_begin+0x14>)
 23fc814:	6800      	ldr	r0, [r0, #0]
 23fc816:	4b04      	ldr	r3, [pc, #16]	; (23fc828 <hal_i2c_begin+0x18>)
 23fc818:	4403      	add	r3, r0
 23fc81a:	681b      	ldr	r3, [r3, #0]
 23fc81c:	68db      	ldr	r3, [r3, #12]
 23fc81e:	9302      	str	r3, [sp, #8]
 23fc820:	bd09      	pop	{r0, r3, pc}
 23fc822:	0000      	.short	0x0000
 23fc824:	1007a934 	.word	0x1007a934
 23fc828:	00000010 	.word	0x00000010

023fc82c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc82c:	b509      	push	{r0, r3, lr}
 23fc82e:	4804      	ldr	r0, [pc, #16]	; (23fc840 <hal_i2c_begin_transmission+0x14>)
 23fc830:	6800      	ldr	r0, [r0, #0]
 23fc832:	4b04      	ldr	r3, [pc, #16]	; (23fc844 <hal_i2c_begin_transmission+0x18>)
 23fc834:	4403      	add	r3, r0
 23fc836:	681b      	ldr	r3, [r3, #0]
 23fc838:	699b      	ldr	r3, [r3, #24]
 23fc83a:	9302      	str	r3, [sp, #8]
 23fc83c:	bd09      	pop	{r0, r3, pc}
 23fc83e:	0000      	.short	0x0000
 23fc840:	1007a934 	.word	0x1007a934
 23fc844:	00000010 	.word	0x00000010

023fc848 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc848:	b509      	push	{r0, r3, lr}
 23fc84a:	4804      	ldr	r0, [pc, #16]	; (23fc85c <hal_i2c_end_transmission+0x14>)
 23fc84c:	6800      	ldr	r0, [r0, #0]
 23fc84e:	4b04      	ldr	r3, [pc, #16]	; (23fc860 <hal_i2c_end_transmission+0x18>)
 23fc850:	4403      	add	r3, r0
 23fc852:	681b      	ldr	r3, [r3, #0]
 23fc854:	69db      	ldr	r3, [r3, #28]
 23fc856:	9302      	str	r3, [sp, #8]
 23fc858:	bd09      	pop	{r0, r3, pc}
 23fc85a:	0000      	.short	0x0000
 23fc85c:	1007a934 	.word	0x1007a934
 23fc860:	00000010 	.word	0x00000010

023fc864 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc864:	b509      	push	{r0, r3, lr}
 23fc866:	4804      	ldr	r0, [pc, #16]	; (23fc878 <hal_i2c_write+0x14>)
 23fc868:	6800      	ldr	r0, [r0, #0]
 23fc86a:	4b04      	ldr	r3, [pc, #16]	; (23fc87c <hal_i2c_write+0x18>)
 23fc86c:	4403      	add	r3, r0
 23fc86e:	681b      	ldr	r3, [r3, #0]
 23fc870:	6a1b      	ldr	r3, [r3, #32]
 23fc872:	9302      	str	r3, [sp, #8]
 23fc874:	bd09      	pop	{r0, r3, pc}
 23fc876:	0000      	.short	0x0000
 23fc878:	1007a934 	.word	0x1007a934
 23fc87c:	00000010 	.word	0x00000010

023fc880 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc880:	b509      	push	{r0, r3, lr}
 23fc882:	4804      	ldr	r0, [pc, #16]	; (23fc894 <hal_i2c_available+0x14>)
 23fc884:	6800      	ldr	r0, [r0, #0]
 23fc886:	4b04      	ldr	r3, [pc, #16]	; (23fc898 <hal_i2c_available+0x18>)
 23fc888:	4403      	add	r3, r0
 23fc88a:	681b      	ldr	r3, [r3, #0]
 23fc88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc88e:	9302      	str	r3, [sp, #8]
 23fc890:	bd09      	pop	{r0, r3, pc}
 23fc892:	0000      	.short	0x0000
 23fc894:	1007a934 	.word	0x1007a934
 23fc898:	00000010 	.word	0x00000010

023fc89c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc89c:	b509      	push	{r0, r3, lr}
 23fc89e:	4804      	ldr	r0, [pc, #16]	; (23fc8b0 <hal_i2c_read+0x14>)
 23fc8a0:	6800      	ldr	r0, [r0, #0]
 23fc8a2:	4b04      	ldr	r3, [pc, #16]	; (23fc8b4 <hal_i2c_read+0x18>)
 23fc8a4:	4403      	add	r3, r0
 23fc8a6:	681b      	ldr	r3, [r3, #0]
 23fc8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc8aa:	9302      	str	r3, [sp, #8]
 23fc8ac:	bd09      	pop	{r0, r3, pc}
 23fc8ae:	0000      	.short	0x0000
 23fc8b0:	1007a934 	.word	0x1007a934
 23fc8b4:	00000010 	.word	0x00000010

023fc8b8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc8b8:	b509      	push	{r0, r3, lr}
 23fc8ba:	4804      	ldr	r0, [pc, #16]	; (23fc8cc <hal_i2c_peek+0x14>)
 23fc8bc:	6800      	ldr	r0, [r0, #0]
 23fc8be:	4b04      	ldr	r3, [pc, #16]	; (23fc8d0 <hal_i2c_peek+0x18>)
 23fc8c0:	4403      	add	r3, r0
 23fc8c2:	681b      	ldr	r3, [r3, #0]
 23fc8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc8c6:	9302      	str	r3, [sp, #8]
 23fc8c8:	bd09      	pop	{r0, r3, pc}
 23fc8ca:	0000      	.short	0x0000
 23fc8cc:	1007a934 	.word	0x1007a934
 23fc8d0:	00000010 	.word	0x00000010

023fc8d4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc8d4:	b509      	push	{r0, r3, lr}
 23fc8d6:	4804      	ldr	r0, [pc, #16]	; (23fc8e8 <hal_i2c_flush+0x14>)
 23fc8d8:	6800      	ldr	r0, [r0, #0]
 23fc8da:	4b04      	ldr	r3, [pc, #16]	; (23fc8ec <hal_i2c_flush+0x18>)
 23fc8dc:	4403      	add	r3, r0
 23fc8de:	681b      	ldr	r3, [r3, #0]
 23fc8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc8e2:	9302      	str	r3, [sp, #8]
 23fc8e4:	bd09      	pop	{r0, r3, pc}
 23fc8e6:	0000      	.short	0x0000
 23fc8e8:	1007a934 	.word	0x1007a934
 23fc8ec:	00000010 	.word	0x00000010

023fc8f0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc8f0:	b509      	push	{r0, r3, lr}
 23fc8f2:	4804      	ldr	r0, [pc, #16]	; (23fc904 <hal_i2c_is_enabled+0x14>)
 23fc8f4:	6800      	ldr	r0, [r0, #0]
 23fc8f6:	4b04      	ldr	r3, [pc, #16]	; (23fc908 <hal_i2c_is_enabled+0x18>)
 23fc8f8:	4403      	add	r3, r0
 23fc8fa:	681b      	ldr	r3, [r3, #0]
 23fc8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc8fe:	9302      	str	r3, [sp, #8]
 23fc900:	bd09      	pop	{r0, r3, pc}
 23fc902:	0000      	.short	0x0000
 23fc904:	1007a934 	.word	0x1007a934
 23fc908:	00000010 	.word	0x00000010

023fc90c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc90c:	b509      	push	{r0, r3, lr}
 23fc90e:	4804      	ldr	r0, [pc, #16]	; (23fc920 <hal_i2c_init+0x14>)
 23fc910:	6800      	ldr	r0, [r0, #0]
 23fc912:	4b04      	ldr	r3, [pc, #16]	; (23fc924 <hal_i2c_init+0x18>)
 23fc914:	4403      	add	r3, r0
 23fc916:	681b      	ldr	r3, [r3, #0]
 23fc918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc91a:	9302      	str	r3, [sp, #8]
 23fc91c:	bd09      	pop	{r0, r3, pc}
 23fc91e:	0000      	.short	0x0000
 23fc920:	1007a934 	.word	0x1007a934
 23fc924:	00000010 	.word	0x00000010

023fc928 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc928:	b509      	push	{r0, r3, lr}
 23fc92a:	4804      	ldr	r0, [pc, #16]	; (23fc93c <hal_i2c_request_ex+0x14>)
 23fc92c:	6800      	ldr	r0, [r0, #0]
 23fc92e:	4b04      	ldr	r3, [pc, #16]	; (23fc940 <hal_i2c_request_ex+0x18>)
 23fc930:	4403      	add	r3, r0
 23fc932:	681b      	ldr	r3, [r3, #0]
 23fc934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc936:	9302      	str	r3, [sp, #8]
 23fc938:	bd09      	pop	{r0, r3, pc}
 23fc93a:	0000      	.short	0x0000
 23fc93c:	1007a934 	.word	0x1007a934
 23fc940:	00000010 	.word	0x00000010

023fc944 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc944:	b509      	push	{r0, r3, lr}
 23fc946:	4804      	ldr	r0, [pc, #16]	; (23fc958 <inet_inet_ntop+0x14>)
 23fc948:	6800      	ldr	r0, [r0, #0]
 23fc94a:	4b04      	ldr	r3, [pc, #16]	; (23fc95c <inet_inet_ntop+0x18>)
 23fc94c:	4403      	add	r3, r0
 23fc94e:	681b      	ldr	r3, [r3, #0]
 23fc950:	695b      	ldr	r3, [r3, #20]
 23fc952:	9302      	str	r3, [sp, #8]
 23fc954:	bd09      	pop	{r0, r3, pc}
 23fc956:	0000      	.short	0x0000
 23fc958:	1007a934 	.word	0x1007a934
 23fc95c:	0000004c 	.word	0x0000004c

023fc960 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc960:	b509      	push	{r0, r3, lr}
 23fc962:	4804      	ldr	r0, [pc, #16]	; (23fc974 <netdb_freeaddrinfo+0x14>)
 23fc964:	6800      	ldr	r0, [r0, #0]
 23fc966:	4b04      	ldr	r3, [pc, #16]	; (23fc978 <netdb_freeaddrinfo+0x18>)
 23fc968:	4403      	add	r3, r0
 23fc96a:	681b      	ldr	r3, [r3, #0]
 23fc96c:	689b      	ldr	r3, [r3, #8]
 23fc96e:	9302      	str	r3, [sp, #8]
 23fc970:	bd09      	pop	{r0, r3, pc}
 23fc972:	0000      	.short	0x0000
 23fc974:	1007a934 	.word	0x1007a934
 23fc978:	00000050 	.word	0x00000050

023fc97c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc97c:	b509      	push	{r0, r3, lr}
 23fc97e:	4804      	ldr	r0, [pc, #16]	; (23fc990 <netdb_getaddrinfo+0x14>)
 23fc980:	6800      	ldr	r0, [r0, #0]
 23fc982:	4b04      	ldr	r3, [pc, #16]	; (23fc994 <netdb_getaddrinfo+0x18>)
 23fc984:	4403      	add	r3, r0
 23fc986:	681b      	ldr	r3, [r3, #0]
 23fc988:	68db      	ldr	r3, [r3, #12]
 23fc98a:	9302      	str	r3, [sp, #8]
 23fc98c:	bd09      	pop	{r0, r3, pc}
 23fc98e:	0000      	.short	0x0000
 23fc990:	1007a934 	.word	0x1007a934
 23fc994:	00000050 	.word	0x00000050

023fc998 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc998:	b509      	push	{r0, r3, lr}
 23fc99a:	4804      	ldr	r0, [pc, #16]	; (23fc9ac <hal_spi_init+0x14>)
 23fc99c:	6800      	ldr	r0, [r0, #0]
 23fc99e:	4b04      	ldr	r3, [pc, #16]	; (23fc9b0 <hal_spi_init+0x18>)
 23fc9a0:	4403      	add	r3, r0
 23fc9a2:	681b      	ldr	r3, [r3, #0]
 23fc9a4:	69db      	ldr	r3, [r3, #28]
 23fc9a6:	9302      	str	r3, [sp, #8]
 23fc9a8:	bd09      	pop	{r0, r3, pc}
 23fc9aa:	0000      	.short	0x0000
 23fc9ac:	1007a934 	.word	0x1007a934
 23fc9b0:	00000018 	.word	0x00000018

023fc9b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc9b4:	b509      	push	{r0, r3, lr}
 23fc9b6:	4804      	ldr	r0, [pc, #16]	; (23fc9c8 <hal_spi_is_enabled+0x14>)
 23fc9b8:	6800      	ldr	r0, [r0, #0]
 23fc9ba:	4b04      	ldr	r3, [pc, #16]	; (23fc9cc <hal_spi_is_enabled+0x18>)
 23fc9bc:	4403      	add	r3, r0
 23fc9be:	681b      	ldr	r3, [r3, #0]
 23fc9c0:	6a1b      	ldr	r3, [r3, #32]
 23fc9c2:	9302      	str	r3, [sp, #8]
 23fc9c4:	bd09      	pop	{r0, r3, pc}
 23fc9c6:	0000      	.short	0x0000
 23fc9c8:	1007a934 	.word	0x1007a934
 23fc9cc:	00000018 	.word	0x00000018

023fc9d0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc9d0:	b509      	push	{r0, r3, lr}
 23fc9d2:	4804      	ldr	r0, [pc, #16]	; (23fc9e4 <hal_usart_end+0x14>)
 23fc9d4:	6800      	ldr	r0, [r0, #0]
 23fc9d6:	4b04      	ldr	r3, [pc, #16]	; (23fc9e8 <hal_usart_end+0x18>)
 23fc9d8:	4403      	add	r3, r0
 23fc9da:	681b      	ldr	r3, [r3, #0]
 23fc9dc:	689b      	ldr	r3, [r3, #8]
 23fc9de:	9302      	str	r3, [sp, #8]
 23fc9e0:	bd09      	pop	{r0, r3, pc}
 23fc9e2:	0000      	.short	0x0000
 23fc9e4:	1007a934 	.word	0x1007a934
 23fc9e8:	00000024 	.word	0x00000024

023fc9ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc9ec:	b509      	push	{r0, r3, lr}
 23fc9ee:	4804      	ldr	r0, [pc, #16]	; (23fca00 <hal_usart_write+0x14>)
 23fc9f0:	6800      	ldr	r0, [r0, #0]
 23fc9f2:	4b04      	ldr	r3, [pc, #16]	; (23fca04 <hal_usart_write+0x18>)
 23fc9f4:	4403      	add	r3, r0
 23fc9f6:	681b      	ldr	r3, [r3, #0]
 23fc9f8:	68db      	ldr	r3, [r3, #12]
 23fc9fa:	9302      	str	r3, [sp, #8]
 23fc9fc:	bd09      	pop	{r0, r3, pc}
 23fc9fe:	0000      	.short	0x0000
 23fca00:	1007a934 	.word	0x1007a934
 23fca04:	00000024 	.word	0x00000024

023fca08 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fca08:	b509      	push	{r0, r3, lr}
 23fca0a:	4804      	ldr	r0, [pc, #16]	; (23fca1c <hal_usart_available+0x14>)
 23fca0c:	6800      	ldr	r0, [r0, #0]
 23fca0e:	4b04      	ldr	r3, [pc, #16]	; (23fca20 <hal_usart_available+0x18>)
 23fca10:	4403      	add	r3, r0
 23fca12:	681b      	ldr	r3, [r3, #0]
 23fca14:	691b      	ldr	r3, [r3, #16]
 23fca16:	9302      	str	r3, [sp, #8]
 23fca18:	bd09      	pop	{r0, r3, pc}
 23fca1a:	0000      	.short	0x0000
 23fca1c:	1007a934 	.word	0x1007a934
 23fca20:	00000024 	.word	0x00000024

023fca24 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fca24:	b509      	push	{r0, r3, lr}
 23fca26:	4804      	ldr	r0, [pc, #16]	; (23fca38 <hal_usart_read+0x14>)
 23fca28:	6800      	ldr	r0, [r0, #0]
 23fca2a:	4b04      	ldr	r3, [pc, #16]	; (23fca3c <hal_usart_read+0x18>)
 23fca2c:	4403      	add	r3, r0
 23fca2e:	681b      	ldr	r3, [r3, #0]
 23fca30:	695b      	ldr	r3, [r3, #20]
 23fca32:	9302      	str	r3, [sp, #8]
 23fca34:	bd09      	pop	{r0, r3, pc}
 23fca36:	0000      	.short	0x0000
 23fca38:	1007a934 	.word	0x1007a934
 23fca3c:	00000024 	.word	0x00000024

023fca40 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fca40:	b509      	push	{r0, r3, lr}
 23fca42:	4804      	ldr	r0, [pc, #16]	; (23fca54 <hal_usart_peek+0x14>)
 23fca44:	6800      	ldr	r0, [r0, #0]
 23fca46:	4b04      	ldr	r3, [pc, #16]	; (23fca58 <hal_usart_peek+0x18>)
 23fca48:	4403      	add	r3, r0
 23fca4a:	681b      	ldr	r3, [r3, #0]
 23fca4c:	699b      	ldr	r3, [r3, #24]
 23fca4e:	9302      	str	r3, [sp, #8]
 23fca50:	bd09      	pop	{r0, r3, pc}
 23fca52:	0000      	.short	0x0000
 23fca54:	1007a934 	.word	0x1007a934
 23fca58:	00000024 	.word	0x00000024

023fca5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fca5c:	b509      	push	{r0, r3, lr}
 23fca5e:	4804      	ldr	r0, [pc, #16]	; (23fca70 <hal_usart_flush+0x14>)
 23fca60:	6800      	ldr	r0, [r0, #0]
 23fca62:	4b04      	ldr	r3, [pc, #16]	; (23fca74 <hal_usart_flush+0x18>)
 23fca64:	4403      	add	r3, r0
 23fca66:	681b      	ldr	r3, [r3, #0]
 23fca68:	69db      	ldr	r3, [r3, #28]
 23fca6a:	9302      	str	r3, [sp, #8]
 23fca6c:	bd09      	pop	{r0, r3, pc}
 23fca6e:	0000      	.short	0x0000
 23fca70:	1007a934 	.word	0x1007a934
 23fca74:	00000024 	.word	0x00000024

023fca78 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fca78:	b509      	push	{r0, r3, lr}
 23fca7a:	4804      	ldr	r0, [pc, #16]	; (23fca8c <hal_usart_is_enabled+0x14>)
 23fca7c:	6800      	ldr	r0, [r0, #0]
 23fca7e:	4b04      	ldr	r3, [pc, #16]	; (23fca90 <hal_usart_is_enabled+0x18>)
 23fca80:	4403      	add	r3, r0
 23fca82:	681b      	ldr	r3, [r3, #0]
 23fca84:	6a1b      	ldr	r3, [r3, #32]
 23fca86:	9302      	str	r3, [sp, #8]
 23fca88:	bd09      	pop	{r0, r3, pc}
 23fca8a:	0000      	.short	0x0000
 23fca8c:	1007a934 	.word	0x1007a934
 23fca90:	00000024 	.word	0x00000024

023fca94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fca94:	b509      	push	{r0, r3, lr}
 23fca96:	4804      	ldr	r0, [pc, #16]	; (23fcaa8 <hal_usart_available_data_for_write+0x14>)
 23fca98:	6800      	ldr	r0, [r0, #0]
 23fca9a:	4b04      	ldr	r3, [pc, #16]	; (23fcaac <hal_usart_available_data_for_write+0x18>)
 23fca9c:	4403      	add	r3, r0
 23fca9e:	681b      	ldr	r3, [r3, #0]
 23fcaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcaa2:	9302      	str	r3, [sp, #8]
 23fcaa4:	bd09      	pop	{r0, r3, pc}
 23fcaa6:	0000      	.short	0x0000
 23fcaa8:	1007a934 	.word	0x1007a934
 23fcaac:	00000024 	.word	0x00000024

023fcab0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fcab0:	b509      	push	{r0, r3, lr}
 23fcab2:	4804      	ldr	r0, [pc, #16]	; (23fcac4 <hal_usart_begin_config+0x14>)
 23fcab4:	6800      	ldr	r0, [r0, #0]
 23fcab6:	4b04      	ldr	r3, [pc, #16]	; (23fcac8 <hal_usart_begin_config+0x18>)
 23fcab8:	4403      	add	r3, r0
 23fcaba:	681b      	ldr	r3, [r3, #0]
 23fcabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcabe:	9302      	str	r3, [sp, #8]
 23fcac0:	bd09      	pop	{r0, r3, pc}
 23fcac2:	0000      	.short	0x0000
 23fcac4:	1007a934 	.word	0x1007a934
 23fcac8:	00000024 	.word	0x00000024

023fcacc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcacc:	b509      	push	{r0, r3, lr}
 23fcace:	4804      	ldr	r0, [pc, #16]	; (23fcae0 <hal_usart_init_ex+0x14>)
 23fcad0:	6800      	ldr	r0, [r0, #0]
 23fcad2:	4b04      	ldr	r3, [pc, #16]	; (23fcae4 <hal_usart_init_ex+0x18>)
 23fcad4:	4403      	add	r3, r0
 23fcad6:	681b      	ldr	r3, [r3, #0]
 23fcad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcada:	9302      	str	r3, [sp, #8]
 23fcadc:	bd09      	pop	{r0, r3, pc}
 23fcade:	0000      	.short	0x0000
 23fcae0:	1007a934 	.word	0x1007a934
 23fcae4:	00000024 	.word	0x00000024

023fcae8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcae8:	b509      	push	{r0, r3, lr}
 23fcaea:	4804      	ldr	r0, [pc, #16]	; (23fcafc <HAL_USB_USART_Init+0x14>)
 23fcaec:	6800      	ldr	r0, [r0, #0]
 23fcaee:	4b04      	ldr	r3, [pc, #16]	; (23fcb00 <HAL_USB_USART_Init+0x18>)
 23fcaf0:	4403      	add	r3, r0
 23fcaf2:	681b      	ldr	r3, [r3, #0]
 23fcaf4:	681b      	ldr	r3, [r3, #0]
 23fcaf6:	9302      	str	r3, [sp, #8]
 23fcaf8:	bd09      	pop	{r0, r3, pc}
 23fcafa:	0000      	.short	0x0000
 23fcafc:	1007a934 	.word	0x1007a934
 23fcb00:	00000034 	.word	0x00000034

023fcb04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fcb04:	b509      	push	{r0, r3, lr}
 23fcb06:	4804      	ldr	r0, [pc, #16]	; (23fcb18 <HAL_USB_USART_Begin+0x14>)
 23fcb08:	6800      	ldr	r0, [r0, #0]
 23fcb0a:	4b04      	ldr	r3, [pc, #16]	; (23fcb1c <HAL_USB_USART_Begin+0x18>)
 23fcb0c:	4403      	add	r3, r0
 23fcb0e:	681b      	ldr	r3, [r3, #0]
 23fcb10:	685b      	ldr	r3, [r3, #4]
 23fcb12:	9302      	str	r3, [sp, #8]
 23fcb14:	bd09      	pop	{r0, r3, pc}
 23fcb16:	0000      	.short	0x0000
 23fcb18:	1007a934 	.word	0x1007a934
 23fcb1c:	00000034 	.word	0x00000034

023fcb20 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fcb20:	b509      	push	{r0, r3, lr}
 23fcb22:	4804      	ldr	r0, [pc, #16]	; (23fcb34 <HAL_USB_USART_End+0x14>)
 23fcb24:	6800      	ldr	r0, [r0, #0]
 23fcb26:	4b04      	ldr	r3, [pc, #16]	; (23fcb38 <HAL_USB_USART_End+0x18>)
 23fcb28:	4403      	add	r3, r0
 23fcb2a:	681b      	ldr	r3, [r3, #0]
 23fcb2c:	689b      	ldr	r3, [r3, #8]
 23fcb2e:	9302      	str	r3, [sp, #8]
 23fcb30:	bd09      	pop	{r0, r3, pc}
 23fcb32:	0000      	.short	0x0000
 23fcb34:	1007a934 	.word	0x1007a934
 23fcb38:	00000034 	.word	0x00000034

023fcb3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fcb3c:	b509      	push	{r0, r3, lr}
 23fcb3e:	4804      	ldr	r0, [pc, #16]	; (23fcb50 <HAL_USB_USART_Available_Data+0x14>)
 23fcb40:	6800      	ldr	r0, [r0, #0]
 23fcb42:	4b04      	ldr	r3, [pc, #16]	; (23fcb54 <HAL_USB_USART_Available_Data+0x18>)
 23fcb44:	4403      	add	r3, r0
 23fcb46:	681b      	ldr	r3, [r3, #0]
 23fcb48:	691b      	ldr	r3, [r3, #16]
 23fcb4a:	9302      	str	r3, [sp, #8]
 23fcb4c:	bd09      	pop	{r0, r3, pc}
 23fcb4e:	0000      	.short	0x0000
 23fcb50:	1007a934 	.word	0x1007a934
 23fcb54:	00000034 	.word	0x00000034

023fcb58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fcb58:	b509      	push	{r0, r3, lr}
 23fcb5a:	4804      	ldr	r0, [pc, #16]	; (23fcb6c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fcb5c:	6800      	ldr	r0, [r0, #0]
 23fcb5e:	4b04      	ldr	r3, [pc, #16]	; (23fcb70 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fcb60:	4403      	add	r3, r0
 23fcb62:	681b      	ldr	r3, [r3, #0]
 23fcb64:	695b      	ldr	r3, [r3, #20]
 23fcb66:	9302      	str	r3, [sp, #8]
 23fcb68:	bd09      	pop	{r0, r3, pc}
 23fcb6a:	0000      	.short	0x0000
 23fcb6c:	1007a934 	.word	0x1007a934
 23fcb70:	00000034 	.word	0x00000034

023fcb74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcb74:	b509      	push	{r0, r3, lr}
 23fcb76:	4804      	ldr	r0, [pc, #16]	; (23fcb88 <HAL_USB_USART_Receive_Data+0x14>)
 23fcb78:	6800      	ldr	r0, [r0, #0]
 23fcb7a:	4b04      	ldr	r3, [pc, #16]	; (23fcb8c <HAL_USB_USART_Receive_Data+0x18>)
 23fcb7c:	4403      	add	r3, r0
 23fcb7e:	681b      	ldr	r3, [r3, #0]
 23fcb80:	699b      	ldr	r3, [r3, #24]
 23fcb82:	9302      	str	r3, [sp, #8]
 23fcb84:	bd09      	pop	{r0, r3, pc}
 23fcb86:	0000      	.short	0x0000
 23fcb88:	1007a934 	.word	0x1007a934
 23fcb8c:	00000034 	.word	0x00000034

023fcb90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcb90:	b509      	push	{r0, r3, lr}
 23fcb92:	4804      	ldr	r0, [pc, #16]	; (23fcba4 <HAL_USB_USART_Send_Data+0x14>)
 23fcb94:	6800      	ldr	r0, [r0, #0]
 23fcb96:	4b04      	ldr	r3, [pc, #16]	; (23fcba8 <HAL_USB_USART_Send_Data+0x18>)
 23fcb98:	4403      	add	r3, r0
 23fcb9a:	681b      	ldr	r3, [r3, #0]
 23fcb9c:	69db      	ldr	r3, [r3, #28]
 23fcb9e:	9302      	str	r3, [sp, #8]
 23fcba0:	bd09      	pop	{r0, r3, pc}
 23fcba2:	0000      	.short	0x0000
 23fcba4:	1007a934 	.word	0x1007a934
 23fcba8:	00000034 	.word	0x00000034

023fcbac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fcbac:	b509      	push	{r0, r3, lr}
 23fcbae:	4804      	ldr	r0, [pc, #16]	; (23fcbc0 <HAL_USB_USART_Flush_Data+0x14>)
 23fcbb0:	6800      	ldr	r0, [r0, #0]
 23fcbb2:	4b04      	ldr	r3, [pc, #16]	; (23fcbc4 <HAL_USB_USART_Flush_Data+0x18>)
 23fcbb4:	4403      	add	r3, r0
 23fcbb6:	681b      	ldr	r3, [r3, #0]
 23fcbb8:	6a1b      	ldr	r3, [r3, #32]
 23fcbba:	9302      	str	r3, [sp, #8]
 23fcbbc:	bd09      	pop	{r0, r3, pc}
 23fcbbe:	0000      	.short	0x0000
 23fcbc0:	1007a934 	.word	0x1007a934
 23fcbc4:	00000034 	.word	0x00000034

023fcbc8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fcbc8:	b509      	push	{r0, r3, lr}
 23fcbca:	4804      	ldr	r0, [pc, #16]	; (23fcbdc <HAL_USB_USART_Is_Connected+0x14>)
 23fcbcc:	6800      	ldr	r0, [r0, #0]
 23fcbce:	4b04      	ldr	r3, [pc, #16]	; (23fcbe0 <HAL_USB_USART_Is_Connected+0x18>)
 23fcbd0:	4403      	add	r3, r0
 23fcbd2:	681b      	ldr	r3, [r3, #0]
 23fcbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcbd6:	9302      	str	r3, [sp, #8]
 23fcbd8:	bd09      	pop	{r0, r3, pc}
 23fcbda:	0000      	.short	0x0000
 23fcbdc:	1007a934 	.word	0x1007a934
 23fcbe0:	00000034 	.word	0x00000034

023fcbe4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fcbe4:	b509      	push	{r0, r3, lr}
 23fcbe6:	4804      	ldr	r0, [pc, #16]	; (23fcbf8 <panic_+0x14>)
 23fcbe8:	6800      	ldr	r0, [r0, #0]
 23fcbea:	4b04      	ldr	r3, [pc, #16]	; (23fcbfc <panic_+0x18>)
 23fcbec:	4403      	add	r3, r0
 23fcbee:	681b      	ldr	r3, [r3, #0]
 23fcbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcbf2:	9302      	str	r3, [sp, #8]
 23fcbf4:	bd09      	pop	{r0, r3, pc}
 23fcbf6:	0000      	.short	0x0000
 23fcbf8:	1007a934 	.word	0x1007a934
 23fcbfc:	00000048 	.word	0x00000048

023fcc00 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fcc00:	b509      	push	{r0, r3, lr}
 23fcc02:	4804      	ldr	r0, [pc, #16]	; (23fcc14 <log_message_v+0x14>)
 23fcc04:	6800      	ldr	r0, [r0, #0]
 23fcc06:	4b04      	ldr	r3, [pc, #16]	; (23fcc18 <log_message_v+0x18>)
 23fcc08:	4403      	add	r3, r0
 23fcc0a:	681b      	ldr	r3, [r3, #0]
 23fcc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcc0e:	9302      	str	r3, [sp, #8]
 23fcc10:	bd09      	pop	{r0, r3, pc}
 23fcc12:	0000      	.short	0x0000
 23fcc14:	1007a934 	.word	0x1007a934
 23fcc18:	00000048 	.word	0x00000048

023fcc1c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fcc1c:	b509      	push	{r0, r3, lr}
 23fcc1e:	4804      	ldr	r0, [pc, #16]	; (23fcc30 <log_level_name+0x14>)
 23fcc20:	6800      	ldr	r0, [r0, #0]
 23fcc22:	4b04      	ldr	r3, [pc, #16]	; (23fcc34 <log_level_name+0x18>)
 23fcc24:	4403      	add	r3, r0
 23fcc26:	681b      	ldr	r3, [r3, #0]
 23fcc28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fcc2a:	9302      	str	r3, [sp, #8]
 23fcc2c:	bd09      	pop	{r0, r3, pc}
 23fcc2e:	0000      	.short	0x0000
 23fcc30:	1007a934 	.word	0x1007a934
 23fcc34:	00000048 	.word	0x00000048

023fcc38 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fcc38:	b509      	push	{r0, r3, lr}
 23fcc3a:	4804      	ldr	r0, [pc, #16]	; (23fcc4c <log_set_callbacks+0x14>)
 23fcc3c:	6800      	ldr	r0, [r0, #0]
 23fcc3e:	4b04      	ldr	r3, [pc, #16]	; (23fcc50 <log_set_callbacks+0x18>)
 23fcc40:	4403      	add	r3, r0
 23fcc42:	681b      	ldr	r3, [r3, #0]
 23fcc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcc46:	9302      	str	r3, [sp, #8]
 23fcc48:	bd09      	pop	{r0, r3, pc}
 23fcc4a:	0000      	.short	0x0000
 23fcc4c:	1007a934 	.word	0x1007a934
 23fcc50:	00000048 	.word	0x00000048

023fcc54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fcc54:	b509      	push	{r0, r3, lr}
 23fcc56:	4804      	ldr	r0, [pc, #16]	; (23fcc68 <set_system_mode+0x14>)
 23fcc58:	6800      	ldr	r0, [r0, #0]
 23fcc5a:	4b04      	ldr	r3, [pc, #16]	; (23fcc6c <set_system_mode+0x18>)
 23fcc5c:	4403      	add	r3, r0
 23fcc5e:	681b      	ldr	r3, [r3, #0]
 23fcc60:	685b      	ldr	r3, [r3, #4]
 23fcc62:	9302      	str	r3, [sp, #8]
 23fcc64:	bd09      	pop	{r0, r3, pc}
 23fcc66:	0000      	.short	0x0000
 23fcc68:	1007a934 	.word	0x1007a934
 23fcc6c:	00000008 	.word	0x00000008

023fcc70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fcc70:	b509      	push	{r0, r3, lr}
 23fcc72:	4804      	ldr	r0, [pc, #16]	; (23fcc84 <system_delay_ms+0x14>)
 23fcc74:	6800      	ldr	r0, [r0, #0]
 23fcc76:	4b04      	ldr	r3, [pc, #16]	; (23fcc88 <system_delay_ms+0x18>)
 23fcc78:	4403      	add	r3, r0
 23fcc7a:	681b      	ldr	r3, [r3, #0]
 23fcc7c:	695b      	ldr	r3, [r3, #20]
 23fcc7e:	9302      	str	r3, [sp, #8]
 23fcc80:	bd09      	pop	{r0, r3, pc}
 23fcc82:	0000      	.short	0x0000
 23fcc84:	1007a934 	.word	0x1007a934
 23fcc88:	00000008 	.word	0x00000008

023fcc8c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fcc8c:	b509      	push	{r0, r3, lr}
 23fcc8e:	4804      	ldr	r0, [pc, #16]	; (23fcca0 <system_thread_set_state+0x14>)
 23fcc90:	6800      	ldr	r0, [r0, #0]
 23fcc92:	4b04      	ldr	r3, [pc, #16]	; (23fcca4 <system_thread_set_state+0x18>)
 23fcc94:	4403      	add	r3, r0
 23fcc96:	681b      	ldr	r3, [r3, #0]
 23fcc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc9a:	9302      	str	r3, [sp, #8]
 23fcc9c:	bd09      	pop	{r0, r3, pc}
 23fcc9e:	0000      	.short	0x0000
 23fcca0:	1007a934 	.word	0x1007a934
 23fcca4:	00000008 	.word	0x00000008

023fcca8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fcca8:	b509      	push	{r0, r3, lr}
 23fccaa:	4804      	ldr	r0, [pc, #16]	; (23fccbc <application_thread_current+0x14>)
 23fccac:	6800      	ldr	r0, [r0, #0]
 23fccae:	4b04      	ldr	r3, [pc, #16]	; (23fccc0 <application_thread_current+0x18>)
 23fccb0:	4403      	add	r3, r0
 23fccb2:	681b      	ldr	r3, [r3, #0]
 23fccb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fccb6:	9302      	str	r3, [sp, #8]
 23fccb8:	bd09      	pop	{r0, r3, pc}
 23fccba:	0000      	.short	0x0000
 23fccbc:	1007a934 	.word	0x1007a934
 23fccc0:	00000008 	.word	0x00000008

023fccc4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fccc4:	b509      	push	{r0, r3, lr}
 23fccc6:	4804      	ldr	r0, [pc, #16]	; (23fccd8 <application_thread_invoke+0x14>)
 23fccc8:	6800      	ldr	r0, [r0, #0]
 23fccca:	4b04      	ldr	r3, [pc, #16]	; (23fccdc <application_thread_invoke+0x18>)
 23fcccc:	4403      	add	r3, r0
 23fccce:	681b      	ldr	r3, [r3, #0]
 23fccd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fccd2:	9302      	str	r3, [sp, #8]
 23fccd4:	bd09      	pop	{r0, r3, pc}
 23fccd6:	0000      	.short	0x0000
 23fccd8:	1007a934 	.word	0x1007a934
 23fccdc:	00000008 	.word	0x00000008

023fcce0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fcce0:	b509      	push	{r0, r3, lr}
 23fcce2:	4804      	ldr	r0, [pc, #16]	; (23fccf4 <system_ctrl_set_app_request_handler+0x14>)
 23fcce4:	6800      	ldr	r0, [r0, #0]
 23fcce6:	4b04      	ldr	r3, [pc, #16]	; (23fccf8 <system_ctrl_set_app_request_handler+0x18>)
 23fcce8:	4403      	add	r3, r0
 23fccea:	681b      	ldr	r3, [r3, #0]
 23fccec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fccf0:	9302      	str	r3, [sp, #8]
 23fccf2:	bd09      	pop	{r0, r3, pc}
 23fccf4:	1007a934 	.word	0x1007a934
 23fccf8:	00000008 	.word	0x00000008

023fccfc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fccfc:	b509      	push	{r0, r3, lr}
 23fccfe:	4804      	ldr	r0, [pc, #16]	; (23fcd10 <system_ctrl_set_result+0x14>)
 23fcd00:	6800      	ldr	r0, [r0, #0]
 23fcd02:	4b04      	ldr	r3, [pc, #16]	; (23fcd14 <system_ctrl_set_result+0x18>)
 23fcd04:	4403      	add	r3, r0
 23fcd06:	681b      	ldr	r3, [r3, #0]
 23fcd08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fcd0c:	9302      	str	r3, [sp, #8]
 23fcd0e:	bd09      	pop	{r0, r3, pc}
 23fcd10:	1007a934 	.word	0x1007a934
 23fcd14:	00000008 	.word	0x00000008

023fcd18 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fcd18:	b509      	push	{r0, r3, lr}
 23fcd1a:	4804      	ldr	r0, [pc, #16]	; (23fcd2c <spark_function+0x14>)
 23fcd1c:	6800      	ldr	r0, [r0, #0]
 23fcd1e:	4b04      	ldr	r3, [pc, #16]	; (23fcd30 <spark_function+0x18>)
 23fcd20:	4403      	add	r3, r0
 23fcd22:	681b      	ldr	r3, [r3, #0]
 23fcd24:	685b      	ldr	r3, [r3, #4]
 23fcd26:	9302      	str	r3, [sp, #8]
 23fcd28:	bd09      	pop	{r0, r3, pc}
 23fcd2a:	0000      	.short	0x0000
 23fcd2c:	1007a934 	.word	0x1007a934
 23fcd30:	0000002c 	.word	0x0000002c

023fcd34 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fcd34:	b509      	push	{r0, r3, lr}
 23fcd36:	4804      	ldr	r0, [pc, #16]	; (23fcd48 <spark_process+0x14>)
 23fcd38:	6800      	ldr	r0, [r0, #0]
 23fcd3a:	4b04      	ldr	r3, [pc, #16]	; (23fcd4c <spark_process+0x18>)
 23fcd3c:	4403      	add	r3, r0
 23fcd3e:	681b      	ldr	r3, [r3, #0]
 23fcd40:	689b      	ldr	r3, [r3, #8]
 23fcd42:	9302      	str	r3, [sp, #8]
 23fcd44:	bd09      	pop	{r0, r3, pc}
 23fcd46:	0000      	.short	0x0000
 23fcd48:	1007a934 	.word	0x1007a934
 23fcd4c:	0000002c 	.word	0x0000002c

023fcd50 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fcd50:	b509      	push	{r0, r3, lr}
 23fcd52:	4804      	ldr	r0, [pc, #16]	; (23fcd64 <spark_cloud_flag_connect+0x14>)
 23fcd54:	6800      	ldr	r0, [r0, #0]
 23fcd56:	4b04      	ldr	r3, [pc, #16]	; (23fcd68 <spark_cloud_flag_connect+0x18>)
 23fcd58:	4403      	add	r3, r0
 23fcd5a:	681b      	ldr	r3, [r3, #0]
 23fcd5c:	68db      	ldr	r3, [r3, #12]
 23fcd5e:	9302      	str	r3, [sp, #8]
 23fcd60:	bd09      	pop	{r0, r3, pc}
 23fcd62:	0000      	.short	0x0000
 23fcd64:	1007a934 	.word	0x1007a934
 23fcd68:	0000002c 	.word	0x0000002c

023fcd6c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fcd6c:	b509      	push	{r0, r3, lr}
 23fcd6e:	4804      	ldr	r0, [pc, #16]	; (23fcd80 <spark_cloud_flag_connected+0x14>)
 23fcd70:	6800      	ldr	r0, [r0, #0]
 23fcd72:	4b04      	ldr	r3, [pc, #16]	; (23fcd84 <spark_cloud_flag_connected+0x18>)
 23fcd74:	4403      	add	r3, r0
 23fcd76:	681b      	ldr	r3, [r3, #0]
 23fcd78:	695b      	ldr	r3, [r3, #20]
 23fcd7a:	9302      	str	r3, [sp, #8]
 23fcd7c:	bd09      	pop	{r0, r3, pc}
 23fcd7e:	0000      	.short	0x0000
 23fcd80:	1007a934 	.word	0x1007a934
 23fcd84:	0000002c 	.word	0x0000002c

023fcd88 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fcd88:	b509      	push	{r0, r3, lr}
 23fcd8a:	4804      	ldr	r0, [pc, #16]	; (23fcd9c <spark_send_event+0x14>)
 23fcd8c:	6800      	ldr	r0, [r0, #0]
 23fcd8e:	4b04      	ldr	r3, [pc, #16]	; (23fcda0 <spark_send_event+0x18>)
 23fcd90:	4403      	add	r3, r0
 23fcd92:	681b      	ldr	r3, [r3, #0]
 23fcd94:	6a1b      	ldr	r3, [r3, #32]
 23fcd96:	9302      	str	r3, [sp, #8]
 23fcd98:	bd09      	pop	{r0, r3, pc}
 23fcd9a:	0000      	.short	0x0000
 23fcd9c:	1007a934 	.word	0x1007a934
 23fcda0:	0000002c 	.word	0x0000002c

023fcda4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fcda4:	b509      	push	{r0, r3, lr}
 23fcda6:	4804      	ldr	r0, [pc, #16]	; (23fcdb8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fcda8:	6800      	ldr	r0, [r0, #0]
 23fcdaa:	4b04      	ldr	r3, [pc, #16]	; (23fcdbc <spark_set_random_seed_from_cloud_handler+0x18>)
 23fcdac:	4403      	add	r3, r0
 23fcdae:	681b      	ldr	r3, [r3, #0]
 23fcdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcdb2:	9302      	str	r3, [sp, #8]
 23fcdb4:	bd09      	pop	{r0, r3, pc}
 23fcdb6:	0000      	.short	0x0000
 23fcdb8:	1007a934 	.word	0x1007a934
 23fcdbc:	0000002c 	.word	0x0000002c

023fcdc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcdc0:	b509      	push	{r0, r3, lr}
 23fcdc2:	4804      	ldr	r0, [pc, #16]	; (23fcdd4 <network_connect+0x14>)
 23fcdc4:	6800      	ldr	r0, [r0, #0]
 23fcdc6:	4b04      	ldr	r3, [pc, #16]	; (23fcdd8 <network_connect+0x18>)
 23fcdc8:	4403      	add	r3, r0
 23fcdca:	681b      	ldr	r3, [r3, #0]
 23fcdcc:	685b      	ldr	r3, [r3, #4]
 23fcdce:	9302      	str	r3, [sp, #8]
 23fcdd0:	bd09      	pop	{r0, r3, pc}
 23fcdd2:	0000      	.short	0x0000
 23fcdd4:	1007a934 	.word	0x1007a934
 23fcdd8:	00000028 	.word	0x00000028

023fcddc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fcddc:	b509      	push	{r0, r3, lr}
 23fcdde:	4804      	ldr	r0, [pc, #16]	; (23fcdf0 <network_connecting+0x14>)
 23fcde0:	6800      	ldr	r0, [r0, #0]
 23fcde2:	4b04      	ldr	r3, [pc, #16]	; (23fcdf4 <network_connecting+0x18>)
 23fcde4:	4403      	add	r3, r0
 23fcde6:	681b      	ldr	r3, [r3, #0]
 23fcde8:	689b      	ldr	r3, [r3, #8]
 23fcdea:	9302      	str	r3, [sp, #8]
 23fcdec:	bd09      	pop	{r0, r3, pc}
 23fcdee:	0000      	.short	0x0000
 23fcdf0:	1007a934 	.word	0x1007a934
 23fcdf4:	00000028 	.word	0x00000028

023fcdf8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fcdf8:	b509      	push	{r0, r3, lr}
 23fcdfa:	4804      	ldr	r0, [pc, #16]	; (23fce0c <network_disconnect+0x14>)
 23fcdfc:	6800      	ldr	r0, [r0, #0]
 23fcdfe:	4b04      	ldr	r3, [pc, #16]	; (23fce10 <network_disconnect+0x18>)
 23fce00:	4403      	add	r3, r0
 23fce02:	681b      	ldr	r3, [r3, #0]
 23fce04:	68db      	ldr	r3, [r3, #12]
 23fce06:	9302      	str	r3, [sp, #8]
 23fce08:	bd09      	pop	{r0, r3, pc}
 23fce0a:	0000      	.short	0x0000
 23fce0c:	1007a934 	.word	0x1007a934
 23fce10:	00000028 	.word	0x00000028

023fce14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fce14:	b509      	push	{r0, r3, lr}
 23fce16:	4804      	ldr	r0, [pc, #16]	; (23fce28 <network_ready+0x14>)
 23fce18:	6800      	ldr	r0, [r0, #0]
 23fce1a:	4b04      	ldr	r3, [pc, #16]	; (23fce2c <network_ready+0x18>)
 23fce1c:	4403      	add	r3, r0
 23fce1e:	681b      	ldr	r3, [r3, #0]
 23fce20:	691b      	ldr	r3, [r3, #16]
 23fce22:	9302      	str	r3, [sp, #8]
 23fce24:	bd09      	pop	{r0, r3, pc}
 23fce26:	0000      	.short	0x0000
 23fce28:	1007a934 	.word	0x1007a934
 23fce2c:	00000028 	.word	0x00000028

023fce30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fce30:	b509      	push	{r0, r3, lr}
 23fce32:	4804      	ldr	r0, [pc, #16]	; (23fce44 <network_on+0x14>)
 23fce34:	6800      	ldr	r0, [r0, #0]
 23fce36:	4b04      	ldr	r3, [pc, #16]	; (23fce48 <network_on+0x18>)
 23fce38:	4403      	add	r3, r0
 23fce3a:	681b      	ldr	r3, [r3, #0]
 23fce3c:	695b      	ldr	r3, [r3, #20]
 23fce3e:	9302      	str	r3, [sp, #8]
 23fce40:	bd09      	pop	{r0, r3, pc}
 23fce42:	0000      	.short	0x0000
 23fce44:	1007a934 	.word	0x1007a934
 23fce48:	00000028 	.word	0x00000028

023fce4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fce4c:	b509      	push	{r0, r3, lr}
 23fce4e:	4804      	ldr	r0, [pc, #16]	; (23fce60 <network_off+0x14>)
 23fce50:	6800      	ldr	r0, [r0, #0]
 23fce52:	4b04      	ldr	r3, [pc, #16]	; (23fce64 <network_off+0x18>)
 23fce54:	4403      	add	r3, r0
 23fce56:	681b      	ldr	r3, [r3, #0]
 23fce58:	699b      	ldr	r3, [r3, #24]
 23fce5a:	9302      	str	r3, [sp, #8]
 23fce5c:	bd09      	pop	{r0, r3, pc}
 23fce5e:	0000      	.short	0x0000
 23fce60:	1007a934 	.word	0x1007a934
 23fce64:	00000028 	.word	0x00000028

023fce68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fce68:	b509      	push	{r0, r3, lr}
 23fce6a:	4804      	ldr	r0, [pc, #16]	; (23fce7c <network_listen+0x14>)
 23fce6c:	6800      	ldr	r0, [r0, #0]
 23fce6e:	4b04      	ldr	r3, [pc, #16]	; (23fce80 <network_listen+0x18>)
 23fce70:	4403      	add	r3, r0
 23fce72:	681b      	ldr	r3, [r3, #0]
 23fce74:	69db      	ldr	r3, [r3, #28]
 23fce76:	9302      	str	r3, [sp, #8]
 23fce78:	bd09      	pop	{r0, r3, pc}
 23fce7a:	0000      	.short	0x0000
 23fce7c:	1007a934 	.word	0x1007a934
 23fce80:	00000028 	.word	0x00000028

023fce84 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fce84:	b509      	push	{r0, r3, lr}
 23fce86:	4804      	ldr	r0, [pc, #16]	; (23fce98 <network_listening+0x14>)
 23fce88:	6800      	ldr	r0, [r0, #0]
 23fce8a:	4b04      	ldr	r3, [pc, #16]	; (23fce9c <network_listening+0x18>)
 23fce8c:	4403      	add	r3, r0
 23fce8e:	681b      	ldr	r3, [r3, #0]
 23fce90:	6a1b      	ldr	r3, [r3, #32]
 23fce92:	9302      	str	r3, [sp, #8]
 23fce94:	bd09      	pop	{r0, r3, pc}
 23fce96:	0000      	.short	0x0000
 23fce98:	1007a934 	.word	0x1007a934
 23fce9c:	00000028 	.word	0x00000028

023fcea0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fcea0:	b509      	push	{r0, r3, lr}
 23fcea2:	4804      	ldr	r0, [pc, #16]	; (23fceb4 <network_set_listen_timeout+0x14>)
 23fcea4:	6800      	ldr	r0, [r0, #0]
 23fcea6:	4b04      	ldr	r3, [pc, #16]	; (23fceb8 <network_set_listen_timeout+0x18>)
 23fcea8:	4403      	add	r3, r0
 23fceaa:	681b      	ldr	r3, [r3, #0]
 23fceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fceae:	9302      	str	r3, [sp, #8]
 23fceb0:	bd09      	pop	{r0, r3, pc}
 23fceb2:	0000      	.short	0x0000
 23fceb4:	1007a934 	.word	0x1007a934
 23fceb8:	00000028 	.word	0x00000028

023fcebc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fcebc:	b509      	push	{r0, r3, lr}
 23fcebe:	4804      	ldr	r0, [pc, #16]	; (23fced0 <network_get_listen_timeout+0x14>)
 23fcec0:	6800      	ldr	r0, [r0, #0]
 23fcec2:	4b04      	ldr	r3, [pc, #16]	; (23fced4 <network_get_listen_timeout+0x18>)
 23fcec4:	4403      	add	r3, r0
 23fcec6:	681b      	ldr	r3, [r3, #0]
 23fcec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fceca:	9302      	str	r3, [sp, #8]
 23fcecc:	bd09      	pop	{r0, r3, pc}
 23fcece:	0000      	.short	0x0000
 23fced0:	1007a934 	.word	0x1007a934
 23fced4:	00000028 	.word	0x00000028

023fced8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fced8:	b509      	push	{r0, r3, lr}
 23fceda:	4804      	ldr	r0, [pc, #16]	; (23fceec <network_is_on+0x14>)
 23fcedc:	6800      	ldr	r0, [r0, #0]
 23fcede:	4b04      	ldr	r3, [pc, #16]	; (23fcef0 <network_is_on+0x18>)
 23fcee0:	4403      	add	r3, r0
 23fcee2:	681b      	ldr	r3, [r3, #0]
 23fcee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcee6:	9302      	str	r3, [sp, #8]
 23fcee8:	bd09      	pop	{r0, r3, pc}
 23fceea:	0000      	.short	0x0000
 23fceec:	1007a934 	.word	0x1007a934
 23fcef0:	00000028 	.word	0x00000028

023fcef4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fcef4:	b509      	push	{r0, r3, lr}
 23fcef6:	4804      	ldr	r0, [pc, #16]	; (23fcf08 <network_is_off+0x14>)
 23fcef8:	6800      	ldr	r0, [r0, #0]
 23fcefa:	4b04      	ldr	r3, [pc, #16]	; (23fcf0c <network_is_off+0x18>)
 23fcefc:	4403      	add	r3, r0
 23fcefe:	681b      	ldr	r3, [r3, #0]
 23fcf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcf02:	9302      	str	r3, [sp, #8]
 23fcf04:	bd09      	pop	{r0, r3, pc}
 23fcf06:	0000      	.short	0x0000
 23fcf08:	1007a934 	.word	0x1007a934
 23fcf0c:	00000028 	.word	0x00000028

023fcf10 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fcf10:	b509      	push	{r0, r3, lr}
 23fcf12:	4804      	ldr	r0, [pc, #16]	; (23fcf24 <malloc+0x14>)
 23fcf14:	6800      	ldr	r0, [r0, #0]
 23fcf16:	4b04      	ldr	r3, [pc, #16]	; (23fcf28 <malloc+0x18>)
 23fcf18:	4403      	add	r3, r0
 23fcf1a:	681b      	ldr	r3, [r3, #0]
 23fcf1c:	681b      	ldr	r3, [r3, #0]
 23fcf1e:	9302      	str	r3, [sp, #8]
 23fcf20:	bd09      	pop	{r0, r3, pc}
 23fcf22:	0000      	.short	0x0000
 23fcf24:	1007a934 	.word	0x1007a934
 23fcf28:	00000004 	.word	0x00000004

023fcf2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fcf2c:	b509      	push	{r0, r3, lr}
 23fcf2e:	4804      	ldr	r0, [pc, #16]	; (23fcf40 <free+0x14>)
 23fcf30:	6800      	ldr	r0, [r0, #0]
 23fcf32:	4b04      	ldr	r3, [pc, #16]	; (23fcf44 <free+0x18>)
 23fcf34:	4403      	add	r3, r0
 23fcf36:	681b      	ldr	r3, [r3, #0]
 23fcf38:	685b      	ldr	r3, [r3, #4]
 23fcf3a:	9302      	str	r3, [sp, #8]
 23fcf3c:	bd09      	pop	{r0, r3, pc}
 23fcf3e:	0000      	.short	0x0000
 23fcf40:	1007a934 	.word	0x1007a934
 23fcf44:	00000004 	.word	0x00000004

023fcf48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fcf48:	b509      	push	{r0, r3, lr}
 23fcf4a:	4804      	ldr	r0, [pc, #16]	; (23fcf5c <realloc+0x14>)
 23fcf4c:	6800      	ldr	r0, [r0, #0]
 23fcf4e:	4b04      	ldr	r3, [pc, #16]	; (23fcf60 <realloc+0x18>)
 23fcf50:	4403      	add	r3, r0
 23fcf52:	681b      	ldr	r3, [r3, #0]
 23fcf54:	689b      	ldr	r3, [r3, #8]
 23fcf56:	9302      	str	r3, [sp, #8]
 23fcf58:	bd09      	pop	{r0, r3, pc}
 23fcf5a:	0000      	.short	0x0000
 23fcf5c:	1007a934 	.word	0x1007a934
 23fcf60:	00000004 	.word	0x00000004

023fcf64 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcf64:	b509      	push	{r0, r3, lr}
 23fcf66:	4804      	ldr	r0, [pc, #16]	; (23fcf78 <vsnprintf+0x14>)
 23fcf68:	6800      	ldr	r0, [r0, #0]
 23fcf6a:	4b04      	ldr	r3, [pc, #16]	; (23fcf7c <vsnprintf+0x18>)
 23fcf6c:	4403      	add	r3, r0
 23fcf6e:	681b      	ldr	r3, [r3, #0]
 23fcf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcf72:	9302      	str	r3, [sp, #8]
 23fcf74:	bd09      	pop	{r0, r3, pc}
 23fcf76:	0000      	.short	0x0000
 23fcf78:	1007a934 	.word	0x1007a934
 23fcf7c:	00000004 	.word	0x00000004

023fcf80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fcf80:	b509      	push	{r0, r3, lr}
 23fcf82:	4804      	ldr	r0, [pc, #16]	; (23fcf94 <abort+0x14>)
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	4b04      	ldr	r3, [pc, #16]	; (23fcf98 <abort+0x18>)
 23fcf88:	4403      	add	r3, r0
 23fcf8a:	681b      	ldr	r3, [r3, #0]
 23fcf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf8e:	9302      	str	r3, [sp, #8]
 23fcf90:	bd09      	pop	{r0, r3, pc}
 23fcf92:	0000      	.short	0x0000
 23fcf94:	1007a934 	.word	0x1007a934
 23fcf98:	00000004 	.word	0x00000004

023fcf9c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fcf9c:	b509      	push	{r0, r3, lr}
 23fcf9e:	4804      	ldr	r0, [pc, #16]	; (23fcfb0 <_malloc_r+0x14>)
 23fcfa0:	6800      	ldr	r0, [r0, #0]
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <_malloc_r+0x18>)
 23fcfa4:	4403      	add	r3, r0
 23fcfa6:	681b      	ldr	r3, [r3, #0]
 23fcfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcfaa:	9302      	str	r3, [sp, #8]
 23fcfac:	bd09      	pop	{r0, r3, pc}
 23fcfae:	0000      	.short	0x0000
 23fcfb0:	1007a934 	.word	0x1007a934
 23fcfb4:	00000004 	.word	0x00000004

023fcfb8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcfb8:	b509      	push	{r0, r3, lr}
 23fcfba:	4804      	ldr	r0, [pc, #16]	; (23fcfcc <__errno+0x14>)
 23fcfbc:	6800      	ldr	r0, [r0, #0]
 23fcfbe:	4b04      	ldr	r3, [pc, #16]	; (23fcfd0 <__errno+0x18>)
 23fcfc0:	4403      	add	r3, r0
 23fcfc2:	681b      	ldr	r3, [r3, #0]
 23fcfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcfc6:	9302      	str	r3, [sp, #8]
 23fcfc8:	bd09      	pop	{r0, r3, pc}
 23fcfca:	0000      	.short	0x0000
 23fcfcc:	1007a934 	.word	0x1007a934
 23fcfd0:	00000004 	.word	0x00000004

023fcfd4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcfd4:	b509      	push	{r0, r3, lr}
 23fcfd6:	4804      	ldr	r0, [pc, #16]	; (23fcfe8 <__assert_func+0x14>)
 23fcfd8:	6800      	ldr	r0, [r0, #0]
 23fcfda:	4b04      	ldr	r3, [pc, #16]	; (23fcfec <__assert_func+0x18>)
 23fcfdc:	4403      	add	r3, r0
 23fcfde:	681b      	ldr	r3, [r3, #0]
 23fcfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcfe2:	9302      	str	r3, [sp, #8]
 23fcfe4:	bd09      	pop	{r0, r3, pc}
 23fcfe6:	0000      	.short	0x0000
 23fcfe8:	1007a934 	.word	0x1007a934
 23fcfec:	00000004 	.word	0x00000004

023fcff0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fcff0:	b509      	push	{r0, r3, lr}
 23fcff2:	4804      	ldr	r0, [pc, #16]	; (23fd004 <newlib_impure_ptr_callback+0x14>)
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	4b04      	ldr	r3, [pc, #16]	; (23fd008 <newlib_impure_ptr_callback+0x18>)
 23fcff8:	4403      	add	r3, r0
 23fcffa:	681b      	ldr	r3, [r3, #0]
 23fcffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcffe:	9302      	str	r3, [sp, #8]
 23fd000:	bd09      	pop	{r0, r3, pc}
 23fd002:	0000      	.short	0x0000
 23fd004:	1007a934 	.word	0x1007a934
 23fd008:	00000004 	.word	0x00000004

023fd00c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd00c:	2100      	movs	r1, #0
 23fd00e:	f7ff be2f 	b.w	23fcc70 <system_delay_ms>

023fd012 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fd012:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fd014:	6883      	ldr	r3, [r0, #8]
 23fd016:	4604      	mov	r4, r0
 23fd018:	b90b      	cbnz	r3, 23fd01e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fd01a:	f002 fb3b 	bl	23ff694 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd01e:	68c3      	ldr	r3, [r0, #12]
 23fd020:	4798      	blx	r3
      if (_M_manager)
 23fd022:	68a3      	ldr	r3, [r4, #8]
 23fd024:	b11b      	cbz	r3, 23fd02e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd026:	2203      	movs	r2, #3
 23fd028:	4621      	mov	r1, r4
 23fd02a:	4620      	mov	r0, r4
 23fd02c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fd02e:	4620      	mov	r0, r4
}
 23fd030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fd034:	2110      	movs	r1, #16
 23fd036:	f7fe bc4c 	b.w	23fb8d2 <_ZdlPvj>

023fd03a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fd03a:	b510      	push	{r4, lr}
      if (_M_manager)
 23fd03c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fd03e:	4604      	mov	r4, r0
      if (_M_manager)
 23fd040:	b113      	cbz	r3, 23fd048 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd042:	2203      	movs	r2, #3
 23fd044:	4601      	mov	r1, r0
 23fd046:	4798      	blx	r3
    }
 23fd048:	4620      	mov	r0, r4
 23fd04a:	bd10      	pop	{r4, pc}

023fd04c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fd04c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd04e:	6843      	ldr	r3, [r0, #4]
    {
 23fd050:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd052:	3b01      	subs	r3, #1
 23fd054:	6043      	str	r3, [r0, #4]
 23fd056:	b963      	cbnz	r3, 23fd072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fd058:	6803      	ldr	r3, [r0, #0]
 23fd05a:	689b      	ldr	r3, [r3, #8]
 23fd05c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd05e:	68a3      	ldr	r3, [r4, #8]
 23fd060:	3b01      	subs	r3, #1
 23fd062:	60a3      	str	r3, [r4, #8]
 23fd064:	b92b      	cbnz	r3, 23fd072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd066:	6823      	ldr	r3, [r4, #0]
 23fd068:	4620      	mov	r0, r4
    }
 23fd06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd06e:	68db      	ldr	r3, [r3, #12]
 23fd070:	4718      	bx	r3
    }
 23fd072:	bd10      	pop	{r4, pc}

023fd074 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd074:	b570      	push	{r4, r5, r6, lr}
 23fd076:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd078:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd07c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd080:	42ae      	cmp	r6, r5
 23fd082:	d004      	beq.n	23fd08e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd084:	4628      	mov	r0, r5
 23fd086:	f001 ff0b 	bl	23feea0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd08a:	3510      	adds	r5, #16
 23fd08c:	e7f8      	b.n	23fd080 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd08e:	6820      	ldr	r0, [r4, #0]
 23fd090:	f7ff ff4c 	bl	23fcf2c <free>
    AllocatorT::free(data_);
}
 23fd094:	4620      	mov	r0, r4
 23fd096:	bd70      	pop	{r4, r5, r6, pc}

023fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fd098:	b510      	push	{r4, lr}
 23fd09a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fd09c:	6800      	ldr	r0, [r0, #0]
 23fd09e:	b108      	cbz	r0, 23fd0a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fd0a0:	f7ff ffd4 	bl	23fd04c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fd0a4:	4620      	mov	r0, r4
 23fd0a6:	bd10      	pop	{r4, pc}

023fd0a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fd0a8:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd0aa:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fd0ac:	460b      	mov	r3, r1
 23fd0ae:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd0b0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fd0b4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fd0b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fd0bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fd0c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fd0c4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fd0c8:	b002      	add	sp, #8
 23fd0ca:	bd10      	pop	{r4, pc}

023fd0cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd0cc:	2300      	movs	r3, #0
 23fd0ce:	4802      	ldr	r0, [pc, #8]	; (23fd0d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd0d0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd0d2:	f7ff bae7 	b.w	23fc6a4 <os_mutex_recursive_create>
 23fd0d6:	bf00      	nop
 23fd0d8:	1007ae50 	.word	0x1007ae50

023fd0dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd0dc:	4770      	bx	lr

023fd0de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fd0de:	2000      	movs	r0, #0
 23fd0e0:	4770      	bx	lr

023fd0e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd0e2:	b510      	push	{r4, lr}
 23fd0e4:	4604      	mov	r4, r0
 23fd0e6:	2110      	movs	r1, #16
 23fd0e8:	f7fe fbf3 	bl	23fb8d2 <_ZdlPvj>
 23fd0ec:	4620      	mov	r0, r4
 23fd0ee:	bd10      	pop	{r4, pc}

023fd0f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fd0f0:	b508      	push	{r3, lr}
      { delete this; }
 23fd0f2:	f7ff fff6 	bl	23fd0e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fd0f6:	bd08      	pop	{r3, pc}

023fd0f8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fd0f8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fd0fa:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fd0fc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fd100:	6002      	str	r2, [r0, #0]
 23fd102:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd104:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd106:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd108:	680c      	ldr	r4, [r1, #0]
 23fd10a:	8085      	strh	r5, [r0, #4]
 23fd10c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd10e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fd110:	bd30      	pop	{r4, r5, pc}

023fd112 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fd112:	b510      	push	{r4, lr}
 23fd114:	4604      	mov	r4, r0
    free((void*)msg_);
 23fd116:	6800      	ldr	r0, [r0, #0]
 23fd118:	f7ff ff08 	bl	23fcf2c <free>
}
 23fd11c:	4620      	mov	r0, r4
 23fd11e:	bd10      	pop	{r4, pc}

023fd120 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fd120:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fd122:	68c4      	ldr	r4, [r0, #12]
 23fd124:	b314      	cbz	r4, 23fd16c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fd126:	7823      	ldrb	r3, [r4, #0]
 23fd128:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fd12a:	2b02      	cmp	r3, #2
 23fd12c:	d103      	bne.n	23fd136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fd12e:	f104 000c 	add.w	r0, r4, #12
 23fd132:	f7ff ffee 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fd136:	1d23      	adds	r3, r4, #4
 23fd138:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fd13a:	b135      	cbz	r5, 23fd14a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fd13c:	4628      	mov	r0, r5
 23fd13e:	f7ff ff7c 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
 23fd142:	2110      	movs	r1, #16
 23fd144:	4628      	mov	r0, r5
 23fd146:	f7fe fbc4 	bl	23fb8d2 <_ZdlPvj>
 23fd14a:	f104 0308 	add.w	r3, r4, #8
 23fd14e:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fd150:	b135      	cbz	r5, 23fd160 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fd152:	4628      	mov	r0, r5
 23fd154:	f7ff ff71 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
 23fd158:	2110      	movs	r1, #16
 23fd15a:	4628      	mov	r0, r5
 23fd15c:	f7fe fbb9 	bl	23fb8d2 <_ZdlPvj>
 23fd160:	4620      	mov	r0, r4
 23fd162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd166:	2114      	movs	r1, #20
 23fd168:	f7fe bbb3 	b.w	23fb8d2 <_ZdlPvj>
 23fd16c:	bd38      	pop	{r3, r4, r5, pc}

023fd16e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fd16e:	b510      	push	{r4, lr}
 23fd170:	b088      	sub	sp, #32
 23fd172:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fd174:	4668      	mov	r0, sp
 23fd176:	f001 fede 	bl	23fef36 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fd17a:	4669      	mov	r1, sp
 23fd17c:	a804      	add	r0, sp, #16
 23fd17e:	f001 ff25 	bl	23fefcc <_ZN6StringC1ERKS_>
 23fd182:	a804      	add	r0, sp, #16
 23fd184:	47a0      	blx	r4
 23fd186:	4604      	mov	r4, r0
 23fd188:	a804      	add	r0, sp, #16
 23fd18a:	f001 fe89 	bl	23feea0 <_ZN6StringD1Ev>
    String p(param);
 23fd18e:	4668      	mov	r0, sp
 23fd190:	f001 fe86 	bl	23feea0 <_ZN6StringD1Ev>
}
 23fd194:	4620      	mov	r0, r4
 23fd196:	b008      	add	sp, #32
 23fd198:	bd10      	pop	{r4, pc}

023fd19a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fd19a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fd19c:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fd19e:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fd1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fd1a4:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fd1a6:	4669      	mov	r1, sp
 23fd1a8:	461a      	mov	r2, r3
 23fd1aa:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fd1ac:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fd1b0:	f8ad 4000 	strh.w	r4, [sp]
 23fd1b4:	f7ff fdb0 	bl	23fcd18 <spark_function>
}
 23fd1b8:	b004      	add	sp, #16
 23fd1ba:	bd10      	pop	{r4, pc}

023fd1bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd1bc:	680b      	ldr	r3, [r1, #0]
 23fd1be:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd1c0:	684b      	ldr	r3, [r1, #4]
 23fd1c2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd1c4:	b113      	cbz	r3, 23fd1cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fd1c6:	685a      	ldr	r2, [r3, #4]
 23fd1c8:	3201      	adds	r2, #1
 23fd1ca:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd1cc:	4770      	bx	lr

023fd1ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fd1ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd1d0:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd1d2:	4668      	mov	r0, sp
 23fd1d4:	460d      	mov	r5, r1
 23fd1d6:	f7ff fff1 	bl	23fd1bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd1da:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd1dc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd1de:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fd1e0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd1e2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fd1e4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fd1e6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fd1e8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fd1ea:	f7ff ff55 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fd1ee:	b135      	cbz	r5, 23fd1fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fd1f0:	1d28      	adds	r0, r5, #4
 23fd1f2:	f7ff ff51 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd1f6:	2108      	movs	r1, #8
 23fd1f8:	4628      	mov	r0, r5
 23fd1fa:	f7fe fb6a 	bl	23fb8d2 <_ZdlPvj>
        return p;
    }
 23fd1fe:	4620      	mov	r0, r4
 23fd200:	b003      	add	sp, #12
 23fd202:	bd30      	pop	{r4, r5, pc}

023fd204 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fd204:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd206:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd208:	b90a      	cbnz	r2, 23fd20e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fd20a:	f002 fa43 	bl	23ff694 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd20e:	68c3      	ldr	r3, [r0, #12]
    }
 23fd210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd214:	4718      	bx	r3

023fd216 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd216:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd218:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fd21a:	f100 0110 	add.w	r1, r0, #16
 23fd21e:	f7ff fff1 	bl	23fd204 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fd222:	bd08      	pop	{r3, pc}

023fd224 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fd224:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd226:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd228:	b90a      	cbnz	r2, 23fd22e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fd22a:	f002 fa33 	bl	23ff694 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd22e:	68c3      	ldr	r3, [r0, #12]
    }
 23fd230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd234:	4718      	bx	r3

023fd236 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd236:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd238:	6800      	ldr	r0, [r0, #0]
 23fd23a:	f100 0110 	add.w	r1, r0, #16
 23fd23e:	f7ff fff1 	bl	23fd224 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fd242:	bd08      	pop	{r3, pc}

023fd244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd244:	b538      	push	{r3, r4, r5, lr}
 23fd246:	2300      	movs	r3, #0
 23fd248:	4604      	mov	r4, r0
 23fd24a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd24c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd24e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd250:	f7fe fb3b 	bl	23fb8ca <_Znwj>
 23fd254:	b128      	cbz	r0, 23fd262 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd256:	2301      	movs	r3, #1
 23fd258:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fd25c:	4b02      	ldr	r3, [pc, #8]	; (23fd268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fd25e:	60c5      	str	r5, [r0, #12]
 23fd260:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd262:	6020      	str	r0, [r4, #0]
	}
 23fd264:	4620      	mov	r0, r4
 23fd266:	bd38      	pop	{r3, r4, r5, pc}
 23fd268:	023ffbd8 	.word	0x023ffbd8

023fd26c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fd26c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd26e:	2300      	movs	r3, #0
 23fd270:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd272:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd274:	4604      	mov	r4, r0
 23fd276:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd278:	b12b      	cbz	r3, 23fd286 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd27a:	2202      	movs	r2, #2
 23fd27c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd27e:	68eb      	ldr	r3, [r5, #12]
 23fd280:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd282:	68ab      	ldr	r3, [r5, #8]
 23fd284:	60a3      	str	r3, [r4, #8]
    }
 23fd286:	4620      	mov	r0, r4
 23fd288:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd28c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fd28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd28e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fd290:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fd292:	4668      	mov	r0, sp
 23fd294:	f7ff ff30 	bl	23fd0f8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd298:	f04f 0302 	mov.w	r3, #2
 23fd29c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fd2a0:	2a00      	cmp	r2, #0
 23fd2a2:	d103      	bne.n	23fd2ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fd2a4:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fd2a8:	2900      	cmp	r1, #0
 23fd2aa:	d1f7      	bne.n	23fd29c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fd2ac:	d121      	bne.n	23fd2f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fd2ae:	f104 050c 	add.w	r5, r4, #12
 23fd2b2:	4669      	mov	r1, sp
 23fd2b4:	4628      	mov	r0, r5
 23fd2b6:	f7ff ff1f 	bl	23fd0f8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd2ba:	2201      	movs	r2, #1
 23fd2bc:	1c63      	adds	r3, r4, #1
 23fd2be:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd2c2:	2000      	movs	r0, #0
 23fd2c4:	f104 0308 	add.w	r3, r4, #8
 23fd2c8:	e8d3 6fef 	ldaex	r6, [r3]
 23fd2cc:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fd2d0:	2a00      	cmp	r2, #0
 23fd2d2:	d1f9      	bne.n	23fd2c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fd2d4:	b16e      	cbz	r6, 23fd2f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fd2d6:	f7ff fce7 	bl	23fcca8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd2da:	b178      	cbz	r0, 23fd2fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd2dc:	4629      	mov	r1, r5
 23fd2de:	4630      	mov	r0, r6
 23fd2e0:	f7ff ff90 	bl	23fd204 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fd2e4:	4630      	mov	r0, r6
 23fd2e6:	f7ff fea8 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd2ea:	2110      	movs	r1, #16
 23fd2ec:	4630      	mov	r0, r6
 23fd2ee:	f7fe faf0 	bl	23fb8d2 <_ZdlPvj>
        p_->setError(std::move(error));
 23fd2f2:	4668      	mov	r0, sp
 23fd2f4:	f7ff ff0d 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
    }
 23fd2f8:	b009      	add	sp, #36	; 0x24
 23fd2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd2fc:	4631      	mov	r1, r6
 23fd2fe:	a802      	add	r0, sp, #8
 23fd300:	f7ff ffb4 	bl	23fd26c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd304:	68e0      	ldr	r0, [r4, #12]
 23fd306:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd30a:	b108      	cbz	r0, 23fd310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fd30c:	f002 fa56 	bl	23ff7bc <strdup>
        type_(type) {
 23fd310:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd312:	2010      	movs	r0, #16
 23fd314:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fd318:	f7fe fad7 	bl	23fb8ca <_Znwj>
 23fd31c:	4605      	mov	r5, r0
 23fd31e:	b1e8      	cbz	r0, 23fd35c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fd320:	2700      	movs	r7, #0
 23fd322:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd324:	2018      	movs	r0, #24
 23fd326:	f7fe fad0 	bl	23fb8ca <_Znwj>
 23fd32a:	4604      	mov	r4, r0
 23fd32c:	b188      	cbz	r0, 23fd352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fd32e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd330:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd332:	a802      	add	r0, sp, #8
 23fd334:	f7ff feb8 	bl	23fd0a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd338:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd33a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd33c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd33e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd340:	9204      	str	r2, [sp, #16]
 23fd342:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd344:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fd346:	60e3      	str	r3, [r4, #12]
 23fd348:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fd34c:	9205      	str	r2, [sp, #20]
 23fd34e:	f7ff fed3 	bl	23fd0f8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fd352:	4b08      	ldr	r3, [pc, #32]	; (23fd374 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd354:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd356:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd358:	4b07      	ldr	r3, [pc, #28]	; (23fd378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fd35a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fd35c:	a806      	add	r0, sp, #24
 23fd35e:	f7ff fed8 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd362:	a802      	add	r0, sp, #8
 23fd364:	f7ff fe69 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd368:	2200      	movs	r2, #0
 23fd36a:	4629      	mov	r1, r5
 23fd36c:	4803      	ldr	r0, [pc, #12]	; (23fd37c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fd36e:	f7ff fca9 	bl	23fccc4 <application_thread_invoke>
 23fd372:	e7b7      	b.n	23fd2e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fd374:	023fd217 	.word	0x023fd217
 23fd378:	023fd491 	.word	0x023fd491
 23fd37c:	023fd013 	.word	0x023fd013

023fd380 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fd380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd384:	b08b      	sub	sp, #44	; 0x2c
 23fd386:	4605      	mov	r5, r0
 23fd388:	460f      	mov	r7, r1
 23fd38a:	4690      	mov	r8, r2
 23fd38c:	4699      	mov	r9, r3
 23fd38e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd392:	f7ff fceb 	bl	23fcd6c <spark_cloud_flag_connected>
 23fd396:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fd398:	4683      	mov	fp, r0
 23fd39a:	bb38      	cbnz	r0, 23fd3ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fd39c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fd3a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd3a2:	a905      	add	r1, sp, #20
 23fd3a4:	4630      	mov	r0, r6
 23fd3a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd3aa:	f7ff fea5 	bl	23fd0f8 <_ZN8particle5ErrorC1EOS0_>
 23fd3ae:	2014      	movs	r0, #20
 23fd3b0:	f7fe fa8b 	bl	23fb8ca <_Znwj>
 23fd3b4:	4604      	mov	r4, r0
 23fd3b6:	b148      	cbz	r0, 23fd3cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fd3b8:	2302      	movs	r3, #2
 23fd3ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd3bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd3be:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd3c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fd3c4:	4631      	mov	r1, r6
 23fd3c6:	300c      	adds	r0, #12
 23fd3c8:	f7ff fe96 	bl	23fd0f8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd3cc:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fd3ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd3d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fd3d4:	f7ff ff36 	bl	23fd244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd3d8:	4630      	mov	r0, r6
 23fd3da:	f7ff fe9a 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fd3de:	a805      	add	r0, sp, #20
 23fd3e0:	f7ff fe97 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fd3e4:	4628      	mov	r0, r5
 23fd3e6:	b00b      	add	sp, #44	; 0x2c
 23fd3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fd3ec:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fd3ee:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fd3f0:	2014      	movs	r0, #20
 23fd3f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fd3f6:	9307      	str	r3, [sp, #28]
 23fd3f8:	f7fe fa67 	bl	23fb8ca <_Znwj>
 23fd3fc:	4601      	mov	r1, r0
 23fd3fe:	b118      	cbz	r0, 23fd408 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fd404:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd406:	7044      	strb	r4, [r0, #1]
 23fd408:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd40a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fd40c:	f7ff ff1a 	bl	23fd244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fd410:	4b1e      	ldr	r3, [pc, #120]	; (23fd48c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fd412:	2008      	movs	r0, #8
 23fd414:	9308      	str	r3, [sp, #32]
 23fd416:	f7fe fa58 	bl	23fb8ca <_Znwj>
 23fd41a:	4604      	mov	r4, r0
 23fd41c:	b110      	cbz	r0, 23fd424 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fd41e:	a903      	add	r1, sp, #12
 23fd420:	f7ff fecc 	bl	23fd1bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd424:	464a      	mov	r2, r9
 23fd426:	4641      	mov	r1, r8
 23fd428:	4638      	mov	r0, r7
 23fd42a:	9600      	str	r6, [sp, #0]
 23fd42c:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fd430:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd432:	f7ff fca9 	bl	23fcd88 <spark_send_event>
 23fd436:	b9b8      	cbnz	r0, 23fd468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fd438:	9b03      	ldr	r3, [sp, #12]
 23fd43a:	3301      	adds	r3, #1
 23fd43c:	781b      	ldrb	r3, [r3, #0]
 23fd43e:	b2db      	uxtb	r3, r3
 23fd440:	b993      	cbnz	r3, 23fd468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fd442:	9305      	str	r3, [sp, #20]
 23fd444:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fd448:	a905      	add	r1, sp, #20
 23fd44a:	a803      	add	r0, sp, #12
 23fd44c:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd450:	f7ff ff1c 	bl	23fd28c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd454:	a805      	add	r0, sp, #20
 23fd456:	f7ff fe5c 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fd45a:	a805      	add	r0, sp, #20
 23fd45c:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fd45e:	f7ff feb6 	bl	23fd1ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fd462:	a806      	add	r0, sp, #24
 23fd464:	f7ff fe18 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd468:	a903      	add	r1, sp, #12
 23fd46a:	a805      	add	r0, sp, #20
 23fd46c:	f7ff fea6 	bl	23fd1bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd470:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd472:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd474:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fd476:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd478:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fd47a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fd47c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fd47e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fd480:	f7ff fe0a 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd484:	a804      	add	r0, sp, #16
 23fd486:	f7ff fe07 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fd48a:	e7ab      	b.n	23fd3e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fd48c:	023fd50d 	.word	0x023fd50d

023fd490 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fd490:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd494:	4605      	mov	r5, r0
	switch (__op)
 23fd496:	d103      	bne.n	23fd4a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd498:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd49a:	6003      	str	r3, [r0, #0]
      }
 23fd49c:	2000      	movs	r0, #0
 23fd49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fd4a0:	2a02      	cmp	r2, #2
 23fd4a2:	d010      	beq.n	23fd4c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fd4a4:	2a03      	cmp	r2, #3
 23fd4a6:	d1f9      	bne.n	23fd49c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd4a8:	6804      	ldr	r4, [r0, #0]
 23fd4aa:	2c00      	cmp	r4, #0
 23fd4ac:	d0f6      	beq.n	23fd49c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fd4ae:	f104 0010 	add.w	r0, r4, #16
 23fd4b2:	f7ff fe2e 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd4b6:	4620      	mov	r0, r4
 23fd4b8:	f7ff fdbf 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd4bc:	2118      	movs	r1, #24
 23fd4be:	4620      	mov	r0, r4
 23fd4c0:	f7fe fa07 	bl	23fb8d2 <_ZdlPvj>
 23fd4c4:	e7ea      	b.n	23fd49c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd4c6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fd4c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd4ca:	f7fe f9fe 	bl	23fb8ca <_Znwj>
 23fd4ce:	4604      	mov	r4, r0
 23fd4d0:	b150      	cbz	r0, 23fd4e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fd4d2:	4631      	mov	r1, r6
 23fd4d4:	f7ff feca 	bl	23fd26c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd4d8:	6930      	ldr	r0, [r6, #16]
 23fd4da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd4de:	b108      	cbz	r0, 23fd4e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fd4e0:	f002 f96c 	bl	23ff7bc <strdup>
        type_(type) {
 23fd4e4:	6120      	str	r0, [r4, #16]
 23fd4e6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fd4e8:	602c      	str	r4, [r5, #0]
	}
 23fd4ea:	e7d7      	b.n	23fd49c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fd4ec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fd4ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd4ee:	2300      	movs	r3, #0
 23fd4f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd4f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd4f4:	4604      	mov	r4, r0
 23fd4f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd4f8:	b12b      	cbz	r3, 23fd506 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd4fa:	2202      	movs	r2, #2
 23fd4fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd4fe:	68eb      	ldr	r3, [r5, #12]
 23fd500:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd502:	68ab      	ldr	r3, [r5, #8]
 23fd504:	60a3      	str	r3, [r4, #8]
    }
 23fd506:	4620      	mov	r0, r4
 23fd508:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd50c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fd50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd50e:	4604      	mov	r4, r0
 23fd510:	b089      	sub	sp, #36	; 0x24
 23fd512:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fd514:	a801      	add	r0, sp, #4
 23fd516:	4611      	mov	r1, r2
 23fd518:	f7ff fe59 	bl	23fd1ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fd51c:	b1a4      	cbz	r4, 23fd548 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fd51e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd520:	b11d      	cbz	r5, 23fd52a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fd522:	4628      	mov	r0, r5
 23fd524:	f002 f94a 	bl	23ff7bc <strdup>
 23fd528:	4605      	mov	r5, r0
 23fd52a:	a801      	add	r0, sp, #4
 23fd52c:	a903      	add	r1, sp, #12
        type_(type) {
 23fd52e:	9503      	str	r5, [sp, #12]
 23fd530:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fd534:	f7ff feaa 	bl	23fd28c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd538:	a803      	add	r0, sp, #12
 23fd53a:	f7ff fdea 	bl	23fd112 <_ZN8particle5ErrorD1Ev>
 23fd53e:	a802      	add	r0, sp, #8
 23fd540:	f7ff fdaa 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd544:	b009      	add	sp, #36	; 0x24
 23fd546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd548:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fd54a:	9d01      	ldr	r5, [sp, #4]
 23fd54c:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fd550:	2a00      	cmp	r2, #0
 23fd552:	d103      	bne.n	23fd55c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fd554:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fd558:	2900      	cmp	r1, #0
 23fd55a:	d1f7      	bne.n	23fd54c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fd55c:	d1ef      	bne.n	23fd53e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fd55e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd560:	2201      	movs	r2, #1
 23fd562:	18eb      	adds	r3, r5, r3
 23fd564:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd568:	1d2b      	adds	r3, r5, #4
 23fd56a:	e8d3 6fef 	ldaex	r6, [r3]
 23fd56e:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fd572:	2a00      	cmp	r2, #0
 23fd574:	d1f9      	bne.n	23fd56a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fd576:	2e00      	cmp	r6, #0
 23fd578:	d0e1      	beq.n	23fd53e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fd57a:	4620      	mov	r0, r4
 23fd57c:	f7ff fb94 	bl	23fcca8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd580:	4607      	mov	r7, r0
 23fd582:	b160      	cbz	r0, 23fd59e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd584:	4630      	mov	r0, r6
 23fd586:	f105 010c 	add.w	r1, r5, #12
 23fd58a:	f7ff fe4b 	bl	23fd224 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fd58e:	4630      	mov	r0, r6
 23fd590:	f7ff fd53 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd594:	2110      	movs	r1, #16
 23fd596:	4630      	mov	r0, r6
 23fd598:	f7fe f99b 	bl	23fb8d2 <_ZdlPvj>
 23fd59c:	e7cf      	b.n	23fd53e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd59e:	4631      	mov	r1, r6
 23fd5a0:	a803      	add	r0, sp, #12
 23fd5a2:	f7ff ffa3 	bl	23fd4ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd5a6:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd5a8:	2010      	movs	r0, #16
 23fd5aa:	f88d 301c 	strb.w	r3, [sp, #28]
 23fd5ae:	f7fe f98c 	bl	23fb8ca <_Znwj>
 23fd5b2:	4605      	mov	r5, r0
 23fd5b4:	b1d0      	cbz	r0, 23fd5ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fd5b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd5b8:	2014      	movs	r0, #20
 23fd5ba:	f7fe f986 	bl	23fb8ca <_Znwj>
 23fd5be:	4604      	mov	r4, r0
 23fd5c0:	b178      	cbz	r0, 23fd5e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fd5c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd5c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd5c6:	a803      	add	r0, sp, #12
 23fd5c8:	f7ff fd6e 	bl	23fd0a8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd5cc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd5ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd5d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd5d2:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fd5d4:	9205      	str	r2, [sp, #20]
 23fd5d6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd5d8:	60e3      	str	r3, [r4, #12]
 23fd5da:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fd5de:	9206      	str	r2, [sp, #24]
 23fd5e0:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd5e2:	4b07      	ldr	r3, [pc, #28]	; (23fd600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd5e4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd5e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd5e8:	4b06      	ldr	r3, [pc, #24]	; (23fd604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fd5ea:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fd5ec:	a803      	add	r0, sp, #12
 23fd5ee:	f7ff fd24 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd5f2:	2200      	movs	r2, #0
 23fd5f4:	4629      	mov	r1, r5
 23fd5f6:	4804      	ldr	r0, [pc, #16]	; (23fd608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fd5f8:	f7ff fb64 	bl	23fccc4 <application_thread_invoke>
 23fd5fc:	e7c7      	b.n	23fd58e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fd5fe:	bf00      	nop
 23fd600:	023fd237 	.word	0x023fd237
 23fd604:	023fd60d 	.word	0x023fd60d
 23fd608:	023fd013 	.word	0x023fd013

023fd60c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fd60c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd60e:	b570      	push	{r4, r5, r6, lr}
 23fd610:	4604      	mov	r4, r0
	switch (__op)
 23fd612:	d103      	bne.n	23fd61c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd614:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd616:	6003      	str	r3, [r0, #0]
      }
 23fd618:	2000      	movs	r0, #0
 23fd61a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fd61c:	2a02      	cmp	r2, #2
 23fd61e:	d00c      	beq.n	23fd63a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fd620:	2a03      	cmp	r2, #3
 23fd622:	d1f9      	bne.n	23fd618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd624:	6804      	ldr	r4, [r0, #0]
 23fd626:	2c00      	cmp	r4, #0
 23fd628:	d0f6      	beq.n	23fd618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fd62a:	4620      	mov	r0, r4
 23fd62c:	f7ff fd05 	bl	23fd03a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd630:	2114      	movs	r1, #20
 23fd632:	4620      	mov	r0, r4
 23fd634:	f7fe f94d 	bl	23fb8d2 <_ZdlPvj>
 23fd638:	e7ee      	b.n	23fd618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd63a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fd63c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd63e:	f7fe f944 	bl	23fb8ca <_Znwj>
 23fd642:	4605      	mov	r5, r0
 23fd644:	b120      	cbz	r0, 23fd650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fd646:	4631      	mov	r1, r6
 23fd648:	f7ff ff50 	bl	23fd4ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fd64c:	7c33      	ldrb	r3, [r6, #16]
 23fd64e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fd650:	6025      	str	r5, [r4, #0]
	}
 23fd652:	e7e1      	b.n	23fd618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fd654 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd654:	2200      	movs	r2, #0
 23fd656:	6840      	ldr	r0, [r0, #4]
 23fd658:	4611      	mov	r1, r2
 23fd65a:	f7ff bc13 	b.w	23fce84 <network_listening>

023fd65e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd65e:	2200      	movs	r2, #0
 23fd660:	6840      	ldr	r0, [r0, #4]
 23fd662:	4611      	mov	r1, r2
 23fd664:	f7ff bc2a 	b.w	23fcebc <network_get_listen_timeout>

023fd668 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd668:	2200      	movs	r2, #0
 23fd66a:	6840      	ldr	r0, [r0, #4]
 23fd66c:	f7ff bc18 	b.w	23fcea0 <network_set_listen_timeout>

023fd670 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd670:	2200      	movs	r2, #0
 23fd672:	6840      	ldr	r0, [r0, #4]
 23fd674:	f081 0101 	eor.w	r1, r1, #1
 23fd678:	f7ff bbf6 	b.w	23fce68 <network_listen>

023fd67c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd67c:	2300      	movs	r3, #0
 23fd67e:	6840      	ldr	r0, [r0, #4]
 23fd680:	461a      	mov	r2, r3
 23fd682:	4619      	mov	r1, r3
 23fd684:	f7ff bbe2 	b.w	23fce4c <network_off>

023fd688 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd688:	2300      	movs	r3, #0
 23fd68a:	6840      	ldr	r0, [r0, #4]
 23fd68c:	461a      	mov	r2, r3
 23fd68e:	4619      	mov	r1, r3
 23fd690:	f7ff bbce 	b.w	23fce30 <network_on>

023fd694 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd694:	2200      	movs	r2, #0
 23fd696:	6840      	ldr	r0, [r0, #4]
 23fd698:	4611      	mov	r1, r2
 23fd69a:	f7ff bbbb 	b.w	23fce14 <network_ready>

023fd69e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd69e:	2200      	movs	r2, #0
 23fd6a0:	6840      	ldr	r0, [r0, #4]
 23fd6a2:	4611      	mov	r1, r2
 23fd6a4:	f7ff bb9a 	b.w	23fcddc <network_connecting>

023fd6a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd6a8:	2200      	movs	r2, #0
 23fd6aa:	2102      	movs	r1, #2
 23fd6ac:	6840      	ldr	r0, [r0, #4]
 23fd6ae:	f7ff bba3 	b.w	23fcdf8 <network_disconnect>

023fd6b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd6b2:	2300      	movs	r3, #0
 23fd6b4:	6840      	ldr	r0, [r0, #4]
 23fd6b6:	461a      	mov	r2, r3
 23fd6b8:	f7ff bb82 	b.w	23fcdc0 <network_connect>

023fd6bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd6bc:	2203      	movs	r2, #3
 23fd6be:	4b02      	ldr	r3, [pc, #8]	; (23fd6c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd6c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd6c2:	4a02      	ldr	r2, [pc, #8]	; (23fd6cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd6c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd6c6:	4770      	bx	lr
 23fd6c8:	1007ae54 	.word	0x1007ae54
 23fd6cc:	023ffbf4 	.word	0x023ffbf4

023fd6d0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd6d0:	4770      	bx	lr

023fd6d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd6d4:	4606      	mov	r6, r0
 23fd6d6:	4615      	mov	r5, r2
 23fd6d8:	460c      	mov	r4, r1
 23fd6da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd6dc:	42bc      	cmp	r4, r7
 23fd6de:	d006      	beq.n	23fd6ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd6e0:	6833      	ldr	r3, [r6, #0]
 23fd6e2:	4630      	mov	r0, r6
 23fd6e4:	689b      	ldr	r3, [r3, #8]
 23fd6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd6ea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd6ec:	e7f6      	b.n	23fd6dc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd6ee:	4628      	mov	r0, r5
 23fd6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd6f2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd6f2:	2200      	movs	r2, #0
 23fd6f4:	7c00      	ldrb	r0, [r0, #16]
 23fd6f6:	f7ff b8b5 	b.w	23fc864 <hal_i2c_write>

023fd6fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd6fa:	2100      	movs	r1, #0
 23fd6fc:	7c00      	ldrb	r0, [r0, #16]
 23fd6fe:	f7ff b8bf 	b.w	23fc880 <hal_i2c_available>

023fd702 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd702:	2100      	movs	r1, #0
 23fd704:	7c00      	ldrb	r0, [r0, #16]
 23fd706:	f7ff b8c9 	b.w	23fc89c <hal_i2c_read>

023fd70a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd70a:	2100      	movs	r1, #0
 23fd70c:	7c00      	ldrb	r0, [r0, #16]
 23fd70e:	f7ff b8d3 	b.w	23fc8b8 <hal_i2c_peek>

023fd712 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd712:	2100      	movs	r1, #0
 23fd714:	7c00      	ldrb	r0, [r0, #16]
 23fd716:	f7ff b8dd 	b.w	23fc8d4 <hal_i2c_flush>

023fd71a <_ZN7TwoWireD0Ev>:
 23fd71a:	b510      	push	{r4, lr}
 23fd71c:	4604      	mov	r4, r0
 23fd71e:	2114      	movs	r1, #20
 23fd720:	f7fe f8d7 	bl	23fb8d2 <_ZdlPvj>
 23fd724:	4620      	mov	r0, r4
 23fd726:	bd10      	pop	{r4, pc}

023fd728 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd728:	b538      	push	{r3, r4, r5, lr}
 23fd72a:	4604      	mov	r4, r0
 23fd72c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd72e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd732:	2200      	movs	r2, #0
 23fd734:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd738:	4b09      	ldr	r3, [pc, #36]	; (23fd760 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd73a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd73c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd73e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd740:	4629      	mov	r1, r5
 23fd742:	f7ff f8e3 	bl	23fc90c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd746:	30bf      	adds	r0, #191	; 0xbf
 23fd748:	d108      	bne.n	23fd75c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd74a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd74c:	07db      	lsls	r3, r3, #31
 23fd74e:	d505      	bpl.n	23fd75c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd750:	6868      	ldr	r0, [r5, #4]
 23fd752:	f7ff fbeb 	bl	23fcf2c <free>
    free(conf.tx_buffer);
 23fd756:	68e8      	ldr	r0, [r5, #12]
 23fd758:	f7ff fbe8 	bl	23fcf2c <free>
}
 23fd75c:	4620      	mov	r0, r4
 23fd75e:	bd38      	pop	{r3, r4, r5, pc}
 23fd760:	023ffc30 	.word	0x023ffc30

023fd764 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fd764:	2200      	movs	r2, #0
 23fd766:	7c00      	ldrb	r0, [r0, #16]
 23fd768:	f7ff b844 	b.w	23fc7f4 <hal_i2c_set_speed>

023fd76c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd76c:	2300      	movs	r3, #0
 23fd76e:	7c00      	ldrb	r0, [r0, #16]
 23fd770:	461a      	mov	r2, r3
 23fd772:	4619      	mov	r1, r3
 23fd774:	f7ff b84c 	b.w	23fc810 <hal_i2c_begin>

023fd778 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd77a:	2200      	movs	r2, #0
 23fd77c:	2314      	movs	r3, #20
 23fd77e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd782:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd786:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd788:	7c00      	ldrb	r0, [r0, #16]
 23fd78a:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd78e:	684b      	ldr	r3, [r1, #4]
 23fd790:	9303      	str	r3, [sp, #12]
 23fd792:	68cb      	ldr	r3, [r1, #12]
 23fd794:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd796:	7a0b      	ldrb	r3, [r1, #8]
 23fd798:	a901      	add	r1, sp, #4
 23fd79a:	9305      	str	r3, [sp, #20]
 23fd79c:	f7ff f8c4 	bl	23fc928 <hal_i2c_request_ex>
}
 23fd7a0:	b007      	add	sp, #28
 23fd7a2:	f85d fb04 	ldr.w	pc, [sp], #4

023fd7a6 <_ZN7TwoWire11requestFromEhjh>:
{
 23fd7a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd7a8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd7aa:	f88d 1000 	strb.w	r1, [sp]
 23fd7ae:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd7b2:	bf18      	it	ne
 23fd7b4:	2301      	movne	r3, #1
 23fd7b6:	9103      	str	r1, [sp, #12]
 23fd7b8:	4669      	mov	r1, sp
    size_ = size;
 23fd7ba:	9201      	str	r2, [sp, #4]
 23fd7bc:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd7c0:	f7ff ffda 	bl	23fd778 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd7c4:	b005      	add	sp, #20
 23fd7c6:	f85d fb04 	ldr.w	pc, [sp], #4

023fd7ca <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd7ca:	2200      	movs	r2, #0
 23fd7cc:	7c00      	ldrb	r0, [r0, #16]
 23fd7ce:	f7ff b82d 	b.w	23fc82c <hal_i2c_begin_transmission>

023fd7d2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd7d2:	2200      	movs	r2, #0
 23fd7d4:	7c00      	ldrb	r0, [r0, #16]
 23fd7d6:	f7ff b837 	b.w	23fc848 <hal_i2c_end_transmission>

023fd7da <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd7da:	4770      	bx	lr

023fd7dc <_ZN9IPAddressD0Ev>:
 23fd7dc:	b510      	push	{r4, lr}
 23fd7de:	4604      	mov	r4, r0
 23fd7e0:	2118      	movs	r1, #24
 23fd7e2:	f7fe f876 	bl	23fb8d2 <_ZdlPvj>
 23fd7e6:	4620      	mov	r0, r4
 23fd7e8:	bd10      	pop	{r4, pc}

023fd7ea <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd7ec:	7d03      	ldrb	r3, [r0, #20]
{
 23fd7ee:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd7f0:	2b06      	cmp	r3, #6
 23fd7f2:	f04f 0400 	mov.w	r4, #0
{
 23fd7f6:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd7f8:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd7fc:	d012      	beq.n	23fd824 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd7fe:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd802:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd806:	220a      	movs	r2, #10
 23fd808:	4630      	mov	r0, r6
 23fd80a:	f001 fb1a 	bl	23fee42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd80e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd810:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd812:	d019      	beq.n	23fd848 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd814:	2c00      	cmp	r4, #0
 23fd816:	d0f4      	beq.n	23fd802 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd818:	212e      	movs	r1, #46	; 0x2e
 23fd81a:	4630      	mov	r0, r6
 23fd81c:	f001 fb0e 	bl	23fee3c <_ZN5Print5printEc>
 23fd820:	4404      	add	r4, r0
 23fd822:	e7ee      	b.n	23fd802 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd824:	232f      	movs	r3, #47	; 0x2f
 23fd826:	466a      	mov	r2, sp
 23fd828:	4639      	mov	r1, r7
 23fd82a:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd82c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd830:	f7ff f888 	bl	23fc944 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd834:	4668      	mov	r0, sp
 23fd836:	f7fe f823 	bl	23fb880 <strlen>
 23fd83a:	6833      	ldr	r3, [r6, #0]
 23fd83c:	4602      	mov	r2, r0
 23fd83e:	4669      	mov	r1, sp
 23fd840:	4630      	mov	r0, r6
 23fd842:	68db      	ldr	r3, [r3, #12]
 23fd844:	4798      	blx	r3
 23fd846:	4604      	mov	r4, r0
    }
    return n;
}
 23fd848:	4620      	mov	r0, r4
 23fd84a:	b00d      	add	sp, #52	; 0x34
 23fd84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fd850 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd850:	b510      	push	{r4, lr}
 23fd852:	4604      	mov	r4, r0
 23fd854:	4b04      	ldr	r3, [pc, #16]	; (23fd868 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd856:	2211      	movs	r2, #17
 23fd858:	2100      	movs	r1, #0
 23fd85a:	f840 3b04 	str.w	r3, [r0], #4
 23fd85e:	f001 ff56 	bl	23ff70e <memset>
}
 23fd862:	4620      	mov	r0, r4
 23fd864:	bd10      	pop	{r4, pc}
 23fd866:	bf00      	nop
 23fd868:	023ffc58 	.word	0x023ffc58

023fd86c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd86c:	4603      	mov	r3, r0
 23fd86e:	4a07      	ldr	r2, [pc, #28]	; (23fd88c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd870:	b510      	push	{r4, lr}
 23fd872:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd876:	f101 0210 	add.w	r2, r1, #16
 23fd87a:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd87e:	4291      	cmp	r1, r2
 23fd880:	f843 4b04 	str.w	r4, [r3], #4
 23fd884:	d1f9      	bne.n	23fd87a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd886:	780a      	ldrb	r2, [r1, #0]
 23fd888:	701a      	strb	r2, [r3, #0]
}
 23fd88a:	bd10      	pop	{r4, pc}
 23fd88c:	023ffc58 	.word	0x023ffc58

023fd890 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd890:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd892:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd896:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd89a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd89e:	2304      	movs	r3, #4
 23fd8a0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd8a4:	6041      	str	r1, [r0, #4]
 23fd8a6:	7503      	strb	r3, [r0, #20]
}
 23fd8a8:	bd10      	pop	{r4, pc}
	...

023fd8ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd8ac:	b507      	push	{r0, r1, r2, lr}
 23fd8ae:	4b06      	ldr	r3, [pc, #24]	; (23fd8c8 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd8b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd8b2:	78cb      	ldrb	r3, [r1, #3]
 23fd8b4:	9300      	str	r3, [sp, #0]
 23fd8b6:	788b      	ldrb	r3, [r1, #2]
 23fd8b8:	784a      	ldrb	r2, [r1, #1]
 23fd8ba:	7809      	ldrb	r1, [r1, #0]
 23fd8bc:	f7ff ffe8 	bl	23fd890 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd8c0:	b003      	add	sp, #12
 23fd8c2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd8c6:	bf00      	nop
 23fd8c8:	023ffc58 	.word	0x023ffc58

023fd8cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd8cc:	2201      	movs	r2, #1
 23fd8ce:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd8d2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd8d6:	4618      	mov	r0, r3
 23fd8d8:	2901      	cmp	r1, #1
 23fd8da:	d108      	bne.n	23fd8ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd8dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd8e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd8e4:	3a01      	subs	r2, #1
 23fd8e6:	f103 0310 	add.w	r3, r3, #16
 23fd8ea:	d1f2      	bne.n	23fd8d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd8ec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd8ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd8f0:	bf04      	itt	eq
 23fd8f2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd8f6:	1852      	addeq	r2, r2, r1
 23fd8f8:	e7f4      	b.n	23fd8e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd8fa <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 23fd8fa:	4770      	bx	lr

023fd8fc <_ZN5spark16JSONBufferWriterD0Ev>:
 23fd8fc:	b510      	push	{r4, lr}
 23fd8fe:	4604      	mov	r4, r0
 23fd900:	2114      	movs	r1, #20
 23fd902:	f7fd ffe6 	bl	23fb8d2 <_ZdlPvj>
 23fd906:	4620      	mov	r0, r4
 23fd908:	bd10      	pop	{r4, pc}

023fd90a <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fd90a:	b538      	push	{r3, r4, r5, lr}
 23fd90c:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23fd90e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23fd912:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fd914:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23fd916:	d207      	bcs.n	23fd928 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23fd918:	1ad2      	subs	r2, r2, r3
 23fd91a:	6880      	ldr	r0, [r0, #8]
 23fd91c:	42aa      	cmp	r2, r5
 23fd91e:	bf28      	it	cs
 23fd920:	462a      	movcs	r2, r5
 23fd922:	4418      	add	r0, r3
 23fd924:	f001 fecc 	bl	23ff6c0 <memcpy>
    }
    n_ += size;
 23fd928:	6922      	ldr	r2, [r4, #16]
 23fd92a:	442a      	add	r2, r5
 23fd92c:	6122      	str	r2, [r4, #16]
}
 23fd92e:	bd38      	pop	{r3, r4, r5, pc}

023fd930 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23fd930:	b40e      	push	{r1, r2, r3}
 23fd932:	b517      	push	{r0, r1, r2, r4, lr}
 23fd934:	4604      	mov	r4, r0
 23fd936:	ab05      	add	r3, sp, #20
 23fd938:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fd93c:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23fd93e:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fd940:	6903      	ldr	r3, [r0, #16]
 23fd942:	6880      	ldr	r0, [r0, #8]
 23fd944:	428b      	cmp	r3, r1
 23fd946:	bf34      	ite	cc
 23fd948:	1ac9      	subcc	r1, r1, r3
 23fd94a:	2100      	movcs	r1, #0
 23fd94c:	4418      	add	r0, r3
 23fd94e:	9b01      	ldr	r3, [sp, #4]
 23fd950:	f7ff fb08 	bl	23fcf64 <vsnprintf>
    va_end(args);
    n_ += n;
 23fd954:	6923      	ldr	r3, [r4, #16]
 23fd956:	4418      	add	r0, r3
 23fd958:	6120      	str	r0, [r4, #16]
}
 23fd95a:	b003      	add	sp, #12
 23fd95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd960:	b003      	add	sp, #12
 23fd962:	4770      	bx	lr

023fd964 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd964:	b40e      	push	{r1, r2, r3}
 23fd966:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd968:	b088      	sub	sp, #32
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd96a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd96c:	af00      	add	r7, sp, #0
 23fd96e:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd972:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd976:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd978:	462b      	mov	r3, r5
 23fd97a:	1878      	adds	r0, r7, r1
 23fd97c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd97e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd980:	f7ff faf0 	bl	23fcf64 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd984:	280f      	cmp	r0, #15
 23fd986:	687a      	ldr	r2, [r7, #4]
 23fd988:	d91a      	bls.n	23fd9c0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd98a:	f100 0308 	add.w	r3, r0, #8
 23fd98e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd992:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd994:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd998:	1c41      	adds	r1, r0, #1
 23fd99a:	462b      	mov	r3, r5
 23fd99c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd99e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9a0:	f7ff fae0 	bl	23fcf64 <vsnprintf>
        if (n > 0) {
 23fd9a4:	1e02      	subs	r2, r0, #0
 23fd9a6:	dd04      	ble.n	23fd9b2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd9a8:	6823      	ldr	r3, [r4, #0]
 23fd9aa:	4669      	mov	r1, sp
 23fd9ac:	4620      	mov	r0, r4
 23fd9ae:	689b      	ldr	r3, [r3, #8]
 23fd9b0:	4798      	blx	r3
 23fd9b2:	46b5      	mov	sp, r6
}
 23fd9b4:	3720      	adds	r7, #32
 23fd9b6:	46bd      	mov	sp, r7
 23fd9b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd9bc:	b003      	add	sp, #12
 23fd9be:	4770      	bx	lr
    } else if (n > 0) {
 23fd9c0:	2800      	cmp	r0, #0
 23fd9c2:	d0f7      	beq.n	23fd9b4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd9c4:	6823      	ldr	r3, [r4, #0]
 23fd9c6:	4602      	mov	r2, r0
 23fd9c8:	689b      	ldr	r3, [r3, #8]
 23fd9ca:	4620      	mov	r0, r4
 23fd9cc:	f107 0110 	add.w	r1, r7, #16
 23fd9d0:	4798      	blx	r3
}
 23fd9d2:	e7ef      	b.n	23fd9b4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd9d4:	b538      	push	{r3, r4, r5, lr}
 23fd9d6:	680b      	ldr	r3, [r1, #0]
 23fd9d8:	4604      	mov	r4, r0
 23fd9da:	6003      	str	r3, [r0, #0]
 23fd9dc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd9de:	6843      	ldr	r3, [r0, #4]
 23fd9e0:	429d      	cmp	r5, r3
 23fd9e2:	d008      	beq.n	23fd9f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd9e4:	b115      	cbz	r5, 23fd9ec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd9e6:	686b      	ldr	r3, [r5, #4]
 23fd9e8:	3301      	adds	r3, #1
 23fd9ea:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd9ec:	6860      	ldr	r0, [r4, #4]
 23fd9ee:	b108      	cbz	r0, 23fd9f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd9f0:	f7ff fb2c 	bl	23fd04c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd9f4:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd9f6:	bd38      	pop	{r3, r4, r5, pc}

023fd9f8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd9f8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd9fa:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd9fc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fda00:	2201      	movs	r2, #1
 23fda02:	689b      	ldr	r3, [r3, #8]
 23fda04:	f10d 0107 	add.w	r1, sp, #7
 23fda08:	4798      	blx	r3
}
 23fda0a:	b003      	add	sp, #12
 23fda0c:	f85d fb04 	ldr.w	pc, [sp], #4

023fda10 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fda10:	460b      	mov	r3, r1
 23fda12:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fda14:	2200      	movs	r2, #0
 23fda16:	b510      	push	{r4, lr}
 23fda18:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fda1a:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fda1e:	6083      	str	r3, [r0, #8]
    if (t) {
 23fda20:	b90b      	cbnz	r3, 23fda26 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fda22:	4620      	mov	r0, r4
 23fda24:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fda26:	f7ff ffd5 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fda2a:	e7fa      	b.n	23fda22 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fda2c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fda2c:	6883      	ldr	r3, [r0, #8]
 23fda2e:	b1eb      	cbz	r3, 23fda6c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fda30:	781a      	ldrb	r2, [r3, #0]
 23fda32:	2a03      	cmp	r2, #3
 23fda34:	d81a      	bhi.n	23fda6c <_ZNK5spark9JSONValue4typeEv+0x40>
 23fda36:	e8df f002 	tbb	[pc, r2]
 23fda3a:	1704      	.short	0x1704
 23fda3c:	1b02      	.short	0x1b02
 23fda3e:	2005      	movs	r0, #5
 23fda40:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fda42:	6802      	ldr	r2, [r0, #0]
 23fda44:	685b      	ldr	r3, [r3, #4]
 23fda46:	6852      	ldr	r2, [r2, #4]
 23fda48:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fda4a:	282d      	cmp	r0, #45	; 0x2d
 23fda4c:	d012      	beq.n	23fda74 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fda4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fda52:	2b09      	cmp	r3, #9
 23fda54:	d90e      	bls.n	23fda74 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fda56:	2874      	cmp	r0, #116	; 0x74
 23fda58:	d00e      	beq.n	23fda78 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fda5a:	2866      	cmp	r0, #102	; 0x66
 23fda5c:	d00c      	beq.n	23fda78 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fda5e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fda62:	4258      	negs	r0, r3
 23fda64:	4158      	adcs	r0, r3
 23fda66:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fda68:	2006      	movs	r0, #6
 23fda6a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fda6c:	2000      	movs	r0, #0
 23fda6e:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fda70:	2004      	movs	r0, #4
 23fda72:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fda74:	2003      	movs	r0, #3
 23fda76:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fda78:	2002      	movs	r0, #2
}
 23fda7a:	4770      	bx	lr

023fda7c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fda7c:	b510      	push	{r4, lr}
 23fda7e:	4604      	mov	r4, r0
    switch (type()) {
 23fda80:	f7ff ffd4 	bl	23fda2c <_ZNK5spark9JSONValue4typeEv>
 23fda84:	2802      	cmp	r0, #2
 23fda86:	d00e      	beq.n	23fdaa6 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fda88:	1ec3      	subs	r3, r0, #3
 23fda8a:	b2db      	uxtb	r3, r3
 23fda8c:	2b01      	cmp	r3, #1
 23fda8e:	d814      	bhi.n	23fdaba <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fda90:	6822      	ldr	r2, [r4, #0]
 23fda92:	68a3      	ldr	r3, [r4, #8]
 23fda94:	6850      	ldr	r0, [r2, #4]
 23fda96:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fda98:	220a      	movs	r2, #10
}
 23fda9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fda9e:	2100      	movs	r1, #0
 23fdaa0:	4418      	add	r0, r3
 23fdaa2:	f001 bf53 	b.w	23ff94c <strtol>
        const char* const s = d_->json + t_->start;
 23fdaa6:	6822      	ldr	r2, [r4, #0]
 23fdaa8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fdaaa:	6852      	ldr	r2, [r2, #4]
 23fdaac:	685b      	ldr	r3, [r3, #4]
 23fdaae:	5cd0      	ldrb	r0, [r2, r3]
 23fdab0:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fdab4:	4258      	negs	r0, r3
 23fdab6:	4158      	adcs	r0, r3
}
 23fdab8:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fdaba:	2000      	movs	r0, #0
 23fdabc:	e7fc      	b.n	23fdab8 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023fdac0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdac0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdac2:	2300      	movs	r3, #0
 23fdac4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdac6:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fdaca:	480e      	ldr	r0, [pc, #56]	; (23fdb04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fdacc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fdad0:	b1a9      	cbz	r1, 23fdafe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fdad2:	780b      	ldrb	r3, [r1, #0]
 23fdad4:	2b03      	cmp	r3, #3
 23fdad6:	d006      	beq.n	23fdae6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fdad8:	b98b      	cbnz	r3, 23fdafe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fdada:	6813      	ldr	r3, [r2, #0]
 23fdadc:	6858      	ldr	r0, [r3, #4]
 23fdade:	684b      	ldr	r3, [r1, #4]
 23fdae0:	5cc3      	ldrb	r3, [r0, r3]
 23fdae2:	2b6e      	cmp	r3, #110	; 0x6e
 23fdae4:	d007      	beq.n	23fdaf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fdae6:	6813      	ldr	r3, [r2, #0]
 23fdae8:	684d      	ldr	r5, [r1, #4]
 23fdaea:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fdaec:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fdaee:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fdaf0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fdaf2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fdaf4:	60e3      	str	r3, [r4, #12]
 23fdaf6:	4611      	mov	r1, r2
 23fdaf8:	4620      	mov	r0, r4
 23fdafa:	f7ff ff6b 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdafe:	4620      	mov	r0, r4
 23fdb00:	bd38      	pop	{r3, r4, r5, pc}
 23fdb02:	bf00      	nop
 23fdb04:	023ffce2 	.word	0x023ffce2

023fdb08 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdb08:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdb0a:	2500      	movs	r5, #0
 23fdb0c:	460b      	mov	r3, r1
 23fdb0e:	4604      	mov	r4, r0
 23fdb10:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdb12:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fdb16:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdb1a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fdb1e:	b14b      	cbz	r3, 23fdb34 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fdb20:	781a      	ldrb	r2, [r3, #0]
 23fdb22:	2a01      	cmp	r2, #1
 23fdb24:	d106      	bne.n	23fdb34 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fdb26:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fdb2a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fdb2c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fdb2e:	6143      	str	r3, [r0, #20]
 23fdb30:	f7ff ff50 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdb34:	4620      	mov	r0, r4
 23fdb36:	bd38      	pop	{r3, r4, r5, pc}

023fdb38 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fdb38:	b510      	push	{r4, lr}
    if (!n_) {
 23fdb3a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fdb3c:	4604      	mov	r4, r0
    if (!n_) {
 23fdb3e:	b163      	cbz	r3, 23fdb5a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fdb40:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fdb42:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fdb44:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fdb46:	3010      	adds	r0, #16
 23fdb48:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fdb4a:	6120      	str	r0, [r4, #16]
    --n_;
 23fdb4c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fdb4e:	b113      	cbz	r3, 23fdb56 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fdb50:	f7ff febc 	bl	23fd8cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fdb54:	60a0      	str	r0, [r4, #8]
    return true;
 23fdb56:	2001      	movs	r0, #1
 23fdb58:	e000      	b.n	23fdb5c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fdb5a:	4618      	mov	r0, r3
}
 23fdb5c:	bd10      	pop	{r4, pc}

023fdb5e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdb5e:	b510      	push	{r4, lr}
    write('}');
 23fdb60:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdb62:	4604      	mov	r4, r0
    write('}');
 23fdb64:	f7ff ff48 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fdb68:	2301      	movs	r3, #1
}
 23fdb6a:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdb6c:	7123      	strb	r3, [r4, #4]
}
 23fdb6e:	bd10      	pop	{r4, pc}

023fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23fdb70:	b508      	push	{r3, lr}
    switch (state_) {
 23fdb72:	7903      	ldrb	r3, [r0, #4]
 23fdb74:	2b01      	cmp	r3, #1
 23fdb76:	d002      	beq.n	23fdb7e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fdb78:	2b02      	cmp	r3, #2
 23fdb7a:	d004      	beq.n	23fdb86 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23fdb7c:	bd08      	pop	{r3, pc}
        write(',');
 23fdb7e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fdb80:	f7ff ff3a 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
}
 23fdb84:	e7fa      	b.n	23fdb7c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fdb86:	213a      	movs	r1, #58	; 0x3a
 23fdb88:	e7fa      	b.n	23fdb80 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fdb8a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fdb8a:	b510      	push	{r4, lr}
 23fdb8c:	4604      	mov	r4, r0
    writeSeparator();
 23fdb8e:	f7ff ffef 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fdb92:	4620      	mov	r0, r4
 23fdb94:	217b      	movs	r1, #123	; 0x7b
 23fdb96:	f7ff ff2f 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fdb9a:	2300      	movs	r3, #0
}
 23fdb9c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fdb9e:	7123      	strb	r3, [r4, #4]
}
 23fdba0:	bd10      	pop	{r4, pc}
	...

023fdba4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fdba4:	b513      	push	{r0, r1, r4, lr}
 23fdba6:	4604      	mov	r4, r0
 23fdba8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdbaa:	f7ff ffe1 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fdbae:	6823      	ldr	r3, [r4, #0]
 23fdbb0:	4620      	mov	r0, r4
 23fdbb2:	68db      	ldr	r3, [r3, #12]
 23fdbb4:	9a01      	ldr	r2, [sp, #4]
 23fdbb6:	4903      	ldr	r1, [pc, #12]	; (23fdbc4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fdbb8:	4798      	blx	r3
    state_ = NEXT;
 23fdbba:	2301      	movs	r3, #1
}
 23fdbbc:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdbbe:	7123      	strb	r3, [r4, #4]
}
 23fdbc0:	b002      	add	sp, #8
 23fdbc2:	bd10      	pop	{r4, pc}
 23fdbc4:	023ffc64 	.word	0x023ffc64

023fdbc8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fdbc8:	b513      	push	{r0, r1, r4, lr}
 23fdbca:	4604      	mov	r4, r0
 23fdbcc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdbce:	f7ff ffcf 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fdbd2:	6823      	ldr	r3, [r4, #0]
 23fdbd4:	4620      	mov	r0, r4
 23fdbd6:	68db      	ldr	r3, [r3, #12]
 23fdbd8:	9a01      	ldr	r2, [sp, #4]
 23fdbda:	4903      	ldr	r1, [pc, #12]	; (23fdbe8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fdbdc:	4798      	blx	r3
    state_ = NEXT;
 23fdbde:	2301      	movs	r3, #1
}
 23fdbe0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdbe2:	7123      	strb	r3, [r4, #4]
}
 23fdbe4:	b002      	add	sp, #8
 23fdbe6:	bd10      	pop	{r4, pc}
 23fdbe8:	023ffc67 	.word	0x023ffc67

023fdbec <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
 23fdbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdbee:	4604      	mov	r4, r0
 23fdbf0:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
 23fdbf4:	f7ff ffbc 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
 23fdbf8:	6823      	ldr	r3, [r4, #0]
 23fdbfa:	4620      	mov	r0, r4
 23fdbfc:	68dd      	ldr	r5, [r3, #12]
 23fdbfe:	4632      	mov	r2, r6
 23fdc00:	463b      	mov	r3, r7
 23fdc02:	4903      	ldr	r1, [pc, #12]	; (23fdc10 <_ZN5spark10JSONWriter5valueEd+0x24>)
 23fdc04:	47a8      	blx	r5
    state_ = NEXT;
 23fdc06:	2301      	movs	r3, #1
}
 23fdc08:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdc0a:	7123      	strb	r3, [r4, #4]
}
 23fdc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fdc0e:	bf00      	nop
 23fdc10:	023ffc6a 	.word	0x023ffc6a

023fdc14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdc18:	460d      	mov	r5, r1
 23fdc1a:	4690      	mov	r8, r2
    write('"');
 23fdc1c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdc1e:	4604      	mov	r4, r0
 23fdc20:	462f      	mov	r7, r5
    write('"');
 23fdc22:	f7ff fee9 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23fdc26:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fdccc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fdc2a:	44a8      	add	r8, r5
    while (s != end) {
 23fdc2c:	4547      	cmp	r7, r8
 23fdc2e:	46ba      	mov	sl, r7
 23fdc30:	d03d      	beq.n	23fdcae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fdc32:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fdc36:	2e22      	cmp	r6, #34	; 0x22
 23fdc38:	d006      	beq.n	23fdc48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdc3a:	2e5c      	cmp	r6, #92	; 0x5c
 23fdc3c:	d004      	beq.n	23fdc48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdc3e:	4630      	mov	r0, r6
 23fdc40:	f001 fd36 	bl	23ff6b0 <isprint>
 23fdc44:	2800      	cmp	r0, #0
 23fdc46:	d1f1      	bne.n	23fdc2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fdc48:	6823      	ldr	r3, [r4, #0]
 23fdc4a:	4629      	mov	r1, r5
 23fdc4c:	4620      	mov	r0, r4
 23fdc4e:	689b      	ldr	r3, [r3, #8]
 23fdc50:	ebaa 0205 	sub.w	r2, sl, r5
 23fdc54:	4798      	blx	r3
            write('\\');
 23fdc56:	215c      	movs	r1, #92	; 0x5c
 23fdc58:	4620      	mov	r0, r4
 23fdc5a:	f7ff fecd 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fdc5e:	2e0d      	cmp	r6, #13
 23fdc60:	d80a      	bhi.n	23fdc78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fdc62:	2e07      	cmp	r6, #7
 23fdc64:	d91c      	bls.n	23fdca0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fdc66:	f1a6 0308 	sub.w	r3, r6, #8
 23fdc6a:	2b05      	cmp	r3, #5
 23fdc6c:	d818      	bhi.n	23fdca0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fdc6e:	e8df f003 	tbb	[pc, r3]
 23fdc72:	0f0d      	.short	0x0f0d
 23fdc74:	15131711 	.word	0x15131711
 23fdc78:	2e22      	cmp	r6, #34	; 0x22
 23fdc7a:	d001      	beq.n	23fdc80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fdc7c:	2e5c      	cmp	r6, #92	; 0x5c
 23fdc7e:	d10f      	bne.n	23fdca0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fdc80:	4631      	mov	r1, r6
                write('b');
 23fdc82:	4620      	mov	r0, r4
 23fdc84:	f7ff feb8 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23fdc88:	463d      	mov	r5, r7
    while (s != end) {
 23fdc8a:	e7cf      	b.n	23fdc2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fdc8c:	2162      	movs	r1, #98	; 0x62
 23fdc8e:	e7f8      	b.n	23fdc82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fdc90:	2174      	movs	r1, #116	; 0x74
 23fdc92:	e7f6      	b.n	23fdc82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fdc94:	216e      	movs	r1, #110	; 0x6e
 23fdc96:	e7f4      	b.n	23fdc82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fdc98:	2166      	movs	r1, #102	; 0x66
 23fdc9a:	e7f2      	b.n	23fdc82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fdc9c:	2172      	movs	r1, #114	; 0x72
 23fdc9e:	e7f0      	b.n	23fdc82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fdca0:	6823      	ldr	r3, [r4, #0]
 23fdca2:	4632      	mov	r2, r6
 23fdca4:	4649      	mov	r1, r9
 23fdca6:	4620      	mov	r0, r4
 23fdca8:	68db      	ldr	r3, [r3, #12]
 23fdcaa:	4798      	blx	r3
                break;
 23fdcac:	e7ec      	b.n	23fdc88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23fdcae:	42bd      	cmp	r5, r7
 23fdcb0:	d005      	beq.n	23fdcbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fdcb2:	6823      	ldr	r3, [r4, #0]
 23fdcb4:	4629      	mov	r1, r5
 23fdcb6:	4620      	mov	r0, r4
 23fdcb8:	689b      	ldr	r3, [r3, #8]
 23fdcba:	1b7a      	subs	r2, r7, r5
 23fdcbc:	4798      	blx	r3
    write('"');
 23fdcbe:	2122      	movs	r1, #34	; 0x22
 23fdcc0:	4620      	mov	r0, r4
 23fdcc2:	f7ff fe99 	bl	23fd9f8 <_ZN5spark10JSONWriter5writeEc>
}
 23fdcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdcca:	bf00      	nop
 23fdccc:	023ffc6d 	.word	0x023ffc6d

023fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fdcd0:	b513      	push	{r0, r1, r4, lr}
 23fdcd2:	4604      	mov	r4, r0
 23fdcd4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fdcd8:	f7ff ff4a 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fdcdc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fdce0:	4620      	mov	r0, r4
 23fdce2:	f7ff ff97 	bl	23fdc14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fdce6:	2302      	movs	r3, #2
}
 23fdce8:	4620      	mov	r0, r4
    state_ = VALUE;
 23fdcea:	7123      	strb	r3, [r4, #4]
}
 23fdcec:	b002      	add	sp, #8
 23fdcee:	bd10      	pop	{r4, pc}

023fdcf0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fdcf0:	b513      	push	{r0, r1, r4, lr}
 23fdcf2:	4604      	mov	r4, r0
 23fdcf4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fdcf8:	f7ff ff3a 	bl	23fdb70 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fdcfc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fdd00:	4620      	mov	r0, r4
 23fdd02:	f7ff ff87 	bl	23fdc14 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fdd06:	2301      	movs	r3, #1
}
 23fdd08:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdd0a:	7123      	strb	r3, [r4, #4]
}
 23fdd0c:	b002      	add	sp, #8
 23fdd0e:	bd10      	pop	{r4, pc}

023fdd10 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fdd10:	6880      	ldr	r0, [r0, #8]
 23fdd12:	6803      	ldr	r3, [r0, #0]
 23fdd14:	68db      	ldr	r3, [r3, #12]
 23fdd16:	4718      	bx	r3

023fdd18 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fdd18:	4770      	bx	lr

023fdd1a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fdd1a:	4608      	mov	r0, r1
 23fdd1c:	b111      	cbz	r1, 23fdd24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fdd1e:	680b      	ldr	r3, [r1, #0]
 23fdd20:	685b      	ldr	r3, [r3, #4]
 23fdd22:	4718      	bx	r3
}
 23fdd24:	4770      	bx	lr

023fdd26 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fdd26:	4770      	bx	lr

023fdd28 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdd28:	4770      	bx	lr

023fdd2a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fdd2a:	4770      	bx	lr

023fdd2c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fdd2c:	4770      	bx	lr

023fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fdd2e:	b538      	push	{r3, r4, r5, lr}
 23fdd30:	4604      	mov	r4, r0
 23fdd32:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fdd34:	6800      	ldr	r0, [r0, #0]
 23fdd36:	212e      	movs	r1, #46	; 0x2e
 23fdd38:	f001 fd2d 	bl	23ff796 <strchrnul>
    size = s - category;
 23fdd3c:	6823      	ldr	r3, [r4, #0]
 23fdd3e:	1ac3      	subs	r3, r0, r3
 23fdd40:	602b      	str	r3, [r5, #0]
    if (size) {
 23fdd42:	b123      	cbz	r3, 23fdd4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fdd44:	7803      	ldrb	r3, [r0, #0]
 23fdd46:	b103      	cbz	r3, 23fdd4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fdd48:	3001      	adds	r0, #1
 23fdd4a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd4c:	6020      	str	r0, [r4, #0]
}
 23fdd4e:	4618      	mov	r0, r3
 23fdd50:	bd38      	pop	{r3, r4, r5, pc}

023fdd52 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fdd52:	b510      	push	{r4, lr}
 23fdd54:	4604      	mov	r4, r0
 23fdd56:	210c      	movs	r1, #12
 23fdd58:	f7fd fdbb 	bl	23fb8d2 <_ZdlPvj>
 23fdd5c:	4620      	mov	r0, r4
 23fdd5e:	bd10      	pop	{r4, pc}

023fdd60 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fdd60:	b510      	push	{r4, lr}
 23fdd62:	4604      	mov	r4, r0
 23fdd64:	2104      	movs	r1, #4
 23fdd66:	f7fd fdb4 	bl	23fb8d2 <_ZdlPvj>
 23fdd6a:	4620      	mov	r0, r4
 23fdd6c:	bd10      	pop	{r4, pc}

023fdd6e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdd6e:	b510      	push	{r4, lr}
 23fdd70:	4604      	mov	r4, r0
 23fdd72:	2104      	movs	r1, #4
 23fdd74:	f7fd fdad 	bl	23fb8d2 <_ZdlPvj>
 23fdd78:	4620      	mov	r0, r4
 23fdd7a:	bd10      	pop	{r4, pc}

023fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fdd7c:	f7fe bcae 	b.w	23fc6dc <os_mutex_recursive_lock>

023fdd80 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fdd80:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fdd82:	f7fd fd73 	bl	23fb86c <strcmp>
}
 23fdd86:	fab0 f080 	clz	r0, r0
 23fdd8a:	0940      	lsrs	r0, r0, #5
 23fdd8c:	bd08      	pop	{r3, pc}

023fdd8e <__tcf_1>:
 23fdd8e:	4770      	bx	lr

023fdd90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fdd90:	b510      	push	{r4, lr}
 23fdd92:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fdd94:	f001 fa0a 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fdd98:	4284      	cmp	r4, r0
 23fdd9a:	d105      	bne.n	23fdda8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fdd9c:	f001 fa06 	bl	23ff1ac <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fdda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fdda4:	f001 b9f4 	b.w	23ff190 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fdda8:	f001 fbe0 	bl	23ff56c <_Z22__fetch_global_Serial1v>
 23fddac:	4284      	cmp	r4, r0
 23fddae:	d105      	bne.n	23fddbc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fddb0:	f001 fbdc 	bl	23ff56c <_Z22__fetch_global_Serial1v>
}
 23fddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fddb8:	f001 b98d 	b.w	23ff0d6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fddbc:	b12c      	cbz	r4, 23fddca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fddbe:	6823      	ldr	r3, [r4, #0]
 23fddc0:	4620      	mov	r0, r4
}
 23fddc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fddc6:	685b      	ldr	r3, [r3, #4]
 23fddc8:	4718      	bx	r3
 23fddca:	bd10      	pop	{r4, pc}

023fddcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fddcc:	680b      	ldr	r3, [r1, #0]
 23fddce:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fddd0:	684b      	ldr	r3, [r1, #4]
 23fddd2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fddd4:	b113      	cbz	r3, 23fdddc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fddd6:	685a      	ldr	r2, [r3, #4]
 23fddd8:	3201      	adds	r2, #1
 23fddda:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fdddc:	4770      	bx	lr

023fddde <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fddde:	b513      	push	{r0, r1, r4, lr}
 23fdde0:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fdde2:	4608      	mov	r0, r1
 23fdde4:	9101      	str	r1, [sp, #4]
 23fdde6:	f7fd fd4b 	bl	23fb880 <strlen>
 23fddea:	4602      	mov	r2, r0
 23fddec:	4620      	mov	r0, r4
 23fddee:	9901      	ldr	r1, [sp, #4]
}
 23fddf0:	b002      	add	sp, #8
 23fddf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fddf6:	f7ff bf7b 	b.w	23fdcf0 <_ZN5spark10JSONWriter5valueEPKcj>

023fddfa <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fddfa:	b513      	push	{r0, r1, r4, lr}
 23fddfc:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fddfe:	4608      	mov	r0, r1
 23fde00:	9101      	str	r1, [sp, #4]
 23fde02:	f7fd fd3d 	bl	23fb880 <strlen>
 23fde06:	4602      	mov	r2, r0
 23fde08:	4620      	mov	r0, r4
 23fde0a:	6823      	ldr	r3, [r4, #0]
 23fde0c:	9901      	ldr	r1, [sp, #4]
 23fde0e:	68db      	ldr	r3, [r3, #12]
}
 23fde10:	b002      	add	sp, #8
 23fde12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fde16:	4718      	bx	r3

023fde18 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fde18:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fde1a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fde1c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fde20:	2201      	movs	r2, #1
 23fde22:	68db      	ldr	r3, [r3, #12]
 23fde24:	f10d 0107 	add.w	r1, sp, #7
 23fde28:	4798      	blx	r3
}
 23fde2a:	b003      	add	sp, #12
 23fde2c:	f85d fb04 	ldr.w	pc, [sp], #4

023fde30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fde30:	680a      	ldr	r2, [r1, #0]
 23fde32:	b510      	push	{r4, lr}
 23fde34:	6002      	str	r2, [r0, #0]
 23fde36:	684a      	ldr	r2, [r1, #4]
 23fde38:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fde3a:	2200      	movs	r2, #0
 23fde3c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fde40:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fde42:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde44:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fde46:	6084      	str	r4, [r0, #8]
 23fde48:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde4a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fde4c:	60c4      	str	r4, [r0, #12]
 23fde4e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde50:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fde52:	6104      	str	r4, [r0, #16]
 23fde54:	bd10      	pop	{r4, pc}
	...

023fde58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fde58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fde5c:	f04f 0a14 	mov.w	sl, #20
 23fde60:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fde64:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fde66:	4645      	mov	r5, r8
 23fde68:	fb0a f404 	mul.w	r4, sl, r4
 23fde6c:	9300      	str	r3, [sp, #0]
 23fde6e:	4b17      	ldr	r3, [pc, #92]	; (23fdecc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fde70:	10a4      	asrs	r4, r4, #2
 23fde72:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fde74:	2c00      	cmp	r4, #0
 23fde76:	dd21      	ble.n	23fdebc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fde78:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fde7a:	fb0a f006 	mul.w	r0, sl, r6
 23fde7e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fde82:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fde86:	463a      	mov	r2, r7
 23fde88:	455f      	cmp	r7, fp
 23fde8a:	bf28      	it	cs
 23fde8c:	465a      	movcs	r2, fp
 23fde8e:	5828      	ldr	r0, [r5, r0]
 23fde90:	9101      	str	r1, [sp, #4]
 23fde92:	f001 fcb0 	bl	23ff7f6 <strncmp>
                if (cmp == 0) {
 23fde96:	2800      	cmp	r0, #0
 23fde98:	f04f 0301 	mov.w	r3, #1
 23fde9c:	9901      	ldr	r1, [sp, #4]
 23fde9e:	d10b      	bne.n	23fdeb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdea0:	455f      	cmp	r7, fp
 23fdea2:	d103      	bne.n	23fdeac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdea4:	9a00      	ldr	r2, [sp, #0]
 23fdea6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdea8:	4634      	mov	r4, r6
 23fdeaa:	e7e3      	b.n	23fde74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdeac:	d9fc      	bls.n	23fdea8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdeae:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdeb0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdeb4:	3e01      	subs	r6, #1
 23fdeb6:	e7f7      	b.n	23fdea8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fdeb8:	dbf9      	blt.n	23fdeae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fdeba:	e7f5      	b.n	23fdea8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fdebc:	eba5 0508 	sub.w	r5, r5, r8
}
 23fdec0:	4802      	ldr	r0, [pc, #8]	; (23fdecc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdec2:	10ad      	asrs	r5, r5, #2
 23fdec4:	4368      	muls	r0, r5
 23fdec6:	b003      	add	sp, #12
 23fdec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdecc:	cccccccd 	.word	0xcccccccd

023fded0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fded0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fded2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fded4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fded6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fded8:	b303      	cbz	r3, 23fdf1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fdeda:	b1f9      	cbz	r1, 23fdf1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fdedc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fdede:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fdee2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fdee4:	a903      	add	r1, sp, #12
 23fdee6:	a801      	add	r0, sp, #4
 23fdee8:	f7ff ff21 	bl	23fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdeec:	4601      	mov	r1, r0
 23fdeee:	b1a8      	cbz	r0, 23fdf1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdef0:	f10d 030b 	add.w	r3, sp, #11
 23fdef4:	4620      	mov	r0, r4
 23fdef6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdef8:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdefc:	f7ff ffac 	bl	23fde58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdf00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdf04:	b153      	cbz	r3, 23fdf1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdf06:	6823      	ldr	r3, [r4, #0]
 23fdf08:	2414      	movs	r4, #20
 23fdf0a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdf0e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdf12:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdf14:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdf16:	bfa8      	it	ge
 23fdf18:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fdf1a:	e7e3      	b.n	23fdee4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fdf1c:	4628      	mov	r0, r5
 23fdf1e:	b004      	add	sp, #16
 23fdf20:	bd70      	pop	{r4, r5, r6, pc}

023fdf22 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdf22:	b40e      	push	{r1, r2, r3}
 23fdf24:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdf26:	b08c      	sub	sp, #48	; 0x30
 23fdf28:	af00      	add	r7, sp, #0
 23fdf2a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdf2e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdf32:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf34:	462b      	mov	r3, r5
 23fdf36:	2120      	movs	r1, #32
 23fdf38:	f107 0010 	add.w	r0, r7, #16
 23fdf3c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdf3e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf40:	f7ff f810 	bl	23fcf64 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdf44:	281f      	cmp	r0, #31
 23fdf46:	687a      	ldr	r2, [r7, #4]
 23fdf48:	d91a      	bls.n	23fdf80 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdf4a:	f100 0308 	add.w	r3, r0, #8
 23fdf4e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdf52:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdf54:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf58:	1c41      	adds	r1, r0, #1
 23fdf5a:	462b      	mov	r3, r5
 23fdf5c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdf5e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf60:	f7ff f800 	bl	23fcf64 <vsnprintf>
        if (n > 0) {
 23fdf64:	1e02      	subs	r2, r0, #0
 23fdf66:	dd04      	ble.n	23fdf72 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdf68:	6823      	ldr	r3, [r4, #0]
 23fdf6a:	4669      	mov	r1, sp
 23fdf6c:	4620      	mov	r0, r4
 23fdf6e:	68db      	ldr	r3, [r3, #12]
 23fdf70:	4798      	blx	r3
 23fdf72:	46b5      	mov	sp, r6
}
 23fdf74:	3730      	adds	r7, #48	; 0x30
 23fdf76:	46bd      	mov	sp, r7
 23fdf78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdf7c:	b003      	add	sp, #12
 23fdf7e:	4770      	bx	lr
    } else if (n > 0) {
 23fdf80:	2800      	cmp	r0, #0
 23fdf82:	d0f7      	beq.n	23fdf74 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdf84:	6823      	ldr	r3, [r4, #0]
 23fdf86:	4602      	mov	r2, r0
 23fdf88:	68db      	ldr	r3, [r3, #12]
 23fdf8a:	4620      	mov	r0, r4
 23fdf8c:	f107 0110 	add.w	r1, r7, #16
 23fdf90:	4798      	blx	r3
}
 23fdf92:	e7ef      	b.n	23fdf74 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdf94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdf94:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdf96:	4c08      	ldr	r4, [pc, #32]	; (23fdfb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdf98:	e8d4 3f8f 	ldab	r3, [r4]
 23fdf9c:	07db      	lsls	r3, r3, #31
 23fdf9e:	d409      	bmi.n	23fdfb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdfa0:	4620      	mov	r0, r4
 23fdfa2:	f7fd fca5 	bl	23fb8f0 <__cxa_guard_acquire>
 23fdfa6:	b128      	cbz	r0, 23fdfb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdfa8:	4620      	mov	r0, r4
 23fdfaa:	f7fd fca6 	bl	23fb8fa <__cxa_guard_release>
 23fdfae:	4803      	ldr	r0, [pc, #12]	; (23fdfbc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fdfb0:	f001 fb73 	bl	23ff69a <atexit>
}
 23fdfb4:	4802      	ldr	r0, [pc, #8]	; (23fdfc0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fdfb6:	bd10      	pop	{r4, pc}
 23fdfb8:	1007ae60 	.word	0x1007ae60
 23fdfbc:	023fdd27 	.word	0x023fdd27
 23fdfc0:	1007a938 	.word	0x1007a938

023fdfc4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fdfc4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fdfc6:	4c08      	ldr	r4, [pc, #32]	; (23fdfe8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fdfc8:	e8d4 3f8f 	ldab	r3, [r4]
 23fdfcc:	07db      	lsls	r3, r3, #31
 23fdfce:	d409      	bmi.n	23fdfe4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdfd0:	4620      	mov	r0, r4
 23fdfd2:	f7fd fc8d 	bl	23fb8f0 <__cxa_guard_acquire>
 23fdfd6:	b128      	cbz	r0, 23fdfe4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdfd8:	4620      	mov	r0, r4
 23fdfda:	f7fd fc8e 	bl	23fb8fa <__cxa_guard_release>
 23fdfde:	4803      	ldr	r0, [pc, #12]	; (23fdfec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fdfe0:	f001 fb5b 	bl	23ff69a <atexit>
    return &factory;
}
 23fdfe4:	4802      	ldr	r0, [pc, #8]	; (23fdff0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fdfe6:	bd10      	pop	{r4, pc}
 23fdfe8:	1007ae64 	.word	0x1007ae64
 23fdfec:	023fdd8f 	.word	0x023fdd8f
 23fdff0:	1007a93c 	.word	0x1007a93c

023fdff4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fdff4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdff6:	2500      	movs	r5, #0
 23fdff8:	4604      	mov	r4, r0
 23fdffa:	e9c0 5500 	strd	r5, r5, [r0]
 23fdffe:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fe002:	6085      	str	r5, [r0, #8]
 23fe004:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fe006:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fe00a:	f7fe fb4b 	bl	23fc6a4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fe00e:	f7ff ffc1 	bl	23fdf94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fe012:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe014:	f7ff ffd6 	bl	23fdfc4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fe018:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe01a:	6220      	str	r0, [r4, #32]
}
 23fe01c:	4620      	mov	r0, r4
 23fe01e:	bd38      	pop	{r3, r4, r5, pc}

023fe020 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fe020:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fe022:	4c0a      	ldr	r4, [pc, #40]	; (23fe04c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fe024:	e8d4 3f8f 	ldab	r3, [r4]
 23fe028:	07db      	lsls	r3, r3, #31
 23fe02a:	d40c      	bmi.n	23fe046 <_ZN5spark10LogManager8instanceEv+0x26>
 23fe02c:	4620      	mov	r0, r4
 23fe02e:	f7fd fc5f 	bl	23fb8f0 <__cxa_guard_acquire>
 23fe032:	b140      	cbz	r0, 23fe046 <_ZN5spark10LogManager8instanceEv+0x26>
 23fe034:	4806      	ldr	r0, [pc, #24]	; (23fe050 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe036:	f7ff ffdd 	bl	23fdff4 <_ZN5spark10LogManagerC1Ev>
 23fe03a:	4620      	mov	r0, r4
 23fe03c:	f7fd fc5d 	bl	23fb8fa <__cxa_guard_release>
 23fe040:	4804      	ldr	r0, [pc, #16]	; (23fe054 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fe042:	f001 fb2a 	bl	23ff69a <atexit>
    return &mgr;
}
 23fe046:	4802      	ldr	r0, [pc, #8]	; (23fe050 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe048:	bd10      	pop	{r4, pc}
 23fe04a:	bf00      	nop
 23fe04c:	1007ae5c 	.word	0x1007ae5c
 23fe050:	1007ae6c 	.word	0x1007ae6c
 23fe054:	023fe571 	.word	0x023fe571

023fe058 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fe058:	2300      	movs	r3, #0
 23fe05a:	4a02      	ldr	r2, [pc, #8]	; (23fe064 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fe05c:	4902      	ldr	r1, [pc, #8]	; (23fe068 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fe05e:	4803      	ldr	r0, [pc, #12]	; (23fe06c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fe060:	f7fe bdea 	b.w	23fcc38 <log_set_callbacks>
 23fe064:	023fe359 	.word	0x023fe359
 23fe068:	023fe2e5 	.word	0x023fe2e5
 23fe06c:	023fe265 	.word	0x023fe265

023fe070 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fe070:	2300      	movs	r3, #0
 23fe072:	461a      	mov	r2, r3
 23fe074:	4619      	mov	r1, r3
 23fe076:	4618      	mov	r0, r3
 23fe078:	f7fe bdde 	b.w	23fcc38 <log_set_callbacks>

023fe07c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fe07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe07e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fe080:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe082:	4668      	mov	r0, sp
 23fe084:	f7ff fea2 	bl	23fddcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe088:	466a      	mov	r2, sp
 23fe08a:	4629      	mov	r1, r5
 23fe08c:	4620      	mov	r0, r4
 23fe08e:	f7ff fd3b 	bl	23fdb08 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fe092:	a801      	add	r0, sp, #4
 23fe094:	f7ff f800 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe098:	4620      	mov	r0, r4
 23fe09a:	b003      	add	sp, #12
 23fe09c:	bd30      	pop	{r4, r5, pc}

023fe09e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fe09e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe0a0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fe0a2:	68cd      	ldr	r5, [r1, #12]
 23fe0a4:	4668      	mov	r0, sp
 23fe0a6:	f7ff fe91 	bl	23fddcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe0aa:	466a      	mov	r2, sp
 23fe0ac:	4629      	mov	r1, r5
 23fe0ae:	4620      	mov	r0, r4
 23fe0b0:	f7ff fd06 	bl	23fdac0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe0b4:	a801      	add	r0, sp, #4
 23fe0b6:	f7fe ffef 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe0ba:	4620      	mov	r0, r4
 23fe0bc:	b003      	add	sp, #12
 23fe0be:	bd30      	pop	{r4, r5, pc}

023fe0c0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fe0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe0c2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fe0c4:	690d      	ldr	r5, [r1, #16]
 23fe0c6:	4668      	mov	r0, sp
 23fe0c8:	f7ff fe80 	bl	23fddcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe0cc:	466a      	mov	r2, sp
 23fe0ce:	4629      	mov	r1, r5
 23fe0d0:	4620      	mov	r0, r4
 23fe0d2:	f7ff fc9d 	bl	23fda10 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe0d6:	a801      	add	r0, sp, #4
 23fe0d8:	f7fe ffde 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe0dc:	4620      	mov	r0, r4
 23fe0de:	b003      	add	sp, #12
 23fe0e0:	bd30      	pop	{r4, r5, pc}
	...

023fe0e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fe0e4:	b570      	push	{r4, r5, r6, lr}
 23fe0e6:	b08a      	sub	sp, #40	; 0x28
 23fe0e8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fe0ea:	4601      	mov	r1, r0
 23fe0ec:	a804      	add	r0, sp, #16
 23fe0ee:	f7ff ffc5 	bl	23fe07c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fe0f2:	4e14      	ldr	r6, [pc, #80]	; (23fe144 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fe0f4:	a804      	add	r0, sp, #16
 23fe0f6:	f7ff fd1f 	bl	23fdb38 <_ZN5spark18JSONObjectIterator4nextEv>
 23fe0fa:	b1e8      	cbz	r0, 23fe138 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fe0fc:	4668      	mov	r0, sp
 23fe0fe:	a904      	add	r1, sp, #16
 23fe100:	f7ff ffcd 	bl	23fe09e <_ZNK5spark18JSONObjectIterator4nameEv>
 23fe104:	4631      	mov	r1, r6
 23fe106:	9802      	ldr	r0, [sp, #8]
 23fe108:	f7ff fe3a 	bl	23fdd80 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fe10c:	4604      	mov	r4, r0
 23fe10e:	b110      	cbz	r0, 23fe116 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fe110:	1e2c      	subs	r4, r5, #0
 23fe112:	bf18      	it	ne
 23fe114:	2401      	movne	r4, #1
 23fe116:	a801      	add	r0, sp, #4
 23fe118:	f7fe ffbe 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe11c:	2c00      	cmp	r4, #0
 23fe11e:	d0e9      	beq.n	23fe0f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fe120:	4668      	mov	r0, sp
 23fe122:	a904      	add	r1, sp, #16
 23fe124:	f7ff ffcc 	bl	23fe0c0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fe128:	4668      	mov	r0, sp
 23fe12a:	f7ff fca7 	bl	23fda7c <_ZNK5spark9JSONValue5toIntEv>
 23fe12e:	6028      	str	r0, [r5, #0]
 23fe130:	a801      	add	r0, sp, #4
 23fe132:	f7fe ffb1 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe136:	e7dd      	b.n	23fe0f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fe138:	a805      	add	r0, sp, #20
 23fe13a:	f7fe ffad 	bl	23fd098 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe13e:	b00a      	add	sp, #40	; 0x28
 23fe140:	bd70      	pop	{r4, r5, r6, pc}
 23fe142:	bf00      	nop
 23fe144:	023ffc8c 	.word	0x023ffc8c

023fe148 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe14a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fe14c:	4913      	ldr	r1, [pc, #76]	; (23fe19c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fe14e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe150:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fe152:	f7fd fb8b 	bl	23fb86c <strcmp>
 23fe156:	b950      	cbnz	r0, 23fe16e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fe158:	f001 f828 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fe15c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe160:	f001 f812 	bl	23ff188 <_ZN9USBSerial5beginEl>
}
 23fe164:	b003      	add	sp, #12
 23fe166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fe16a:	f001 b81f 	b.w	23ff1ac <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fe16e:	4620      	mov	r0, r4
 23fe170:	490b      	ldr	r1, [pc, #44]	; (23fe1a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fe172:	f7fd fb7b 	bl	23fb86c <strcmp>
 23fe176:	b978      	cbnz	r0, 23fe198 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fe178:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fe17c:	a901      	add	r1, sp, #4
 23fe17e:	4628      	mov	r0, r5
        int baud = 9600;
 23fe180:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fe182:	f7ff ffaf 	bl	23fe0e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fe186:	f001 f9f1 	bl	23ff56c <_Z22__fetch_global_Serial1v>
 23fe18a:	9901      	ldr	r1, [sp, #4]
 23fe18c:	f000 ffa0 	bl	23ff0d0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fe190:	f001 f9ec 	bl	23ff56c <_Z22__fetch_global_Serial1v>
}
 23fe194:	b003      	add	sp, #12
 23fe196:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fe198:	2000      	movs	r0, #0
 23fe19a:	e7fb      	b.n	23fe194 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fe19c:	023ffc91 	.word	0x023ffc91
 23fe1a0:	023ffc98 	.word	0x023ffc98

023fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe1a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fe1a6:	2614      	movs	r6, #20
 23fe1a8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe1ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe1ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe1b2:	42ae      	cmp	r6, r5
 23fe1b4:	d005      	beq.n	23fe1c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fe1b6:	f105 0008 	add.w	r0, r5, #8
 23fe1ba:	f7ff fff3 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe1be:	3514      	adds	r5, #20
 23fe1c0:	e7f7      	b.n	23fe1b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fe1c2:	6820      	ldr	r0, [r4, #0]
 23fe1c4:	f7fe feb2 	bl	23fcf2c <free>
}
 23fe1c8:	4620      	mov	r0, r4
 23fe1ca:	bd70      	pop	{r4, r5, r6, pc}

023fe1cc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fe1cc:	b510      	push	{r4, lr}
 23fe1ce:	4604      	mov	r4, r0
 23fe1d0:	300c      	adds	r0, #12
 23fe1d2:	f7ff ffe7 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe1d6:	4620      	mov	r0, r4
 23fe1d8:	f7fe ff4c 	bl	23fd074 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe1dc:	4620      	mov	r0, r4
 23fe1de:	bd10      	pop	{r4, pc}

023fe1e0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fe1e0:	b510      	push	{r4, lr}
 23fe1e2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fe1e4:	4b03      	ldr	r3, [pc, #12]	; (23fe1f4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fe1e6:	f840 3b04 	str.w	r3, [r0], #4
 23fe1ea:	f7ff ffef 	bl	23fe1cc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fe1ee:	4620      	mov	r0, r4
 23fe1f0:	bd10      	pop	{r4, pc}
 23fe1f2:	bf00      	nop
 23fe1f4:	023ffba8 	.word	0x023ffba8

023fe1f8 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fe1f8:	b510      	push	{r4, lr}
 23fe1fa:	4604      	mov	r4, r0
 23fe1fc:	f7ff fff0 	bl	23fe1e0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe200:	4620      	mov	r0, r4
 23fe202:	2124      	movs	r1, #36	; 0x24
 23fe204:	f7fd fb65 	bl	23fb8d2 <_ZdlPvj>
 23fe208:	4620      	mov	r0, r4
 23fe20a:	bd10      	pop	{r4, pc}

023fe20c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fe20c:	b510      	push	{r4, lr}
 23fe20e:	4604      	mov	r4, r0
 23fe210:	4b02      	ldr	r3, [pc, #8]	; (23fe21c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fe212:	6003      	str	r3, [r0, #0]
 23fe214:	f7ff ffe4 	bl	23fe1e0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fe218:	4620      	mov	r0, r4
 23fe21a:	bd10      	pop	{r4, pc}
 23fe21c:	023ffd30 	.word	0x023ffd30

023fe220 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fe220:	b510      	push	{r4, lr}
 23fe222:	4604      	mov	r4, r0
 23fe224:	f7ff fff2 	bl	23fe20c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fe228:	4620      	mov	r0, r4
 23fe22a:	2124      	movs	r1, #36	; 0x24
 23fe22c:	f7fd fb51 	bl	23fb8d2 <_ZdlPvj>
 23fe230:	4620      	mov	r0, r4
 23fe232:	bd10      	pop	{r4, pc}

023fe234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fe234:	2200      	movs	r2, #0
 23fe236:	e9c0 2200 	strd	r2, r2, [r0]
 23fe23a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fe23c:	b510      	push	{r4, lr}
 23fe23e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe240:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe242:	6004      	str	r4, [r0, #0]
 23fe244:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe246:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe248:	6044      	str	r4, [r0, #4]
 23fe24a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe24c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe24e:	6084      	str	r4, [r0, #8]
}
 23fe250:	bd10      	pop	{r4, pc}

023fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fe252:	b510      	push	{r4, lr}
 23fe254:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fe256:	6803      	ldr	r3, [r0, #0]
 23fe258:	6818      	ldr	r0, [r3, #0]
 23fe25a:	f7fe fa4d 	bl	23fc6f8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fe25e:	4620      	mov	r0, r4
 23fe260:	bd10      	pop	{r4, pc}
	...

023fe264 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fe264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe268:	b087      	sub	sp, #28
 23fe26a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fe26c:	4b1c      	ldr	r3, [pc, #112]	; (23fe2e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fe26e:	4680      	mov	r8, r0
 23fe270:	685b      	ldr	r3, [r3, #4]
 23fe272:	4689      	mov	r9, r1
 23fe274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe278:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fe27a:	b96b      	cbnz	r3, 23fe298 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fe27c:	f7ff fed0 	bl	23fe020 <_ZN5spark10LogManager8instanceEv>
 23fe280:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe282:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fe286:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe288:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fe28a:	f7ff fd77 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fe28e:	7b23      	ldrb	r3, [r4, #12]
 23fe290:	b12b      	cbz	r3, 23fe29e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fe292:	a805      	add	r0, sp, #20
 23fe294:	f7ff ffdd 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fe298:	b007      	add	sp, #28
 23fe29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fe29e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fe2a0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fe2a4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fe2a6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe2aa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe2ae:	45aa      	cmp	sl, r5
 23fe2b0:	d012      	beq.n	23fe2d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fe2b2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fe2b6:	4631      	mov	r1, r6
 23fe2b8:	1d38      	adds	r0, r7, #4
 23fe2ba:	f7ff fe09 	bl	23fded0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe2be:	4581      	cmp	r9, r0
 23fe2c0:	d3f5      	bcc.n	23fe2ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fe2c2:	9a03      	ldr	r2, [sp, #12]
 23fe2c4:	683b      	ldr	r3, [r7, #0]
 23fe2c6:	9200      	str	r2, [sp, #0]
 23fe2c8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fe2cc:	464a      	mov	r2, r9
 23fe2ce:	4633      	mov	r3, r6
 23fe2d0:	4641      	mov	r1, r8
 23fe2d2:	4638      	mov	r0, r7
 23fe2d4:	47d8      	blx	fp
 23fe2d6:	e7ea      	b.n	23fe2ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fe2d8:	2300      	movs	r3, #0
 23fe2da:	7323      	strb	r3, [r4, #12]
 23fe2dc:	e7d9      	b.n	23fe292 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fe2de:	bf00      	nop
 23fe2e0:	e000ed00 	.word	0xe000ed00

023fe2e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fe2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe2e8:	469b      	mov	fp, r3
 23fe2ea:	4b1a      	ldr	r3, [pc, #104]	; (23fe354 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fe2ec:	4680      	mov	r8, r0
 23fe2ee:	685b      	ldr	r3, [r3, #4]
 23fe2f0:	4689      	mov	r9, r1
 23fe2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe2f6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fe2f8:	b96b      	cbnz	r3, 23fe316 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fe2fa:	f7ff fe91 	bl	23fe020 <_ZN5spark10LogManager8instanceEv>
 23fe2fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe300:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe304:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe306:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe308:	f7ff fd38 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fe30c:	7b23      	ldrb	r3, [r4, #12]
 23fe30e:	b12b      	cbz	r3, 23fe31c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fe310:	a801      	add	r0, sp, #4
 23fe312:	f7ff ff9e 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe316:	b003      	add	sp, #12
 23fe318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fe31c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fe31e:	b2f6      	uxtb	r6, r6
 23fe320:	7323      	strb	r3, [r4, #12]
 23fe322:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe326:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe32a:	4555      	cmp	r5, sl
 23fe32c:	d00e      	beq.n	23fe34c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fe32e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fe332:	4659      	mov	r1, fp
 23fe334:	1d38      	adds	r0, r7, #4
 23fe336:	f7ff fdcb 	bl	23fded0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe33a:	4286      	cmp	r6, r0
 23fe33c:	d3f5      	bcc.n	23fe32a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fe33e:	683b      	ldr	r3, [r7, #0]
 23fe340:	464a      	mov	r2, r9
 23fe342:	4641      	mov	r1, r8
 23fe344:	4638      	mov	r0, r7
 23fe346:	68db      	ldr	r3, [r3, #12]
 23fe348:	4798      	blx	r3
 23fe34a:	e7ee      	b.n	23fe32a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe34c:	2300      	movs	r3, #0
 23fe34e:	7323      	strb	r3, [r4, #12]
 23fe350:	e7de      	b.n	23fe310 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe352:	bf00      	nop
 23fe354:	e000ed00 	.word	0xe000ed00

023fe358 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe35c:	4b16      	ldr	r3, [pc, #88]	; (23fe3b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe35e:	4605      	mov	r5, r0
 23fe360:	685b      	ldr	r3, [r3, #4]
 23fe362:	460f      	mov	r7, r1
 23fe364:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe368:	bb1b      	cbnz	r3, 23fe3b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe36a:	f7ff fe59 	bl	23fe020 <_ZN5spark10LogManager8instanceEv>
 23fe36e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe370:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe374:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe376:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe378:	f7ff fd00 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe37c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe380:	2446      	movs	r4, #70	; 0x46
 23fe382:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe386:	45b0      	cmp	r8, r6
 23fe388:	d109      	bne.n	23fe39e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe38a:	a801      	add	r0, sp, #4
 23fe38c:	f7ff ff61 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe390:	42a5      	cmp	r5, r4
 23fe392:	bfb4      	ite	lt
 23fe394:	2000      	movlt	r0, #0
 23fe396:	2001      	movge	r0, #1
}
 23fe398:	b002      	add	sp, #8
 23fe39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe39e:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe3a2:	4639      	mov	r1, r7
 23fe3a4:	3004      	adds	r0, #4
 23fe3a6:	f7ff fd93 	bl	23fded0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe3aa:	4284      	cmp	r4, r0
 23fe3ac:	bfa8      	it	ge
 23fe3ae:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe3b0:	e7e9      	b.n	23fe386 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe3b2:	2000      	movs	r0, #0
 23fe3b4:	e7f0      	b.n	23fe398 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe3b6:	bf00      	nop
 23fe3b8:	e000ed00 	.word	0xe000ed00

023fe3bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3be:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe3c2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe3c4:	4604      	mov	r4, r0
 23fe3c6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3c8:	db0d      	blt.n	23fe3e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe3ca:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe3cc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe3ce:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe3d0:	dd04      	ble.n	23fe3dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe3d2:	00b9      	lsls	r1, r7, #2
 23fe3d4:	f7fe fdb8 	bl	23fcf48 <realloc>
            if (!d) {
 23fe3d8:	b918      	cbnz	r0, 23fe3e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe3dc:	f7fe fda6 	bl	23fcf2c <free>
        T* d = nullptr;
 23fe3e0:	2000      	movs	r0, #0
        data_ = d;
 23fe3e2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe3e4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe3e6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe3e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe3ea:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe3ee:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe3f0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe3f4:	1d08      	adds	r0, r1, #4
 23fe3f6:	f001 f970 	bl	23ff6da <memmove>
    new(p) T(std::move(value));
 23fe3fa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe3fe:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe400:	2001      	movs	r0, #1
    ++size_;
 23fe402:	3301      	adds	r3, #1
 23fe404:	6063      	str	r3, [r4, #4]
    return true;
 23fe406:	e7e8      	b.n	23fe3da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe40a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe40c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe410:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe412:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe414:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe416:	f7ff fcb1 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe41a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe41e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe422:	4293      	cmp	r3, r2
 23fe424:	4619      	mov	r1, r3
 23fe426:	d00a      	beq.n	23fe43e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe428:	6809      	ldr	r1, [r1, #0]
 23fe42a:	3304      	adds	r3, #4
 23fe42c:	42a9      	cmp	r1, r5
 23fe42e:	d1f8      	bne.n	23fe422 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe430:	a801      	add	r0, sp, #4
 23fe432:	f7ff ff0e 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe436:	2500      	movs	r5, #0
}
 23fe438:	4628      	mov	r0, r5
 23fe43a:	b003      	add	sp, #12
 23fe43c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe43e:	4629      	mov	r1, r5
 23fe440:	4620      	mov	r0, r4
 23fe442:	f7ff ffbb 	bl	23fe3bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe446:	4605      	mov	r5, r0
 23fe448:	2800      	cmp	r0, #0
 23fe44a:	d0f1      	beq.n	23fe430 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe44c:	6863      	ldr	r3, [r4, #4]
 23fe44e:	2b01      	cmp	r3, #1
 23fe450:	d101      	bne.n	23fe456 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe452:	f7ff fe01 	bl	23fe058 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe456:	a801      	add	r0, sp, #4
 23fe458:	f7ff fefb 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe45c:	e7ec      	b.n	23fe438 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe45e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe45e:	460b      	mov	r3, r1
 23fe460:	b570      	push	{r4, r5, r6, lr}
 23fe462:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe464:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe468:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe46c:	4282      	cmp	r2, r0
 23fe46e:	d00f      	beq.n	23fe490 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe470:	4601      	mov	r1, r0
            if (*p == value) {
 23fe472:	681d      	ldr	r5, [r3, #0]
 23fe474:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe478:	42ae      	cmp	r6, r5
 23fe47a:	d107      	bne.n	23fe48c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe47c:	1a52      	subs	r2, r2, r1
 23fe47e:	f001 f92c 	bl	23ff6da <memmove>
    return true;
 23fe482:	2001      	movs	r0, #1
    --size_;
 23fe484:	6863      	ldr	r3, [r4, #4]
 23fe486:	3b01      	subs	r3, #1
 23fe488:	6063      	str	r3, [r4, #4]
}
 23fe48a:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe48c:	4608      	mov	r0, r1
 23fe48e:	e7ed      	b.n	23fe46c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe490:	2000      	movs	r0, #0
 23fe492:	e7fa      	b.n	23fe48a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe494 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe496:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe498:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe49c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe49e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe4a0:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe4a2:	f7ff fc6b 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe4a6:	4620      	mov	r0, r4
 23fe4a8:	a901      	add	r1, sp, #4
 23fe4aa:	f7ff ffd8 	bl	23fe45e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe4ae:	b118      	cbz	r0, 23fe4b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe4b0:	6863      	ldr	r3, [r4, #4]
 23fe4b2:	b90b      	cbnz	r3, 23fe4b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe4b4:	f7ff fddc 	bl	23fe070 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe4b8:	a803      	add	r0, sp, #12
 23fe4ba:	f7ff feca 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe4be:	b004      	add	sp, #16
 23fe4c0:	bd10      	pop	{r4, pc}

023fe4c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe4c2:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe4c4:	b570      	push	{r4, r5, r6, lr}
 23fe4c6:	4604      	mov	r4, r0
 23fe4c8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe4cc:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe4d0:	42ae      	cmp	r6, r5
 23fe4d2:	d015      	beq.n	23fe500 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe4d4:	4620      	mov	r0, r4
 23fe4d6:	f105 0110 	add.w	r1, r5, #16
 23fe4da:	f7ff ffc0 	bl	23fe45e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe4de:	6863      	ldr	r3, [r4, #4]
 23fe4e0:	b90b      	cbnz	r3, 23fe4e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe4e2:	f7ff fdc5 	bl	23fe070 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe4e6:	69e0      	ldr	r0, [r4, #28]
 23fe4e8:	6929      	ldr	r1, [r5, #16]
 23fe4ea:	6803      	ldr	r3, [r0, #0]
 23fe4ec:	68db      	ldr	r3, [r3, #12]
 23fe4ee:	4798      	blx	r3
        if (h.stream) {
 23fe4f0:	6969      	ldr	r1, [r5, #20]
 23fe4f2:	b119      	cbz	r1, 23fe4fc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe4f4:	6a20      	ldr	r0, [r4, #32]
 23fe4f6:	6803      	ldr	r3, [r0, #0]
 23fe4f8:	68db      	ldr	r3, [r3, #12]
 23fe4fa:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe4fc:	3518      	adds	r5, #24
 23fe4fe:	e7e7      	b.n	23fe4d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe500:	2618      	movs	r6, #24
 23fe502:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe506:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe50a:	42ae      	cmp	r6, r5
 23fe50c:	d004      	beq.n	23fe518 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe50e:	4628      	mov	r0, r5
 23fe510:	f000 fcc6 	bl	23feea0 <_ZN6StringD1Ev>
 23fe514:	3518      	adds	r5, #24
 23fe516:	e7f8      	b.n	23fe50a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe518:	2300      	movs	r3, #0
 23fe51a:	6163      	str	r3, [r4, #20]
}
 23fe51c:	bd70      	pop	{r4, r5, r6, pc}

023fe51e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe520:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe522:	f7ff fda5 	bl	23fe070 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe526:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe52a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe52c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe52e:	f7ff fc25 	bl	23fdd7c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe532:	4620      	mov	r0, r4
 23fe534:	f7ff ffc5 	bl	23fe4c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe538:	a801      	add	r0, sp, #4
 23fe53a:	f7ff fe8a 	bl	23fe252 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe53e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe540:	b108      	cbz	r0, 23fe546 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe542:	f7fe f8bd 	bl	23fc6c0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe546:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe54a:	2618      	movs	r6, #24
 23fe54c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe550:	42ae      	cmp	r6, r5
 23fe552:	d004      	beq.n	23fe55e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe554:	4628      	mov	r0, r5
 23fe556:	f000 fca3 	bl	23feea0 <_ZN6StringD1Ev>
 23fe55a:	3518      	adds	r5, #24
 23fe55c:	e7f8      	b.n	23fe550 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe55e:	6920      	ldr	r0, [r4, #16]
 23fe560:	f7fe fce4 	bl	23fcf2c <free>
 23fe564:	6820      	ldr	r0, [r4, #0]
 23fe566:	f7fe fce1 	bl	23fcf2c <free>
}
 23fe56a:	4620      	mov	r0, r4
 23fe56c:	b002      	add	sp, #8
 23fe56e:	bd70      	pop	{r4, r5, r6, pc}

023fe570 <__tcf_2>:
    static LogManager mgr;
 23fe570:	4801      	ldr	r0, [pc, #4]	; (23fe578 <__tcf_2+0x8>)
 23fe572:	f7ff bfd4 	b.w	23fe51e <_ZN5spark10LogManagerD1Ev>
 23fe576:	bf00      	nop
 23fe578:	1007ae6c 	.word	0x1007ae6c

023fe57c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe57c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe580:	4604      	mov	r4, r0
 23fe582:	460d      	mov	r5, r1
 23fe584:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe586:	d915      	bls.n	23fe5b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe588:	4290      	cmp	r0, r2
 23fe58a:	d214      	bcs.n	23fe5b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe58c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe590:	1a75      	subs	r5, r6, r1
 23fe592:	f1a1 0714 	sub.w	r7, r1, #20
 23fe596:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe598:	42b7      	cmp	r7, r6
 23fe59a:	d01a      	beq.n	23fe5d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe59c:	b11c      	cbz	r4, 23fe5a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe59e:	4631      	mov	r1, r6
 23fe5a0:	4620      	mov	r0, r4
 23fe5a2:	f7ff fc45 	bl	23fde30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe5a6:	f106 0008 	add.w	r0, r6, #8
 23fe5aa:	f7ff fdfb 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe5ae:	3e14      	subs	r6, #20
 23fe5b0:	3c14      	subs	r4, #20
 23fe5b2:	e7f1      	b.n	23fe598 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe5b4:	d00d      	beq.n	23fe5d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe5b6:	42b5      	cmp	r5, r6
 23fe5b8:	d00b      	beq.n	23fe5d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe5ba:	b11c      	cbz	r4, 23fe5c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe5bc:	4629      	mov	r1, r5
 23fe5be:	4620      	mov	r0, r4
 23fe5c0:	f7ff fc36 	bl	23fde30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe5c4:	f105 0008 	add.w	r0, r5, #8
 23fe5c8:	f7ff fdec 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe5cc:	3514      	adds	r5, #20
 23fe5ce:	3414      	adds	r4, #20
 23fe5d0:	e7f1      	b.n	23fe5b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe5d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe5d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe5d8:	4604      	mov	r4, r0
 23fe5da:	460d      	mov	r5, r1
 23fe5dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe5de:	d914      	bls.n	23fe60a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe5e0:	4290      	cmp	r0, r2
 23fe5e2:	d213      	bcs.n	23fe60c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe5e4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe5e8:	1a75      	subs	r5, r6, r1
 23fe5ea:	f1a1 0710 	sub.w	r7, r1, #16
 23fe5ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe5f0:	42b7      	cmp	r7, r6
 23fe5f2:	d018      	beq.n	23fe626 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe5f4:	b11c      	cbz	r4, 23fe5fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe5f6:	4631      	mov	r1, r6
 23fe5f8:	4620      	mov	r0, r4
 23fe5fa:	f000 fccd 	bl	23fef98 <_ZN6StringC1EOS_>
                end->~T();
 23fe5fe:	4630      	mov	r0, r6
 23fe600:	f000 fc4e 	bl	23feea0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe604:	3e10      	subs	r6, #16
 23fe606:	3c10      	subs	r4, #16
 23fe608:	e7f2      	b.n	23fe5f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe60a:	d00c      	beq.n	23fe626 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe60c:	42b5      	cmp	r5, r6
 23fe60e:	d00a      	beq.n	23fe626 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe610:	b11c      	cbz	r4, 23fe61a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe612:	4629      	mov	r1, r5
 23fe614:	4620      	mov	r0, r4
 23fe616:	f000 fcbf 	bl	23fef98 <_ZN6StringC1EOS_>
                p->~T();
 23fe61a:	4628      	mov	r0, r5
 23fe61c:	f000 fc40 	bl	23feea0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe620:	3510      	adds	r5, #16
 23fe622:	3410      	adds	r4, #16
 23fe624:	e7f2      	b.n	23fe60c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe628 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe628:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe62a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe62c:	4605      	mov	r5, r0
        if (n > 0) {
 23fe62e:	dd11      	ble.n	23fe654 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe630:	0130      	lsls	r0, r6, #4
 23fe632:	f7fe fc6d 	bl	23fcf10 <malloc>
            if (!d) {
 23fe636:	4604      	mov	r4, r0
 23fe638:	b158      	cbz	r0, 23fe652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe63a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe63e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe642:	f7ff ffc7 	bl	23fe5d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe646:	6828      	ldr	r0, [r5, #0]
 23fe648:	f7fe fc70 	bl	23fcf2c <free>
        return true;
 23fe64c:	2001      	movs	r0, #1
        data_ = d;
 23fe64e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe650:	60ae      	str	r6, [r5, #8]
    }
 23fe652:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe654:	2400      	movs	r4, #0
 23fe656:	e7f6      	b.n	23fe646 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe658 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe65c:	4690      	mov	r8, r2
        capacity_(0) {
 23fe65e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe660:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe662:	b095      	sub	sp, #84	; 0x54
 23fe664:	9103      	str	r1, [sp, #12]
    return size_;
 23fe666:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe66a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe66c:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe66e:	e9c0 3300 	strd	r3, r3, [r0]
 23fe672:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe67a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe67e:	7602      	strb	r2, [r0, #24]
 23fe680:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe682:	dc23      	bgt.n	23fe6cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe684:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe688:	2314      	movs	r3, #20
 23fe68a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe68e:	42af      	cmp	r7, r5
 23fe690:	d03b      	beq.n	23fe70a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe692:	4629      	mov	r1, r5
 23fe694:	a80b      	add	r0, sp, #44	; 0x2c
 23fe696:	f000 fc7f 	bl	23fef98 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe69a:	a90b      	add	r1, sp, #44	; 0x2c
 23fe69c:	a80f      	add	r0, sp, #60	; 0x3c
 23fe69e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe6a0:	f000 fc7a 	bl	23fef98 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe6a4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe6a8:	4299      	cmp	r1, r3
 23fe6aa:	da1b      	bge.n	23fe6e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe6ac:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe6b0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe6b4:	4631      	mov	r1, r6
 23fe6b6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe6ba:	f106 0010 	add.w	r0, r6, #16
 23fe6be:	f7ff ff89 	bl	23fe5d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe6c2:	b9ee      	cbnz	r6, 23fe700 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe6c6:	3301      	adds	r3, #1
 23fe6c8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe6ca:	e011      	b.n	23fe6f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe6cc:	a808      	add	r0, sp, #32
 23fe6ce:	f7ff ffab 	bl	23fe628 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe6d2:	2800      	cmp	r0, #0
 23fe6d4:	d1d6      	bne.n	23fe684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe6d6:	a808      	add	r0, sp, #32
 23fe6d8:	f7fe fccc 	bl	23fd074 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe6dc:	4620      	mov	r0, r4
 23fe6de:	b015      	add	sp, #84	; 0x54
 23fe6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe6e4:	3101      	adds	r1, #1
 23fe6e6:	a808      	add	r0, sp, #32
 23fe6e8:	f7ff ff9e 	bl	23fe628 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe6ec:	2800      	cmp	r0, #0
 23fe6ee:	d1dd      	bne.n	23fe6ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe6f0:	a80f      	add	r0, sp, #60	; 0x3c
 23fe6f2:	f000 fbd5 	bl	23feea0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe6f6:	a80b      	add	r0, sp, #44	; 0x2c
 23fe6f8:	f000 fbd2 	bl	23feea0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe6fc:	3514      	adds	r5, #20
 23fe6fe:	e7c6      	b.n	23fe68e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe700:	4630      	mov	r0, r6
 23fe702:	a90f      	add	r1, sp, #60	; 0x3c
 23fe704:	f000 fc48 	bl	23fef98 <_ZN6StringC1EOS_>
 23fe708:	e7dc      	b.n	23fe6c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe70a:	2600      	movs	r6, #0
 23fe70c:	f04f 0914 	mov.w	r9, #20
 23fe710:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe714:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe71a:	429e      	cmp	r6, r3
 23fe71c:	da7c      	bge.n	23fe818 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe71e:	0133      	lsls	r3, r6, #4
 23fe720:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe722:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe724:	b90b      	cbnz	r3, 23fe72a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe726:	3601      	adds	r6, #1
 23fe728:	e7f5      	b.n	23fe716 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe72a:	2300      	movs	r3, #0
 23fe72c:	9307      	str	r3, [sp, #28]
 23fe72e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe732:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe734:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe736:	a907      	add	r1, sp, #28
 23fe738:	a806      	add	r0, sp, #24
 23fe73a:	f7ff faf8 	bl	23fdd2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe73e:	4682      	mov	sl, r0
 23fe740:	2800      	cmp	r0, #0
 23fe742:	d0f0      	beq.n	23fe726 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe744:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe748:	4601      	mov	r1, r0
            bool found = false;
 23fe74a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe74e:	4628      	mov	r0, r5
 23fe750:	9a07      	ldr	r2, [sp, #28]
 23fe752:	f10d 0317 	add.w	r3, sp, #23
 23fe756:	f7ff fb7f 	bl	23fde58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe75a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe75e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe760:	2f00      	cmp	r7, #0
 23fe762:	d14a      	bne.n	23fe7fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe764:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe768:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe76c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe774:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe778:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe77c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe77e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe782:	4293      	cmp	r3, r2
 23fe784:	db17      	blt.n	23fe7b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe786:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe78a:	f1ba 0f00 	cmp.w	sl, #0
 23fe78e:	dd30      	ble.n	23fe7f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe790:	fb09 f00a 	mul.w	r0, r9, sl
 23fe794:	f7fe fbbc 	bl	23fcf10 <malloc>
            if (!d) {
 23fe798:	4683      	mov	fp, r0
 23fe79a:	b360      	cbz	r0, 23fe7f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe79c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe7a0:	fb09 1202 	mla	r2, r9, r2, r1
 23fe7a4:	f7ff feea 	bl	23fe57c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe7a8:	6828      	ldr	r0, [r5, #0]
 23fe7aa:	f7fe fbbf 	bl	23fcf2c <free>
        data_ = d;
 23fe7ae:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe7b2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe7b6:	682b      	ldr	r3, [r5, #0]
 23fe7b8:	9a01      	ldr	r2, [sp, #4]
 23fe7ba:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe7be:	686a      	ldr	r2, [r5, #4]
 23fe7c0:	4651      	mov	r1, sl
 23fe7c2:	fb09 3202 	mla	r2, r9, r2, r3
 23fe7c6:	f10a 0014 	add.w	r0, sl, #20
 23fe7ca:	f7ff fed7 	bl	23fe57c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe7ce:	f1ba 0f00 	cmp.w	sl, #0
 23fe7d2:	d003      	beq.n	23fe7dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe7d4:	4650      	mov	r0, sl
 23fe7d6:	a90f      	add	r1, sp, #60	; 0x3c
 23fe7d8:	f7ff fb2a 	bl	23fde30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe7dc:	686b      	ldr	r3, [r5, #4]
 23fe7de:	3301      	adds	r3, #1
 23fe7e0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe7e2:	a811      	add	r0, sp, #68	; 0x44
 23fe7e4:	f7ff fcde 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7e8:	b13f      	cbz	r7, 23fe7fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe7ea:	a80b      	add	r0, sp, #44	; 0x2c
 23fe7ec:	f7ff fcda 	bl	23fe1a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe7f0:	e771      	b.n	23fe6d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe7f2:	46bb      	mov	fp, r7
 23fe7f4:	e7d8      	b.n	23fe7a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7f6:	2701      	movs	r7, #1
 23fe7f8:	e7f3      	b.n	23fe7e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe7fa:	9b01      	ldr	r3, [sp, #4]
 23fe7fc:	682d      	ldr	r5, [r5, #0]
 23fe7fe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe802:	9b06      	ldr	r3, [sp, #24]
 23fe804:	781b      	ldrb	r3, [r3, #0]
 23fe806:	b92b      	cbnz	r3, 23fe814 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe808:	f8d8 3000 	ldr.w	r3, [r8]
 23fe80c:	9a02      	ldr	r2, [sp, #8]
 23fe80e:	4413      	add	r3, r2
 23fe810:	7c1b      	ldrb	r3, [r3, #16]
 23fe812:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe814:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe816:	e78e      	b.n	23fe736 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe818:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe81a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe81c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe81e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe820:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe822:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe826:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe828:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe82a:	60a2      	str	r2, [r4, #8]
 23fe82c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe82e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe830:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe832:	60e2      	str	r2, [r4, #12]
 23fe834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe836:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe838:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe83a:	6122      	str	r2, [r4, #16]
 23fe83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe83e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe840:	9b03      	ldr	r3, [sp, #12]
 23fe842:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe844:	6162      	str	r2, [r4, #20]
 23fe846:	7623      	strb	r3, [r4, #24]
 23fe848:	e7cf      	b.n	23fe7ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe84c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe84e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe850:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe852:	4617      	mov	r7, r2
 23fe854:	b087      	sub	sp, #28
 23fe856:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe858:	4668      	mov	r0, sp
 23fe85a:	4619      	mov	r1, r3
 23fe85c:	f7fd fb5c 	bl	23fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe860:	4b0b      	ldr	r3, [pc, #44]	; (23fe890 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe862:	4669      	mov	r1, sp
 23fe864:	f846 3b04 	str.w	r3, [r6], #4
 23fe868:	a803      	add	r0, sp, #12
 23fe86a:	f7fd fb55 	bl	23fbf18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe86e:	4639      	mov	r1, r7
 23fe870:	aa03      	add	r2, sp, #12
 23fe872:	4630      	mov	r0, r6
 23fe874:	f7ff fef0 	bl	23fe658 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe878:	a803      	add	r0, sp, #12
 23fe87a:	f7fd faf1 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe87e:	4668      	mov	r0, sp
 23fe880:	f7fd faee 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe884:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe886:	4b03      	ldr	r3, [pc, #12]	; (23fe894 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe888:	6225      	str	r5, [r4, #32]
 23fe88a:	6023      	str	r3, [r4, #0]
}
 23fe88c:	b007      	add	sp, #28
 23fe88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe890:	023ffba8 	.word	0x023ffba8
 23fe894:	023ffd18 	.word	0x023ffd18

023fe898 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe898:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe89a:	460f      	mov	r7, r1
 23fe89c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe89e:	4638      	mov	r0, r7
 23fe8a0:	491c      	ldr	r1, [pc, #112]	; (23fe914 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe8a2:	4616      	mov	r6, r2
 23fe8a4:	461d      	mov	r5, r3
 23fe8a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe8a8:	f7fc ffe0 	bl	23fb86c <strcmp>
 23fe8ac:	b9c0      	cbnz	r0, 23fe8e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe8ae:	b1a4      	cbz	r4, 23fe8da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe8b0:	4629      	mov	r1, r5
 23fe8b2:	a801      	add	r0, sp, #4
 23fe8b4:	f7ff fcbe 	bl	23fe234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe8b8:	2024      	movs	r0, #36	; 0x24
 23fe8ba:	4917      	ldr	r1, [pc, #92]	; (23fe918 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe8bc:	f000 fee6 	bl	23ff68c <_ZnwjRKSt9nothrow_t>
 23fe8c0:	4605      	mov	r5, r0
 23fe8c2:	b130      	cbz	r0, 23fe8d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe8c4:	ab01      	add	r3, sp, #4
 23fe8c6:	4632      	mov	r2, r6
 23fe8c8:	4621      	mov	r1, r4
 23fe8ca:	f7ff ffbf 	bl	23fe84c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe8ce:	4b13      	ldr	r3, [pc, #76]	; (23fe91c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe8d0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe8d2:	a801      	add	r0, sp, #4
 23fe8d4:	f7fd fac4 	bl	23fbe60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe8d8:	462c      	mov	r4, r5
}
 23fe8da:	4620      	mov	r0, r4
 23fe8dc:	b005      	add	sp, #20
 23fe8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe8e0:	4638      	mov	r0, r7
 23fe8e2:	490f      	ldr	r1, [pc, #60]	; (23fe920 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe8e4:	f7fc ffc2 	bl	23fb86c <strcmp>
 23fe8e8:	b990      	cbnz	r0, 23fe910 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe8ea:	2c00      	cmp	r4, #0
 23fe8ec:	d0f5      	beq.n	23fe8da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe8ee:	4629      	mov	r1, r5
 23fe8f0:	a801      	add	r0, sp, #4
 23fe8f2:	f7ff fc9f 	bl	23fe234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe8f6:	2024      	movs	r0, #36	; 0x24
 23fe8f8:	4907      	ldr	r1, [pc, #28]	; (23fe918 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe8fa:	f000 fec7 	bl	23ff68c <_ZnwjRKSt9nothrow_t>
 23fe8fe:	4605      	mov	r5, r0
 23fe900:	2800      	cmp	r0, #0
 23fe902:	d0e6      	beq.n	23fe8d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe904:	4632      	mov	r2, r6
 23fe906:	4621      	mov	r1, r4
 23fe908:	ab01      	add	r3, sp, #4
 23fe90a:	f7ff ff9f 	bl	23fe84c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe90e:	e7e0      	b.n	23fe8d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe910:	2400      	movs	r4, #0
 23fe912:	e7e2      	b.n	23fe8da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe914:	023ffca0 	.word	0x023ffca0
 23fe918:	023ffe64 	.word	0x023ffe64
 23fe91c:	023ffd30 	.word	0x023ffd30
 23fe920:	023ffca4 	.word	0x023ffca4

023fe924 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe924:	4b01      	ldr	r3, [pc, #4]	; (23fe92c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe926:	4a02      	ldr	r2, [pc, #8]	; (23fe930 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe928:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe92a:	4770      	bx	lr
 23fe92c:	1007ae68 	.word	0x1007ae68
 23fe930:	023ffb9b 	.word	0x023ffb9b

023fe934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe938:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe93a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe93e:	4604      	mov	r4, r0
 23fe940:	460e      	mov	r6, r1
 23fe942:	4617      	mov	r7, r2
 23fe944:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe946:	f000 fc31 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23fe94a:	4581      	cmp	r9, r0
 23fe94c:	d04d      	beq.n	23fe9ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe94e:	792b      	ldrb	r3, [r5, #4]
 23fe950:	0719      	lsls	r1, r3, #28
 23fe952:	d504      	bpl.n	23fe95e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe954:	4620      	mov	r0, r4
 23fe956:	696a      	ldr	r2, [r5, #20]
 23fe958:	4954      	ldr	r1, [pc, #336]	; (23feaac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe95a:	f7ff fae2 	bl	23fdf22 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe95e:	f1b8 0f00 	cmp.w	r8, #0
 23fe962:	d00d      	beq.n	23fe980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe964:	215b      	movs	r1, #91	; 0x5b
 23fe966:	4620      	mov	r0, r4
 23fe968:	f7ff fa56 	bl	23fde18 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe96c:	4641      	mov	r1, r8
 23fe96e:	4620      	mov	r0, r4
 23fe970:	f7ff fa43 	bl	23fddfa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe974:	6823      	ldr	r3, [r4, #0]
 23fe976:	2202      	movs	r2, #2
 23fe978:	4620      	mov	r0, r4
 23fe97a:	68db      	ldr	r3, [r3, #12]
 23fe97c:	494c      	ldr	r1, [pc, #304]	; (23feab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe97e:	4798      	blx	r3
    if (attr.has_file) {
 23fe980:	792b      	ldrb	r3, [r5, #4]
 23fe982:	07da      	lsls	r2, r3, #31
 23fe984:	d524      	bpl.n	23fe9d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe986:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe98a:	212f      	movs	r1, #47	; 0x2f
 23fe98c:	4640      	mov	r0, r8
 23fe98e:	f000 ff46 	bl	23ff81e <strrchr>
    if (s1) {
 23fe992:	b108      	cbz	r0, 23fe998 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe994:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe998:	4641      	mov	r1, r8
 23fe99a:	4620      	mov	r0, r4
 23fe99c:	f7ff fa2d 	bl	23fddfa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe9a0:	792b      	ldrb	r3, [r5, #4]
 23fe9a2:	079b      	lsls	r3, r3, #30
 23fe9a4:	d508      	bpl.n	23fe9b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe9a6:	213a      	movs	r1, #58	; 0x3a
 23fe9a8:	4620      	mov	r0, r4
 23fe9aa:	f7ff fa35 	bl	23fde18 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe9ae:	4620      	mov	r0, r4
 23fe9b0:	68ea      	ldr	r2, [r5, #12]
 23fe9b2:	4940      	ldr	r1, [pc, #256]	; (23feab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe9b4:	f7ff fab5 	bl	23fdf22 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe9b8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe9ba:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe9bc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe9c0:	4620      	mov	r0, r4
            write(", ", 2);
 23fe9c2:	f04f 0202 	mov.w	r2, #2
 23fe9c6:	68db      	ldr	r3, [r3, #12]
 23fe9c8:	bf14      	ite	ne
 23fe9ca:	493b      	ldrne	r1, [pc, #236]	; (23feab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe9cc:	493b      	ldreq	r1, [pc, #236]	; (23feabc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe9ce:	4798      	blx	r3
    if (attr.has_function) {
 23fe9d0:	792b      	ldrb	r3, [r5, #4]
 23fe9d2:	0758      	lsls	r0, r3, #29
 23fe9d4:	d51d      	bpl.n	23fea12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe9d6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe9d8:	460b      	mov	r3, r1
 23fe9da:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe9dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe9e0:	b160      	cbz	r0, 23fe9fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe9e2:	2820      	cmp	r0, #32
 23fe9e4:	d108      	bne.n	23fe9f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe9e6:	4619      	mov	r1, r3
 23fe9e8:	e7f7      	b.n	23fe9da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe9ea:	4835      	ldr	r0, [pc, #212]	; (23feac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe9ec:	f000 f983 	bl	23fecf6 <_ZN5spark12NetworkClass9listeningEv>
 23fe9f0:	2800      	cmp	r0, #0
 23fe9f2:	d0ac      	beq.n	23fe94e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe9f8:	2828      	cmp	r0, #40	; 0x28
 23fe9fa:	d1ee      	bne.n	23fe9da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe9fc:	6823      	ldr	r3, [r4, #0]
 23fe9fe:	1a52      	subs	r2, r2, r1
 23fea00:	4620      	mov	r0, r4
 23fea02:	68db      	ldr	r3, [r3, #12]
 23fea04:	4798      	blx	r3
        write("(): ", 4);
 23fea06:	6823      	ldr	r3, [r4, #0]
 23fea08:	2204      	movs	r2, #4
 23fea0a:	4620      	mov	r0, r4
 23fea0c:	68db      	ldr	r3, [r3, #12]
 23fea0e:	492d      	ldr	r1, [pc, #180]	; (23feac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fea10:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fea12:	2100      	movs	r1, #0
 23fea14:	4638      	mov	r0, r7
 23fea16:	f7fe f901 	bl	23fcc1c <log_level_name>
 23fea1a:	4601      	mov	r1, r0
    write(s);
 23fea1c:	4620      	mov	r0, r4
 23fea1e:	f7ff f9ec 	bl	23fddfa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fea22:	6823      	ldr	r3, [r4, #0]
 23fea24:	2202      	movs	r2, #2
 23fea26:	4620      	mov	r0, r4
 23fea28:	68db      	ldr	r3, [r3, #12]
 23fea2a:	4924      	ldr	r1, [pc, #144]	; (23feabc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fea2c:	4798      	blx	r3
    if (msg) {
 23fea2e:	b11e      	cbz	r6, 23fea38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fea30:	4631      	mov	r1, r6
 23fea32:	4620      	mov	r0, r4
 23fea34:	f7ff f9e1 	bl	23fddfa <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fea38:	792b      	ldrb	r3, [r5, #4]
 23fea3a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fea3e:	d02c      	beq.n	23fea9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fea40:	6823      	ldr	r3, [r4, #0]
 23fea42:	4921      	ldr	r1, [pc, #132]	; (23feac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fea44:	68db      	ldr	r3, [r3, #12]
 23fea46:	2202      	movs	r2, #2
 23fea48:	4620      	mov	r0, r4
 23fea4a:	4798      	blx	r3
        if (attr.has_code) {
 23fea4c:	792b      	ldrb	r3, [r5, #4]
 23fea4e:	06d9      	lsls	r1, r3, #27
 23fea50:	d50a      	bpl.n	23fea68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fea52:	6823      	ldr	r3, [r4, #0]
 23fea54:	2207      	movs	r2, #7
 23fea56:	4620      	mov	r0, r4
 23fea58:	491c      	ldr	r1, [pc, #112]	; (23feacc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fea5a:	68db      	ldr	r3, [r3, #12]
 23fea5c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fea5e:	4620      	mov	r0, r4
 23fea60:	69aa      	ldr	r2, [r5, #24]
 23fea62:	491b      	ldr	r1, [pc, #108]	; (23fead0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fea64:	f7ff fa5d 	bl	23fdf22 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fea68:	792b      	ldrb	r3, [r5, #4]
 23fea6a:	069a      	lsls	r2, r3, #26
 23fea6c:	d511      	bpl.n	23fea92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fea6e:	06db      	lsls	r3, r3, #27
 23fea70:	d505      	bpl.n	23fea7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fea72:	6823      	ldr	r3, [r4, #0]
 23fea74:	2202      	movs	r2, #2
 23fea76:	4620      	mov	r0, r4
 23fea78:	68db      	ldr	r3, [r3, #12]
 23fea7a:	490f      	ldr	r1, [pc, #60]	; (23feab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fea7c:	4798      	blx	r3
            write("details = ", 10);
 23fea7e:	6823      	ldr	r3, [r4, #0]
 23fea80:	4620      	mov	r0, r4
 23fea82:	4914      	ldr	r1, [pc, #80]	; (23fead4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fea84:	220a      	movs	r2, #10
 23fea86:	68db      	ldr	r3, [r3, #12]
 23fea88:	4798      	blx	r3
            write(attr.details);
 23fea8a:	4620      	mov	r0, r4
 23fea8c:	69e9      	ldr	r1, [r5, #28]
 23fea8e:	f7ff f9b4 	bl	23fddfa <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fea92:	215d      	movs	r1, #93	; 0x5d
 23fea94:	4620      	mov	r0, r4
 23fea96:	f7ff f9bf 	bl	23fde18 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fea9a:	6823      	ldr	r3, [r4, #0]
 23fea9c:	4620      	mov	r0, r4
}
 23fea9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23feaa2:	2202      	movs	r2, #2
 23feaa4:	68db      	ldr	r3, [r3, #12]
 23feaa6:	490c      	ldr	r1, [pc, #48]	; (23fead8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23feaa8:	4718      	bx	r3
 23feaaa:	bf00      	nop
 23feaac:	023ffcb5 	.word	0x023ffcb5
 23feab0:	023ffcbc 	.word	0x023ffcbc
 23feab4:	023ffc64 	.word	0x023ffc64
 23feab8:	023ffcbf 	.word	0x023ffcbf
 23feabc:	023ffcc4 	.word	0x023ffcc4
 23feac0:	1007ae94 	.word	0x1007ae94
 23feac4:	023ffcc2 	.word	0x023ffcc2
 23feac8:	023ffcc7 	.word	0x023ffcc7
 23feacc:	023ffcca 	.word	0x023ffcca
 23fead0:	023ffcd2 	.word	0x023ffcd2
 23fead4:	023ffcd5 	.word	0x023ffcd5
 23fead8:	023ffce0 	.word	0x023ffce0

023feadc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feae0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23feae2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feae4:	460d      	mov	r5, r1
 23feae6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23feae8:	f000 fb60 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23feaec:	4287      	cmp	r7, r0
 23feaee:	d007      	beq.n	23feb00 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23feaf0:	6a20      	ldr	r0, [r4, #32]
 23feaf2:	4632      	mov	r2, r6
 23feaf4:	6803      	ldr	r3, [r0, #0]
 23feaf6:	4629      	mov	r1, r5
}
 23feaf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23feafc:	68db      	ldr	r3, [r3, #12]
 23feafe:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23feb00:	4803      	ldr	r0, [pc, #12]	; (23feb10 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23feb02:	f000 f8f8 	bl	23fecf6 <_ZN5spark12NetworkClass9listeningEv>
 23feb06:	2800      	cmp	r0, #0
 23feb08:	d0f2      	beq.n	23feaf0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23feb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23feb0e:	bf00      	nop
 23feb10:	1007ae94 	.word	0x1007ae94

023feb14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23feb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb18:	b085      	sub	sp, #20
    return stream_;
 23feb1a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23feb1e:	4605      	mov	r5, r0
 23feb20:	460f      	mov	r7, r1
 23feb22:	4690      	mov	r8, r2
 23feb24:	461e      	mov	r6, r3
 23feb26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23feb28:	f000 fb40 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23feb2c:	4581      	cmp	r9, r0
 23feb2e:	d105      	bne.n	23feb3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23feb30:	4849      	ldr	r0, [pc, #292]	; (23fec58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23feb32:	f000 f8e0 	bl	23fecf6 <_ZN5spark12NetworkClass9listeningEv>
 23feb36:	2800      	cmp	r0, #0
 23feb38:	f040 808a 	bne.w	23fec50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23feb3c:	f04f 0900 	mov.w	r9, #0
 23feb40:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23feb42:	4a46      	ldr	r2, [pc, #280]	; (23fec5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23feb44:	a801      	add	r0, sp, #4
 23feb46:	9201      	str	r2, [sp, #4]
 23feb48:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23feb4a:	f88d 9008 	strb.w	r9, [sp, #8]
 23feb4e:	f7ff f81c 	bl	23fdb8a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23feb52:	4649      	mov	r1, r9
 23feb54:	4640      	mov	r0, r8
 23feb56:	f7fe f861 	bl	23fcc1c <log_level_name>
 23feb5a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23feb5c:	4940      	ldr	r1, [pc, #256]	; (23fec60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23feb5e:	2201      	movs	r2, #1
 23feb60:	a801      	add	r0, sp, #4
 23feb62:	f7ff f8b5 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb66:	4641      	mov	r1, r8
 23feb68:	f7ff f939 	bl	23fddde <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23feb6c:	b13f      	cbz	r7, 23feb7e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23feb6e:	493d      	ldr	r1, [pc, #244]	; (23fec64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23feb70:	2201      	movs	r2, #1
 23feb72:	a801      	add	r0, sp, #4
 23feb74:	f7ff f8ac 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb78:	4639      	mov	r1, r7
 23feb7a:	f7ff f930 	bl	23fddde <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23feb7e:	b13e      	cbz	r6, 23feb90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23feb80:	4939      	ldr	r1, [pc, #228]	; (23fec68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23feb82:	2201      	movs	r2, #1
 23feb84:	a801      	add	r0, sp, #4
 23feb86:	f7ff f8a3 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23feb8a:	4631      	mov	r1, r6
 23feb8c:	f7ff f927 	bl	23fddde <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23feb90:	7923      	ldrb	r3, [r4, #4]
 23feb92:	07df      	lsls	r7, r3, #31
 23feb94:	d50e      	bpl.n	23febb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23feb96:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23feb98:	212f      	movs	r1, #47	; 0x2f
 23feb9a:	4630      	mov	r0, r6
 23feb9c:	f000 fe3f 	bl	23ff81e <strrchr>
    if (s1) {
 23feba0:	b100      	cbz	r0, 23feba4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23feba2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23feba4:	4931      	ldr	r1, [pc, #196]	; (23fec6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23feba6:	2201      	movs	r2, #1
 23feba8:	a801      	add	r0, sp, #4
 23febaa:	f7ff f891 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23febae:	4631      	mov	r1, r6
 23febb0:	f7ff f915 	bl	23fddde <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23febb4:	7923      	ldrb	r3, [r4, #4]
 23febb6:	079e      	lsls	r6, r3, #30
 23febb8:	d507      	bpl.n	23febca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23febba:	492d      	ldr	r1, [pc, #180]	; (23fec70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23febbc:	2202      	movs	r2, #2
 23febbe:	a801      	add	r0, sp, #4
 23febc0:	f7ff f886 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23febc4:	68e1      	ldr	r1, [r4, #12]
 23febc6:	f7fe ffed 	bl	23fdba4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23febca:	7923      	ldrb	r3, [r4, #4]
 23febcc:	0758      	lsls	r0, r3, #29
 23febce:	d514      	bpl.n	23febfa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23febd0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23febd2:	4633      	mov	r3, r6
 23febd4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23febd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23febda:	b12a      	cbz	r2, 23febe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23febdc:	2a20      	cmp	r2, #32
 23febde:	d101      	bne.n	23febe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23febe0:	461e      	mov	r6, r3
 23febe2:	e7f7      	b.n	23febd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23febe4:	2a28      	cmp	r2, #40	; 0x28
 23febe6:	d1f5      	bne.n	23febd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23febe8:	2202      	movs	r2, #2
 23febea:	4922      	ldr	r1, [pc, #136]	; (23fec74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23febec:	a801      	add	r0, sp, #4
 23febee:	f7ff f86f 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23febf2:	4631      	mov	r1, r6
 23febf4:	1bba      	subs	r2, r7, r6
 23febf6:	f7ff f87b 	bl	23fdcf0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23febfa:	7923      	ldrb	r3, [r4, #4]
 23febfc:	0719      	lsls	r1, r3, #28
 23febfe:	d507      	bpl.n	23fec10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fec00:	491d      	ldr	r1, [pc, #116]	; (23fec78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fec02:	2201      	movs	r2, #1
 23fec04:	a801      	add	r0, sp, #4
 23fec06:	f7ff f863 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fec0a:	6961      	ldr	r1, [r4, #20]
 23fec0c:	f7fe ffdc 	bl	23fdbc8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fec10:	7923      	ldrb	r3, [r4, #4]
 23fec12:	06da      	lsls	r2, r3, #27
 23fec14:	d508      	bpl.n	23fec28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fec16:	2204      	movs	r2, #4
 23fec18:	4918      	ldr	r1, [pc, #96]	; (23fec7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fec1a:	eb0d 0002 	add.w	r0, sp, r2
 23fec1e:	f7ff f857 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fec22:	69a1      	ldr	r1, [r4, #24]
 23fec24:	f7fe ffbe 	bl	23fdba4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fec28:	7923      	ldrb	r3, [r4, #4]
 23fec2a:	069b      	lsls	r3, r3, #26
 23fec2c:	d507      	bpl.n	23fec3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fec2e:	4914      	ldr	r1, [pc, #80]	; (23fec80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fec30:	2206      	movs	r2, #6
 23fec32:	a801      	add	r0, sp, #4
 23fec34:	f7ff f84c 	bl	23fdcd0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fec38:	69e1      	ldr	r1, [r4, #28]
 23fec3a:	f7ff f8d0 	bl	23fddde <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fec3e:	a801      	add	r0, sp, #4
 23fec40:	f7fe ff8d 	bl	23fdb5e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fec44:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fec46:	2202      	movs	r2, #2
 23fec48:	6803      	ldr	r3, [r0, #0]
 23fec4a:	490e      	ldr	r1, [pc, #56]	; (23fec84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fec4c:	68db      	ldr	r3, [r3, #12]
 23fec4e:	4798      	blx	r3
}
 23fec50:	b005      	add	sp, #20
 23fec52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fec56:	bf00      	nop
 23fec58:	1007ae94 	.word	0x1007ae94
 23fec5c:	023ffd00 	.word	0x023ffd00
 23fec60:	023ffc96 	.word	0x023ffc96
 23fec64:	023ffce3 	.word	0x023ffce3
 23fec68:	023ffed3 	.word	0x023ffed3
 23fec6c:	023ffabf 	.word	0x023ffabf
 23fec70:	023ffce5 	.word	0x023ffce5
 23fec74:	023ffce8 	.word	0x023ffce8
 23fec78:	023ffa98 	.word	0x023ffa98
 23fec7c:	023ffceb 	.word	0x023ffceb
 23fec80:	023ffcf0 	.word	0x023ffcf0
 23fec84:	023ffce0 	.word	0x023ffce0

023fec88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fec88:	2300      	movs	r3, #0
 23fec8a:	6840      	ldr	r0, [r0, #4]
 23fec8c:	461a      	mov	r2, r3
 23fec8e:	f7fe b897 	b.w	23fcdc0 <network_connect>

023fec92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fec92:	2200      	movs	r2, #0
 23fec94:	2102      	movs	r1, #2
 23fec96:	6840      	ldr	r0, [r0, #4]
 23fec98:	f7fe b8ae 	b.w	23fcdf8 <network_disconnect>

023fec9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fec9c:	2200      	movs	r2, #0
 23fec9e:	6840      	ldr	r0, [r0, #4]
 23feca0:	4611      	mov	r1, r2
 23feca2:	f7fe b89b 	b.w	23fcddc <network_connecting>

023feca6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23feca6:	2200      	movs	r2, #0
 23feca8:	6840      	ldr	r0, [r0, #4]
 23fecaa:	4611      	mov	r1, r2
 23fecac:	f7fe b8b2 	b.w	23fce14 <network_ready>

023fecb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fecb0:	2300      	movs	r3, #0
 23fecb2:	6840      	ldr	r0, [r0, #4]
 23fecb4:	461a      	mov	r2, r3
 23fecb6:	4619      	mov	r1, r3
 23fecb8:	f7fe b8ba 	b.w	23fce30 <network_on>

023fecbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fecbc:	2300      	movs	r3, #0
 23fecbe:	6840      	ldr	r0, [r0, #4]
 23fecc0:	461a      	mov	r2, r3
 23fecc2:	4619      	mov	r1, r3
 23fecc4:	f7fe b8c2 	b.w	23fce4c <network_off>

023fecc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fecc8:	2100      	movs	r1, #0
 23fecca:	6840      	ldr	r0, [r0, #4]
 23feccc:	f7fe b904 	b.w	23fced8 <network_is_on>

023fecd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fecd0:	2100      	movs	r1, #0
 23fecd2:	6840      	ldr	r0, [r0, #4]
 23fecd4:	f7fe b90e 	b.w	23fcef4 <network_is_off>

023fecd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fecd8:	2200      	movs	r2, #0
 23fecda:	6840      	ldr	r0, [r0, #4]
 23fecdc:	f081 0101 	eor.w	r1, r1, #1
 23fece0:	f7fe b8c2 	b.w	23fce68 <network_listen>

023fece4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fece4:	2200      	movs	r2, #0
 23fece6:	6840      	ldr	r0, [r0, #4]
 23fece8:	f7fe b8da 	b.w	23fcea0 <network_set_listen_timeout>

023fecec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fecec:	2200      	movs	r2, #0
 23fecee:	6840      	ldr	r0, [r0, #4]
 23fecf0:	4611      	mov	r1, r2
 23fecf2:	f7fe b8e3 	b.w	23fcebc <network_get_listen_timeout>

023fecf6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fecf6:	2200      	movs	r2, #0
 23fecf8:	6840      	ldr	r0, [r0, #4]
 23fecfa:	4611      	mov	r1, r2
 23fecfc:	f7fe b8c2 	b.w	23fce84 <network_listening>

023fed00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fed04:	b095      	sub	sp, #84	; 0x54
 23fed06:	4614      	mov	r4, r2
 23fed08:	460d      	mov	r5, r1
 23fed0a:	4607      	mov	r7, r0
    IPAddress addr;
 23fed0c:	f7fe fda0 	bl	23fd850 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fed10:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fed12:	221c      	movs	r2, #28
 23fed14:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fed16:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fed18:	f000 fcf9 	bl	23ff70e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fed1c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fed1e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fed20:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fed22:	2100      	movs	r1, #0
 23fed24:	466b      	mov	r3, sp
 23fed26:	aa0c      	add	r2, sp, #48	; 0x30
 23fed28:	f7fd fe28 	bl	23fc97c <netdb_getaddrinfo>
    if (!r) {
 23fed2c:	4604      	mov	r4, r0
 23fed2e:	2800      	cmp	r0, #0
 23fed30:	d14b      	bne.n	23fedca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fed32:	4602      	mov	r2, r0
 23fed34:	2101      	movs	r1, #1
 23fed36:	6868      	ldr	r0, [r5, #4]
 23fed38:	f7fe f86c 	bl	23fce14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fed3c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fed3e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fed40:	4622      	mov	r2, r4
 23fed42:	6868      	ldr	r0, [r5, #4]
 23fed44:	f7fe f866 	bl	23fce14 <network_ready>
        bool ok = false;
 23fed48:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fed4a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fed4c:	9e00      	ldr	r6, [sp, #0]
 23fed4e:	2e00      	cmp	r6, #0
 23fed50:	d03b      	beq.n	23fedca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fed52:	2900      	cmp	r1, #0
 23fed54:	d139      	bne.n	23fedca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fed56:	6873      	ldr	r3, [r6, #4]
 23fed58:	2b02      	cmp	r3, #2
 23fed5a:	d003      	beq.n	23fed64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fed5c:	2b0a      	cmp	r3, #10
 23fed5e:	d011      	beq.n	23fed84 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fed60:	69f6      	ldr	r6, [r6, #28]
 23fed62:	e7f4      	b.n	23fed4e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fed64:	f1b8 0f00 	cmp.w	r8, #0
 23fed68:	d0fa      	beq.n	23fed60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fed6a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fed6c:	a806      	add	r0, sp, #24
 23fed6e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fed70:	1d3c      	adds	r4, r7, #4
 23fed72:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fed74:	f7fe fd9a 	bl	23fd8ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fed78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fed7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fed7c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fed7e:	4641      	mov	r1, r8
 23fed80:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fed82:	e7ed      	b.n	23fed60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fed84:	f1b9 0f00 	cmp.w	r9, #0
 23fed88:	d0ea      	beq.n	23fed60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fed8a:	2210      	movs	r2, #16
 23fed8c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fed8e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fed90:	f000 fcbd 	bl	23ff70e <memset>
                    a.v = 6;
 23fed94:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fed96:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fed98:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fed9c:	f104 0308 	add.w	r3, r4, #8
 23feda0:	3418      	adds	r4, #24
 23feda2:	462a      	mov	r2, r5
 23feda4:	6818      	ldr	r0, [r3, #0]
 23feda6:	6859      	ldr	r1, [r3, #4]
 23feda8:	3308      	adds	r3, #8
 23fedaa:	c203      	stmia	r2!, {r0, r1}
 23fedac:	42a3      	cmp	r3, r4
 23fedae:	4615      	mov	r5, r2
 23fedb0:	d1f7      	bne.n	23feda2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fedb2:	a901      	add	r1, sp, #4
 23fedb4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fedb6:	1d3c      	adds	r4, r7, #4
 23fedb8:	ad07      	add	r5, sp, #28
 23fedba:	f7fe fd57 	bl	23fd86c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fedbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fedc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fedc2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fedc4:	4649      	mov	r1, r9
 23fedc6:	7023      	strb	r3, [r4, #0]
                    break;
 23fedc8:	e7ca      	b.n	23fed60 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fedca:	9800      	ldr	r0, [sp, #0]
 23fedcc:	f7fd fdc8 	bl	23fc960 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fedd0:	4638      	mov	r0, r7
 23fedd2:	b015      	add	sp, #84	; 0x54
 23fedd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fedd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fedd8:	4b02      	ldr	r3, [pc, #8]	; (23fede4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fedda:	4a03      	ldr	r2, [pc, #12]	; (23fede8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23feddc:	601a      	str	r2, [r3, #0]
 23fedde:	2200      	movs	r2, #0
 23fede0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fede2:	4770      	bx	lr
 23fede4:	1007ae94 	.word	0x1007ae94
 23fede8:	023ffd78 	.word	0x023ffd78

023fedec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fedec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fedee:	4606      	mov	r6, r0
 23fedf0:	460d      	mov	r5, r1
  size_t n = 0;
 23fedf2:	2400      	movs	r4, #0
 23fedf4:	188f      	adds	r7, r1, r2
  while (size--) {
 23fedf6:	42bd      	cmp	r5, r7
 23fedf8:	d00c      	beq.n	23fee14 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fedfa:	6833      	ldr	r3, [r6, #0]
 23fedfc:	4630      	mov	r0, r6
 23fedfe:	689b      	ldr	r3, [r3, #8]
 23fee00:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fee04:	4798      	blx	r3
     if (chunk>=0)
 23fee06:	1e03      	subs	r3, r0, #0
 23fee08:	db01      	blt.n	23fee0e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fee0a:	441c      	add	r4, r3
  while (size--) {
 23fee0c:	e7f3      	b.n	23fedf6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fee0e:	2c00      	cmp	r4, #0
 23fee10:	bf08      	it	eq
 23fee12:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fee14:	4620      	mov	r0, r4
 23fee16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fee18 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fee18:	b513      	push	{r0, r1, r4, lr}
 23fee1a:	4604      	mov	r4, r0
    }
 23fee1c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fee1e:	b159      	cbz	r1, 23fee38 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fee20:	9101      	str	r1, [sp, #4]
 23fee22:	f7fc fd2d 	bl	23fb880 <strlen>
 23fee26:	4602      	mov	r2, r0
 23fee28:	4620      	mov	r0, r4
 23fee2a:	6823      	ldr	r3, [r4, #0]
 23fee2c:	9901      	ldr	r1, [sp, #4]
 23fee2e:	68db      	ldr	r3, [r3, #12]
    }
 23fee30:	b002      	add	sp, #8
 23fee32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fee36:	4718      	bx	r3
    }
 23fee38:	b002      	add	sp, #8
 23fee3a:	bd10      	pop	{r4, pc}

023fee3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fee3c:	6803      	ldr	r3, [r0, #0]
 23fee3e:	689b      	ldr	r3, [r3, #8]
 23fee40:	4718      	bx	r3

023fee42 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fee42:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fee44:	2a01      	cmp	r2, #1
 23fee46:	bf98      	it	ls
 23fee48:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fee4a:	b530      	push	{r4, r5, lr}
 23fee4c:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fee4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fee52:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fee54:	460d      	mov	r5, r1
 23fee56:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fee5a:	fb01 5312 	mls	r3, r1, r2, r5
 23fee5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fee62:	2b09      	cmp	r3, #9
 23fee64:	bf94      	ite	ls
 23fee66:	3330      	addls	r3, #48	; 0x30
 23fee68:	3337      	addhi	r3, #55	; 0x37
 23fee6a:	b2db      	uxtb	r3, r3
  } while(n);
 23fee6c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fee6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fee72:	d9ef      	bls.n	23fee54 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fee74:	4621      	mov	r1, r4
 23fee76:	f7ff ffcf 	bl	23fee18 <_ZN5Print5writeEPKc>
}
 23fee7a:	b00b      	add	sp, #44	; 0x2c
 23fee7c:	bd30      	pop	{r4, r5, pc}
	...

023fee80 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fee80:	2200      	movs	r2, #0
 23fee82:	4b01      	ldr	r3, [pc, #4]	; (23fee88 <_GLOBAL__sub_I_RGB+0x8>)
 23fee84:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fee86:	4770      	bx	lr
 23fee88:	1007ae9c 	.word	0x1007ae9c

023fee8c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fee8c:	b510      	push	{r4, lr}
 23fee8e:	4604      	mov	r4, r0
 23fee90:	4608      	mov	r0, r1
{
    _spi = spi;
 23fee92:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fee94:	f7fd fd80 	bl	23fc998 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fee98:	2300      	movs	r3, #0
}
 23fee9a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fee9c:	6063      	str	r3, [r4, #4]
}
 23fee9e:	bd10      	pop	{r4, pc}

023feea0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23feea0:	b510      	push	{r4, lr}
 23feea2:	4604      	mov	r4, r0
{
	free(buffer);
 23feea4:	6800      	ldr	r0, [r0, #0]
 23feea6:	f7fe f841 	bl	23fcf2c <free>
}
 23feeaa:	4620      	mov	r0, r4
 23feeac:	bd10      	pop	{r4, pc}

023feeae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23feeae:	b510      	push	{r4, lr}
 23feeb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23feeb2:	6800      	ldr	r0, [r0, #0]
 23feeb4:	b108      	cbz	r0, 23feeba <_ZN6String10invalidateEv+0xc>
 23feeb6:	f7fe f839 	bl	23fcf2c <free>
	buffer = NULL;
 23feeba:	2300      	movs	r3, #0
	capacity = len = 0;
 23feebc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23feec0:	6023      	str	r3, [r4, #0]
}
 23feec2:	bd10      	pop	{r4, pc}

023feec4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23feec4:	b538      	push	{r3, r4, r5, lr}
 23feec6:	4604      	mov	r4, r0
 23feec8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23feeca:	6800      	ldr	r0, [r0, #0]
 23feecc:	3101      	adds	r1, #1
 23feece:	f7fe f83b 	bl	23fcf48 <realloc>
	if (newbuffer) {
 23feed2:	b110      	cbz	r0, 23feeda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23feed4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23feed8:	2001      	movs	r0, #1
	}
	return 0;
}
 23feeda:	bd38      	pop	{r3, r4, r5, pc}

023feedc <_ZN6String7reserveEj>:
{
 23feedc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23feede:	6803      	ldr	r3, [r0, #0]
{
 23feee0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23feee2:	b123      	cbz	r3, 23feeee <_ZN6String7reserveEj+0x12>
 23feee4:	6843      	ldr	r3, [r0, #4]
 23feee6:	428b      	cmp	r3, r1
 23feee8:	d301      	bcc.n	23feeee <_ZN6String7reserveEj+0x12>
 23feeea:	2001      	movs	r0, #1
}
 23feeec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23feeee:	4620      	mov	r0, r4
 23feef0:	f7ff ffe8 	bl	23feec4 <_ZN6String12changeBufferEj>
 23feef4:	2800      	cmp	r0, #0
 23feef6:	d0f9      	beq.n	23feeec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23feef8:	68a3      	ldr	r3, [r4, #8]
 23feefa:	2b00      	cmp	r3, #0
 23feefc:	d1f5      	bne.n	23feeea <_ZN6String7reserveEj+0xe>
 23feefe:	6822      	ldr	r2, [r4, #0]
 23fef00:	7013      	strb	r3, [r2, #0]
 23fef02:	e7f2      	b.n	23feeea <_ZN6String7reserveEj+0xe>

023fef04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fef04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fef06:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fef08:	4611      	mov	r1, r2
 23fef0a:	9201      	str	r2, [sp, #4]
{
 23fef0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fef0e:	f7ff ffe5 	bl	23feedc <_ZN6String7reserveEj>
 23fef12:	9a01      	ldr	r2, [sp, #4]
 23fef14:	b928      	cbnz	r0, 23fef22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fef16:	4620      	mov	r0, r4
 23fef18:	f7ff ffc9 	bl	23feeae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fef1c:	4620      	mov	r0, r4
 23fef1e:	b003      	add	sp, #12
 23fef20:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fef22:	4629      	mov	r1, r5
	len = length;
 23fef24:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fef26:	6820      	ldr	r0, [r4, #0]
 23fef28:	f000 fbca 	bl	23ff6c0 <memcpy>
	buffer[len] = 0;
 23fef2c:	2100      	movs	r1, #0
 23fef2e:	6822      	ldr	r2, [r4, #0]
 23fef30:	68a3      	ldr	r3, [r4, #8]
 23fef32:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fef34:	e7f2      	b.n	23fef1c <_ZN6String4copyEPKcj+0x18>

023fef36 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fef36:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fef38:	b513      	push	{r0, r1, r4, lr}
 23fef3a:	4604      	mov	r4, r0
	capacity = 0;
 23fef3c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fef40:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fef42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fef44:	b141      	cbz	r1, 23fef58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fef46:	4608      	mov	r0, r1
 23fef48:	9101      	str	r1, [sp, #4]
 23fef4a:	f7fc fc99 	bl	23fb880 <strlen>
 23fef4e:	9901      	ldr	r1, [sp, #4]
 23fef50:	4602      	mov	r2, r0
 23fef52:	4620      	mov	r0, r4
 23fef54:	f7ff ffd6 	bl	23fef04 <_ZN6String4copyEPKcj>
}
 23fef58:	4620      	mov	r0, r4
 23fef5a:	b002      	add	sp, #8
 23fef5c:	bd10      	pop	{r4, pc}

023fef5e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fef5e:	b538      	push	{r3, r4, r5, lr}
 23fef60:	4605      	mov	r5, r0
	if (buffer) {
 23fef62:	6800      	ldr	r0, [r0, #0]
{
 23fef64:	460c      	mov	r4, r1
	if (buffer) {
 23fef66:	b168      	cbz	r0, 23fef84 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23fef68:	686a      	ldr	r2, [r5, #4]
 23fef6a:	688b      	ldr	r3, [r1, #8]
 23fef6c:	429a      	cmp	r2, r3
 23fef6e:	d307      	bcc.n	23fef80 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23fef70:	6809      	ldr	r1, [r1, #0]
 23fef72:	f000 fc1a 	bl	23ff7aa <strcpy>
			len = rhs.len;
 23fef76:	68a3      	ldr	r3, [r4, #8]
 23fef78:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fef7a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fef7c:	60a3      	str	r3, [r4, #8]
}
 23fef7e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fef80:	f7fd ffd4 	bl	23fcf2c <free>
	buffer = rhs.buffer;
 23fef84:	6823      	ldr	r3, [r4, #0]
 23fef86:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fef88:	6863      	ldr	r3, [r4, #4]
 23fef8a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fef8c:	68a3      	ldr	r3, [r4, #8]
 23fef8e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fef90:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fef92:	e9c4 3300 	strd	r3, r3, [r4]
 23fef96:	e7f1      	b.n	23fef7c <_ZN6String4moveERS_+0x1e>

023fef98 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fef98:	2300      	movs	r3, #0
String::String(String &&rval)
 23fef9a:	b510      	push	{r4, lr}
 23fef9c:	4604      	mov	r4, r0
	capacity = 0;
 23fef9e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fefa2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fefa4:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fefa6:	f7ff ffda 	bl	23fef5e <_ZN6String4moveERS_>
}
 23fefaa:	4620      	mov	r0, r4
 23fefac:	bd10      	pop	{r4, pc}

023fefae <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fefae:	4288      	cmp	r0, r1
{
 23fefb0:	b510      	push	{r4, lr}
 23fefb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fefb4:	d005      	beq.n	23fefc2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fefb6:	680b      	ldr	r3, [r1, #0]
 23fefb8:	b12b      	cbz	r3, 23fefc6 <_ZN6StringaSERKS_+0x18>
 23fefba:	688a      	ldr	r2, [r1, #8]
 23fefbc:	4619      	mov	r1, r3
 23fefbe:	f7ff ffa1 	bl	23fef04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fefc2:	4620      	mov	r0, r4
 23fefc4:	bd10      	pop	{r4, pc}
	else invalidate();
 23fefc6:	f7ff ff72 	bl	23feeae <_ZN6String10invalidateEv>
 23fefca:	e7fa      	b.n	23fefc2 <_ZN6StringaSERKS_+0x14>

023fefcc <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fefcc:	2300      	movs	r3, #0
String::String(const String &value)
 23fefce:	b510      	push	{r4, lr}
 23fefd0:	4604      	mov	r4, r0
	capacity = 0;
 23fefd2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fefd6:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fefd8:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fefda:	f7ff ffe8 	bl	23fefae <_ZN6StringaSERKS_>
}
 23fefde:	4620      	mov	r0, r4
 23fefe0:	bd10      	pop	{r4, pc}

023fefe2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 23fefe2:	6800      	ldr	r0, [r0, #0]
 23fefe4:	b108      	cbz	r0, 23fefea <_ZNK6String5toIntEv+0x8>
 23fefe6:	f000 bb5e 	b.w	23ff6a6 <atol>
	return 0;
}
 23fefea:	4770      	bx	lr

023fefec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fefec:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fefee:	2000      	movs	r0, #0
 23feff0:	4b04      	ldr	r3, [pc, #16]	; (23ff004 <_GLOBAL__sub_I_System+0x18>)
 23feff2:	601a      	str	r2, [r3, #0]
 23feff4:	4b04      	ldr	r3, [pc, #16]	; (23ff008 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23feff6:	4a05      	ldr	r2, [pc, #20]	; (23ff00c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23feff8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23feffc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23feffe:	f7fd be29 	b.w	23fcc54 <set_system_mode>
 23ff002:	bf00      	nop
 23ff004:	1007aeb8 	.word	0x1007aeb8
 23ff008:	1007aeac 	.word	0x1007aeac
 23ff00c:	ffff0000 	.word	0xffff0000

023ff010 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff010:	4b02      	ldr	r3, [pc, #8]	; (23ff01c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff012:	681a      	ldr	r2, [r3, #0]
 23ff014:	4b02      	ldr	r3, [pc, #8]	; (23ff020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff016:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff018:	4770      	bx	lr
 23ff01a:	bf00      	nop
 23ff01c:	1007a940 	.word	0x1007a940
 23ff020:	1007aebc 	.word	0x1007aebc

023ff024 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff024:	4770      	bx	lr

023ff026 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff026:	7441      	strb	r1, [r0, #17]
}
 23ff028:	4770      	bx	lr

023ff02a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff02a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff02c:	7c00      	ldrb	r0, [r0, #16]
 23ff02e:	f7fd fd31 	bl	23fca94 <hal_usart_available_data_for_write>
}
 23ff032:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff036:	bd08      	pop	{r3, pc}

023ff038 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff038:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff03a:	7c00      	ldrb	r0, [r0, #16]
 23ff03c:	f7fd fce4 	bl	23fca08 <hal_usart_available>
}
 23ff040:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff044:	bd08      	pop	{r3, pc}

023ff046 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff046:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff048:	7c00      	ldrb	r0, [r0, #16]
 23ff04a:	f7fd fcf9 	bl	23fca40 <hal_usart_peek>
}
 23ff04e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff052:	bd08      	pop	{r3, pc}

023ff054 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff054:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff056:	7c00      	ldrb	r0, [r0, #16]
 23ff058:	f7fd fce4 	bl	23fca24 <hal_usart_read>
}
 23ff05c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff060:	bd08      	pop	{r3, pc}

023ff062 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff062:	7c00      	ldrb	r0, [r0, #16]
 23ff064:	f7fd bcfa 	b.w	23fca5c <hal_usart_flush>

023ff068 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff068:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff06a:	7c45      	ldrb	r5, [r0, #17]
{
 23ff06c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff06e:	b12d      	cbz	r5, 23ff07c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff070:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff072:	b003      	add	sp, #12
 23ff074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff078:	f7fd bcb8 	b.w	23fc9ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff07c:	7c00      	ldrb	r0, [r0, #16]
 23ff07e:	9101      	str	r1, [sp, #4]
 23ff080:	f7fd fd08 	bl	23fca94 <hal_usart_available_data_for_write>
 23ff084:	2800      	cmp	r0, #0
 23ff086:	9901      	ldr	r1, [sp, #4]
 23ff088:	dcf2      	bgt.n	23ff070 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff08a:	4628      	mov	r0, r5
 23ff08c:	b003      	add	sp, #12
 23ff08e:	bd30      	pop	{r4, r5, pc}

023ff090 <_ZN11USARTSerialD0Ev>:
 23ff090:	b510      	push	{r4, lr}
 23ff092:	4604      	mov	r4, r0
 23ff094:	2114      	movs	r1, #20
 23ff096:	f7fc fc1c 	bl	23fb8d2 <_ZdlPvj>
 23ff09a:	4620      	mov	r0, r4
 23ff09c:	bd10      	pop	{r4, pc}
	...

023ff0a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff0a0:	b510      	push	{r4, lr}
 23ff0a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff0a6:	4604      	mov	r4, r0
 23ff0a8:	4608      	mov	r0, r1
 23ff0aa:	4611      	mov	r1, r2
 23ff0ac:	2200      	movs	r2, #0
 23ff0ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff0b2:	4b04      	ldr	r3, [pc, #16]	; (23ff0c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff0b4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff0b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff0b8:	2301      	movs	r3, #1
 23ff0ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff0bc:	f7fd fd06 	bl	23fcacc <hal_usart_init_ex>
}
 23ff0c0:	4620      	mov	r0, r4
 23ff0c2:	bd10      	pop	{r4, pc}
 23ff0c4:	023ffdd0 	.word	0x023ffdd0

023ff0c8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23ff0c8:	2300      	movs	r3, #0
 23ff0ca:	7c00      	ldrb	r0, [r0, #16]
 23ff0cc:	f7fd bcf0 	b.w	23fcab0 <hal_usart_begin_config>

023ff0d0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23ff0d0:	2200      	movs	r2, #0
 23ff0d2:	f7ff bff9 	b.w	23ff0c8 <_ZN11USARTSerial5beginEmm>

023ff0d6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23ff0d6:	7c00      	ldrb	r0, [r0, #16]
 23ff0d8:	f7fd bc7a 	b.w	23fc9d0 <hal_usart_end>

023ff0dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff0dc:	7c00      	ldrb	r0, [r0, #16]
 23ff0de:	f7fd bccb 	b.w	23fca78 <hal_usart_is_enabled>

023ff0e2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff0e2:	7441      	strb	r1, [r0, #17]
}
 23ff0e4:	4770      	bx	lr

023ff0e6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff0e6:	4770      	bx	lr

023ff0e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff0e8:	4770      	bx	lr

023ff0ea <_ZN9USBSerial4readEv>:
{
 23ff0ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff0ec:	2100      	movs	r1, #0
 23ff0ee:	7c00      	ldrb	r0, [r0, #16]
 23ff0f0:	f7fd fd40 	bl	23fcb74 <HAL_USB_USART_Receive_Data>
}
 23ff0f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff0f8:	bd08      	pop	{r3, pc}

023ff0fa <_ZN9USBSerial4peekEv>:
{
 23ff0fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff0fc:	2101      	movs	r1, #1
 23ff0fe:	7c00      	ldrb	r0, [r0, #16]
 23ff100:	f7fd fd38 	bl	23fcb74 <HAL_USB_USART_Receive_Data>
}
 23ff104:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff108:	bd08      	pop	{r3, pc}

023ff10a <_ZN9USBSerial17availableForWriteEv>:
{
 23ff10a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff10c:	7c00      	ldrb	r0, [r0, #16]
 23ff10e:	f7fd fd23 	bl	23fcb58 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff112:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff116:	bd08      	pop	{r3, pc}

023ff118 <_ZN9USBSerial9availableEv>:
{
 23ff118:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff11a:	7c00      	ldrb	r0, [r0, #16]
 23ff11c:	f7fd fd0e 	bl	23fcb3c <HAL_USB_USART_Available_Data>
}
 23ff120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff124:	bd08      	pop	{r3, pc}

023ff126 <_ZN9USBSerial5writeEh>:
{
 23ff126:	b513      	push	{r0, r1, r4, lr}
 23ff128:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff12a:	7c00      	ldrb	r0, [r0, #16]
{
 23ff12c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff12e:	f7fd fd13 	bl	23fcb58 <HAL_USB_USART_Available_Data_For_Write>
 23ff132:	2800      	cmp	r0, #0
 23ff134:	9901      	ldr	r1, [sp, #4]
 23ff136:	dc01      	bgt.n	23ff13c <_ZN9USBSerial5writeEh+0x16>
 23ff138:	7c60      	ldrb	r0, [r4, #17]
 23ff13a:	b120      	cbz	r0, 23ff146 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff13c:	7c20      	ldrb	r0, [r4, #16]
 23ff13e:	f7fd fd27 	bl	23fcb90 <HAL_USB_USART_Send_Data>
 23ff142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff146:	b002      	add	sp, #8
 23ff148:	bd10      	pop	{r4, pc}

023ff14a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff14a:	7c00      	ldrb	r0, [r0, #16]
 23ff14c:	f7fd bd2e 	b.w	23fcbac <HAL_USB_USART_Flush_Data>

023ff150 <_ZN9USBSerialD0Ev>:
 23ff150:	b510      	push	{r4, lr}
 23ff152:	4604      	mov	r4, r0
 23ff154:	2114      	movs	r1, #20
 23ff156:	f7fc fbbc 	bl	23fb8d2 <_ZdlPvj>
 23ff15a:	4620      	mov	r0, r4
 23ff15c:	bd10      	pop	{r4, pc}
	...

023ff160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff160:	b510      	push	{r4, lr}
 23ff162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff166:	4604      	mov	r4, r0
 23ff168:	4608      	mov	r0, r1
 23ff16a:	2100      	movs	r1, #0
 23ff16c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff170:	4b04      	ldr	r3, [pc, #16]	; (23ff184 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff172:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff174:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff176:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff178:	4611      	mov	r1, r2
  _blocking = true;
 23ff17a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff17c:	f7fd fcb4 	bl	23fcae8 <HAL_USB_USART_Init>
}
 23ff180:	4620      	mov	r0, r4
 23ff182:	bd10      	pop	{r4, pc}
 23ff184:	023ffe00 	.word	0x023ffe00

023ff188 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff188:	2200      	movs	r2, #0
 23ff18a:	7c00      	ldrb	r0, [r0, #16]
 23ff18c:	f7fd bcba 	b.w	23fcb04 <HAL_USB_USART_Begin>

023ff190 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23ff190:	7c00      	ldrb	r0, [r0, #16]
 23ff192:	f7fd bcc5 	b.w	23fcb20 <HAL_USB_USART_End>

023ff196 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23ff196:	7c00      	ldrb	r0, [r0, #16]
 23ff198:	f7fd bd16 	b.w	23fcbc8 <HAL_USB_USART_Is_Connected>

023ff19c <_Z19acquireSerialBufferv>:
{
 23ff19c:	b510      	push	{r4, lr}
 23ff19e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff1a0:	2214      	movs	r2, #20
 23ff1a2:	2100      	movs	r1, #0
 23ff1a4:	f000 fab3 	bl	23ff70e <memset>
}
 23ff1a8:	4620      	mov	r0, r4
 23ff1aa:	bd10      	pop	{r4, pc}

023ff1ac <_Z16_fetch_usbserialv>:
{
 23ff1ac:	b510      	push	{r4, lr}
 23ff1ae:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff1b0:	a803      	add	r0, sp, #12
 23ff1b2:	f7ff fff3 	bl	23ff19c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff1b6:	4c0c      	ldr	r4, [pc, #48]	; (23ff1e8 <_Z16_fetch_usbserialv+0x3c>)
 23ff1b8:	e8d4 1f8f 	ldab	r1, [r4]
 23ff1bc:	f011 0101 	ands.w	r1, r1, #1
 23ff1c0:	d10f      	bne.n	23ff1e2 <_Z16_fetch_usbserialv+0x36>
 23ff1c2:	4620      	mov	r0, r4
 23ff1c4:	9101      	str	r1, [sp, #4]
 23ff1c6:	f7fc fb93 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff1ca:	9901      	ldr	r1, [sp, #4]
 23ff1cc:	b148      	cbz	r0, 23ff1e2 <_Z16_fetch_usbserialv+0x36>
 23ff1ce:	aa03      	add	r2, sp, #12
 23ff1d0:	4806      	ldr	r0, [pc, #24]	; (23ff1ec <_Z16_fetch_usbserialv+0x40>)
 23ff1d2:	f7ff ffc5 	bl	23ff160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff1d6:	4620      	mov	r0, r4
 23ff1d8:	f7fc fb8f 	bl	23fb8fa <__cxa_guard_release>
 23ff1dc:	4804      	ldr	r0, [pc, #16]	; (23ff1f0 <_Z16_fetch_usbserialv+0x44>)
 23ff1de:	f000 fa5c 	bl	23ff69a <atexit>
	return _usbserial;
}
 23ff1e2:	4802      	ldr	r0, [pc, #8]	; (23ff1ec <_Z16_fetch_usbserialv+0x40>)
 23ff1e4:	b008      	add	sp, #32
 23ff1e6:	bd10      	pop	{r4, pc}
 23ff1e8:	1007aec0 	.word	0x1007aec0
 23ff1ec:	1007aec4 	.word	0x1007aec4
 23ff1f0:	023ff0e7 	.word	0x023ff0e7

023ff1f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff1f4:	2200      	movs	r2, #0
 23ff1f6:	6840      	ldr	r0, [r0, #4]
 23ff1f8:	4611      	mov	r1, r2
 23ff1fa:	f7fd be0b 	b.w	23fce14 <network_ready>

023ff1fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff1fe:	2200      	movs	r2, #0
 23ff200:	6840      	ldr	r0, [r0, #4]
 23ff202:	4611      	mov	r1, r2
 23ff204:	f7fd be3e 	b.w	23fce84 <network_listening>

023ff208 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff208:	2200      	movs	r2, #0
 23ff20a:	6840      	ldr	r0, [r0, #4]
 23ff20c:	4611      	mov	r1, r2
 23ff20e:	f7fd be55 	b.w	23fcebc <network_get_listen_timeout>

023ff212 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff212:	2200      	movs	r2, #0
 23ff214:	6840      	ldr	r0, [r0, #4]
 23ff216:	f7fd be43 	b.w	23fcea0 <network_set_listen_timeout>

023ff21a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff21a:	2200      	movs	r2, #0
 23ff21c:	6840      	ldr	r0, [r0, #4]
 23ff21e:	f081 0101 	eor.w	r1, r1, #1
 23ff222:	f7fd be21 	b.w	23fce68 <network_listen>

023ff226 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff226:	2300      	movs	r3, #0
 23ff228:	6840      	ldr	r0, [r0, #4]
 23ff22a:	461a      	mov	r2, r3
 23ff22c:	4619      	mov	r1, r3
 23ff22e:	f7fd be0d 	b.w	23fce4c <network_off>

023ff232 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff232:	2300      	movs	r3, #0
 23ff234:	6840      	ldr	r0, [r0, #4]
 23ff236:	461a      	mov	r2, r3
 23ff238:	4619      	mov	r1, r3
 23ff23a:	f7fd bdf9 	b.w	23fce30 <network_on>

023ff23e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff23e:	2200      	movs	r2, #0
 23ff240:	6840      	ldr	r0, [r0, #4]
 23ff242:	4611      	mov	r1, r2
 23ff244:	f7fd bdca 	b.w	23fcddc <network_connecting>

023ff248 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff248:	2200      	movs	r2, #0
 23ff24a:	2102      	movs	r1, #2
 23ff24c:	6840      	ldr	r0, [r0, #4]
 23ff24e:	f7fd bdd3 	b.w	23fcdf8 <network_disconnect>

023ff252 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff252:	2300      	movs	r3, #0
 23ff254:	6840      	ldr	r0, [r0, #4]
 23ff256:	461a      	mov	r2, r3
 23ff258:	f7fd bdb2 	b.w	23fcdc0 <network_connect>

023ff25c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff25c:	2204      	movs	r2, #4
 23ff25e:	4b02      	ldr	r3, [pc, #8]	; (23ff268 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff260:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff262:	4a02      	ldr	r2, [pc, #8]	; (23ff26c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff264:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff266:	4770      	bx	lr
 23ff268:	1007aed8 	.word	0x1007aed8
 23ff26c:	023ffe30 	.word	0x023ffe30

023ff270 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff270:	4b01      	ldr	r3, [pc, #4]	; (23ff278 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff272:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff274:	4770      	bx	lr
 23ff276:	bf00      	nop
 23ff278:	1007a944 	.word	0x1007a944

023ff27c <serialEventRun>:
{
 23ff27c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff27e:	4b0f      	ldr	r3, [pc, #60]	; (23ff2bc <serialEventRun+0x40>)
 23ff280:	b143      	cbz	r3, 23ff294 <serialEventRun+0x18>
 23ff282:	f7ff ff93 	bl	23ff1ac <_Z16_fetch_usbserialv>
 23ff286:	6803      	ldr	r3, [r0, #0]
 23ff288:	691b      	ldr	r3, [r3, #16]
 23ff28a:	4798      	blx	r3
 23ff28c:	2800      	cmp	r0, #0
 23ff28e:	dd01      	ble.n	23ff294 <serialEventRun+0x18>
        serialEvent();
 23ff290:	e000      	b.n	23ff294 <serialEventRun+0x18>
 23ff292:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff294:	4b0a      	ldr	r3, [pc, #40]	; (23ff2c0 <serialEventRun+0x44>)
 23ff296:	b143      	cbz	r3, 23ff2aa <serialEventRun+0x2e>
 23ff298:	f000 f968 	bl	23ff56c <_Z22__fetch_global_Serial1v>
 23ff29c:	6803      	ldr	r3, [r0, #0]
 23ff29e:	691b      	ldr	r3, [r3, #16]
 23ff2a0:	4798      	blx	r3
 23ff2a2:	2800      	cmp	r0, #0
 23ff2a4:	dd01      	ble.n	23ff2aa <serialEventRun+0x2e>
        serialEvent1();
 23ff2a6:	e000      	b.n	23ff2aa <serialEventRun+0x2e>
 23ff2a8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff2aa:	4b06      	ldr	r3, [pc, #24]	; (23ff2c4 <serialEventRun+0x48>)
 23ff2ac:	b10b      	cbz	r3, 23ff2b2 <serialEventRun+0x36>
 23ff2ae:	f000 f9a3 	bl	23ff5f8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff2b2:	4b05      	ldr	r3, [pc, #20]	; (23ff2c8 <serialEventRun+0x4c>)
 23ff2b4:	b10b      	cbz	r3, 23ff2ba <serialEventRun+0x3e>
 23ff2b6:	f000 f9d5 	bl	23ff664 <_Z15serialEventRun3v>
}
 23ff2ba:	bd08      	pop	{r3, pc}
	...

023ff2cc <_post_loop>:
{
 23ff2cc:	b508      	push	{r3, lr}
	serialEventRun();
 23ff2ce:	f7ff ffd5 	bl	23ff27c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff2d2:	f7fd fa3b 	bl	23fc74c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff2d6:	4b01      	ldr	r3, [pc, #4]	; (23ff2dc <_post_loop+0x10>)
 23ff2d8:	6018      	str	r0, [r3, #0]
}
 23ff2da:	bd08      	pop	{r3, pc}
 23ff2dc:	1007aee8 	.word	0x1007aee8

023ff2e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff2e0:	4805      	ldr	r0, [pc, #20]	; (23ff2f8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff2e2:	4a06      	ldr	r2, [pc, #24]	; (23ff2fc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff2e4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff2e6:	1a12      	subs	r2, r2, r0
 23ff2e8:	4905      	ldr	r1, [pc, #20]	; (23ff300 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff2ea:	f000 f9e9 	bl	23ff6c0 <memcpy>
    __backup_sram_signature = signature;
 23ff2ee:	4b05      	ldr	r3, [pc, #20]	; (23ff304 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff2f0:	4a05      	ldr	r2, [pc, #20]	; (23ff308 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff2f2:	601a      	str	r2, [r3, #0]
}
 23ff2f4:	bd08      	pop	{r3, pc}
 23ff2f6:	bf00      	nop
 23ff2f8:	1007b400 	.word	0x1007b400
 23ff2fc:	1007b404 	.word	0x1007b404
 23ff300:	085ff0d4 	.word	0x085ff0d4
 23ff304:	1007b400 	.word	0x1007b400
 23ff308:	9a271c1e 	.word	0x9a271c1e

023ff30c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff30c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff30e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff310:	461a      	mov	r2, r3
 23ff312:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff316:	9300      	str	r3, [sp, #0]
 23ff318:	f7fd fcf0 	bl	23fccfc <system_ctrl_set_result>
}
 23ff31c:	b003      	add	sp, #12
 23ff31e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff324 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff324:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff326:	8843      	ldrh	r3, [r0, #2]
 23ff328:	2b0a      	cmp	r3, #10
 23ff32a:	d008      	beq.n	23ff33e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff32c:	2b50      	cmp	r3, #80	; 0x50
 23ff32e:	d10b      	bne.n	23ff348 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff330:	4b09      	ldr	r3, [pc, #36]	; (23ff358 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff332:	681b      	ldr	r3, [r3, #0]
 23ff334:	b14b      	cbz	r3, 23ff34a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff336:	b003      	add	sp, #12
 23ff338:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff33c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff33e:	f7ff ffe5 	bl	23ff30c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff342:	b003      	add	sp, #12
 23ff344:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff348:	2300      	movs	r3, #0
 23ff34a:	461a      	mov	r2, r3
 23ff34c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff350:	9300      	str	r3, [sp, #0]
 23ff352:	f7fd fcd3 	bl	23fccfc <system_ctrl_set_result>
}
 23ff356:	e7f4      	b.n	23ff342 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff358:	1007aee4 	.word	0x1007aee4

023ff35c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff35c:	2100      	movs	r1, #0
{
 23ff35e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff360:	4811      	ldr	r0, [pc, #68]	; (23ff3a8 <module_user_init_hook+0x4c>)
 23ff362:	f7fd fe45 	bl	23fcff0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff366:	4b11      	ldr	r3, [pc, #68]	; (23ff3ac <module_user_init_hook+0x50>)
 23ff368:	681a      	ldr	r2, [r3, #0]
 23ff36a:	4b11      	ldr	r3, [pc, #68]	; (23ff3b0 <module_user_init_hook+0x54>)
 23ff36c:	429a      	cmp	r2, r3
 23ff36e:	bf0c      	ite	eq
 23ff370:	2201      	moveq	r2, #1
 23ff372:	2200      	movne	r2, #0
 23ff374:	4b0f      	ldr	r3, [pc, #60]	; (23ff3b4 <module_user_init_hook+0x58>)
 23ff376:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff378:	d001      	beq.n	23ff37e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff37a:	f7ff ffb1 	bl	23ff2e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff37e:	f7fd f9c9 	bl	23fc714 <HAL_RNG_GetRandomNumber>
 23ff382:	4604      	mov	r4, r0
    srand(seed);
 23ff384:	f000 f9cc 	bl	23ff720 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff388:	4b0b      	ldr	r3, [pc, #44]	; (23ff3b8 <module_user_init_hook+0x5c>)
 23ff38a:	b113      	cbz	r3, 23ff392 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff38c:	4620      	mov	r0, r4
 23ff38e:	e000      	b.n	23ff392 <module_user_init_hook+0x36>
 23ff390:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff392:	2100      	movs	r1, #0
 23ff394:	4808      	ldr	r0, [pc, #32]	; (23ff3b8 <module_user_init_hook+0x5c>)
 23ff396:	f7fd fd05 	bl	23fcda4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff39e:	2100      	movs	r1, #0
 23ff3a0:	4806      	ldr	r0, [pc, #24]	; (23ff3bc <module_user_init_hook+0x60>)
 23ff3a2:	f7fd bc9d 	b.w	23fcce0 <system_ctrl_set_app_request_handler>
 23ff3a6:	bf00      	nop
 23ff3a8:	023ff271 	.word	0x023ff271
 23ff3ac:	1007b400 	.word	0x1007b400
 23ff3b0:	9a271c1e 	.word	0x9a271c1e
 23ff3b4:	1007aee0 	.word	0x1007aee0
 23ff3b8:	00000000 	.word	0x00000000
 23ff3bc:	023ff325 	.word	0x023ff325

023ff3c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff3c0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff3c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff3c4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff3c6:	d902      	bls.n	23ff3ce <pinAvailable+0xe>
    return false;
 23ff3c8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff3ca:	b003      	add	sp, #12
 23ff3cc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff3ce:	f1a0 030f 	sub.w	r3, r0, #15
 23ff3d2:	2b02      	cmp	r3, #2
 23ff3d4:	d90b      	bls.n	23ff3ee <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff3d6:	2801      	cmp	r0, #1
 23ff3d8:	d821      	bhi.n	23ff41e <pinAvailable+0x5e>
 23ff3da:	f000 f873 	bl	23ff4c4 <_Z19__fetch_global_Wirev>
 23ff3de:	2100      	movs	r1, #0
 23ff3e0:	7c00      	ldrb	r0, [r0, #16]
 23ff3e2:	f7fd fa85 	bl	23fc8f0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff3e6:	f080 0001 	eor.w	r0, r0, #1
 23ff3ea:	b2c0      	uxtb	r0, r0
 23ff3ec:	e7ed      	b.n	23ff3ca <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff3ee:	4d11      	ldr	r5, [pc, #68]	; (23ff434 <pinAvailable+0x74>)
 23ff3f0:	e8d5 1f8f 	ldab	r1, [r5]
 23ff3f4:	f011 0101 	ands.w	r1, r1, #1
 23ff3f8:	d10b      	bne.n	23ff412 <pinAvailable+0x52>
 23ff3fa:	4628      	mov	r0, r5
 23ff3fc:	9101      	str	r1, [sp, #4]
 23ff3fe:	f7fc fa77 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff402:	9901      	ldr	r1, [sp, #4]
 23ff404:	b128      	cbz	r0, 23ff412 <pinAvailable+0x52>
 23ff406:	480c      	ldr	r0, [pc, #48]	; (23ff438 <pinAvailable+0x78>)
 23ff408:	f7ff fd40 	bl	23fee8c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff40c:	4628      	mov	r0, r5
 23ff40e:	f7fc fa74 	bl	23fb8fa <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff412:	4b09      	ldr	r3, [pc, #36]	; (23ff438 <pinAvailable+0x78>)
 23ff414:	7818      	ldrb	r0, [r3, #0]
 23ff416:	f7fd facd 	bl	23fc9b4 <hal_spi_is_enabled>
 23ff41a:	2800      	cmp	r0, #0
 23ff41c:	d1d4      	bne.n	23ff3c8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff41e:	3c08      	subs	r4, #8
 23ff420:	2c01      	cmp	r4, #1
 23ff422:	d805      	bhi.n	23ff430 <pinAvailable+0x70>
 23ff424:	f000 f8a2 	bl	23ff56c <_Z22__fetch_global_Serial1v>
 23ff428:	7c00      	ldrb	r0, [r0, #16]
 23ff42a:	f7fd fb25 	bl	23fca78 <hal_usart_is_enabled>
 23ff42e:	e7da      	b.n	23ff3e6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff430:	2001      	movs	r0, #1
 23ff432:	e7ca      	b.n	23ff3ca <pinAvailable+0xa>
 23ff434:	1007ae44 	.word	0x1007ae44
 23ff438:	1007ae48 	.word	0x1007ae48

023ff43c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff43c:	281b      	cmp	r0, #27
{
 23ff43e:	b538      	push	{r3, r4, r5, lr}
 23ff440:	4604      	mov	r4, r0
 23ff442:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff444:	d80a      	bhi.n	23ff45c <pinMode+0x20>
 23ff446:	29ff      	cmp	r1, #255	; 0xff
 23ff448:	d008      	beq.n	23ff45c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff44a:	f7ff ffb9 	bl	23ff3c0 <pinAvailable>
 23ff44e:	b128      	cbz	r0, 23ff45c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff450:	4629      	mov	r1, r5
 23ff452:	4620      	mov	r0, r4
}
 23ff454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff458:	f7fd b9be 	b.w	23fc7d8 <hal_gpio_mode>
}
 23ff45c:	bd38      	pop	{r3, r4, r5, pc}
	...

023ff460 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23ff460:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23ff462:	4c08      	ldr	r4, [pc, #32]	; (23ff484 <_Z21__fetch_global_EEPROMv+0x24>)
 23ff464:	e8d4 3f8f 	ldab	r3, [r4]
 23ff468:	07db      	lsls	r3, r3, #31
 23ff46a:	d408      	bmi.n	23ff47e <_Z21__fetch_global_EEPROMv+0x1e>
 23ff46c:	4620      	mov	r0, r4
 23ff46e:	f7fc fa3f 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff472:	b120      	cbz	r0, 23ff47e <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23ff474:	f7fd f978 	bl	23fc768 <HAL_EEPROM_Init>
 23ff478:	4620      	mov	r0, r4
 23ff47a:	f7fc fa3e 	bl	23fb8fa <__cxa_guard_release>
	return eeprom;
}
 23ff47e:	4802      	ldr	r0, [pc, #8]	; (23ff488 <_Z21__fetch_global_EEPROMv+0x28>)
 23ff480:	bd10      	pop	{r4, pc}
 23ff482:	bf00      	nop
 23ff484:	1007aeec 	.word	0x1007aeec
 23ff488:	1007aef0 	.word	0x1007aef0

023ff48c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff48c:	4770      	bx	lr
	...

023ff490 <_Z17acquireWireBufferv>:
{
 23ff490:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff492:	4b0a      	ldr	r3, [pc, #40]	; (23ff4bc <_Z17acquireWireBufferv+0x2c>)
{
 23ff494:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff496:	6003      	str	r3, [r0, #0]
 23ff498:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff49a:	4909      	ldr	r1, [pc, #36]	; (23ff4c0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff49c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff49e:	2020      	movs	r0, #32
 23ff4a0:	f000 f8f6 	bl	23ff690 <_ZnajRKSt9nothrow_t>
	};
 23ff4a4:	2520      	movs	r5, #32
 23ff4a6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4a8:	4905      	ldr	r1, [pc, #20]	; (23ff4c0 <_Z17acquireWireBufferv+0x30>)
 23ff4aa:	4628      	mov	r0, r5
	};
 23ff4ac:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4ae:	f000 f8ef 	bl	23ff690 <_ZnajRKSt9nothrow_t>
	};
 23ff4b2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff4b6:	4620      	mov	r0, r4
 23ff4b8:	bd38      	pop	{r3, r4, r5, pc}
 23ff4ba:	bf00      	nop
 23ff4bc:	00010018 	.word	0x00010018
 23ff4c0:	023ffe64 	.word	0x023ffe64

023ff4c4 <_Z19__fetch_global_Wirev>:
{
 23ff4c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4c6:	4d0e      	ldr	r5, [pc, #56]	; (23ff500 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff4c8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4ca:	e8d5 1f8f 	ldab	r1, [r5]
 23ff4ce:	f011 0401 	ands.w	r4, r1, #1
 23ff4d2:	d111      	bne.n	23ff4f8 <_Z19__fetch_global_Wirev+0x34>
 23ff4d4:	4628      	mov	r0, r5
 23ff4d6:	f7fc fa0b 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff4da:	b168      	cbz	r0, 23ff4f8 <_Z19__fetch_global_Wirev+0x34>
 23ff4dc:	4668      	mov	r0, sp
 23ff4de:	f7ff ffd7 	bl	23ff490 <_Z17acquireWireBufferv>
 23ff4e2:	466a      	mov	r2, sp
 23ff4e4:	4621      	mov	r1, r4
 23ff4e6:	4807      	ldr	r0, [pc, #28]	; (23ff504 <_Z19__fetch_global_Wirev+0x40>)
 23ff4e8:	f7fe f91e 	bl	23fd728 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff4ec:	4628      	mov	r0, r5
 23ff4ee:	f7fc fa04 	bl	23fb8fa <__cxa_guard_release>
 23ff4f2:	4805      	ldr	r0, [pc, #20]	; (23ff508 <_Z19__fetch_global_Wirev+0x44>)
 23ff4f4:	f000 f8d1 	bl	23ff69a <atexit>
	return wire;
}
 23ff4f8:	4802      	ldr	r0, [pc, #8]	; (23ff504 <_Z19__fetch_global_Wirev+0x40>)
 23ff4fa:	b007      	add	sp, #28
 23ff4fc:	bd30      	pop	{r4, r5, pc}
 23ff4fe:	bf00      	nop
 23ff500:	1007aef4 	.word	0x1007aef4
 23ff504:	1007aef8 	.word	0x1007aef8
 23ff508:	023ff48d 	.word	0x023ff48d

023ff50c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff50c:	4770      	bx	lr
	...

023ff510 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff510:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff512:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff514:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff516:	462a      	mov	r2, r5
 23ff518:	2100      	movs	r1, #0
 23ff51a:	f000 f8f8 	bl	23ff70e <memset>
 23ff51e:	8025      	strh	r5, [r4, #0]
 23ff520:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff522:	4907      	ldr	r1, [pc, #28]	; (23ff540 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff524:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff526:	8125      	strh	r5, [r4, #8]
 23ff528:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff52a:	f000 f8b1 	bl	23ff690 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff52e:	4904      	ldr	r1, [pc, #16]	; (23ff540 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff530:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff532:	4628      	mov	r0, r5
 23ff534:	f000 f8ac 	bl	23ff690 <_ZnajRKSt9nothrow_t>
    };
 23ff538:	60e0      	str	r0, [r4, #12]
}
 23ff53a:	4620      	mov	r0, r4
 23ff53c:	bd38      	pop	{r3, r4, r5, pc}
 23ff53e:	bf00      	nop
 23ff540:	023ffe64 	.word	0x023ffe64

023ff544 <__tcf_2>:
 23ff544:	4770      	bx	lr

023ff546 <__tcf_1>:
 23ff546:	4770      	bx	lr

023ff548 <_Z20acquireSerial1Bufferv>:
{
 23ff548:	b510      	push	{r4, lr}
 23ff54a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff54c:	f7ff ffe0 	bl	23ff510 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff550:	4620      	mov	r0, r4
 23ff552:	bd10      	pop	{r4, pc}

023ff554 <_Z20acquireSerial2Bufferv>:
 23ff554:	b510      	push	{r4, lr}
 23ff556:	4604      	mov	r4, r0
 23ff558:	f7ff ffda 	bl	23ff510 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff55c:	4620      	mov	r0, r4
 23ff55e:	bd10      	pop	{r4, pc}

023ff560 <_Z20acquireSerial3Bufferv>:
 23ff560:	b510      	push	{r4, lr}
 23ff562:	4604      	mov	r4, r0
 23ff564:	f7ff ffd4 	bl	23ff510 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff568:	4620      	mov	r0, r4
 23ff56a:	bd10      	pop	{r4, pc}

023ff56c <_Z22__fetch_global_Serial1v>:
{
 23ff56c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff56e:	4d0e      	ldr	r5, [pc, #56]	; (23ff5a8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff570:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff572:	e8d5 1f8f 	ldab	r1, [r5]
 23ff576:	f011 0401 	ands.w	r4, r1, #1
 23ff57a:	d111      	bne.n	23ff5a0 <_Z22__fetch_global_Serial1v+0x34>
 23ff57c:	4628      	mov	r0, r5
 23ff57e:	f7fc f9b7 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff582:	b168      	cbz	r0, 23ff5a0 <_Z22__fetch_global_Serial1v+0x34>
 23ff584:	a801      	add	r0, sp, #4
 23ff586:	f7ff ffdf 	bl	23ff548 <_Z20acquireSerial1Bufferv>
 23ff58a:	4621      	mov	r1, r4
 23ff58c:	aa01      	add	r2, sp, #4
 23ff58e:	4807      	ldr	r0, [pc, #28]	; (23ff5ac <_Z22__fetch_global_Serial1v+0x40>)
 23ff590:	f7ff fd86 	bl	23ff0a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff594:	4628      	mov	r0, r5
 23ff596:	f7fc f9b0 	bl	23fb8fa <__cxa_guard_release>
 23ff59a:	4805      	ldr	r0, [pc, #20]	; (23ff5b0 <_Z22__fetch_global_Serial1v+0x44>)
 23ff59c:	f000 f87d 	bl	23ff69a <atexit>
    return serial1;
}
 23ff5a0:	4802      	ldr	r0, [pc, #8]	; (23ff5ac <_Z22__fetch_global_Serial1v+0x40>)
 23ff5a2:	b007      	add	sp, #28
 23ff5a4:	bd30      	pop	{r4, r5, pc}
 23ff5a6:	bf00      	nop
 23ff5a8:	1007af0c 	.word	0x1007af0c
 23ff5ac:	1007af18 	.word	0x1007af18
 23ff5b0:	023ff50d 	.word	0x023ff50d

023ff5b4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff5b4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff5b6:	4c0d      	ldr	r4, [pc, #52]	; (23ff5ec <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff5b8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff5ba:	e8d4 3f8f 	ldab	r3, [r4]
 23ff5be:	07db      	lsls	r3, r3, #31
 23ff5c0:	d411      	bmi.n	23ff5e6 <_Z22__fetch_global_Serial2v+0x32>
 23ff5c2:	4620      	mov	r0, r4
 23ff5c4:	f7fc f994 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff5c8:	b168      	cbz	r0, 23ff5e6 <_Z22__fetch_global_Serial2v+0x32>
 23ff5ca:	a801      	add	r0, sp, #4
 23ff5cc:	f7ff ffc2 	bl	23ff554 <_Z20acquireSerial2Bufferv>
 23ff5d0:	2101      	movs	r1, #1
 23ff5d2:	aa01      	add	r2, sp, #4
 23ff5d4:	4806      	ldr	r0, [pc, #24]	; (23ff5f0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff5d6:	f7ff fd63 	bl	23ff0a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff5da:	4620      	mov	r0, r4
 23ff5dc:	f7fc f98d 	bl	23fb8fa <__cxa_guard_release>
 23ff5e0:	4804      	ldr	r0, [pc, #16]	; (23ff5f4 <_Z22__fetch_global_Serial2v+0x40>)
 23ff5e2:	f000 f85a 	bl	23ff69a <atexit>
	return serial2;
}
 23ff5e6:	4802      	ldr	r0, [pc, #8]	; (23ff5f0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff5e8:	b006      	add	sp, #24
 23ff5ea:	bd10      	pop	{r4, pc}
 23ff5ec:	1007af10 	.word	0x1007af10
 23ff5f0:	1007af2c 	.word	0x1007af2c
 23ff5f4:	023ff547 	.word	0x023ff547

023ff5f8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff5f8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff5fa:	f7ff ffdb 	bl	23ff5b4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff5fe:	4b07      	ldr	r3, [pc, #28]	; (23ff61c <_Z15serialEventRun2v+0x24>)
 23ff600:	4604      	mov	r4, r0
 23ff602:	b153      	cbz	r3, 23ff61a <_Z15serialEventRun2v+0x22>
 23ff604:	f7ff fd6a 	bl	23ff0dc <_ZN11USARTSerial9isEnabledEv>
 23ff608:	b138      	cbz	r0, 23ff61a <_Z15serialEventRun2v+0x22>
 23ff60a:	6823      	ldr	r3, [r4, #0]
 23ff60c:	4620      	mov	r0, r4
 23ff60e:	691b      	ldr	r3, [r3, #16]
 23ff610:	4798      	blx	r3
 23ff612:	2800      	cmp	r0, #0
 23ff614:	dd01      	ble.n	23ff61a <_Z15serialEventRun2v+0x22>
        handler();
 23ff616:	e000      	b.n	23ff61a <_Z15serialEventRun2v+0x22>
 23ff618:	bf00      	nop
}
 23ff61a:	bd10      	pop	{r4, pc}
 23ff61c:	00000000 	.word	0x00000000

023ff620 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff620:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff622:	4c0d      	ldr	r4, [pc, #52]	; (23ff658 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff624:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff626:	e8d4 3f8f 	ldab	r3, [r4]
 23ff62a:	07db      	lsls	r3, r3, #31
 23ff62c:	d411      	bmi.n	23ff652 <_Z22__fetch_global_Serial3v+0x32>
 23ff62e:	4620      	mov	r0, r4
 23ff630:	f7fc f95e 	bl	23fb8f0 <__cxa_guard_acquire>
 23ff634:	b168      	cbz	r0, 23ff652 <_Z22__fetch_global_Serial3v+0x32>
 23ff636:	a801      	add	r0, sp, #4
 23ff638:	f7ff ff92 	bl	23ff560 <_Z20acquireSerial3Bufferv>
 23ff63c:	2102      	movs	r1, #2
 23ff63e:	aa01      	add	r2, sp, #4
 23ff640:	4806      	ldr	r0, [pc, #24]	; (23ff65c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff642:	f7ff fd2d 	bl	23ff0a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff646:	4620      	mov	r0, r4
 23ff648:	f7fc f957 	bl	23fb8fa <__cxa_guard_release>
 23ff64c:	4804      	ldr	r0, [pc, #16]	; (23ff660 <_Z22__fetch_global_Serial3v+0x40>)
 23ff64e:	f000 f824 	bl	23ff69a <atexit>
	return serial3;
}
 23ff652:	4802      	ldr	r0, [pc, #8]	; (23ff65c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff654:	b006      	add	sp, #24
 23ff656:	bd10      	pop	{r4, pc}
 23ff658:	1007af14 	.word	0x1007af14
 23ff65c:	1007af40 	.word	0x1007af40
 23ff660:	023ff545 	.word	0x023ff545

023ff664 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff664:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff666:	f7ff ffdb 	bl	23ff620 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff66a:	4b07      	ldr	r3, [pc, #28]	; (23ff688 <_Z15serialEventRun3v+0x24>)
 23ff66c:	4604      	mov	r4, r0
 23ff66e:	b153      	cbz	r3, 23ff686 <_Z15serialEventRun3v+0x22>
 23ff670:	f7ff fd34 	bl	23ff0dc <_ZN11USARTSerial9isEnabledEv>
 23ff674:	b138      	cbz	r0, 23ff686 <_Z15serialEventRun3v+0x22>
 23ff676:	6823      	ldr	r3, [r4, #0]
 23ff678:	4620      	mov	r0, r4
 23ff67a:	691b      	ldr	r3, [r3, #16]
 23ff67c:	4798      	blx	r3
 23ff67e:	2800      	cmp	r0, #0
 23ff680:	dd01      	ble.n	23ff686 <_Z15serialEventRun3v+0x22>
        handler();
 23ff682:	e000      	b.n	23ff686 <_Z15serialEventRun3v+0x22>
 23ff684:	bf00      	nop
}
 23ff686:	bd10      	pop	{r4, pc}
 23ff688:	00000000 	.word	0x00000000

023ff68c <_ZnwjRKSt9nothrow_t>:
 23ff68c:	f7fc b91d 	b.w	23fb8ca <_Znwj>

023ff690 <_ZnajRKSt9nothrow_t>:
 23ff690:	f7fc b91d 	b.w	23fb8ce <_Znaj>

023ff694 <_ZSt25__throw_bad_function_callv>:
 23ff694:	b508      	push	{r3, lr}
 23ff696:	f7fd fc73 	bl	23fcf80 <abort>

023ff69a <atexit>:
 23ff69a:	2300      	movs	r3, #0
 23ff69c:	4601      	mov	r1, r0
 23ff69e:	461a      	mov	r2, r3
 23ff6a0:	4618      	mov	r0, r3
 23ff6a2:	f000 b95d 	b.w	23ff960 <__register_exitproc>

023ff6a6 <atol>:
 23ff6a6:	220a      	movs	r2, #10
 23ff6a8:	2100      	movs	r1, #0
 23ff6aa:	f000 b94f 	b.w	23ff94c <strtol>
	...

023ff6b0 <isprint>:
 23ff6b0:	4b02      	ldr	r3, [pc, #8]	; (23ff6bc <isprint+0xc>)
 23ff6b2:	4418      	add	r0, r3
 23ff6b4:	7840      	ldrb	r0, [r0, #1]
 23ff6b6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff6ba:	4770      	bx	lr
 23ff6bc:	023ffed5 	.word	0x023ffed5

023ff6c0 <memcpy>:
 23ff6c0:	440a      	add	r2, r1
 23ff6c2:	1e43      	subs	r3, r0, #1
 23ff6c4:	4291      	cmp	r1, r2
 23ff6c6:	d100      	bne.n	23ff6ca <memcpy+0xa>
 23ff6c8:	4770      	bx	lr
 23ff6ca:	b510      	push	{r4, lr}
 23ff6cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff6d0:	4291      	cmp	r1, r2
 23ff6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff6d6:	d1f9      	bne.n	23ff6cc <memcpy+0xc>
 23ff6d8:	bd10      	pop	{r4, pc}

023ff6da <memmove>:
 23ff6da:	4288      	cmp	r0, r1
 23ff6dc:	b510      	push	{r4, lr}
 23ff6de:	eb01 0402 	add.w	r4, r1, r2
 23ff6e2:	d902      	bls.n	23ff6ea <memmove+0x10>
 23ff6e4:	4284      	cmp	r4, r0
 23ff6e6:	4623      	mov	r3, r4
 23ff6e8:	d807      	bhi.n	23ff6fa <memmove+0x20>
 23ff6ea:	1e43      	subs	r3, r0, #1
 23ff6ec:	42a1      	cmp	r1, r4
 23ff6ee:	d008      	beq.n	23ff702 <memmove+0x28>
 23ff6f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff6f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff6f8:	e7f8      	b.n	23ff6ec <memmove+0x12>
 23ff6fa:	4402      	add	r2, r0
 23ff6fc:	4601      	mov	r1, r0
 23ff6fe:	428a      	cmp	r2, r1
 23ff700:	d100      	bne.n	23ff704 <memmove+0x2a>
 23ff702:	bd10      	pop	{r4, pc}
 23ff704:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff708:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff70c:	e7f7      	b.n	23ff6fe <memmove+0x24>

023ff70e <memset>:
 23ff70e:	4402      	add	r2, r0
 23ff710:	4603      	mov	r3, r0
 23ff712:	4293      	cmp	r3, r2
 23ff714:	d100      	bne.n	23ff718 <memset+0xa>
 23ff716:	4770      	bx	lr
 23ff718:	f803 1b01 	strb.w	r1, [r3], #1
 23ff71c:	e7f9      	b.n	23ff712 <memset+0x4>
	...

023ff720 <srand>:
 23ff720:	b538      	push	{r3, r4, r5, lr}
 23ff722:	4b10      	ldr	r3, [pc, #64]	; (23ff764 <srand+0x44>)
 23ff724:	4604      	mov	r4, r0
 23ff726:	681d      	ldr	r5, [r3, #0]
 23ff728:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff72a:	b9b3      	cbnz	r3, 23ff75a <srand+0x3a>
 23ff72c:	2018      	movs	r0, #24
 23ff72e:	f7fd fbef 	bl	23fcf10 <malloc>
 23ff732:	4602      	mov	r2, r0
 23ff734:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff736:	b920      	cbnz	r0, 23ff742 <srand+0x22>
 23ff738:	4b0b      	ldr	r3, [pc, #44]	; (23ff768 <srand+0x48>)
 23ff73a:	2142      	movs	r1, #66	; 0x42
 23ff73c:	480b      	ldr	r0, [pc, #44]	; (23ff76c <srand+0x4c>)
 23ff73e:	f7fd fc49 	bl	23fcfd4 <__assert_func>
 23ff742:	490b      	ldr	r1, [pc, #44]	; (23ff770 <srand+0x50>)
 23ff744:	4b0b      	ldr	r3, [pc, #44]	; (23ff774 <srand+0x54>)
 23ff746:	e9c0 1300 	strd	r1, r3, [r0]
 23ff74a:	4b0b      	ldr	r3, [pc, #44]	; (23ff778 <srand+0x58>)
 23ff74c:	2100      	movs	r1, #0
 23ff74e:	6083      	str	r3, [r0, #8]
 23ff750:	230b      	movs	r3, #11
 23ff752:	8183      	strh	r3, [r0, #12]
 23ff754:	2001      	movs	r0, #1
 23ff756:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff75a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff75c:	2200      	movs	r2, #0
 23ff75e:	611c      	str	r4, [r3, #16]
 23ff760:	615a      	str	r2, [r3, #20]
 23ff762:	bd38      	pop	{r3, r4, r5, pc}
 23ff764:	1007a944 	.word	0x1007a944
 23ff768:	023ffe65 	.word	0x023ffe65
 23ff76c:	023ffe7c 	.word	0x023ffe7c
 23ff770:	abcd330e 	.word	0xabcd330e
 23ff774:	e66d1234 	.word	0xe66d1234
 23ff778:	0005deec 	.word	0x0005deec

023ff77c <strchr>:
 23ff77c:	b2c9      	uxtb	r1, r1
 23ff77e:	4603      	mov	r3, r0
 23ff780:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff784:	b11a      	cbz	r2, 23ff78e <strchr+0x12>
 23ff786:	428a      	cmp	r2, r1
 23ff788:	d1f9      	bne.n	23ff77e <strchr+0x2>
 23ff78a:	4618      	mov	r0, r3
 23ff78c:	4770      	bx	lr
 23ff78e:	2900      	cmp	r1, #0
 23ff790:	bf18      	it	ne
 23ff792:	2300      	movne	r3, #0
 23ff794:	e7f9      	b.n	23ff78a <strchr+0xe>

023ff796 <strchrnul>:
 23ff796:	b510      	push	{r4, lr}
 23ff798:	4604      	mov	r4, r0
 23ff79a:	f7ff ffef 	bl	23ff77c <strchr>
 23ff79e:	b918      	cbnz	r0, 23ff7a8 <strchrnul+0x12>
 23ff7a0:	4620      	mov	r0, r4
 23ff7a2:	f7fc f86d 	bl	23fb880 <strlen>
 23ff7a6:	4420      	add	r0, r4
 23ff7a8:	bd10      	pop	{r4, pc}

023ff7aa <strcpy>:
 23ff7aa:	4603      	mov	r3, r0
 23ff7ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff7b0:	f803 2b01 	strb.w	r2, [r3], #1
 23ff7b4:	2a00      	cmp	r2, #0
 23ff7b6:	d1f9      	bne.n	23ff7ac <strcpy+0x2>
 23ff7b8:	4770      	bx	lr
	...

023ff7bc <strdup>:
 23ff7bc:	4b02      	ldr	r3, [pc, #8]	; (23ff7c8 <strdup+0xc>)
 23ff7be:	4601      	mov	r1, r0
 23ff7c0:	6818      	ldr	r0, [r3, #0]
 23ff7c2:	f000 b803 	b.w	23ff7cc <_strdup_r>
 23ff7c6:	bf00      	nop
 23ff7c8:	1007a944 	.word	0x1007a944

023ff7cc <_strdup_r>:
 23ff7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff7ce:	4604      	mov	r4, r0
 23ff7d0:	4608      	mov	r0, r1
 23ff7d2:	460d      	mov	r5, r1
 23ff7d4:	f7fc f854 	bl	23fb880 <strlen>
 23ff7d8:	1c42      	adds	r2, r0, #1
 23ff7da:	4620      	mov	r0, r4
 23ff7dc:	4611      	mov	r1, r2
 23ff7de:	9201      	str	r2, [sp, #4]
 23ff7e0:	f7fd fbdc 	bl	23fcf9c <_malloc_r>
 23ff7e4:	4604      	mov	r4, r0
 23ff7e6:	b118      	cbz	r0, 23ff7f0 <_strdup_r+0x24>
 23ff7e8:	9a01      	ldr	r2, [sp, #4]
 23ff7ea:	4629      	mov	r1, r5
 23ff7ec:	f7ff ff68 	bl	23ff6c0 <memcpy>
 23ff7f0:	4620      	mov	r0, r4
 23ff7f2:	b003      	add	sp, #12
 23ff7f4:	bd30      	pop	{r4, r5, pc}

023ff7f6 <strncmp>:
 23ff7f6:	b510      	push	{r4, lr}
 23ff7f8:	b17a      	cbz	r2, 23ff81a <strncmp+0x24>
 23ff7fa:	4603      	mov	r3, r0
 23ff7fc:	3901      	subs	r1, #1
 23ff7fe:	1884      	adds	r4, r0, r2
 23ff800:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff804:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff808:	4290      	cmp	r0, r2
 23ff80a:	d101      	bne.n	23ff810 <strncmp+0x1a>
 23ff80c:	42a3      	cmp	r3, r4
 23ff80e:	d101      	bne.n	23ff814 <strncmp+0x1e>
 23ff810:	1a80      	subs	r0, r0, r2
 23ff812:	bd10      	pop	{r4, pc}
 23ff814:	2800      	cmp	r0, #0
 23ff816:	d1f3      	bne.n	23ff800 <strncmp+0xa>
 23ff818:	e7fa      	b.n	23ff810 <strncmp+0x1a>
 23ff81a:	4610      	mov	r0, r2
 23ff81c:	e7f9      	b.n	23ff812 <strncmp+0x1c>

023ff81e <strrchr>:
 23ff81e:	b538      	push	{r3, r4, r5, lr}
 23ff820:	4603      	mov	r3, r0
 23ff822:	460c      	mov	r4, r1
 23ff824:	b969      	cbnz	r1, 23ff842 <strrchr+0x24>
 23ff826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff82a:	f7ff bfa7 	b.w	23ff77c <strchr>
 23ff82e:	1c43      	adds	r3, r0, #1
 23ff830:	4605      	mov	r5, r0
 23ff832:	4621      	mov	r1, r4
 23ff834:	4618      	mov	r0, r3
 23ff836:	f7ff ffa1 	bl	23ff77c <strchr>
 23ff83a:	2800      	cmp	r0, #0
 23ff83c:	d1f7      	bne.n	23ff82e <strrchr+0x10>
 23ff83e:	4628      	mov	r0, r5
 23ff840:	bd38      	pop	{r3, r4, r5, pc}
 23ff842:	2500      	movs	r5, #0
 23ff844:	e7f5      	b.n	23ff832 <strrchr+0x14>
	...

023ff848 <_strtol_l.constprop.0>:
 23ff848:	2b01      	cmp	r3, #1
 23ff84a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff84e:	d001      	beq.n	23ff854 <_strtol_l.constprop.0+0xc>
 23ff850:	2b24      	cmp	r3, #36	; 0x24
 23ff852:	d906      	bls.n	23ff862 <_strtol_l.constprop.0+0x1a>
 23ff854:	f7fd fbb0 	bl	23fcfb8 <__errno>
 23ff858:	2316      	movs	r3, #22
 23ff85a:	6003      	str	r3, [r0, #0]
 23ff85c:	2000      	movs	r0, #0
 23ff85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff862:	460d      	mov	r5, r1
 23ff864:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff948 <_strtol_l.constprop.0+0x100>
 23ff868:	462e      	mov	r6, r5
 23ff86a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff86e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff872:	f017 0708 	ands.w	r7, r7, #8
 23ff876:	d1f7      	bne.n	23ff868 <_strtol_l.constprop.0+0x20>
 23ff878:	2c2d      	cmp	r4, #45	; 0x2d
 23ff87a:	d132      	bne.n	23ff8e2 <_strtol_l.constprop.0+0x9a>
 23ff87c:	782c      	ldrb	r4, [r5, #0]
 23ff87e:	2701      	movs	r7, #1
 23ff880:	1cb5      	adds	r5, r6, #2
 23ff882:	2b00      	cmp	r3, #0
 23ff884:	d05b      	beq.n	23ff93e <_strtol_l.constprop.0+0xf6>
 23ff886:	2b10      	cmp	r3, #16
 23ff888:	d109      	bne.n	23ff89e <_strtol_l.constprop.0+0x56>
 23ff88a:	2c30      	cmp	r4, #48	; 0x30
 23ff88c:	d107      	bne.n	23ff89e <_strtol_l.constprop.0+0x56>
 23ff88e:	782c      	ldrb	r4, [r5, #0]
 23ff890:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff894:	2c58      	cmp	r4, #88	; 0x58
 23ff896:	d14d      	bne.n	23ff934 <_strtol_l.constprop.0+0xec>
 23ff898:	786c      	ldrb	r4, [r5, #1]
 23ff89a:	2310      	movs	r3, #16
 23ff89c:	3502      	adds	r5, #2
 23ff89e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff8a2:	f04f 0c00 	mov.w	ip, #0
 23ff8a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff8aa:	4666      	mov	r6, ip
 23ff8ac:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff8b0:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff8b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff8b8:	f1be 0f09 	cmp.w	lr, #9
 23ff8bc:	d816      	bhi.n	23ff8ec <_strtol_l.constprop.0+0xa4>
 23ff8be:	4674      	mov	r4, lr
 23ff8c0:	42a3      	cmp	r3, r4
 23ff8c2:	dd24      	ble.n	23ff90e <_strtol_l.constprop.0+0xc6>
 23ff8c4:	f1bc 0f00 	cmp.w	ip, #0
 23ff8c8:	db1e      	blt.n	23ff908 <_strtol_l.constprop.0+0xc0>
 23ff8ca:	45b1      	cmp	r9, r6
 23ff8cc:	d31c      	bcc.n	23ff908 <_strtol_l.constprop.0+0xc0>
 23ff8ce:	d101      	bne.n	23ff8d4 <_strtol_l.constprop.0+0x8c>
 23ff8d0:	45a2      	cmp	sl, r4
 23ff8d2:	db19      	blt.n	23ff908 <_strtol_l.constprop.0+0xc0>
 23ff8d4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff8d8:	f04f 0c01 	mov.w	ip, #1
 23ff8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff8e0:	e7e8      	b.n	23ff8b4 <_strtol_l.constprop.0+0x6c>
 23ff8e2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff8e4:	bf04      	itt	eq
 23ff8e6:	782c      	ldrbeq	r4, [r5, #0]
 23ff8e8:	1cb5      	addeq	r5, r6, #2
 23ff8ea:	e7ca      	b.n	23ff882 <_strtol_l.constprop.0+0x3a>
 23ff8ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff8f0:	f1be 0f19 	cmp.w	lr, #25
 23ff8f4:	d801      	bhi.n	23ff8fa <_strtol_l.constprop.0+0xb2>
 23ff8f6:	3c37      	subs	r4, #55	; 0x37
 23ff8f8:	e7e2      	b.n	23ff8c0 <_strtol_l.constprop.0+0x78>
 23ff8fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff8fe:	f1be 0f19 	cmp.w	lr, #25
 23ff902:	d804      	bhi.n	23ff90e <_strtol_l.constprop.0+0xc6>
 23ff904:	3c57      	subs	r4, #87	; 0x57
 23ff906:	e7db      	b.n	23ff8c0 <_strtol_l.constprop.0+0x78>
 23ff908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff90c:	e7e6      	b.n	23ff8dc <_strtol_l.constprop.0+0x94>
 23ff90e:	f1bc 0f00 	cmp.w	ip, #0
 23ff912:	da05      	bge.n	23ff920 <_strtol_l.constprop.0+0xd8>
 23ff914:	2322      	movs	r3, #34	; 0x22
 23ff916:	4646      	mov	r6, r8
 23ff918:	6003      	str	r3, [r0, #0]
 23ff91a:	b942      	cbnz	r2, 23ff92e <_strtol_l.constprop.0+0xe6>
 23ff91c:	4630      	mov	r0, r6
 23ff91e:	e79e      	b.n	23ff85e <_strtol_l.constprop.0+0x16>
 23ff920:	b107      	cbz	r7, 23ff924 <_strtol_l.constprop.0+0xdc>
 23ff922:	4276      	negs	r6, r6
 23ff924:	2a00      	cmp	r2, #0
 23ff926:	d0f9      	beq.n	23ff91c <_strtol_l.constprop.0+0xd4>
 23ff928:	f1bc 0f00 	cmp.w	ip, #0
 23ff92c:	d000      	beq.n	23ff930 <_strtol_l.constprop.0+0xe8>
 23ff92e:	1e69      	subs	r1, r5, #1
 23ff930:	6011      	str	r1, [r2, #0]
 23ff932:	e7f3      	b.n	23ff91c <_strtol_l.constprop.0+0xd4>
 23ff934:	2430      	movs	r4, #48	; 0x30
 23ff936:	2b00      	cmp	r3, #0
 23ff938:	d1b1      	bne.n	23ff89e <_strtol_l.constprop.0+0x56>
 23ff93a:	2308      	movs	r3, #8
 23ff93c:	e7af      	b.n	23ff89e <_strtol_l.constprop.0+0x56>
 23ff93e:	2c30      	cmp	r4, #48	; 0x30
 23ff940:	d0a5      	beq.n	23ff88e <_strtol_l.constprop.0+0x46>
 23ff942:	230a      	movs	r3, #10
 23ff944:	e7ab      	b.n	23ff89e <_strtol_l.constprop.0+0x56>
 23ff946:	bf00      	nop
 23ff948:	023ffed6 	.word	0x023ffed6

023ff94c <strtol>:
 23ff94c:	4613      	mov	r3, r2
 23ff94e:	460a      	mov	r2, r1
 23ff950:	4601      	mov	r1, r0
 23ff952:	4802      	ldr	r0, [pc, #8]	; (23ff95c <strtol+0x10>)
 23ff954:	6800      	ldr	r0, [r0, #0]
 23ff956:	f7ff bf77 	b.w	23ff848 <_strtol_l.constprop.0>
 23ff95a:	bf00      	nop
 23ff95c:	1007a944 	.word	0x1007a944

023ff960 <__register_exitproc>:
 23ff960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff964:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffa24 <__register_exitproc+0xc4>
 23ff968:	4606      	mov	r6, r0
 23ff96a:	461f      	mov	r7, r3
 23ff96c:	460d      	mov	r5, r1
 23ff96e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff972:	4691      	mov	r9, r2
 23ff974:	f000 f858 	bl	23ffa28 <__retarget_lock_acquire_recursive>
 23ff978:	4b26      	ldr	r3, [pc, #152]	; (23ffa14 <__register_exitproc+0xb4>)
 23ff97a:	681c      	ldr	r4, [r3, #0]
 23ff97c:	b934      	cbnz	r4, 23ff98c <__register_exitproc+0x2c>
 23ff97e:	4c26      	ldr	r4, [pc, #152]	; (23ffa18 <__register_exitproc+0xb8>)
 23ff980:	601c      	str	r4, [r3, #0]
 23ff982:	4b26      	ldr	r3, [pc, #152]	; (23ffa1c <__register_exitproc+0xbc>)
 23ff984:	b113      	cbz	r3, 23ff98c <__register_exitproc+0x2c>
 23ff986:	681b      	ldr	r3, [r3, #0]
 23ff988:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff98c:	6863      	ldr	r3, [r4, #4]
 23ff98e:	2b1f      	cmp	r3, #31
 23ff990:	dd07      	ble.n	23ff9a2 <__register_exitproc+0x42>
 23ff992:	f8d8 0000 	ldr.w	r0, [r8]
 23ff996:	f000 f849 	bl	23ffa2c <__retarget_lock_release_recursive>
 23ff99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff9a2:	b35e      	cbz	r6, 23ff9fc <__register_exitproc+0x9c>
 23ff9a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff9a8:	b988      	cbnz	r0, 23ff9ce <__register_exitproc+0x6e>
 23ff9aa:	4b1d      	ldr	r3, [pc, #116]	; (23ffa20 <__register_exitproc+0xc0>)
 23ff9ac:	b923      	cbnz	r3, 23ff9b8 <__register_exitproc+0x58>
 23ff9ae:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9b2:	f000 f83a 	bl	23ffa2a <__retarget_lock_release>
 23ff9b6:	e7f0      	b.n	23ff99a <__register_exitproc+0x3a>
 23ff9b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff9bc:	f7fd faa8 	bl	23fcf10 <malloc>
 23ff9c0:	2800      	cmp	r0, #0
 23ff9c2:	d0f4      	beq.n	23ff9ae <__register_exitproc+0x4e>
 23ff9c4:	2300      	movs	r3, #0
 23ff9c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff9ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff9ce:	6863      	ldr	r3, [r4, #4]
 23ff9d0:	2201      	movs	r2, #1
 23ff9d2:	2e02      	cmp	r6, #2
 23ff9d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff9d8:	fa02 f203 	lsl.w	r2, r2, r3
 23ff9dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff9e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff9e4:	ea43 0302 	orr.w	r3, r3, r2
 23ff9e8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff9ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff9f0:	bf02      	ittt	eq
 23ff9f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff9f6:	4313      	orreq	r3, r2
 23ff9f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff9fc:	6863      	ldr	r3, [r4, #4]
 23ff9fe:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa02:	1c5a      	adds	r2, r3, #1
 23ffa04:	3302      	adds	r3, #2
 23ffa06:	6062      	str	r2, [r4, #4]
 23ffa08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffa0c:	f000 f80e 	bl	23ffa2c <__retarget_lock_release_recursive>
 23ffa10:	2000      	movs	r0, #0
 23ffa12:	e7c4      	b.n	23ff99e <__register_exitproc+0x3e>
 23ffa14:	1007afe0 	.word	0x1007afe0
 23ffa18:	1007af54 	.word	0x1007af54
 23ffa1c:	00000000 	.word	0x00000000
 23ffa20:	023fcf11 	.word	0x023fcf11
 23ffa24:	1007a9a8 	.word	0x1007a9a8

023ffa28 <__retarget_lock_acquire_recursive>:
 23ffa28:	4770      	bx	lr

023ffa2a <__retarget_lock_release>:
 23ffa2a:	4770      	bx	lr

023ffa2c <__retarget_lock_release_recursive>:
 23ffa2c:	4770      	bx	lr
	...

023ffa30 <dynalib_user>:
 23ffa30:	b891 023f b8b9 023f b8bd 023f 0000 0000     ..?...?...?.....
 23ffa40:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffa50:	7574 6c61 5200 7365 7465 6120 6c6c 7220     tual.Reset all r
 23ffa60:	6765 7369 6574 7372 5000 776f 7265 6f20     egisters.Power o
 23ffa70:	006e 6553 2074 6564 6166 6c75 2074 6f63     n.Set default co
 23ffa80:	666e 6769 4300 6c61 6269 6172 6574 4120     nfig.Calibrate A
 23ffa90:	4546 7700 6965 6867 0074 6574 706d 7265     FE.weight.temper
 23ffaa0:	7461 7275 0065 6164 6174 6163 656b 642f     ature.datacake/d
 23ffab0:	7461 0061 6557 6769 7468 203a 2e25 6632     ata.Weight: %.2f
 23ffac0:	5400 7261 6972 676e 7420 6568 7320 6163     .Tarring the sca
 23ffad0:	656c 5400 7261 6972 676e 6320 6d6f 6c70     le.Tarring compl
 23ffae0:	7465 0065 7453 7261 2074 6163 696c 7262     ete.Start calibr
 23ffaf0:	7461 6f69 006e 6143 696c 7262 7461 6f69     ation.Calibratio
 23ffb00:	206e 6f63 706d 656c 6574 4300 6c61 6269     n complete.Calib
 23ffb10:	6172 6974 6e6f 6520 7272 726f 4e00 206f     ration error.No 
 23ffb20:	6174 7272 6e69 2067 6f66 6e75 2e64 5020     tarring found. P
 23ffb30:	7265 6f66 696d 676e 6120 7420 7261 2e65     erfoming a tare.
 23ffb40:	4e00 206f 6577 6769 7468 7220 6665 6620     .No weight ref f
 23ffb50:	756f 646e 002e 6f4e 6320 6c61 6269 6172     ound..No calibra
 23ffb60:	6974 6e6f 7620 6c61 6575 6620 756f 646e     tion value found
 23ffb70:	202e 6550 6672 726f 696d 676e 6120 6320     . Performing a c
 23ffb80:	6c61 6269 6172 6974 6e6f 002e 6174 6572     alibration..tare
 23ffb90:	6300 6c61 6269 6172 6574 6100 7070 0000     .calibrate.app..

023ffba0 <_ZTVN5spark10LogHandlerE>:
	...
 23ffbb0:	b8d9 023f b901 023f                         ..?...?.

023ffbb8 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffbc0:	b931 023f b965 023f e935 023f eadd 023f     1.?.e.?.5.?...?.

023ffbd0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffbd8:	d0dd 023f d0e3 023f d121 023f d0f1 023f     ..?...?.!.?...?.
 23ffbe8:	d0df 023f                                   ..?.

023ffbec <_ZTVN5spark13EthernetClassE>:
	...
 23ffbf4:	d6b3 023f d6a9 023f d69f 023f d695 023f     ..?...?...?...?.
 23ffc04:	d689 023f d67d 023f ecc9 023f ecd1 023f     ..?.}.?...?...?.
 23ffc14:	d671 023f d669 023f d65f 023f d655 023f     q.?.i.?._.?.U.?.
 23ffc24:	ed01 023f                                   ..?.

023ffc28 <_ZTV7TwoWire>:
	...
 23ffc30:	d6d1 023f d71b 023f d6f3 023f d6d3 023f     ..?...?...?...?.
 23ffc40:	d6fb 023f d703 023f d70b 023f d713 023f     ..?...?...?...?.

023ffc50 <_ZTV9IPAddress>:
	...
 23ffc58:	d7eb 023f d7db 023f d7dd 023f 6425 2500     ..?...?...?.%d.%
 23ffc68:	0075 6725 7500 3025 7834 0000               u.%g.u%04x..

023ffc74 <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ffc7c:	d8fb 023f d8fd 023f d90b 023f d931 023f     ..?...?...?.1.?.
 23ffc8c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc9c:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffcac:	4867 6e61 6c64 7265 2500 3130 7530 0020     gHandler.%010u .
 23ffcbc:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 23ffccc:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 23ffcdc:	3d20 0020 0a0d 6d00 6c00 006e 6e66 6300      = ....m.ln.fn.c
 23ffcec:	646f 0065 6564 6174 6c69 0000               ode.detail..

023ffcf8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffd00:	dd2d 023f dd53 023f dd11 023f d965 023f     -.?.S.?...?.e.?.

023ffd10 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd18:	e1e1 023f e1f9 023f e935 023f eadd 023f     ..?...?.5.?...?.

023ffd28 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd30:	e20d 023f e221 023f eb15 023f dd19 023f     ..?.!.?...?...?.

023ffd40 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd48:	dd2b 023f dd61 023f e899 023f dd1b 023f     +.?.a.?...?...?.

023ffd58 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd60:	dd29 023f dd6f 023f e149 023f dd91 023f     ).?.o.?.I.?...?.

023ffd70 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd78:	ec89 023f ec93 023f ec9d 023f eca7 023f     ..?...?...?...?.
 23ffd88:	ecb1 023f ecbd 023f ecc9 023f ecd1 023f     ..?...?...?...?.
 23ffd98:	ecd9 023f ece5 023f eced 023f ecf7 023f     ..?...?...?...?.
 23ffda8:	ed01 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffdb8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffdc8 <_ZTV11USARTSerial>:
	...
 23ffdd0:	f025 023f f091 023f f069 023f eded 023f     %.?...?.i.?...?.
 23ffde0:	f039 023f f055 023f f047 023f f063 023f     9.?.U.?.G.?.c.?.
 23ffdf0:	f027 023f f02b 023f                         '.?.+.?.

023ffdf8 <_ZTV9USBSerial>:
	...
 23ffe00:	f0e9 023f f151 023f f127 023f eded 023f     ..?.Q.?.'.?...?.
 23ffe10:	f119 023f f0eb 023f f0fb 023f f14b 023f     ..?...?...?.K.?.
 23ffe20:	f10b 023f f0e3 023f                         ..?...?.

023ffe28 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe30:	f253 023f f249 023f f23f 023f f1f5 023f     S.?.I.?.?.?...?.
 23ffe40:	f233 023f f227 023f ecc9 023f ecd1 023f     3.?.'.?...?...?.
 23ffe50:	f21b 023f f213 023f f209 023f f1ff 023f     ..?...?...?...?.
 23ffe60:	ed01 023f                                   ..?.

023ffe64 <_ZSt7nothrow>:
 23ffe64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffea4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffeb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffec4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffed5 <_ctype_>:
 23ffed5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffee5:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffef5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23fff05:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff15:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff25:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff35:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff45:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff55:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffd6 <link_const_data_end>:
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fbf65 	.word	0x023fbf65
 23fffdc:	023fd0cd 	.word	0x023fd0cd
 23fffe0:	023fd6bd 	.word	0x023fd6bd
 23fffe4:	023fe925 	.word	0x023fe925
 23fffe8:	023fedd9 	.word	0x023fedd9
 23fffec:	023fee81 	.word	0x023fee81
 23ffff0:	023fefed 	.word	0x023fefed
 23ffff4:	023ff011 	.word	0x023ff011
 23ffff8:	023ff25d 	.word	0x023ff25d
