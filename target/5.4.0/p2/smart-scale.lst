
/Users/manuelorduno/Documents/GitHub/smart-scale/target/5.4.0/p2/smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa698  085fa088  0000a698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005950  023fa6a0  085fa090  0000a6a0  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         0000007c  1007a918  085ff9e0  0001a918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000654  1007a998  1007a998  0002a998  2**3
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffa5c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000558  085ffa60  085ffa60  0001fa60  2**0
                  ALLOC
 11 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .debug_info   0015ca6f  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000176ab  00000000  00000000  0017ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00041a80  00000000  00000000  0019411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003218  00000000  00000000  001d5b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000bef0  00000000  00000000  001d8db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ca30  00000000  00000000  001e4ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e142  00000000  00000000  002116d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cef7b  00000000  00000000  0025f814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009188  00000000  00000000  0032e790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007a918 	.word	0x1007a918
 85fa058:	085ff9e0 	.word	0x085ff9e0
 85fa05c:	1007a994 	.word	0x1007a994
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007a998 	.word	0x1007a998
 85fa068:	1007afec 	.word	0x1007afec
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa698 	.word	0x023fa698
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffff0 	.word	0x023ffff0

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa6a0 <__aeabi_drsub>:
 23fa6a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa6a4:	e002      	b.n	23fa6ac <__adddf3>
 23fa6a6:	bf00      	nop

023fa6a8 <__aeabi_dsub>:
 23fa6a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa6ac <__adddf3>:
 23fa6ac:	b530      	push	{r4, r5, lr}
 23fa6ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa6b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa6b6:	ea94 0f05 	teq	r4, r5
 23fa6ba:	bf08      	it	eq
 23fa6bc:	ea90 0f02 	teqeq	r0, r2
 23fa6c0:	bf1f      	itttt	ne
 23fa6c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa6c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa6ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa6ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa6d2:	f000 80e2 	beq.w	23fa89a <__adddf3+0x1ee>
 23fa6d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa6da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa6de:	bfb8      	it	lt
 23fa6e0:	426d      	neglt	r5, r5
 23fa6e2:	dd0c      	ble.n	23fa6fe <__adddf3+0x52>
 23fa6e4:	442c      	add	r4, r5
 23fa6e6:	ea80 0202 	eor.w	r2, r0, r2
 23fa6ea:	ea81 0303 	eor.w	r3, r1, r3
 23fa6ee:	ea82 0000 	eor.w	r0, r2, r0
 23fa6f2:	ea83 0101 	eor.w	r1, r3, r1
 23fa6f6:	ea80 0202 	eor.w	r2, r0, r2
 23fa6fa:	ea81 0303 	eor.w	r3, r1, r3
 23fa6fe:	2d36      	cmp	r5, #54	; 0x36
 23fa700:	bf88      	it	hi
 23fa702:	bd30      	pophi	{r4, r5, pc}
 23fa704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa70c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa714:	d002      	beq.n	23fa71c <__adddf3+0x70>
 23fa716:	4240      	negs	r0, r0
 23fa718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa71c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa728:	d002      	beq.n	23fa730 <__adddf3+0x84>
 23fa72a:	4252      	negs	r2, r2
 23fa72c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa730:	ea94 0f05 	teq	r4, r5
 23fa734:	f000 80a7 	beq.w	23fa886 <__adddf3+0x1da>
 23fa738:	f1a4 0401 	sub.w	r4, r4, #1
 23fa73c:	f1d5 0e20 	rsbs	lr, r5, #32
 23fa740:	db0d      	blt.n	23fa75e <__adddf3+0xb2>
 23fa742:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fa746:	fa22 f205 	lsr.w	r2, r2, r5
 23fa74a:	1880      	adds	r0, r0, r2
 23fa74c:	f141 0100 	adc.w	r1, r1, #0
 23fa750:	fa03 f20e 	lsl.w	r2, r3, lr
 23fa754:	1880      	adds	r0, r0, r2
 23fa756:	fa43 f305 	asr.w	r3, r3, r5
 23fa75a:	4159      	adcs	r1, r3
 23fa75c:	e00e      	b.n	23fa77c <__adddf3+0xd0>
 23fa75e:	f1a5 0520 	sub.w	r5, r5, #32
 23fa762:	f10e 0e20 	add.w	lr, lr, #32
 23fa766:	2a01      	cmp	r2, #1
 23fa768:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fa76c:	bf28      	it	cs
 23fa76e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fa772:	fa43 f305 	asr.w	r3, r3, r5
 23fa776:	18c0      	adds	r0, r0, r3
 23fa778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fa77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa780:	d507      	bpl.n	23fa792 <__adddf3+0xe6>
 23fa782:	f04f 0e00 	mov.w	lr, #0
 23fa786:	f1dc 0c00 	rsbs	ip, ip, #0
 23fa78a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fa78e:	eb6e 0101 	sbc.w	r1, lr, r1
 23fa792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fa796:	d31b      	bcc.n	23fa7d0 <__adddf3+0x124>
 23fa798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fa79c:	d30c      	bcc.n	23fa7b8 <__adddf3+0x10c>
 23fa79e:	0849      	lsrs	r1, r1, #1
 23fa7a0:	ea5f 0030 	movs.w	r0, r0, rrx
 23fa7a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fa7a8:	f104 0401 	add.w	r4, r4, #1
 23fa7ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fa7b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fa7b4:	f080 809a 	bcs.w	23fa8ec <__adddf3+0x240>
 23fa7b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fa7bc:	bf08      	it	eq
 23fa7be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa7c2:	f150 0000 	adcs.w	r0, r0, #0
 23fa7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa7ca:	ea41 0105 	orr.w	r1, r1, r5
 23fa7ce:	bd30      	pop	{r4, r5, pc}
 23fa7d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fa7d4:	4140      	adcs	r0, r0
 23fa7d6:	eb41 0101 	adc.w	r1, r1, r1
 23fa7da:	3c01      	subs	r4, #1
 23fa7dc:	bf28      	it	cs
 23fa7de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fa7e2:	d2e9      	bcs.n	23fa7b8 <__adddf3+0x10c>
 23fa7e4:	f091 0f00 	teq	r1, #0
 23fa7e8:	bf04      	itt	eq
 23fa7ea:	4601      	moveq	r1, r0
 23fa7ec:	2000      	moveq	r0, #0
 23fa7ee:	fab1 f381 	clz	r3, r1
 23fa7f2:	bf08      	it	eq
 23fa7f4:	3320      	addeq	r3, #32
 23fa7f6:	f1a3 030b 	sub.w	r3, r3, #11
 23fa7fa:	f1b3 0220 	subs.w	r2, r3, #32
 23fa7fe:	da0c      	bge.n	23fa81a <__adddf3+0x16e>
 23fa800:	320c      	adds	r2, #12
 23fa802:	dd08      	ble.n	23fa816 <__adddf3+0x16a>
 23fa804:	f102 0c14 	add.w	ip, r2, #20
 23fa808:	f1c2 020c 	rsb	r2, r2, #12
 23fa80c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fa810:	fa21 f102 	lsr.w	r1, r1, r2
 23fa814:	e00c      	b.n	23fa830 <__adddf3+0x184>
 23fa816:	f102 0214 	add.w	r2, r2, #20
 23fa81a:	bfd8      	it	le
 23fa81c:	f1c2 0c20 	rsble	ip, r2, #32
 23fa820:	fa01 f102 	lsl.w	r1, r1, r2
 23fa824:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fa828:	bfdc      	itt	le
 23fa82a:	ea41 010c 	orrle.w	r1, r1, ip
 23fa82e:	4090      	lslle	r0, r2
 23fa830:	1ae4      	subs	r4, r4, r3
 23fa832:	bfa2      	ittt	ge
 23fa834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fa838:	4329      	orrge	r1, r5
 23fa83a:	bd30      	popge	{r4, r5, pc}
 23fa83c:	ea6f 0404 	mvn.w	r4, r4
 23fa840:	3c1f      	subs	r4, #31
 23fa842:	da1c      	bge.n	23fa87e <__adddf3+0x1d2>
 23fa844:	340c      	adds	r4, #12
 23fa846:	dc0e      	bgt.n	23fa866 <__adddf3+0x1ba>
 23fa848:	f104 0414 	add.w	r4, r4, #20
 23fa84c:	f1c4 0220 	rsb	r2, r4, #32
 23fa850:	fa20 f004 	lsr.w	r0, r0, r4
 23fa854:	fa01 f302 	lsl.w	r3, r1, r2
 23fa858:	ea40 0003 	orr.w	r0, r0, r3
 23fa85c:	fa21 f304 	lsr.w	r3, r1, r4
 23fa860:	ea45 0103 	orr.w	r1, r5, r3
 23fa864:	bd30      	pop	{r4, r5, pc}
 23fa866:	f1c4 040c 	rsb	r4, r4, #12
 23fa86a:	f1c4 0220 	rsb	r2, r4, #32
 23fa86e:	fa20 f002 	lsr.w	r0, r0, r2
 23fa872:	fa01 f304 	lsl.w	r3, r1, r4
 23fa876:	ea40 0003 	orr.w	r0, r0, r3
 23fa87a:	4629      	mov	r1, r5
 23fa87c:	bd30      	pop	{r4, r5, pc}
 23fa87e:	fa21 f004 	lsr.w	r0, r1, r4
 23fa882:	4629      	mov	r1, r5
 23fa884:	bd30      	pop	{r4, r5, pc}
 23fa886:	f094 0f00 	teq	r4, #0
 23fa88a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fa88e:	bf06      	itte	eq
 23fa890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fa894:	3401      	addeq	r4, #1
 23fa896:	3d01      	subne	r5, #1
 23fa898:	e74e      	b.n	23fa738 <__adddf3+0x8c>
 23fa89a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa89e:	bf18      	it	ne
 23fa8a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa8a4:	d029      	beq.n	23fa8fa <__adddf3+0x24e>
 23fa8a6:	ea94 0f05 	teq	r4, r5
 23fa8aa:	bf08      	it	eq
 23fa8ac:	ea90 0f02 	teqeq	r0, r2
 23fa8b0:	d005      	beq.n	23fa8be <__adddf3+0x212>
 23fa8b2:	ea54 0c00 	orrs.w	ip, r4, r0
 23fa8b6:	bf04      	itt	eq
 23fa8b8:	4619      	moveq	r1, r3
 23fa8ba:	4610      	moveq	r0, r2
 23fa8bc:	bd30      	pop	{r4, r5, pc}
 23fa8be:	ea91 0f03 	teq	r1, r3
 23fa8c2:	bf1e      	ittt	ne
 23fa8c4:	2100      	movne	r1, #0
 23fa8c6:	2000      	movne	r0, #0
 23fa8c8:	bd30      	popne	{r4, r5, pc}
 23fa8ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fa8ce:	d105      	bne.n	23fa8dc <__adddf3+0x230>
 23fa8d0:	0040      	lsls	r0, r0, #1
 23fa8d2:	4149      	adcs	r1, r1
 23fa8d4:	bf28      	it	cs
 23fa8d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fa8da:	bd30      	pop	{r4, r5, pc}
 23fa8dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fa8e0:	bf3c      	itt	cc
 23fa8e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fa8e6:	bd30      	popcc	{r4, r5, pc}
 23fa8e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa8ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fa8f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa8f4:	f04f 0000 	mov.w	r0, #0
 23fa8f8:	bd30      	pop	{r4, r5, pc}
 23fa8fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa8fe:	bf1a      	itte	ne
 23fa900:	4619      	movne	r1, r3
 23fa902:	4610      	movne	r0, r2
 23fa904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fa908:	bf1c      	itt	ne
 23fa90a:	460b      	movne	r3, r1
 23fa90c:	4602      	movne	r2, r0
 23fa90e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fa912:	bf06      	itte	eq
 23fa914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fa918:	ea91 0f03 	teqeq	r1, r3
 23fa91c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fa920:	bd30      	pop	{r4, r5, pc}
 23fa922:	bf00      	nop

023fa924 <__aeabi_ui2d>:
 23fa924:	f090 0f00 	teq	r0, #0
 23fa928:	bf04      	itt	eq
 23fa92a:	2100      	moveq	r1, #0
 23fa92c:	4770      	bxeq	lr
 23fa92e:	b530      	push	{r4, r5, lr}
 23fa930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa938:	f04f 0500 	mov.w	r5, #0
 23fa93c:	f04f 0100 	mov.w	r1, #0
 23fa940:	e750      	b.n	23fa7e4 <__adddf3+0x138>
 23fa942:	bf00      	nop

023fa944 <__aeabi_i2d>:
 23fa944:	f090 0f00 	teq	r0, #0
 23fa948:	bf04      	itt	eq
 23fa94a:	2100      	moveq	r1, #0
 23fa94c:	4770      	bxeq	lr
 23fa94e:	b530      	push	{r4, r5, lr}
 23fa950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fa95c:	bf48      	it	mi
 23fa95e:	4240      	negmi	r0, r0
 23fa960:	f04f 0100 	mov.w	r1, #0
 23fa964:	e73e      	b.n	23fa7e4 <__adddf3+0x138>
 23fa966:	bf00      	nop

023fa968 <__aeabi_f2d>:
 23fa968:	0042      	lsls	r2, r0, #1
 23fa96a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fa96e:	ea4f 0131 	mov.w	r1, r1, rrx
 23fa972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fa976:	bf1f      	itttt	ne
 23fa978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fa97c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fa980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fa984:	4770      	bxne	lr
 23fa986:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fa98a:	bf08      	it	eq
 23fa98c:	4770      	bxeq	lr
 23fa98e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fa992:	bf04      	itt	eq
 23fa994:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fa998:	4770      	bxeq	lr
 23fa99a:	b530      	push	{r4, r5, lr}
 23fa99c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fa9a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa9a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fa9a8:	e71c      	b.n	23fa7e4 <__adddf3+0x138>
 23fa9aa:	bf00      	nop

023fa9ac <__aeabi_ul2d>:
 23fa9ac:	ea50 0201 	orrs.w	r2, r0, r1
 23fa9b0:	bf08      	it	eq
 23fa9b2:	4770      	bxeq	lr
 23fa9b4:	b530      	push	{r4, r5, lr}
 23fa9b6:	f04f 0500 	mov.w	r5, #0
 23fa9ba:	e00a      	b.n	23fa9d2 <__aeabi_l2d+0x16>

023fa9bc <__aeabi_l2d>:
 23fa9bc:	ea50 0201 	orrs.w	r2, r0, r1
 23fa9c0:	bf08      	it	eq
 23fa9c2:	4770      	bxeq	lr
 23fa9c4:	b530      	push	{r4, r5, lr}
 23fa9c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fa9ca:	d502      	bpl.n	23fa9d2 <__aeabi_l2d+0x16>
 23fa9cc:	4240      	negs	r0, r0
 23fa9ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa9d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa9d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa9da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fa9de:	f43f aed8 	beq.w	23fa792 <__adddf3+0xe6>
 23fa9e2:	f04f 0203 	mov.w	r2, #3
 23fa9e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa9ea:	bf18      	it	ne
 23fa9ec:	3203      	addne	r2, #3
 23fa9ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa9f2:	bf18      	it	ne
 23fa9f4:	3203      	addne	r2, #3
 23fa9f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fa9fa:	f1c2 0320 	rsb	r3, r2, #32
 23fa9fe:	fa00 fc03 	lsl.w	ip, r0, r3
 23faa02:	fa20 f002 	lsr.w	r0, r0, r2
 23faa06:	fa01 fe03 	lsl.w	lr, r1, r3
 23faa0a:	ea40 000e 	orr.w	r0, r0, lr
 23faa0e:	fa21 f102 	lsr.w	r1, r1, r2
 23faa12:	4414      	add	r4, r2
 23faa14:	e6bd      	b.n	23fa792 <__adddf3+0xe6>
 23faa16:	bf00      	nop

023faa18 <__aeabi_dmul>:
 23faa18:	b570      	push	{r4, r5, r6, lr}
 23faa1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23faa1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23faa22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23faa26:	bf1d      	ittte	ne
 23faa28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23faa2c:	ea94 0f0c 	teqne	r4, ip
 23faa30:	ea95 0f0c 	teqne	r5, ip
 23faa34:	f000 f8de 	bleq	23fabf4 <__aeabi_dmul+0x1dc>
 23faa38:	442c      	add	r4, r5
 23faa3a:	ea81 0603 	eor.w	r6, r1, r3
 23faa3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23faa42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23faa46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23faa4a:	bf18      	it	ne
 23faa4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23faa50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23faa54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23faa58:	d038      	beq.n	23faacc <__aeabi_dmul+0xb4>
 23faa5a:	fba0 ce02 	umull	ip, lr, r0, r2
 23faa5e:	f04f 0500 	mov.w	r5, #0
 23faa62:	fbe1 e502 	umlal	lr, r5, r1, r2
 23faa66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23faa6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23faa6e:	f04f 0600 	mov.w	r6, #0
 23faa72:	fbe1 5603 	umlal	r5, r6, r1, r3
 23faa76:	f09c 0f00 	teq	ip, #0
 23faa7a:	bf18      	it	ne
 23faa7c:	f04e 0e01 	orrne.w	lr, lr, #1
 23faa80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23faa84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23faa88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23faa8c:	d204      	bcs.n	23faa98 <__aeabi_dmul+0x80>
 23faa8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23faa92:	416d      	adcs	r5, r5
 23faa94:	eb46 0606 	adc.w	r6, r6, r6
 23faa98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23faa9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23faaa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23faaa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23faaa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23faaac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23faab0:	bf88      	it	hi
 23faab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23faab6:	d81e      	bhi.n	23faaf6 <__aeabi_dmul+0xde>
 23faab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23faabc:	bf08      	it	eq
 23faabe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23faac2:	f150 0000 	adcs.w	r0, r0, #0
 23faac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23faaca:	bd70      	pop	{r4, r5, r6, pc}
 23faacc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23faad0:	ea46 0101 	orr.w	r1, r6, r1
 23faad4:	ea40 0002 	orr.w	r0, r0, r2
 23faad8:	ea81 0103 	eor.w	r1, r1, r3
 23faadc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23faae0:	bfc2      	ittt	gt
 23faae2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23faae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23faaea:	bd70      	popgt	{r4, r5, r6, pc}
 23faaec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23faaf0:	f04f 0e00 	mov.w	lr, #0
 23faaf4:	3c01      	subs	r4, #1
 23faaf6:	f300 80ab 	bgt.w	23fac50 <__aeabi_dmul+0x238>
 23faafa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23faafe:	bfde      	ittt	le
 23fab00:	2000      	movle	r0, #0
 23fab02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fab06:	bd70      	pople	{r4, r5, r6, pc}
 23fab08:	f1c4 0400 	rsb	r4, r4, #0
 23fab0c:	3c20      	subs	r4, #32
 23fab0e:	da35      	bge.n	23fab7c <__aeabi_dmul+0x164>
 23fab10:	340c      	adds	r4, #12
 23fab12:	dc1b      	bgt.n	23fab4c <__aeabi_dmul+0x134>
 23fab14:	f104 0414 	add.w	r4, r4, #20
 23fab18:	f1c4 0520 	rsb	r5, r4, #32
 23fab1c:	fa00 f305 	lsl.w	r3, r0, r5
 23fab20:	fa20 f004 	lsr.w	r0, r0, r4
 23fab24:	fa01 f205 	lsl.w	r2, r1, r5
 23fab28:	ea40 0002 	orr.w	r0, r0, r2
 23fab2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fab30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fab34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fab38:	fa21 f604 	lsr.w	r6, r1, r4
 23fab3c:	eb42 0106 	adc.w	r1, r2, r6
 23fab40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fab44:	bf08      	it	eq
 23fab46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fab4a:	bd70      	pop	{r4, r5, r6, pc}
 23fab4c:	f1c4 040c 	rsb	r4, r4, #12
 23fab50:	f1c4 0520 	rsb	r5, r4, #32
 23fab54:	fa00 f304 	lsl.w	r3, r0, r4
 23fab58:	fa20 f005 	lsr.w	r0, r0, r5
 23fab5c:	fa01 f204 	lsl.w	r2, r1, r4
 23fab60:	ea40 0002 	orr.w	r0, r0, r2
 23fab64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fab68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fab6c:	f141 0100 	adc.w	r1, r1, #0
 23fab70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fab74:	bf08      	it	eq
 23fab76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fab7a:	bd70      	pop	{r4, r5, r6, pc}
 23fab7c:	f1c4 0520 	rsb	r5, r4, #32
 23fab80:	fa00 f205 	lsl.w	r2, r0, r5
 23fab84:	ea4e 0e02 	orr.w	lr, lr, r2
 23fab88:	fa20 f304 	lsr.w	r3, r0, r4
 23fab8c:	fa01 f205 	lsl.w	r2, r1, r5
 23fab90:	ea43 0302 	orr.w	r3, r3, r2
 23fab94:	fa21 f004 	lsr.w	r0, r1, r4
 23fab98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fab9c:	fa21 f204 	lsr.w	r2, r1, r4
 23faba0:	ea20 0002 	bic.w	r0, r0, r2
 23faba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23faba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fabac:	bf08      	it	eq
 23fabae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fabb2:	bd70      	pop	{r4, r5, r6, pc}
 23fabb4:	f094 0f00 	teq	r4, #0
 23fabb8:	d10f      	bne.n	23fabda <__aeabi_dmul+0x1c2>
 23fabba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fabbe:	0040      	lsls	r0, r0, #1
 23fabc0:	eb41 0101 	adc.w	r1, r1, r1
 23fabc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fabc8:	bf08      	it	eq
 23fabca:	3c01      	subeq	r4, #1
 23fabcc:	d0f7      	beq.n	23fabbe <__aeabi_dmul+0x1a6>
 23fabce:	ea41 0106 	orr.w	r1, r1, r6
 23fabd2:	f095 0f00 	teq	r5, #0
 23fabd6:	bf18      	it	ne
 23fabd8:	4770      	bxne	lr
 23fabda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fabde:	0052      	lsls	r2, r2, #1
 23fabe0:	eb43 0303 	adc.w	r3, r3, r3
 23fabe4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fabe8:	bf08      	it	eq
 23fabea:	3d01      	subeq	r5, #1
 23fabec:	d0f7      	beq.n	23fabde <__aeabi_dmul+0x1c6>
 23fabee:	ea43 0306 	orr.w	r3, r3, r6
 23fabf2:	4770      	bx	lr
 23fabf4:	ea94 0f0c 	teq	r4, ip
 23fabf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fabfc:	bf18      	it	ne
 23fabfe:	ea95 0f0c 	teqne	r5, ip
 23fac02:	d00c      	beq.n	23fac1e <__aeabi_dmul+0x206>
 23fac04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fac08:	bf18      	it	ne
 23fac0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fac0e:	d1d1      	bne.n	23fabb4 <__aeabi_dmul+0x19c>
 23fac10:	ea81 0103 	eor.w	r1, r1, r3
 23fac14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fac18:	f04f 0000 	mov.w	r0, #0
 23fac1c:	bd70      	pop	{r4, r5, r6, pc}
 23fac1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fac22:	bf06      	itte	eq
 23fac24:	4610      	moveq	r0, r2
 23fac26:	4619      	moveq	r1, r3
 23fac28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fac2c:	d019      	beq.n	23fac62 <__aeabi_dmul+0x24a>
 23fac2e:	ea94 0f0c 	teq	r4, ip
 23fac32:	d102      	bne.n	23fac3a <__aeabi_dmul+0x222>
 23fac34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fac38:	d113      	bne.n	23fac62 <__aeabi_dmul+0x24a>
 23fac3a:	ea95 0f0c 	teq	r5, ip
 23fac3e:	d105      	bne.n	23fac4c <__aeabi_dmul+0x234>
 23fac40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fac44:	bf1c      	itt	ne
 23fac46:	4610      	movne	r0, r2
 23fac48:	4619      	movne	r1, r3
 23fac4a:	d10a      	bne.n	23fac62 <__aeabi_dmul+0x24a>
 23fac4c:	ea81 0103 	eor.w	r1, r1, r3
 23fac50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fac54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fac58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fac5c:	f04f 0000 	mov.w	r0, #0
 23fac60:	bd70      	pop	{r4, r5, r6, pc}
 23fac62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fac66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fac6a:	bd70      	pop	{r4, r5, r6, pc}

023fac6c <__aeabi_ddiv>:
 23fac6c:	b570      	push	{r4, r5, r6, lr}
 23fac6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fac72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fac76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fac7a:	bf1d      	ittte	ne
 23fac7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fac80:	ea94 0f0c 	teqne	r4, ip
 23fac84:	ea95 0f0c 	teqne	r5, ip
 23fac88:	f000 f8a7 	bleq	23fadda <__aeabi_ddiv+0x16e>
 23fac8c:	eba4 0405 	sub.w	r4, r4, r5
 23fac90:	ea81 0e03 	eor.w	lr, r1, r3
 23fac94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fac98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fac9c:	f000 8088 	beq.w	23fadb0 <__aeabi_ddiv+0x144>
 23faca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23faca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23faca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23facac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23facb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23facb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23facb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23facbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23facc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23facc4:	429d      	cmp	r5, r3
 23facc6:	bf08      	it	eq
 23facc8:	4296      	cmpeq	r6, r2
 23facca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23facce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23facd2:	d202      	bcs.n	23facda <__aeabi_ddiv+0x6e>
 23facd4:	085b      	lsrs	r3, r3, #1
 23facd6:	ea4f 0232 	mov.w	r2, r2, rrx
 23facda:	1ab6      	subs	r6, r6, r2
 23facdc:	eb65 0503 	sbc.w	r5, r5, r3
 23face0:	085b      	lsrs	r3, r3, #1
 23face2:	ea4f 0232 	mov.w	r2, r2, rrx
 23face6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23facea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23facee:	ebb6 0e02 	subs.w	lr, r6, r2
 23facf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23facf6:	bf22      	ittt	cs
 23facf8:	1ab6      	subcs	r6, r6, r2
 23facfa:	4675      	movcs	r5, lr
 23facfc:	ea40 000c 	orrcs.w	r0, r0, ip
 23fad00:	085b      	lsrs	r3, r3, #1
 23fad02:	ea4f 0232 	mov.w	r2, r2, rrx
 23fad06:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad0e:	bf22      	ittt	cs
 23fad10:	1ab6      	subcs	r6, r6, r2
 23fad12:	4675      	movcs	r5, lr
 23fad14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fad18:	085b      	lsrs	r3, r3, #1
 23fad1a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fad1e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad22:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad26:	bf22      	ittt	cs
 23fad28:	1ab6      	subcs	r6, r6, r2
 23fad2a:	4675      	movcs	r5, lr
 23fad2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fad30:	085b      	lsrs	r3, r3, #1
 23fad32:	ea4f 0232 	mov.w	r2, r2, rrx
 23fad36:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad3e:	bf22      	ittt	cs
 23fad40:	1ab6      	subcs	r6, r6, r2
 23fad42:	4675      	movcs	r5, lr
 23fad44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fad48:	ea55 0e06 	orrs.w	lr, r5, r6
 23fad4c:	d018      	beq.n	23fad80 <__aeabi_ddiv+0x114>
 23fad4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fad52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fad56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fad5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fad5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fad62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fad66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fad6a:	d1c0      	bne.n	23facee <__aeabi_ddiv+0x82>
 23fad6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fad70:	d10b      	bne.n	23fad8a <__aeabi_ddiv+0x11e>
 23fad72:	ea41 0100 	orr.w	r1, r1, r0
 23fad76:	f04f 0000 	mov.w	r0, #0
 23fad7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fad7e:	e7b6      	b.n	23facee <__aeabi_ddiv+0x82>
 23fad80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fad84:	bf04      	itt	eq
 23fad86:	4301      	orreq	r1, r0
 23fad88:	2000      	moveq	r0, #0
 23fad8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fad8e:	bf88      	it	hi
 23fad90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fad94:	f63f aeaf 	bhi.w	23faaf6 <__aeabi_dmul+0xde>
 23fad98:	ebb5 0c03 	subs.w	ip, r5, r3
 23fad9c:	bf04      	itt	eq
 23fad9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fada2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fada6:	f150 0000 	adcs.w	r0, r0, #0
 23fadaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fadae:	bd70      	pop	{r4, r5, r6, pc}
 23fadb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fadb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fadb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fadbc:	bfc2      	ittt	gt
 23fadbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fadc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fadc6:	bd70      	popgt	{r4, r5, r6, pc}
 23fadc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fadcc:	f04f 0e00 	mov.w	lr, #0
 23fadd0:	3c01      	subs	r4, #1
 23fadd2:	e690      	b.n	23faaf6 <__aeabi_dmul+0xde>
 23fadd4:	ea45 0e06 	orr.w	lr, r5, r6
 23fadd8:	e68d      	b.n	23faaf6 <__aeabi_dmul+0xde>
 23fadda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fadde:	ea94 0f0c 	teq	r4, ip
 23fade2:	bf08      	it	eq
 23fade4:	ea95 0f0c 	teqeq	r5, ip
 23fade8:	f43f af3b 	beq.w	23fac62 <__aeabi_dmul+0x24a>
 23fadec:	ea94 0f0c 	teq	r4, ip
 23fadf0:	d10a      	bne.n	23fae08 <__aeabi_ddiv+0x19c>
 23fadf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fadf6:	f47f af34 	bne.w	23fac62 <__aeabi_dmul+0x24a>
 23fadfa:	ea95 0f0c 	teq	r5, ip
 23fadfe:	f47f af25 	bne.w	23fac4c <__aeabi_dmul+0x234>
 23fae02:	4610      	mov	r0, r2
 23fae04:	4619      	mov	r1, r3
 23fae06:	e72c      	b.n	23fac62 <__aeabi_dmul+0x24a>
 23fae08:	ea95 0f0c 	teq	r5, ip
 23fae0c:	d106      	bne.n	23fae1c <__aeabi_ddiv+0x1b0>
 23fae0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fae12:	f43f aefd 	beq.w	23fac10 <__aeabi_dmul+0x1f8>
 23fae16:	4610      	mov	r0, r2
 23fae18:	4619      	mov	r1, r3
 23fae1a:	e722      	b.n	23fac62 <__aeabi_dmul+0x24a>
 23fae1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fae20:	bf18      	it	ne
 23fae22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fae26:	f47f aec5 	bne.w	23fabb4 <__aeabi_dmul+0x19c>
 23fae2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fae2e:	f47f af0d 	bne.w	23fac4c <__aeabi_dmul+0x234>
 23fae32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fae36:	f47f aeeb 	bne.w	23fac10 <__aeabi_dmul+0x1f8>
 23fae3a:	e712      	b.n	23fac62 <__aeabi_dmul+0x24a>

023fae3c <__gedf2>:
 23fae3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fae40:	e006      	b.n	23fae50 <__cmpdf2+0x4>
 23fae42:	bf00      	nop

023fae44 <__ledf2>:
 23fae44:	f04f 0c01 	mov.w	ip, #1
 23fae48:	e002      	b.n	23fae50 <__cmpdf2+0x4>
 23fae4a:	bf00      	nop

023fae4c <__cmpdf2>:
 23fae4c:	f04f 0c01 	mov.w	ip, #1
 23fae50:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fae54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fae58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fae5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fae60:	bf18      	it	ne
 23fae62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fae66:	d01b      	beq.n	23faea0 <__cmpdf2+0x54>
 23fae68:	b001      	add	sp, #4
 23fae6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fae6e:	bf0c      	ite	eq
 23fae70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fae74:	ea91 0f03 	teqne	r1, r3
 23fae78:	bf02      	ittt	eq
 23fae7a:	ea90 0f02 	teqeq	r0, r2
 23fae7e:	2000      	moveq	r0, #0
 23fae80:	4770      	bxeq	lr
 23fae82:	f110 0f00 	cmn.w	r0, #0
 23fae86:	ea91 0f03 	teq	r1, r3
 23fae8a:	bf58      	it	pl
 23fae8c:	4299      	cmppl	r1, r3
 23fae8e:	bf08      	it	eq
 23fae90:	4290      	cmpeq	r0, r2
 23fae92:	bf2c      	ite	cs
 23fae94:	17d8      	asrcs	r0, r3, #31
 23fae96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fae9a:	f040 0001 	orr.w	r0, r0, #1
 23fae9e:	4770      	bx	lr
 23faea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23faea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23faea8:	d102      	bne.n	23faeb0 <__cmpdf2+0x64>
 23faeaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23faeae:	d107      	bne.n	23faec0 <__cmpdf2+0x74>
 23faeb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23faeb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23faeb8:	d1d6      	bne.n	23fae68 <__cmpdf2+0x1c>
 23faeba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23faebe:	d0d3      	beq.n	23fae68 <__cmpdf2+0x1c>
 23faec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23faec4:	4770      	bx	lr
 23faec6:	bf00      	nop

023faec8 <__aeabi_cdrcmple>:
 23faec8:	4684      	mov	ip, r0
 23faeca:	4610      	mov	r0, r2
 23faecc:	4662      	mov	r2, ip
 23faece:	468c      	mov	ip, r1
 23faed0:	4619      	mov	r1, r3
 23faed2:	4663      	mov	r3, ip
 23faed4:	e000      	b.n	23faed8 <__aeabi_cdcmpeq>
 23faed6:	bf00      	nop

023faed8 <__aeabi_cdcmpeq>:
 23faed8:	b501      	push	{r0, lr}
 23faeda:	f7ff ffb7 	bl	23fae4c <__cmpdf2>
 23faede:	2800      	cmp	r0, #0
 23faee0:	bf48      	it	mi
 23faee2:	f110 0f00 	cmnmi.w	r0, #0
 23faee6:	bd01      	pop	{r0, pc}

023faee8 <__aeabi_dcmpeq>:
 23faee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23faeec:	f7ff fff4 	bl	23faed8 <__aeabi_cdcmpeq>
 23faef0:	bf0c      	ite	eq
 23faef2:	2001      	moveq	r0, #1
 23faef4:	2000      	movne	r0, #0
 23faef6:	f85d fb08 	ldr.w	pc, [sp], #8
 23faefa:	bf00      	nop

023faefc <__aeabi_dcmplt>:
 23faefc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23faf00:	f7ff ffea 	bl	23faed8 <__aeabi_cdcmpeq>
 23faf04:	bf34      	ite	cc
 23faf06:	2001      	movcc	r0, #1
 23faf08:	2000      	movcs	r0, #0
 23faf0a:	f85d fb08 	ldr.w	pc, [sp], #8
 23faf0e:	bf00      	nop

023faf10 <__aeabi_dcmple>:
 23faf10:	f84d ed08 	str.w	lr, [sp, #-8]!
 23faf14:	f7ff ffe0 	bl	23faed8 <__aeabi_cdcmpeq>
 23faf18:	bf94      	ite	ls
 23faf1a:	2001      	movls	r0, #1
 23faf1c:	2000      	movhi	r0, #0
 23faf1e:	f85d fb08 	ldr.w	pc, [sp], #8
 23faf22:	bf00      	nop

023faf24 <__aeabi_dcmpge>:
 23faf24:	f84d ed08 	str.w	lr, [sp, #-8]!
 23faf28:	f7ff ffce 	bl	23faec8 <__aeabi_cdrcmple>
 23faf2c:	bf94      	ite	ls
 23faf2e:	2001      	movls	r0, #1
 23faf30:	2000      	movhi	r0, #0
 23faf32:	f85d fb08 	ldr.w	pc, [sp], #8
 23faf36:	bf00      	nop

023faf38 <__aeabi_dcmpgt>:
 23faf38:	f84d ed08 	str.w	lr, [sp, #-8]!
 23faf3c:	f7ff ffc4 	bl	23faec8 <__aeabi_cdrcmple>
 23faf40:	bf34      	ite	cc
 23faf42:	2001      	movcc	r0, #1
 23faf44:	2000      	movcs	r0, #0
 23faf46:	f85d fb08 	ldr.w	pc, [sp], #8
 23faf4a:	bf00      	nop

023faf4c <__aeabi_dcmpun>:
 23faf4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23faf50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23faf54:	d102      	bne.n	23faf5c <__aeabi_dcmpun+0x10>
 23faf56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23faf5a:	d10a      	bne.n	23faf72 <__aeabi_dcmpun+0x26>
 23faf5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23faf60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23faf64:	d102      	bne.n	23faf6c <__aeabi_dcmpun+0x20>
 23faf66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23faf6a:	d102      	bne.n	23faf72 <__aeabi_dcmpun+0x26>
 23faf6c:	f04f 0000 	mov.w	r0, #0
 23faf70:	4770      	bx	lr
 23faf72:	f04f 0001 	mov.w	r0, #1
 23faf76:	4770      	bx	lr

023faf78 <__aeabi_d2f>:
 23faf78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23faf7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23faf80:	bf24      	itt	cs
 23faf82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23faf86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23faf8a:	d90d      	bls.n	23fafa8 <__aeabi_d2f+0x30>
 23faf8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23faf90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23faf94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23faf98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23faf9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fafa0:	bf08      	it	eq
 23fafa2:	f020 0001 	biceq.w	r0, r0, #1
 23fafa6:	4770      	bx	lr
 23fafa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fafac:	d121      	bne.n	23faff2 <__aeabi_d2f+0x7a>
 23fafae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fafb2:	bfbc      	itt	lt
 23fafb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fafb8:	4770      	bxlt	lr
 23fafba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fafbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fafc2:	f1c2 0218 	rsb	r2, r2, #24
 23fafc6:	f1c2 0c20 	rsb	ip, r2, #32
 23fafca:	fa10 f30c 	lsls.w	r3, r0, ip
 23fafce:	fa20 f002 	lsr.w	r0, r0, r2
 23fafd2:	bf18      	it	ne
 23fafd4:	f040 0001 	orrne.w	r0, r0, #1
 23fafd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fafdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fafe0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fafe4:	ea40 000c 	orr.w	r0, r0, ip
 23fafe8:	fa23 f302 	lsr.w	r3, r3, r2
 23fafec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23faff0:	e7cc      	b.n	23faf8c <__aeabi_d2f+0x14>
 23faff2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23faff6:	d107      	bne.n	23fb008 <__aeabi_d2f+0x90>
 23faff8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23faffc:	bf1e      	ittt	ne
 23faffe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fb002:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fb006:	4770      	bxne	lr
 23fb008:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fb00c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fb010:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fb014:	4770      	bx	lr
 23fb016:	bf00      	nop

023fb018 <strcmp>:
 23fb018:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb020:	2a01      	cmp	r2, #1
 23fb022:	bf28      	it	cs
 23fb024:	429a      	cmpcs	r2, r3
 23fb026:	d0f7      	beq.n	23fb018 <strcmp>
 23fb028:	1ad0      	subs	r0, r2, r3
 23fb02a:	4770      	bx	lr

023fb02c <strlen>:
 23fb02c:	4603      	mov	r3, r0
 23fb02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb032:	2a00      	cmp	r2, #0
 23fb034:	d1fb      	bne.n	23fb02e <strlen+0x2>
 23fb036:	1a18      	subs	r0, r3, r0
 23fb038:	3801      	subs	r0, #1
 23fb03a:	4770      	bx	lr

023fb03c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb03c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb03e:	f003 fedb 	bl	23fedf8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb042:	2500      	movs	r5, #0
 23fb044:	4e05      	ldr	r6, [pc, #20]	; (23fb05c <module_user_init+0x20>)
 23fb046:	4c06      	ldr	r4, [pc, #24]	; (23fb060 <module_user_init+0x24>)
 23fb048:	1ba4      	subs	r4, r4, r6
 23fb04a:	08a4      	lsrs	r4, r4, #2
 23fb04c:	42ac      	cmp	r4, r5
 23fb04e:	d100      	bne.n	23fb052 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb050:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb052:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb056:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb058:	3501      	adds	r5, #1
 23fb05a:	e7f7      	b.n	23fb04c <module_user_init+0x10>
 23fb05c:	023fffcc 	.word	0x023fffcc
 23fb060:	023ffff0 	.word	0x023ffff0

023fb064 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb064:	f000 bab4 	b.w	23fb5d0 <setup>

023fb068 <module_user_loop>:
}

void module_user_loop() {
 23fb068:	b508      	push	{r3, lr}
    loop();
 23fb06a:	f000 f92b 	bl	23fb2c4 <loop>
    _post_loop();
}
 23fb06e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb072:	f003 be79 	b.w	23fed68 <_post_loop>

023fb076 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb076:	f001 bc97 	b.w	23fc9a8 <malloc>

023fb07a <_Znaj>:
 23fb07a:	f001 bc95 	b.w	23fc9a8 <malloc>

023fb07e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb07e:	f001 bca1 	b.w	23fc9c4 <free>
	...

023fb084 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb084:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb086:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb088:	4a02      	ldr	r2, [pc, #8]	; (23fb094 <__cxa_pure_virtual+0x10>)
 23fb08a:	4903      	ldr	r1, [pc, #12]	; (23fb098 <__cxa_pure_virtual+0x14>)
 23fb08c:	f001 fae8 	bl	23fc660 <panic_>
  while (1);
 23fb090:	e7fe      	b.n	23fb090 <__cxa_pure_virtual+0xc>
 23fb092:	bf00      	nop
 23fb094:	023fc175 	.word	0x023fc175
 23fb098:	023ffa24 	.word	0x023ffa24

023fb09c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb09c:	7800      	ldrb	r0, [r0, #0]
 23fb09e:	fab0 f080 	clz	r0, r0
 23fb0a2:	0940      	lsrs	r0, r0, #5
 23fb0a4:	4770      	bx	lr

023fb0a6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb0a6:	2301      	movs	r3, #1
 23fb0a8:	7003      	strb	r3, [r0, #0]
 23fb0aa:	4770      	bx	lr

023fb0ac <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb0ac:	4770      	bx	lr
	...

023fb0b0 <_Z10tare_scale6String>:
}

// Particle Cloud Functions must return quickly! Set a boolean to do logic in loop() 
int tare_scale(String cmd)
{
    tareScale = true;
 23fb0b0:	2201      	movs	r2, #1
 23fb0b2:	4b02      	ldr	r3, [pc, #8]	; (23fb0bc <_Z10tare_scale6String+0xc>)
    return 0;
 23fb0b4:	2000      	movs	r0, #0
    tareScale = true;
 23fb0b6:	701a      	strb	r2, [r3, #0]
 23fb0b8:	4770      	bx	lr
 23fb0ba:	bf00      	nop
 23fb0bc:	1007ae20 	.word	0x1007ae20

023fb0c0 <_Z15calibrate_scale6String>:
{
 23fb0c0:	b508      	push	{r3, lr}
    weightRef = (uint16_t)cmd.toInt();
 23fb0c2:	f003 fcdb 	bl	23fea7c <_ZNK6String5toIntEv>
    calibrateScale = true;
 23fb0c6:	2201      	movs	r2, #1
    weightRef = (uint16_t)cmd.toInt();
 23fb0c8:	4b02      	ldr	r3, [pc, #8]	; (23fb0d4 <_Z15calibrate_scale6String+0x14>)
 23fb0ca:	8018      	strh	r0, [r3, #0]
    calibrateScale = true;
 23fb0cc:	4b02      	ldr	r3, [pc, #8]	; (23fb0d8 <_Z15calibrate_scale6String+0x18>)
}
 23fb0ce:	2000      	movs	r0, #0
    calibrateScale = true;
 23fb0d0:	701a      	strb	r2, [r3, #0]
}
 23fb0d2:	bd08      	pop	{r3, pc}
 23fb0d4:	1007ae40 	.word	0x1007ae40
 23fb0d8:	1007adc0 	.word	0x1007adc0

023fb0dc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb0dc:	b510      	push	{r4, lr}
 23fb0de:	4604      	mov	r4, r0
 23fb0e0:	4b09      	ldr	r3, [pc, #36]	; (23fb108 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb0e2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb0e4:	f002 fce8 	bl	23fdab8 <_ZN5spark10LogManager8instanceEv>
 23fb0e8:	4621      	mov	r1, r4
 23fb0ea:	f002 ff1f 	bl	23fdf2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb0ee:	f003 fdab 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb0f2:	f003 fd9b 	bl	23fec2c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb0f6:	4620      	mov	r0, r4
 23fb0f8:	4b04      	ldr	r3, [pc, #16]	; (23fb10c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb0fa:	f840 3b04 	str.w	r3, [r0], #4
 23fb0fe:	f002 fdb1 	bl	23fdc64 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb102:	4620      	mov	r0, r4
 23fb104:	bd10      	pop	{r4, pc}
 23fb106:	bf00      	nop
 23fb108:	023ffbb0 	.word	0x023ffbb0
 23fb10c:	023ffb98 	.word	0x023ffb98

023fb110 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb110:	b510      	push	{r4, lr}
 23fb112:	4604      	mov	r4, r0
    }
 23fb114:	f7ff ffe2 	bl	23fb0dc <_ZN5spark16SerialLogHandlerD1Ev>
 23fb118:	4620      	mov	r0, r4
 23fb11a:	2124      	movs	r1, #36	; 0x24
 23fb11c:	f7ff ffaf 	bl	23fb07e <_ZdlPvj>
 23fb120:	4620      	mov	r0, r4
 23fb122:	bd10      	pop	{r4, pc}

023fb124 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb124:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb126:	f04f 0c20 	mov.w	ip, #32
 23fb12a:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb12c:	b500      	push	{lr}
 23fb12e:	b08c      	sub	sp, #48	; 0x30
 23fb130:	aa0d      	add	r2, sp, #52	; 0x34
 23fb132:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb136:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb13a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb13e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb140:	6801      	ldr	r1, [r0, #0]
 23fb142:	aa04      	add	r2, sp, #16
 23fb144:	201e      	movs	r0, #30
 23fb146:	f001 fa99 	bl	23fc67c <log_message_v>
}
 23fb14a:	b00c      	add	sp, #48	; 0x30
 23fb14c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb150:	b003      	add	sp, #12
 23fb152:	4770      	bx	lr

023fb154 <_Z14loadcell2_initv>:
{
 23fb154:	b530      	push	{r4, r5, lr}
 23fb156:	b085      	sub	sp, #20
    loadcell2_cfg_setup( &cfg );
 23fb158:	a801      	add	r0, sp, #4
 23fb15a:	f000 fbaa 	bl	23fb8b2 <_Z19loadcell2_cfg_setupP15loadcell2_cfg_t>
    LOADCELL2_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fb15e:	2301      	movs	r3, #1
 23fb160:	f8ad 3004 	strh.w	r3, [sp, #4]
 23fb164:	2313      	movs	r3, #19
    loadcell2_init( &loadcell2, &cfg );
 23fb166:	4c1b      	ldr	r4, [pc, #108]	; (23fb1d4 <_Z14loadcell2_initv+0x80>)
    Log.info("Reset all registers");
 23fb168:	4d1b      	ldr	r5, [pc, #108]	; (23fb1d8 <_Z14loadcell2_initv+0x84>)
    loadcell2_init( &loadcell2, &cfg );
 23fb16a:	a901      	add	r1, sp, #4
 23fb16c:	4620      	mov	r0, r4
    LOADCELL2_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fb16e:	f88d 3006 	strb.w	r3, [sp, #6]
    loadcell2_init( &loadcell2, &cfg );
 23fb172:	f000 fba7 	bl	23fb8c4 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t>
    delay(100);
 23fb176:	2064      	movs	r0, #100	; 0x64
 23fb178:	f001 fc94 	bl	23fcaa4 <delay>
    Log.info("Reset all registers");
 23fb17c:	4917      	ldr	r1, [pc, #92]	; (23fb1dc <_Z14loadcell2_initv+0x88>)
 23fb17e:	4628      	mov	r0, r5
 23fb180:	f7ff ffd0 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_reset(&loadcell2);
 23fb184:	4620      	mov	r0, r4
 23fb186:	f000 fbe9 	bl	23fb95c <_Z15loadcell2_resetP11loadcell2_t>
    delay(100);
 23fb18a:	2064      	movs	r0, #100	; 0x64
 23fb18c:	f001 fc8a 	bl	23fcaa4 <delay>
    Log.info("Power on");
 23fb190:	4913      	ldr	r1, [pc, #76]	; (23fb1e0 <_Z14loadcell2_initv+0x8c>)
 23fb192:	4628      	mov	r0, r5
 23fb194:	f7ff ffc6 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_power_on(&loadcell2);
 23fb198:	4620      	mov	r0, r4
 23fb19a:	f000 fc05 	bl	23fb9a8 <_Z18loadcell2_power_onP11loadcell2_t>
    delay(100);
 23fb19e:	2064      	movs	r0, #100	; 0x64
 23fb1a0:	f001 fc80 	bl	23fcaa4 <delay>
    Log.info("Set default config");
 23fb1a4:	490f      	ldr	r1, [pc, #60]	; (23fb1e4 <_Z14loadcell2_initv+0x90>)
 23fb1a6:	4628      	mov	r0, r5
 23fb1a8:	f7ff ffbc 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_default_cfg( &loadcell2 );
 23fb1ac:	4620      	mov	r0, r4
 23fb1ae:	f000 fcd2 	bl	23fbb56 <_Z21loadcell2_default_cfgP11loadcell2_t>
//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
inline void Delay_1000ms( ) {delay(1000);}
inline void Delay_ms(unsigned long ms) {delay(ms);}
 23fb1b2:	2064      	movs	r0, #100	; 0x64
 23fb1b4:	f001 fc76 	bl	23fcaa4 <delay>
    Log.info("Calibrate AFE");
 23fb1b8:	490b      	ldr	r1, [pc, #44]	; (23fb1e8 <_Z14loadcell2_initv+0x94>)
 23fb1ba:	4628      	mov	r0, r5
 23fb1bc:	f7ff ffb2 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
    loadcell2_calibrate_afe(&loadcell2);
 23fb1c0:	4620      	mov	r0, r4
 23fb1c2:	f000 fcdc 	bl	23fbb7e <_Z23loadcell2_calibrate_afeP11loadcell2_t>
    delay(1000);
 23fb1c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fb1ca:	f001 fc6b 	bl	23fcaa4 <delay>
}
 23fb1ce:	b005      	add	sp, #20
 23fb1d0:	bd30      	pop	{r4, r5, pc}
 23fb1d2:	bf00      	nop
 23fb1d4:	1007a9a8 	.word	0x1007a9a8
 23fb1d8:	1007ae6c 	.word	0x1007ae6c
 23fb1dc:	023ffa39 	.word	0x023ffa39
 23fb1e0:	023ffa4d 	.word	0x023ffa4d
 23fb1e4:	023ffa56 	.word	0x023ffa56
 23fb1e8:	023ffa69 	.word	0x023ffa69

023fb1ec <_Z14publishToCloudv>:
{
 23fb1ec:	b530      	push	{r4, r5, lr}
    memset(buf, 0, sizeof(buf));
 23fb1ee:	4b2d      	ldr	r3, [pc, #180]	; (23fb2a4 <_Z14publishToCloudv+0xb8>)
{
 23fb1f0:	b08b      	sub	sp, #44	; 0x2c
    memset(buf, 0, sizeof(buf));
 23fb1f2:	2100      	movs	r1, #0
 23fb1f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23fb1f8:	4618      	mov	r0, r3
 23fb1fa:	f004 fa7a 	bl	23ff6f2 <memset>
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 23fb1fe:	2400      	movs	r4, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23fb200:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23fb204:	4a28      	ldr	r2, [pc, #160]	; (23fb2a8 <_Z14publishToCloudv+0xbc>)
 23fb206:	9007      	str	r0, [sp, #28]
    writer.beginObject();
 23fb208:	a805      	add	r0, sp, #20
 23fb20a:	e9cd 3408 	strd	r3, r4, [sp, #32]
        state_(BEGIN) {
 23fb20e:	f88d 4018 	strb.w	r4, [sp, #24]
        n_(0) {
 23fb212:	9205      	str	r2, [sp, #20]
 23fb214:	f002 fa05 	bl	23fd622 <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name, strlen(name));
 23fb218:	2206      	movs	r2, #6
 23fb21a:	4924      	ldr	r1, [pc, #144]	; (23fb2ac <_Z14publishToCloudv+0xc0>)
 23fb21c:	a805      	add	r0, sp, #20
 23fb21e:	f002 faa3 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
        writer.name("weight").value(weight_gr);
 23fb222:	4b23      	ldr	r3, [pc, #140]	; (23fb2b0 <_Z14publishToCloudv+0xc4>)
 23fb224:	4605      	mov	r5, r0
 23fb226:	6818      	ldr	r0, [r3, #0]
 23fb228:	f7ff fb9e 	bl	23fa968 <__aeabi_f2d>
 23fb22c:	ec41 0b10 	vmov	d0, r0, r1
 23fb230:	4628      	mov	r0, r5
 23fb232:	f002 fa27 	bl	23fd684 <_ZN5spark10JSONWriter5valueEd>
 23fb236:	220b      	movs	r2, #11
 23fb238:	491e      	ldr	r1, [pc, #120]	; (23fb2b4 <_Z14publishToCloudv+0xc8>)
 23fb23a:	a805      	add	r0, sp, #20
 23fb23c:	f002 fa94 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
        writer.name("temperature").value(temp_c);
 23fb240:	4b1d      	ldr	r3, [pc, #116]	; (23fb2b8 <_Z14publishToCloudv+0xcc>)
 23fb242:	4605      	mov	r5, r0
 23fb244:	6818      	ldr	r0, [r3, #0]
 23fb246:	f7ff fb8f 	bl	23fa968 <__aeabi_f2d>
 23fb24a:	ec41 0b10 	vmov	d0, r0, r1
 23fb24e:	4628      	mov	r0, r5
 23fb250:	f002 fa18 	bl	23fd684 <_ZN5spark10JSONWriter5valueEd>
    writer.endObject();
 23fb254:	a805      	add	r0, sp, #20
 23fb256:	f002 f9ce 	bl	23fd5f6 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 23fb25a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 23fb25e:	4293      	cmp	r3, r2
 23fb260:	bf28      	it	cs
 23fb262:	4613      	movcs	r3, r2
 23fb264:	9a07      	ldr	r2, [sp, #28]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fb266:	4915      	ldr	r1, [pc, #84]	; (23fb2bc <_Z14publishToCloudv+0xd0>)
 23fb268:	54d4      	strb	r4, [r2, r3]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fb26a:	4b15      	ldr	r3, [pc, #84]	; (23fb2c0 <_Z14publishToCloudv+0xd4>)
 23fb26c:	9a07      	ldr	r2, [sp, #28]
 23fb26e:	781b      	ldrb	r3, [r3, #0]
 23fb270:	a803      	add	r0, sp, #12
 23fb272:	f88d 3000 	strb.w	r3, [sp]
 23fb276:	233c      	movs	r3, #60	; 0x3c
 23fb278:	f001 fdce 	bl	23fce18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fb27c:	9c04      	ldr	r4, [sp, #16]
 23fb27e:	b17c      	cbz	r4, 23fb2a0 <_Z14publishToCloudv+0xb4>
      if (--_M_use_count == 0)
 23fb280:	6863      	ldr	r3, [r4, #4]
 23fb282:	3b01      	subs	r3, #1
 23fb284:	6063      	str	r3, [r4, #4]
 23fb286:	b95b      	cbnz	r3, 23fb2a0 <_Z14publishToCloudv+0xb4>
          _M_dispose();
 23fb288:	6823      	ldr	r3, [r4, #0]
 23fb28a:	4620      	mov	r0, r4
 23fb28c:	689b      	ldr	r3, [r3, #8]
 23fb28e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb290:	68a3      	ldr	r3, [r4, #8]
 23fb292:	3b01      	subs	r3, #1
 23fb294:	60a3      	str	r3, [r4, #8]
 23fb296:	b91b      	cbnz	r3, 23fb2a0 <_Z14publishToCloudv+0xb4>
            _M_destroy();
 23fb298:	6823      	ldr	r3, [r4, #0]
 23fb29a:	4620      	mov	r0, r4
 23fb29c:	68db      	ldr	r3, [r3, #12]
 23fb29e:	4798      	blx	r3
}
 23fb2a0:	b00b      	add	sp, #44	; 0x2c
 23fb2a2:	bd30      	pop	{r4, r5, pc}
 23fb2a4:	1007a9c0 	.word	0x1007a9c0
 23fb2a8:	023ffc6c 	.word	0x023ffc6c
 23fb2ac:	023ffa77 	.word	0x023ffa77
 23fb2b0:	1007a9bc 	.word	0x1007a9bc
 23fb2b4:	023ffa7e 	.word	0x023ffa7e
 23fb2b8:	1007ae30 	.word	0x1007ae30
 23fb2bc:	023ffa8a 	.word	0x023ffa8a
 23fb2c0:	1007a9a4 	.word	0x1007a9a4

023fb2c4 <loop>:
{
 23fb2c4:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb2c6:	f000 ff63 	bl	23fc190 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastRead >= readPeriod.count())
 23fb2ca:	4c5a      	ldr	r4, [pc, #360]	; (23fb434 <loop+0x170>)
 23fb2cc:	6823      	ldr	r3, [r4, #0]
 23fb2ce:	1ac0      	subs	r0, r0, r3
 23fb2d0:	f241 3387 	movw	r3, #4999	; 0x1387
 23fb2d4:	4298      	cmp	r0, r3
 23fb2d6:	d931      	bls.n	23fb33c <loop+0x78>
 23fb2d8:	f000 ff5a 	bl	23fc190 <HAL_Timer_Get_Milli_Seconds>
        weight_gr = loadcell2_get_weight(&loadcell2, &cell_data);
 23fb2dc:	4956      	ldr	r1, [pc, #344]	; (23fb438 <loop+0x174>)
        lastRead = millis();
 23fb2de:	6020      	str	r0, [r4, #0]
        weight_gr = loadcell2_get_weight(&loadcell2, &cell_data);
 23fb2e0:	4856      	ldr	r0, [pc, #344]	; (23fb43c <loop+0x178>)
 23fb2e2:	f000 fd1d 	bl	23fbd20 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t>
 23fb2e6:	4c56      	ldr	r4, [pc, #344]	; (23fb440 <loop+0x17c>)
 23fb2e8:	ee10 0a10 	vmov	r0, s0
 23fb2ec:	ed84 0a00 	vstr	s0, [r4]
        Log.info("Weight: %.2f", weight_gr);
 23fb2f0:	f7ff fb3a 	bl	23fa968 <__aeabi_f2d>
 23fb2f4:	4602      	mov	r2, r0
 23fb2f6:	460b      	mov	r3, r1
 23fb2f8:	4852      	ldr	r0, [pc, #328]	; (23fb444 <loop+0x180>)
 23fb2fa:	4953      	ldr	r1, [pc, #332]	; (23fb448 <loop+0x184>)
 23fb2fc:	f7ff ff12 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        temp_c = thermistor->readTempC();
 23fb300:	4b52      	ldr	r3, [pc, #328]	; (23fb44c <loop+0x188>)
 23fb302:	4d53      	ldr	r5, [pc, #332]	; (23fb450 <loop+0x18c>)
 23fb304:	6818      	ldr	r0, [r3, #0]
 23fb306:	f000 fedb 	bl	23fc0c0 <_ZNK10Thermistor9readTempCEv>
 23fb30a:	ec51 0b10 	vmov	r0, r1, d0
 23fb30e:	f7ff fe33 	bl	23faf78 <__aeabi_d2f>
 23fb312:	6028      	str	r0, [r5, #0]
        Log.info("Temp: %.2f C", temp_c);
 23fb314:	f7ff fb28 	bl	23fa968 <__aeabi_f2d>
 23fb318:	4602      	mov	r2, r0
 23fb31a:	460b      	mov	r3, r1
 23fb31c:	4849      	ldr	r0, [pc, #292]	; (23fb444 <loop+0x180>)
 23fb31e:	494d      	ldr	r1, [pc, #308]	; (23fb454 <loop+0x190>)
 23fb320:	f7ff ff00 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        tempC = temp_c;
 23fb324:	6828      	ldr	r0, [r5, #0]
 23fb326:	f7ff fb1f 	bl	23fa968 <__aeabi_f2d>
 23fb32a:	4b4b      	ldr	r3, [pc, #300]	; (23fb458 <loop+0x194>)
 23fb32c:	e9c3 0100 	strd	r0, r1, [r3]
        weightGr = weight_gr;
 23fb330:	6820      	ldr	r0, [r4, #0]
 23fb332:	f7ff fb19 	bl	23fa968 <__aeabi_f2d>
 23fb336:	4b49      	ldr	r3, [pc, #292]	; (23fb45c <loop+0x198>)
 23fb338:	e9c3 0100 	strd	r0, r1, [r3]
 23fb33c:	f000 ff28 	bl	23fc190 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastPublish >= publishPeriod.count())
 23fb340:	4c47      	ldr	r4, [pc, #284]	; (23fb460 <loop+0x19c>)
 23fb342:	6823      	ldr	r3, [r4, #0]
 23fb344:	1ac0      	subs	r0, r0, r3
 23fb346:	4b47      	ldr	r3, [pc, #284]	; (23fb464 <loop+0x1a0>)
 23fb348:	4298      	cmp	r0, r3
 23fb34a:	d907      	bls.n	23fb35c <loop+0x98>
 23fb34c:	f000 ff20 	bl	23fc190 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 23fb350:	6020      	str	r0, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fb352:	f001 fa57 	bl	23fc804 <spark_cloud_flag_connected>
        if (Particle.connected()) 
 23fb356:	b108      	cbz	r0, 23fb35c <loop+0x98>
            publishToCloud();
 23fb358:	f7ff ff48 	bl	23fb1ec <_Z14publishToCloudv>
    if (tareScale == true)
 23fb35c:	4b42      	ldr	r3, [pc, #264]	; (23fb468 <loop+0x1a4>)
 23fb35e:	781a      	ldrb	r2, [r3, #0]
 23fb360:	b1c2      	cbz	r2, 23fb394 <loop+0xd0>
        tareScale = false;
 23fb362:	2400      	movs	r4, #0
        Log.info("Tarring the scale");
 23fb364:	4941      	ldr	r1, [pc, #260]	; (23fb46c <loop+0x1a8>)
 23fb366:	4837      	ldr	r0, [pc, #220]	; (23fb444 <loop+0x180>)
        tareScale = false;
 23fb368:	701c      	strb	r4, [r3, #0]
        Log.info("Tarring the scale");
 23fb36a:	f7ff fedb 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        loadcell2_tare(&loadcell2, &cell_data);
 23fb36e:	4932      	ldr	r1, [pc, #200]	; (23fb438 <loop+0x174>)
 23fb370:	4832      	ldr	r0, [pc, #200]	; (23fb43c <loop+0x178>)
 23fb372:	f000 fc2f 	bl	23fbbd4 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t>
        delay(500);
 23fb376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fb37a:	f001 fb93 	bl	23fcaa4 <delay>
        Log.info("Tarring complete");
 23fb37e:	493c      	ldr	r1, [pc, #240]	; (23fb470 <loop+0x1ac>)
 23fb380:	4830      	ldr	r0, [pc, #192]	; (23fb444 <loop+0x180>)
 23fb382:	f7ff fecf 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        EEPROM.put(tareOffsetAddr, cell_data.tare);
 23fb386:	f003 fdf5 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23fb38a:	2204      	movs	r2, #4
 23fb38c:	4620      	mov	r0, r4
 23fb38e:	492a      	ldr	r1, [pc, #168]	; (23fb438 <loop+0x174>)
 23fb390:	f000 ff28 	bl	23fc1e4 <HAL_EEPROM_Put>
    if (calibrateScale == true)
 23fb394:	4b37      	ldr	r3, [pc, #220]	; (23fb474 <loop+0x1b0>)
 23fb396:	781a      	ldrb	r2, [r3, #0]
 23fb398:	2a00      	cmp	r2, #0
 23fb39a:	d04a      	beq.n	23fb432 <loop+0x16e>
        calibrateScale = false;
 23fb39c:	2200      	movs	r2, #0
        if (loadcell2_calibration(&loadcell2, weightRef, &cell_data ) == LOADCELL2_GET_RESULT_OK)
 23fb39e:	4c36      	ldr	r4, [pc, #216]	; (23fb478 <loop+0x1b4>)
        Log.info("Start calibration");
 23fb3a0:	4936      	ldr	r1, [pc, #216]	; (23fb47c <loop+0x1b8>)
 23fb3a2:	4828      	ldr	r0, [pc, #160]	; (23fb444 <loop+0x180>)
        calibrateScale = false;
 23fb3a4:	701a      	strb	r2, [r3, #0]
        Log.info("Start calibration");
 23fb3a6:	f7ff febd 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        if (loadcell2_calibration(&loadcell2, weightRef, &cell_data ) == LOADCELL2_GET_RESULT_OK)
 23fb3aa:	4a23      	ldr	r2, [pc, #140]	; (23fb438 <loop+0x174>)
 23fb3ac:	8821      	ldrh	r1, [r4, #0]
 23fb3ae:	4823      	ldr	r0, [pc, #140]	; (23fb43c <loop+0x178>)
 23fb3b0:	f000 fc3e 	bl	23fbc30 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t>
 23fb3b4:	2801      	cmp	r0, #1
 23fb3b6:	d138      	bne.n	23fb42a <loop+0x166>
            Log.info("Calibration complete");
 23fb3b8:	4931      	ldr	r1, [pc, #196]	; (23fb480 <loop+0x1bc>)
 23fb3ba:	4822      	ldr	r0, [pc, #136]	; (23fb444 <loop+0x180>)
 23fb3bc:	f7ff feb2 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
            EEPROM.put(weightRefAddr, weightRef);
 23fb3c0:	f003 fdd8 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb3c4:	2202      	movs	r2, #2
 23fb3c6:	4621      	mov	r1, r4
 23fb3c8:	200a      	movs	r0, #10
 23fb3ca:	f000 ff0b 	bl	23fc1e4 <HAL_EEPROM_Put>
            if (weightRef == LOADCELL2_WEIGHT_100G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_100g);
 23fb3ce:	8823      	ldrh	r3, [r4, #0]
 23fb3d0:	2b64      	cmp	r3, #100	; 0x64
 23fb3d2:	d108      	bne.n	23fb3e6 <loop+0x122>
 23fb3d4:	f003 fdce 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb3d8:	2204      	movs	r2, #4
 23fb3da:	492a      	ldr	r1, [pc, #168]	; (23fb484 <loop+0x1c0>)
 23fb3dc:	2014      	movs	r0, #20
}
 23fb3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fb3e2:	f000 beff 	b.w	23fc1e4 <HAL_EEPROM_Put>
            else if (weightRef == LOADCELL2_WEIGHT_500G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_500g);
 23fb3e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 23fb3ea:	d104      	bne.n	23fb3f6 <loop+0x132>
 23fb3ec:	f003 fdc2 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb3f0:	2204      	movs	r2, #4
 23fb3f2:	4925      	ldr	r1, [pc, #148]	; (23fb488 <loop+0x1c4>)
 23fb3f4:	e7f2      	b.n	23fb3dc <loop+0x118>
            else if (weightRef == LOADCELL2_WEIGHT_1000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_1000g);
 23fb3f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fb3fa:	d104      	bne.n	23fb406 <loop+0x142>
 23fb3fc:	f003 fdba 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb400:	2204      	movs	r2, #4
 23fb402:	4922      	ldr	r1, [pc, #136]	; (23fb48c <loop+0x1c8>)
 23fb404:	e7ea      	b.n	23fb3dc <loop+0x118>
            else if (weightRef == LOADCELL2_WEIGHT_5000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_5000g);
 23fb406:	f241 3288 	movw	r2, #5000	; 0x1388
 23fb40a:	4293      	cmp	r3, r2
 23fb40c:	d104      	bne.n	23fb418 <loop+0x154>
 23fb40e:	f003 fdb1 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb412:	2204      	movs	r2, #4
 23fb414:	491e      	ldr	r1, [pc, #120]	; (23fb490 <loop+0x1cc>)
 23fb416:	e7e1      	b.n	23fb3dc <loop+0x118>
            else if (weightRef == LOADCELL2_WEIGHT_10000G) EEPROM.put(calibrationFactorAddr, cell_data.weight_coeff_10000g);
 23fb418:	f242 7210 	movw	r2, #10000	; 0x2710
 23fb41c:	4293      	cmp	r3, r2
 23fb41e:	d108      	bne.n	23fb432 <loop+0x16e>
 23fb420:	f003 fda8 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb424:	2204      	movs	r2, #4
 23fb426:	491b      	ldr	r1, [pc, #108]	; (23fb494 <loop+0x1d0>)
 23fb428:	e7d8      	b.n	23fb3dc <loop+0x118>
            Log.info("Calibration error");
 23fb42a:	491b      	ldr	r1, [pc, #108]	; (23fb498 <loop+0x1d4>)
 23fb42c:	4805      	ldr	r0, [pc, #20]	; (23fb444 <loop+0x180>)
 23fb42e:	f7ff fe79 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
}
 23fb432:	bd38      	pop	{r3, r4, r5, pc}
 23fb434:	1007adf8 	.word	0x1007adf8
 23fb438:	1007adc4 	.word	0x1007adc4
 23fb43c:	1007a9a8 	.word	0x1007a9a8
 23fb440:	1007a9bc 	.word	0x1007a9bc
 23fb444:	1007ae6c 	.word	0x1007ae6c
 23fb448:	023ffa98 	.word	0x023ffa98
 23fb44c:	1007ae34 	.word	0x1007ae34
 23fb450:	1007ae30 	.word	0x1007ae30
 23fb454:	023ffaa5 	.word	0x023ffaa5
 23fb458:	1007ae28 	.word	0x1007ae28
 23fb45c:	1007ae38 	.word	0x1007ae38
 23fb460:	1007adf4 	.word	0x1007adf4
 23fb464:	00057e3f 	.word	0x00057e3f
 23fb468:	1007ae20 	.word	0x1007ae20
 23fb46c:	023ffab2 	.word	0x023ffab2
 23fb470:	023ffac4 	.word	0x023ffac4
 23fb474:	1007adc0 	.word	0x1007adc0
 23fb478:	1007ae40 	.word	0x1007ae40
 23fb47c:	023ffad5 	.word	0x023ffad5
 23fb480:	023ffae7 	.word	0x023ffae7
 23fb484:	1007adcc 	.word	0x1007adcc
 23fb488:	1007add4 	.word	0x1007add4
 23fb48c:	1007addc 	.word	0x1007addc
 23fb490:	1007ade4 	.word	0x1007ade4
 23fb494:	1007adec 	.word	0x1007adec
 23fb498:	023ffafc 	.word	0x023ffafc

023fb49c <_Z23readCalibrationSettingsv>:
{
 23fb49c:	b500      	push	{lr}
 23fb49e:	ed2d 8b02 	vpush	{d8}
 23fb4a2:	b085      	sub	sp, #20
    EEPROM.get(tareOffsetAddr, tareOffsetVal);
 23fb4a4:	f003 fd66 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23fb4a8:	2204      	movs	r2, #4
 23fb4aa:	2000      	movs	r0, #0
 23fb4ac:	a902      	add	r1, sp, #8
 23fb4ae:	f000 fe8b 	bl	23fc1c8 <HAL_EEPROM_Get>
    if (tareOffsetVal == 0xFFFFFFFF)
 23fb4b2:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 23fb5ac <_Z23readCalibrationSettingsv+0x110>
 23fb4b6:	eddd 7a02 	vldr	s15, [sp, #8]
 23fb4ba:	eef4 7a48 	vcmp.f32	s15, s16
 23fb4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb4c2:	d136      	bne.n	23fb532 <_Z23readCalibrationSettingsv+0x96>
        Log.info("No tarring found. Perfoming a tare.");
 23fb4c4:	493a      	ldr	r1, [pc, #232]	; (23fb5b0 <_Z23readCalibrationSettingsv+0x114>)
 23fb4c6:	483b      	ldr	r0, [pc, #236]	; (23fb5b4 <_Z23readCalibrationSettingsv+0x118>)
 23fb4c8:	f7ff fe2c 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        tareScale = true;
 23fb4cc:	2201      	movs	r2, #1
 23fb4ce:	4b3a      	ldr	r3, [pc, #232]	; (23fb5b8 <_Z23readCalibrationSettingsv+0x11c>)
 23fb4d0:	701a      	strb	r2, [r3, #0]
    EEPROM.get(weightRefAddr, weightRefVal);
 23fb4d2:	f003 fd4f 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb4d6:	2202      	movs	r2, #2
 23fb4d8:	200a      	movs	r0, #10
 23fb4da:	f10d 0106 	add.w	r1, sp, #6
 23fb4de:	f000 fe73 	bl	23fc1c8 <HAL_EEPROM_Get>
    if (weightRefVal == 0xFFFF)
 23fb4e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb4e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23fb4ea:	429a      	cmp	r2, r3
 23fb4ec:	d107      	bne.n	23fb4fe <_Z23readCalibrationSettingsv+0x62>
        Log.info("No weight ref found.");
 23fb4ee:	4933      	ldr	r1, [pc, #204]	; (23fb5bc <_Z23readCalibrationSettingsv+0x120>)
 23fb4f0:	4830      	ldr	r0, [pc, #192]	; (23fb5b4 <_Z23readCalibrationSettingsv+0x118>)
 23fb4f2:	f7ff fe17 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        weightRef = 1000;
 23fb4f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fb4fa:	4b31      	ldr	r3, [pc, #196]	; (23fb5c0 <_Z23readCalibrationSettingsv+0x124>)
 23fb4fc:	801a      	strh	r2, [r3, #0]
    EEPROM.get(calibrationFactorAddr, calibrationFactorVal);
 23fb4fe:	f003 fd39 	bl	23fef74 <_Z21__fetch_global_EEPROMv>
 23fb502:	2204      	movs	r2, #4
 23fb504:	2014      	movs	r0, #20
 23fb506:	a903      	add	r1, sp, #12
 23fb508:	f000 fe5e 	bl	23fc1c8 <HAL_EEPROM_Get>
    if (calibrationFactorVal == 0xFFFFFFFF)
 23fb50c:	eddd 7a03 	vldr	s15, [sp, #12]
 23fb510:	eef4 7a48 	vcmp.f32	s15, s16
 23fb514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb518:	d111      	bne.n	23fb53e <_Z23readCalibrationSettingsv+0xa2>
        Log.info("No calibration value found. Performing a calibration.");
 23fb51a:	492a      	ldr	r1, [pc, #168]	; (23fb5c4 <_Z23readCalibrationSettingsv+0x128>)
 23fb51c:	4825      	ldr	r0, [pc, #148]	; (23fb5b4 <_Z23readCalibrationSettingsv+0x118>)
 23fb51e:	f7ff fe01 	bl	23fb124 <_ZNK5spark6Logger4infoEPKcz>
        calibrateScale = true;
 23fb522:	2201      	movs	r2, #1
 23fb524:	4b28      	ldr	r3, [pc, #160]	; (23fb5c8 <_Z23readCalibrationSettingsv+0x12c>)
 23fb526:	701a      	strb	r2, [r3, #0]
}
 23fb528:	b005      	add	sp, #20
 23fb52a:	ecbd 8b02 	vpop	{d8}
 23fb52e:	f85d fb04 	ldr.w	pc, [sp], #4
        cell_data.tare_ok = LOADCELL2_DATA_OK;
 23fb532:	2201      	movs	r2, #1
        cell_data.tare = tareOffsetVal;
 23fb534:	4b25      	ldr	r3, [pc, #148]	; (23fb5cc <_Z23readCalibrationSettingsv+0x130>)
 23fb536:	edc3 7a00 	vstr	s15, [r3]
        cell_data.tare_ok = LOADCELL2_DATA_OK;
 23fb53a:	711a      	strb	r2, [r3, #4]
 23fb53c:	e7c9      	b.n	23fb4d2 <_Z23readCalibrationSettingsv+0x36>
        switch (weightRefVal)
 23fb53e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23fb542:	4b22      	ldr	r3, [pc, #136]	; (23fb5cc <_Z23readCalibrationSettingsv+0x130>)
 23fb544:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 23fb548:	d024      	beq.n	23fb594 <_Z23readCalibrationSettingsv+0xf8>
 23fb54a:	d80b      	bhi.n	23fb564 <_Z23readCalibrationSettingsv+0xc8>
 23fb54c:	2a64      	cmp	r2, #100	; 0x64
 23fb54e:	d017      	beq.n	23fb580 <_Z23readCalibrationSettingsv+0xe4>
 23fb550:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 23fb554:	d019      	beq.n	23fb58a <_Z23readCalibrationSettingsv+0xee>
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fb556:	2200      	movs	r2, #0
 23fb558:	731a      	strb	r2, [r3, #12]
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fb55a:	751a      	strb	r2, [r3, #20]
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fb55c:	771a      	strb	r2, [r3, #28]
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fb55e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 23fb562:	e00a      	b.n	23fb57a <_Z23readCalibrationSettingsv+0xde>
        switch (weightRefVal)
 23fb564:	f241 3188 	movw	r1, #5000	; 0x1388
 23fb568:	428a      	cmp	r2, r1
 23fb56a:	d018      	beq.n	23fb59e <_Z23readCalibrationSettingsv+0x102>
 23fb56c:	f242 7110 	movw	r1, #10000	; 0x2710
 23fb570:	428a      	cmp	r2, r1
 23fb572:	d1f0      	bne.n	23fb556 <_Z23readCalibrationSettingsv+0xba>
                cell_data.weight_coeff_10000g = calibrationFactorVal;
 23fb574:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
                cell_data.weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fb578:	2201      	movs	r2, #1
                cell_data.weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fb57a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 23fb57e:	e7d3      	b.n	23fb528 <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fb580:	2201      	movs	r2, #1
                cell_data.weight_coeff_100g = calibrationFactorVal;
 23fb582:	edc3 7a02 	vstr	s15, [r3, #8]
                cell_data.weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fb586:	731a      	strb	r2, [r3, #12]
                break;
 23fb588:	e7ce      	b.n	23fb528 <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fb58a:	2201      	movs	r2, #1
                cell_data.weight_coeff_500g = calibrationFactorVal;
 23fb58c:	edc3 7a04 	vstr	s15, [r3, #16]
                cell_data.weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fb590:	751a      	strb	r2, [r3, #20]
                break;
 23fb592:	e7c9      	b.n	23fb528 <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fb594:	2201      	movs	r2, #1
                cell_data.weight_coeff_1000g = calibrationFactorVal;
 23fb596:	edc3 7a06 	vstr	s15, [r3, #24]
                cell_data.weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fb59a:	771a      	strb	r2, [r3, #28]
                break;
 23fb59c:	e7c4      	b.n	23fb528 <_Z23readCalibrationSettingsv+0x8c>
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fb59e:	2201      	movs	r2, #1
                cell_data.weight_coeff_5000g = calibrationFactorVal;
 23fb5a0:	edc3 7a08 	vstr	s15, [r3, #32]
                cell_data.weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fb5a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 23fb5a8:	e7be      	b.n	23fb528 <_Z23readCalibrationSettingsv+0x8c>
 23fb5aa:	bf00      	nop
 23fb5ac:	4f800000 	.word	0x4f800000
 23fb5b0:	023ffb0e 	.word	0x023ffb0e
 23fb5b4:	1007ae6c 	.word	0x1007ae6c
 23fb5b8:	1007ae20 	.word	0x1007ae20
 23fb5bc:	023ffb32 	.word	0x023ffb32
 23fb5c0:	1007ae40 	.word	0x1007ae40
 23fb5c4:	023ffb47 	.word	0x023ffb47
 23fb5c8:	1007adc0 	.word	0x1007adc0
 23fb5cc:	1007adc4 	.word	0x1007adc4

023fb5d0 <setup>:
{
 23fb5d0:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fb5d2:	2000      	movs	r0, #0
 23fb5d4:	b085      	sub	sp, #20
 23fb5d6:	f000 fe13 	bl	23fc200 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fb5da:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23fb5de:	4604      	mov	r4, r0
 23fb5e0:	2000      	movs	r0, #0
 23fb5e2:	f000 fe0d 	bl	23fc200 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fb5e6:	1b00      	subs	r0, r0, r4
 23fb5e8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fb5ec:	42a8      	cmp	r0, r5
 23fb5ee:	f171 0300 	sbcs.w	r3, r1, #0
 23fb5f2:	d207      	bcs.n	23fb604 <setup+0x34>
  waitFor(Serial.isConnected, 10000);
 23fb5f4:	f003 fb28 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb5f8:	f003 fb1b 	bl	23fec32 <_ZN9USBSerial11isConnectedEv>
 23fb5fc:	b910      	cbnz	r0, 23fb604 <setup+0x34>
            spark_process();
 23fb5fe:	f001 f8e5 	bl	23fc7cc <spark_process>
        while (_while() && !_condition()) {
 23fb602:	e7ed      	b.n	23fb5e0 <setup+0x10>
 23fb604:	f003 fb20 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb608:	f003 fb13 	bl	23fec32 <_ZN9USBSerial11isConnectedEv>
  delay(1000);
 23fb60c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fb610:	f001 fa48 	bl	23fcaa4 <delay>
  thermistor = new Thermistor(A1, 10000, 10000, 25, 3984, 5, 20);
 23fb614:	2048      	movs	r0, #72	; 0x48
 23fb616:	f7ff fd2e 	bl	23fb076 <_Znwj>
 23fb61a:	4604      	mov	r4, r0
 23fb61c:	b170      	cbz	r0, 23fb63c <setup+0x6c>
 23fb61e:	2305      	movs	r3, #5
 23fb620:	2214      	movs	r2, #20
 23fb622:	f44f 6179 	mov.w	r1, #3984	; 0xf90
 23fb626:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23fb62a:	2319      	movs	r3, #25
 23fb62c:	e9cd 3100 	strd	r3, r1, [sp]
 23fb630:	f242 7310 	movw	r3, #10000	; 0x2710
 23fb634:	210c      	movs	r1, #12
 23fb636:	461a      	mov	r2, r3
 23fb638:	f000 fc6a 	bl	23fbf10 <_ZN10ThermistorC1Eiiiiiii>
 23fb63c:	4b10      	ldr	r3, [pc, #64]	; (23fb680 <setup+0xb0>)
 23fb63e:	601c      	str	r4, [r3, #0]
  loadcell2_init();
 23fb640:	f7ff fd88 	bl	23fb154 <_Z14loadcell2_initv>
  readCalibrationSettings();
 23fb644:	f7ff ff2a 	bl	23fb49c <_Z23readCalibrationSettingsv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 23fb648:	2300      	movs	r3, #0
 23fb64a:	2209      	movs	r2, #9
 23fb64c:	490d      	ldr	r1, [pc, #52]	; (23fb684 <setup+0xb4>)
 23fb64e:	480e      	ldr	r0, [pc, #56]	; (23fb688 <setup+0xb8>)
 23fb650:	f001 f8a0 	bl	23fc794 <spark_variable>
 23fb654:	2300      	movs	r3, #0
 23fb656:	2209      	movs	r2, #9
 23fb658:	490c      	ldr	r1, [pc, #48]	; (23fb68c <setup+0xbc>)
 23fb65a:	480d      	ldr	r0, [pc, #52]	; (23fb690 <setup+0xc0>)
 23fb65c:	f001 f89a 	bl	23fc794 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23fb660:	4a0c      	ldr	r2, [pc, #48]	; (23fb694 <setup+0xc4>)
 23fb662:	490d      	ldr	r1, [pc, #52]	; (23fb698 <setup+0xc8>)
 23fb664:	480d      	ldr	r0, [pc, #52]	; (23fb69c <setup+0xcc>)
 23fb666:	f001 fae4 	bl	23fcc32 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23fb66a:	4a0d      	ldr	r2, [pc, #52]	; (23fb6a0 <setup+0xd0>)
 23fb66c:	490d      	ldr	r1, [pc, #52]	; (23fb6a4 <setup+0xd4>)
 23fb66e:	480b      	ldr	r0, [pc, #44]	; (23fb69c <setup+0xcc>)
 23fb670:	f001 fadf 	bl	23fcc32 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
}
 23fb674:	b005      	add	sp, #20
 23fb676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23fb67a:	f001 b8b5 	b.w	23fc7e8 <spark_cloud_flag_connect>
 23fb67e:	bf00      	nop
 23fb680:	1007ae34 	.word	0x1007ae34
 23fb684:	1007ae38 	.word	0x1007ae38
 23fb688:	023ffa77 	.word	0x023ffa77
 23fb68c:	1007ae28 	.word	0x1007ae28
 23fb690:	023ffa7e 	.word	0x023ffa7e
 23fb694:	023ffb7d 	.word	0x023ffb7d
 23fb698:	023fb0b1 	.word	0x023fb0b1
 23fb69c:	023fcc07 	.word	0x023fcc07
 23fb6a0:	023ffb82 	.word	0x023ffb82
 23fb6a4:	023fb0c1 	.word	0x023fb0c1

023fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb6a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb6aa:	2614      	movs	r6, #20
 23fb6ac:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb6b0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb6b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb6b6:	42ae      	cmp	r6, r5
 23fb6b8:	d004      	beq.n	23fb6c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb6ba:	4628      	mov	r0, r5
 23fb6bc:	f003 f93c 	bl	23fe938 <_ZN6StringD1Ev>
 23fb6c0:	3514      	adds	r5, #20
 23fb6c2:	e7f8      	b.n	23fb6b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb6c4:	6820      	ldr	r0, [r4, #0]
 23fb6c6:	f001 f97d 	bl	23fc9c4 <free>
    AllocatorT::free(data_);
}
 23fb6ca:	4620      	mov	r0, r4
 23fb6cc:	bd70      	pop	{r4, r5, r6, pc}

023fb6ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fb6ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
 23fb6d2:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
 23fb6d6:	4607      	mov	r7, r0
        if (n > 0) {
 23fb6d8:	dd38      	ble.n	23fb74c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb6da:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
 23fb6de:	fb09 f008 	mul.w	r0, r9, r8
 23fb6e2:	f001 f961 	bl	23fc9a8 <malloc>
            if (!d) {
 23fb6e6:	4605      	mov	r5, r0
 23fb6e8:	b3c0      	cbz	r0, 23fb75c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x8e>
            move(d, data_, data_ + size_);
 23fb6ea:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
 23fb6ee:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fb6f0:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
 23fb6f4:	d215      	bcs.n	23fb722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
 23fb6f6:	4286      	cmp	r6, r0
 23fb6f8:	d914      	bls.n	23fb724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
 23fb6fa:	3e14      	subs	r6, #20
            dest += end - p - 1;
 23fb6fc:	f1a4 0914 	sub.w	r9, r4, #20
 23fb700:	1b34      	subs	r4, r6, r4
 23fb702:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fb704:	45b1      	cmp	r9, r6
 23fb706:	d022      	beq.n	23fb74e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
 23fb708:	b12c      	cbz	r4, 23fb716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
 23fb70a:	4631      	mov	r1, r6
 23fb70c:	4620      	mov	r0, r4
 23fb70e:	f003 f990 	bl	23fea32 <_ZN6StringC1EOS_>
 23fb712:	7c33      	ldrb	r3, [r6, #16]
 23fb714:	7423      	strb	r3, [r4, #16]
 23fb716:	4630      	mov	r0, r6
 23fb718:	f003 f90e 	bl	23fe938 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb71c:	3e14      	subs	r6, #20
 23fb71e:	3c14      	subs	r4, #20
 23fb720:	e7f0      	b.n	23fb704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
 23fb722:	d014      	beq.n	23fb74e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
 23fb724:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
 23fb726:	42a6      	cmp	r6, r4
 23fb728:	d011      	beq.n	23fb74e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
 23fb72a:	f1b9 0f00 	cmp.w	r9, #0
 23fb72e:	d006      	beq.n	23fb73e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x70>
 23fb730:	4621      	mov	r1, r4
 23fb732:	4648      	mov	r0, r9
 23fb734:	f003 f97d 	bl	23fea32 <_ZN6StringC1EOS_>
 23fb738:	7c23      	ldrb	r3, [r4, #16]
 23fb73a:	f889 3010 	strb.w	r3, [r9, #16]
 23fb73e:	4620      	mov	r0, r4
 23fb740:	f003 f8fa 	bl	23fe938 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb744:	3414      	adds	r4, #20
 23fb746:	f109 0914 	add.w	r9, r9, #20
 23fb74a:	e7ec      	b.n	23fb726 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
 23fb74c:	2500      	movs	r5, #0
    ::free(ptr);
 23fb74e:	6838      	ldr	r0, [r7, #0]
 23fb750:	f001 f938 	bl	23fc9c4 <free>
        return true;
 23fb754:	2001      	movs	r0, #1
        data_ = d;
 23fb756:	603d      	str	r5, [r7, #0]
        capacity_ = n;
 23fb758:	f8c7 8008 	str.w	r8, [r7, #8]
    }
 23fb75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb760:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb766:	e9c0 3300 	strd	r3, r3, [r0]
 23fb76a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb76c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb76e:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb770:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb772:	4299      	cmp	r1, r3
 23fb774:	dd17      	ble.n	23fb7a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
 23fb776:	f7ff ffaa 	bl	23fb6ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb77a:	b1a0      	cbz	r0, 23fb7a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb77c:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fb780:	f04f 0814 	mov.w	r8, #20
 23fb784:	fb08 6803 	mla	r8, r8, r3, r6
 23fb788:	6827      	ldr	r7, [r4, #0]
        for (; it != end; ++it, ++dest) {
 23fb78a:	45b0      	cmp	r8, r6
 23fb78c:	d009      	beq.n	23fb7a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
 23fb78e:	b12f      	cbz	r7, 23fb79c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
 23fb790:	4631      	mov	r1, r6
 23fb792:	4638      	mov	r0, r7
 23fb794:	f003 f967 	bl	23fea66 <_ZN6StringC1ERKS_>
 23fb798:	7c33      	ldrb	r3, [r6, #16]
 23fb79a:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
 23fb79c:	3614      	adds	r6, #20
 23fb79e:	3714      	adds	r7, #20
 23fb7a0:	e7f3      	b.n	23fb78a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
 23fb7a2:	686b      	ldr	r3, [r5, #4]
 23fb7a4:	6063      	str	r3, [r4, #4]
}
 23fb7a6:	4620      	mov	r0, r4
 23fb7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb7ac <_GLOBAL__sub_I___appProductVersion>:
 23fb7ac:	b530      	push	{r4, r5, lr}
        val_(val) {
 23fb7ae:	2400      	movs	r4, #0
 23fb7b0:	4b36      	ldr	r3, [pc, #216]	; (23fb88c <_GLOBAL__sub_I___appProductVersion+0xe0>)
 23fb7b2:	b093      	sub	sp, #76	; 0x4c
 23fb7b4:	701c      	strb	r4, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23fb7b6:	f003 fb51 	bl	23fee5c <spark_protocol_instance>
 23fb7ba:	4623      	mov	r3, r4
 23fb7bc:	4622      	mov	r2, r4
 23fb7be:	2102      	movs	r1, #2
 23fb7c0:	f003 fb68 	bl	23fee94 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23fb7c4:	f003 fb4a 	bl	23fee5c <spark_protocol_instance>
 23fb7c8:	4623      	mov	r3, r4
 23fb7ca:	4622      	mov	r2, r4
 23fb7cc:	2120      	movs	r1, #32
 23fb7ce:	f003 fb53 	bl	23fee78 <spark_protocol_set_product_id>
SYSTEM_THREAD(ENABLED);
 23fb7d2:	4621      	mov	r1, r4
 23fb7d4:	2001      	movs	r0, #1
 23fb7d6:	f000 ff97 	bl	23fc708 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
 23fb7da:	4b2d      	ldr	r3, [pc, #180]	; (23fb890 <_GLOBAL__sub_I___appProductVersion+0xe4>)
    SleepResult() {}
 23fb7dc:	4a2d      	ldr	r2, [pc, #180]	; (23fb894 <_GLOBAL__sub_I___appProductVersion+0xe8>)
        set_system_mode(mode);
 23fb7de:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23fb7e0:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fb7e4:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fb7e6:	f000 ff73 	bl	23fc6d0 <set_system_mode>
        level_(level) {
 23fb7ea:	492b      	ldr	r1, [pc, #172]	; (23fb898 <_GLOBAL__sub_I___appProductVersion+0xec>)
 23fb7ec:	a80d      	add	r0, sp, #52	; 0x34
 23fb7ee:	f003 f8ee 	bl	23fe9ce <_ZN6StringC1EPK19__FlashStringHelper>
 23fb7f2:	2101      	movs	r1, #1
    if (n > 0 && realloc(n)) {
 23fb7f4:	a801      	add	r0, sp, #4
        capacity_(0) {
 23fb7f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fb7fa:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 23fb7fe:	9403      	str	r4, [sp, #12]
    if (n > 0 && realloc(n)) {
 23fb800:	f7ff ff65 	bl	23fb6ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb804:	b150      	cbz	r0, 23fb81c <_GLOBAL__sub_I___appProductVersion+0x70>
        copy(data_, values.begin(), values.end());
 23fb806:	9c01      	ldr	r4, [sp, #4]
            new(dest) T(*p);
 23fb808:	b134      	cbz	r4, 23fb818 <_GLOBAL__sub_I___appProductVersion+0x6c>
class LogCategoryFilter {
 23fb80a:	4620      	mov	r0, r4
 23fb80c:	a90d      	add	r1, sp, #52	; 0x34
 23fb80e:	f003 f92a 	bl	23fea66 <_ZN6StringC1ERKS_>
 23fb812:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 23fb816:	7423      	strb	r3, [r4, #16]
        size_ = n;
 23fb818:	2301      	movs	r3, #1
 23fb81a:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fb81c:	f003 fa14 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb820:	4605      	mov	r5, r0
 23fb822:	a901      	add	r1, sp, #4
 23fb824:	a804      	add	r0, sp, #16
 23fb826:	f7ff ff9b 	bl	23fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fb82a:	a904      	add	r1, sp, #16
 23fb82c:	a807      	add	r0, sp, #28
 23fb82e:	f7ff ff97 	bl	23fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb832:	4c1a      	ldr	r4, [pc, #104]	; (23fb89c <_GLOBAL__sub_I___appProductVersion+0xf0>)
 23fb834:	4b1a      	ldr	r3, [pc, #104]	; (23fb8a0 <_GLOBAL__sub_I___appProductVersion+0xf4>)
 23fb836:	a907      	add	r1, sp, #28
 23fb838:	6023      	str	r3, [r4, #0]
 23fb83a:	a80a      	add	r0, sp, #40	; 0x28
 23fb83c:	f7ff ff90 	bl	23fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb840:	aa0a      	add	r2, sp, #40	; 0x28
 23fb842:	2128      	movs	r1, #40	; 0x28
 23fb844:	1d20      	adds	r0, r4, #4
 23fb846:	f002 fc53 	bl	23fe0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb84a:	a80a      	add	r0, sp, #40	; 0x28
 23fb84c:	f7ff ff2c 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb850:	a807      	add	r0, sp, #28
 23fb852:	f7ff ff29 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb856:	4b13      	ldr	r3, [pc, #76]	; (23fb8a4 <_GLOBAL__sub_I___appProductVersion+0xf8>)
 23fb858:	6225      	str	r5, [r4, #32]
 23fb85a:	6023      	str	r3, [r4, #0]
 23fb85c:	a804      	add	r0, sp, #16
 23fb85e:	f7ff ff23 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb862:	4b11      	ldr	r3, [pc, #68]	; (23fb8a8 <_GLOBAL__sub_I___appProductVersion+0xfc>)
 23fb864:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb866:	f003 f9ef 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb86a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb86e:	f003 f9d9 	bl	23fec24 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb872:	f002 f921 	bl	23fdab8 <_ZN5spark10LogManager8instanceEv>
 23fb876:	4621      	mov	r1, r4
 23fb878:	f002 fb12 	bl	23fdea0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
});
 23fb87c:	a801      	add	r0, sp, #4
 23fb87e:	f7ff ff13 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
 23fb882:	a80d      	add	r0, sp, #52	; 0x34
 23fb884:	f003 f858 	bl	23fe938 <_ZN6StringD1Ev>
 23fb888:	b013      	add	sp, #76	; 0x4c
 23fb88a:	bd30      	pop	{r4, r5, pc}
 23fb88c:	1007a9a4 	.word	0x1007a9a4
 23fb890:	1007a998 	.word	0x1007a998
 23fb894:	ffff0000 	.word	0xffff0000
 23fb898:	023ffb8c 	.word	0x023ffb8c
 23fb89c:	1007adfc 	.word	0x1007adfc
 23fb8a0:	023ffb98 	.word	0x023ffb98
 23fb8a4:	023ffd08 	.word	0x023ffd08
 23fb8a8:	023ffbb0 	.word	0x023ffbb0

023fb8ac <_Z9Delay_1msv>:
inline void Delay_1ms( ) {delay(1);}
 23fb8ac:	2001      	movs	r0, #1
 23fb8ae:	f001 b8f9 	b.w	23fcaa4 <delay>

023fb8b2 <_Z19loadcell2_cfg_setupP15loadcell2_cfg_t>:

void loadcell2_cfg_setup ( loadcell2_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fb8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb8b6:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;
    
    // Additional gpio pins

    cfg->rdy = HAL_PIN_NC;
 23fb8b8:	7083      	strb	r3, [r0, #2]

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fb8ba:	2300      	movs	r3, #0
 23fb8bc:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = LOADCELL2_SLAVE_ADDRESS;
 23fb8be:	232a      	movs	r3, #42	; 0x2a
 23fb8c0:	7203      	strb	r3, [r0, #8]
}
 23fb8c2:	4770      	bx	lr

023fb8c4 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t>:

LOADCELL2_RETVAL loadcell2_init ( loadcell2_t *ctx, loadcell2_cfg_t *cfg )
{
 23fb8c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fb8c6:	460c      	mov	r4, r1
 23fb8c8:	4605      	mov	r5, r0
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fb8ca:	a801      	add	r0, sp, #4
 23fb8cc:	f000 fa92 	bl	23fbdf4 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fb8d0:	6863      	ldr	r3, [r4, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fb8d2:	1d2e      	adds	r6, r5, #4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fb8d4:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fb8d6:	7823      	ldrb	r3, [r4, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fb8d8:	4630      	mov	r0, r6
    i2c_cfg.scl    = cfg->scl;
 23fb8da:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fb8de:	7863      	ldrb	r3, [r4, #1]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fb8e0:	a901      	add	r1, sp, #4
    i2c_cfg.sda    = cfg->sda;
 23fb8e2:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fb8e6:	7a23      	ldrb	r3, [r4, #8]
 23fb8e8:	742b      	strb	r3, [r5, #16]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fb8ea:	f000 fa95 	bl	23fbe18 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fb8ee:	3001      	adds	r0, #1
 23fb8f0:	d00e      	beq.n	23fb910 <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t+0x4c>
    {
        return LOADCELL2_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fb8f2:	7c29      	ldrb	r1, [r5, #16]
 23fb8f4:	4630      	mov	r0, r6
 23fb8f6:	f000 faad 	bl	23fbe54 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fb8fa:	6861      	ldr	r1, [r4, #4]
 23fb8fc:	4630      	mov	r0, r6
 23fb8fe:	f000 fa9b 	bl	23fbe38 <_Z20i2c_master_set_speedP12i2c_master_tm>

    // Input pins

    digital_in_init( &ctx->rdy, cfg->rdy );
 23fb902:	4628      	mov	r0, r5
 23fb904:	78a1      	ldrb	r1, [r4, #2]
 23fb906:	f000 fa69 	bl	23fbddc <_Z15digital_in_initP12digital_in_th>
    
    return LOADCELL2_OK;
 23fb90a:	2000      	movs	r0, #0
}
 23fb90c:	b004      	add	sp, #16
 23fb90e:	bd70      	pop	{r4, r5, r6, pc}
        return LOADCELL2_INIT_ERROR;
 23fb910:	20ff      	movs	r0, #255	; 0xff
 23fb912:	e7fb      	b.n	23fb90c <_Z14loadcell2_initP11loadcell2_tP15loadcell2_cfg_t+0x48>

023fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>:

    loadcell2_enable_dec_cap( ctx );
}

void loadcell2_generic_write ( loadcell2_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
 23fb914:	b510      	push	{r4, lr}
 23fb916:	b0c0      	sub	sp, #256	; 0x100
    uint8_t tx_buf[ 256 ];
    uint8_t cnt;
    
    tx_buf[ 0 ] = reg;
 23fb918:	f88d 1000 	strb.w	r1, [sp]
    
    for ( cnt = 1; cnt <= len; cnt++ )
 23fb91c:	2101      	movs	r1, #1
 23fb91e:	4299      	cmp	r1, r3
 23fb920:	d807      	bhi.n	23fb932 <_Z23loadcell2_generic_writeP11loadcell2_thPhh+0x1e>
    {
        tx_buf[ cnt ] = data_buf[ cnt - 1 ]; 
 23fb922:	1854      	adds	r4, r2, r1
 23fb924:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 23fb928:	f80d 4001 	strb.w	r4, [sp, r1]
    for ( cnt = 1; cnt <= len; cnt++ )
 23fb92c:	3101      	adds	r1, #1
 23fb92e:	b2c9      	uxtb	r1, r1
 23fb930:	e7f5      	b.n	23fb91e <_Z23loadcell2_generic_writeP11loadcell2_thPhh+0xa>
    }
    
    i2c_master_write( &ctx->i2c, tx_buf, len + 1 );   
 23fb932:	4669      	mov	r1, sp
 23fb934:	1c5a      	adds	r2, r3, #1
 23fb936:	3004      	adds	r0, #4
 23fb938:	f000 fa92 	bl	23fbe60 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fb93c:	b040      	add	sp, #256	; 0x100
 23fb93e:	bd10      	pop	{r4, pc}

023fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>:

void loadcell2_generic_read ( loadcell2_t *ctx, uint8_t reg, uint8_t *data_buf, uint8_t len )
{
 23fb940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2c_master_write_then_read( &ctx->i2c, &reg, 1, data_buf, len );
 23fb942:	3004      	adds	r0, #4
{
 23fb944:	f88d 100f 	strb.w	r1, [sp, #15]
    i2c_master_write_then_read( &ctx->i2c, &reg, 1, data_buf, len );
 23fb948:	9300      	str	r3, [sp, #0]
 23fb94a:	f10d 010f 	add.w	r1, sp, #15
 23fb94e:	4613      	mov	r3, r2
 23fb950:	2201      	movs	r2, #1
 23fb952:	f000 faa3 	bl	23fbe9c <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j>
}
 23fb956:	b005      	add	sp, #20
 23fb958:	f85d fb04 	ldr.w	pc, [sp], #4

023fb95c <_Z15loadcell2_resetP11loadcell2_t>:
        return LOADCELL2_ERROR;
    }
}

void loadcell2_reset ( loadcell2_t *ctx )
{
 23fb95c:	b513      	push	{r0, r1, r4, lr}
 23fb95e:	4604      	mov	r4, r0
    uint8_t tmp;
    
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb960:	f10d 0207 	add.w	r2, sp, #7
 23fb964:	2301      	movs	r3, #1
 23fb966:	2100      	movs	r1, #0
 23fb968:	f7ff ffea 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    
    tmp |= LOADCELL2_RR;
 23fb96c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb970:	4620      	mov	r0, r4
    tmp |= LOADCELL2_RR;
 23fb972:	f043 0301 	orr.w	r3, r3, #1
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb976:	f10d 0207 	add.w	r2, sp, #7
 23fb97a:	2100      	movs	r1, #0
    tmp |= LOADCELL2_RR;
 23fb97c:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb980:	2301      	movs	r3, #1
 23fb982:	f7ff ffc7 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS

static void dev_rst_delay( void )
{
    Delay_1ms( );
 23fb986:	f7ff ff91 	bl	23fb8ac <_Z9Delay_1msv>
    tmp &= 0xFE;
 23fb98a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb98e:	2100      	movs	r1, #0
    tmp &= 0xFE;
 23fb990:	f023 0301 	bic.w	r3, r3, #1
 23fb994:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb998:	4620      	mov	r0, r4
 23fb99a:	2301      	movs	r3, #1
 23fb99c:	f10d 0207 	add.w	r2, sp, #7
 23fb9a0:	f7ff ffb8 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fb9a4:	b002      	add	sp, #8
 23fb9a6:	bd10      	pop	{r4, pc}

023fb9a8 <_Z18loadcell2_power_onP11loadcell2_t>:
{
 23fb9a8:	b513      	push	{r0, r1, r4, lr}
 23fb9aa:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb9ac:	f10d 0207 	add.w	r2, sp, #7
 23fb9b0:	2301      	movs	r3, #1
 23fb9b2:	2100      	movs	r1, #0
 23fb9b4:	f7ff ffc4 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp |= LOADCELL2_PUA;
 23fb9b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb9bc:	4620      	mov	r0, r4
    tmp |= LOADCELL2_PUA;
 23fb9be:	f043 0306 	orr.w	r3, r3, #6
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb9c2:	f10d 0207 	add.w	r2, sp, #7
 23fb9c6:	2100      	movs	r1, #0
    tmp |= LOADCELL2_PUA;
 23fb9c8:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb9cc:	2301      	movs	r3, #1
 23fb9ce:	f7ff ffa1 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
    Delay_1ms( );
 23fb9d2:	f7ff ff6b 	bl	23fb8ac <_Z9Delay_1msv>
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fb9d6:	4620      	mov	r0, r4
 23fb9d8:	2301      	movs	r3, #1
 23fb9da:	2100      	movs	r1, #0
 23fb9dc:	f10d 0207 	add.w	r2, sp, #7
 23fb9e0:	f7ff ffae 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    if ( ( tmp & LOADCELL2_PUR ) != LOADCELL2_ERROR )
 23fb9e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 23fb9e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 23fb9ec:	b002      	add	sp, #8
 23fb9ee:	bd10      	pop	{r4, pc}

023fb9f0 <_Z25loadcell2_set_ldo_voltageP11loadcell2_t>:
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fb9f0:	2301      	movs	r3, #1
{
 23fb9f2:	b513      	push	{r0, r1, r4, lr}
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fb9f4:	4619      	mov	r1, r3
 23fb9f6:	f10d 0207 	add.w	r2, sp, #7
{
 23fb9fa:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fb9fc:	f7ff ffa0 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xC7;
 23fba00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba04:	4620      	mov	r0, r4
    tmp &= 0xC7;
 23fba06:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    tmp |= 0x20;
 23fba0a:	f043 0320 	orr.w	r3, r3, #32
 23fba0e:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba12:	2301      	movs	r3, #1
 23fba14:	f10d 0207 	add.w	r2, sp, #7
 23fba18:	4619      	mov	r1, r3
 23fba1a:	f7ff ff7b 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
    loadcell2_generic_read( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fba1e:	4620      	mov	r0, r4
 23fba20:	f10d 0207 	add.w	r2, sp, #7
 23fba24:	2301      	movs	r3, #1
 23fba26:	2100      	movs	r1, #0
 23fba28:	f7ff ff8a 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp |= LOADCELL2_AVDDS;
 23fba2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fba30:	2100      	movs	r1, #0
    tmp |= LOADCELL2_AVDDS;
 23fba32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23fba36:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_PU_CTRL, &tmp, 1 );
 23fba3a:	4620      	mov	r0, r4
 23fba3c:	2301      	movs	r3, #1
 23fba3e:	f10d 0207 	add.w	r2, sp, #7
 23fba42:	f7ff ff67 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fba46:	b002      	add	sp, #8
 23fba48:	bd10      	pop	{r4, pc}

023fba4a <_Z18loadcell2_set_gainP11loadcell2_th>:
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba4a:	2301      	movs	r3, #1
{
 23fba4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fba4e:	460d      	mov	r5, r1
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba50:	f10d 0207 	add.w	r2, sp, #7
 23fba54:	4619      	mov	r1, r3
{
 23fba56:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba58:	f7ff ff72 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xF8;
 23fba5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch ( gain_val )
 23fba60:	2d10      	cmp	r5, #16
    tmp &= 0xF8;
 23fba62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    switch ( gain_val )
 23fba66:	d023      	beq.n	23fbab0 <_Z18loadcell2_set_gainP11loadcell2_th+0x66>
 23fba68:	d810      	bhi.n	23fba8c <_Z18loadcell2_set_gainP11loadcell2_th+0x42>
 23fba6a:	2d04      	cmp	r5, #4
 23fba6c:	d01a      	beq.n	23fbaa4 <_Z18loadcell2_set_gainP11loadcell2_th+0x5a>
 23fba6e:	2d08      	cmp	r5, #8
 23fba70:	d01b      	beq.n	23fbaaa <_Z18loadcell2_set_gainP11loadcell2_th+0x60>
 23fba72:	2d02      	cmp	r5, #2
 23fba74:	d013      	beq.n	23fba9e <_Z18loadcell2_set_gainP11loadcell2_th+0x54>
            tmp |= LOADCELL2_GAIN_x128;
 23fba76:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL1, &tmp, 1 );
 23fba7a:	2301      	movs	r3, #1
 23fba7c:	4620      	mov	r0, r4
 23fba7e:	4619      	mov	r1, r3
 23fba80:	f10d 0207 	add.w	r2, sp, #7
 23fba84:	f7ff ff46 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fba88:	b003      	add	sp, #12
 23fba8a:	bd30      	pop	{r4, r5, pc}
    switch ( gain_val )
 23fba8c:	2d40      	cmp	r5, #64	; 0x40
 23fba8e:	d012      	beq.n	23fbab6 <_Z18loadcell2_set_gainP11loadcell2_th+0x6c>
 23fba90:	2d80      	cmp	r5, #128	; 0x80
 23fba92:	d013      	beq.n	23fbabc <_Z18loadcell2_set_gainP11loadcell2_th+0x72>
 23fba94:	2d20      	cmp	r5, #32
 23fba96:	d1ee      	bne.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x32;
 23fba98:	f043 0305 	orr.w	r3, r3, #5
 23fba9c:	e7eb      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x2;
 23fba9e:	f043 0301 	orr.w	r3, r3, #1
 23fbaa2:	e7e8      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x4;
 23fbaa4:	f043 0302 	orr.w	r3, r3, #2
 23fbaa8:	e7e5      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x8;
 23fbaaa:	f043 0303 	orr.w	r3, r3, #3
 23fbaae:	e7e2      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x16;
 23fbab0:	f043 0304 	orr.w	r3, r3, #4
 23fbab4:	e7df      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x64;
 23fbab6:	f043 0306 	orr.w	r3, r3, #6
 23fbaba:	e7dc      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>
            tmp |= LOADCELL2_GAIN_x128;
 23fbabc:	f043 0307 	orr.w	r3, r3, #7
 23fbac0:	e7d9      	b.n	23fba76 <_Z18loadcell2_set_gainP11loadcell2_th+0x2c>

023fbac2 <_Z25loadcell2_set_sample_rateP11loadcell2_th>:
{
 23fbac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbac4:	460c      	mov	r4, r1
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbac6:	2301      	movs	r3, #1
 23fbac8:	2102      	movs	r1, #2
 23fbaca:	f10d 0207 	add.w	r2, sp, #7
{
 23fbace:	4605      	mov	r5, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbad0:	f7ff ff36 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0x8F;
 23fbad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch ( rate_sps )
 23fbad8:	2c28      	cmp	r4, #40	; 0x28
    tmp &= 0x8F;
 23fbada:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    switch ( rate_sps )
 23fbade:	d010      	beq.n	23fbb02 <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x40>
 23fbae0:	2c50      	cmp	r4, #80	; 0x50
 23fbae2:	d011      	beq.n	23fbb08 <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x46>
 23fbae4:	2c14      	cmp	r4, #20
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_20;
 23fbae6:	bf08      	it	eq
 23fbae8:	f043 0310 	orreq.w	r3, r3, #16
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_80;
 23fbaec:	f88d 3007 	strb.w	r3, [sp, #7]
	loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbaf0:	2102      	movs	r1, #2
 23fbaf2:	2301      	movs	r3, #1
 23fbaf4:	4628      	mov	r0, r5
 23fbaf6:	f10d 0207 	add.w	r2, sp, #7
 23fbafa:	f7ff ff0b 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fbafe:	b003      	add	sp, #12
 23fbb00:	bd30      	pop	{r4, r5, pc}
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_40;
 23fbb02:	f043 0320 	orr.w	r3, r3, #32
 23fbb06:	e7f1      	b.n	23fbaec <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x2a>
            tmp |= LOADCELL2_BIT_CONV_RATE_SPS_80;
 23fbb08:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 23fbb0c:	e7ee      	b.n	23fbaec <_Z25loadcell2_set_sample_rateP11loadcell2_th+0x2a>

023fbb0e <_Z26loadcell2_turn_off_clk_chpP11loadcell2_t>:
    tmp = 0x30;
 23fbb0e:	2330      	movs	r3, #48	; 0x30
{
 23fbb10:	b507      	push	{r0, r1, r2, lr}
    loadcell2_generic_write( ctx, LOADCELL2_REG_ADC_REG, &tmp, 1 );
 23fbb12:	2115      	movs	r1, #21
    tmp = 0x30;
 23fbb14:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write( ctx, LOADCELL2_REG_ADC_REG, &tmp, 1 );
 23fbb18:	f10d 0207 	add.w	r2, sp, #7
 23fbb1c:	2301      	movs	r3, #1
 23fbb1e:	f7ff fef9 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fbb22:	b003      	add	sp, #12
 23fbb24:	f85d fb04 	ldr.w	pc, [sp], #4

023fbb28 <_Z24loadcell2_enable_dec_capP11loadcell2_t>:
{
 23fbb28:	b513      	push	{r0, r1, r4, lr}
 23fbb2a:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fbb2c:	f10d 0207 	add.w	r2, sp, #7
 23fbb30:	2301      	movs	r3, #1
 23fbb32:	211c      	movs	r1, #28
 23fbb34:	f7ff ff04 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0x7F;
 23fbb38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fbb3c:	211c      	movs	r1, #28
    tmp |= 0x80;
 23fbb3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23fbb42:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_POW_CTRL, &tmp, 1 );
 23fbb46:	4620      	mov	r0, r4
 23fbb48:	2301      	movs	r3, #1
 23fbb4a:	f10d 0207 	add.w	r2, sp, #7
 23fbb4e:	f7ff fee1 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fbb52:	b002      	add	sp, #8
 23fbb54:	bd10      	pop	{r4, pc}

023fbb56 <_Z21loadcell2_default_cfgP11loadcell2_t>:
{
 23fbb56:	b510      	push	{r4, lr}
 23fbb58:	4604      	mov	r4, r0
    loadcell2_set_ldo_voltage ( ctx );
 23fbb5a:	f7ff ff49 	bl	23fb9f0 <_Z25loadcell2_set_ldo_voltageP11loadcell2_t>
    loadcell2_set_gain( ctx, LOADCELL2_GAIN_VAL_x128 );
 23fbb5e:	4620      	mov	r0, r4
 23fbb60:	2180      	movs	r1, #128	; 0x80
 23fbb62:	f7ff ff72 	bl	23fba4a <_Z18loadcell2_set_gainP11loadcell2_th>
    loadcell2_set_sample_rate( ctx, LOADCELL2_CONV_RATE_SPS_80 );
 23fbb66:	4620      	mov	r0, r4
 23fbb68:	2150      	movs	r1, #80	; 0x50
 23fbb6a:	f7ff ffaa 	bl	23fbac2 <_Z25loadcell2_set_sample_rateP11loadcell2_th>
    loadcell2_turn_off_clk_chp( ctx );
 23fbb6e:	4620      	mov	r0, r4
 23fbb70:	f7ff ffcd 	bl	23fbb0e <_Z26loadcell2_turn_off_clk_chpP11loadcell2_t>
    loadcell2_enable_dec_cap( ctx );
 23fbb74:	4620      	mov	r0, r4
}
 23fbb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadcell2_enable_dec_cap( ctx );
 23fbb7a:	f7ff bfd5 	b.w	23fbb28 <_Z24loadcell2_enable_dec_capP11loadcell2_t>

023fbb7e <_Z23loadcell2_calibrate_afeP11loadcell2_t>:
{
 23fbb7e:	b513      	push	{r0, r1, r4, lr}
 23fbb80:	4604      	mov	r4, r0
    loadcell2_generic_read( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbb82:	f10d 0207 	add.w	r2, sp, #7
 23fbb86:	2301      	movs	r3, #1
 23fbb88:	2102      	movs	r1, #2
 23fbb8a:	f7ff fed9 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    tmp &= 0xFB;
 23fbb8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbb92:	2102      	movs	r1, #2
    tmp &= 0xFB;
 23fbb94:	f023 0304 	bic.w	r3, r3, #4
    tmp |= 0x04;
 23fbb98:	f043 0304 	orr.w	r3, r3, #4
 23fbb9c:	f88d 3007 	strb.w	r3, [sp, #7]
    loadcell2_generic_write ( ctx, LOADCELL2_REG_CTRL2, &tmp, 1 );
 23fbba0:	4620      	mov	r0, r4
 23fbba2:	2301      	movs	r3, #1
 23fbba4:	f10d 0207 	add.w	r2, sp, #7
 23fbba8:	f7ff feb4 	bl	23fb914 <_Z23loadcell2_generic_writeP11loadcell2_thPhh>
}
 23fbbac:	b002      	add	sp, #8
 23fbbae:	bd10      	pop	{r4, pc}

023fbbb0 <_Z20loadcell2_get_resultP11loadcell2_t>:
{
 23fbbb0:	b507      	push	{r0, r1, r2, lr}
    loadcell2_generic_read( ctx, LOADCELL2_REG_ADC_B2, rx_buf, 3 );
 23fbbb2:	2303      	movs	r3, #3
 23fbbb4:	2112      	movs	r1, #18
 23fbbb6:	aa01      	add	r2, sp, #4
 23fbbb8:	f7ff fec2 	bl	23fb940 <_Z22loadcell2_generic_readP11loadcell2_thPhh>
    result |= rx_buf[ 1 ];
 23fbbbc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    result |= rx_buf[ 2 ];
 23fbbc0:	f89d 0006 	ldrb.w	r0, [sp, #6]
 23fbbc4:	ba5b      	rev16	r3, r3
 23fbbc6:	b29b      	uxth	r3, r3
}
 23fbbc8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 23fbbcc:	b003      	add	sp, #12
 23fbbce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fbbd4 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t>:
{
 23fbbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbbd6:	4607      	mov	r7, r0
 23fbbd8:	460e      	mov	r6, r1
 23fbbda:	2405      	movs	r4, #5
        results = loadcell2_get_result( ctx );
 23fbbdc:	4638      	mov	r0, r7
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
 23fbbde:	3c01      	subs	r4, #1
        results = loadcell2_get_result( ctx );
 23fbbe0:	f7ff ffe6 	bl	23fbbb0 <_Z20loadcell2_get_resultP11loadcell2_t>
}

static void dev_measure_delay ( void )
{
    Delay_1ms( );
 23fbbe4:	f7ff fe62 	bl	23fb8ac <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 5; n_cnt++ )
 23fbbe8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23fbbec:	d1f6      	bne.n	23fbbdc <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x8>
 23fbbee:	2564      	movs	r5, #100	; 0x64
        results = loadcell2_get_result( ctx );
 23fbbf0:	4638      	mov	r0, r7
 23fbbf2:	f7ff ffdd 	bl	23fbbb0 <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
 23fbbf6:	3d01      	subs	r5, #1
        sum_val += results;
 23fbbf8:	4404      	add	r4, r0
    Delay_1ms( );
 23fbbfa:	f7ff fe57 	bl	23fb8ac <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 100; n_cnt++ )
 23fbbfe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fbc02:	d1f5      	bne.n	23fbbf0 <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x1c>
    average_val = ( float ) sum_val;
 23fbc04:	ee07 4a90 	vmov	s15, r4
    average_val /= 100.0;
 23fbc08:	eddf 6a08 	vldr	s13, [pc, #32]	; 23fbc2c <_Z14loadcell2_tareP11loadcell2_tP16loadcell2_data_t+0x58>
    average_val = ( float ) sum_val;
 23fbc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cell_data->tare_ok = LOADCELL2_DATA_OK;
 23fbc10:	2301      	movs	r3, #1
    average_val /= 100.0;
 23fbc12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    cell_data->tare_ok = LOADCELL2_DATA_OK;
 23fbc16:	7133      	strb	r3, [r6, #4]
    cell_data->tare = average_val;
 23fbc18:	ed86 7a00 	vstr	s14, [r6]
    cell_data->weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc1c:	7335      	strb	r5, [r6, #12]
    cell_data->weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc1e:	7535      	strb	r5, [r6, #20]
    cell_data->weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc20:	7735      	strb	r5, [r6, #28]
    cell_data->weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc22:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    cell_data->weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc26:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
}
 23fbc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbc2c:	42c80000 	.word	0x42c80000

023fbc30 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t>:
{
 23fbc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbc34:	4680      	mov	r8, r0
 23fbc36:	ed2d 8b02 	vpush	{d8}
 23fbc3a:	460e      	mov	r6, r1
 23fbc3c:	4615      	mov	r5, r2
    tare_val = cell_data->tare;
 23fbc3e:	ed92 8a00 	vldr	s16, [r2]
 23fbc42:	2414      	movs	r4, #20
    sum_val = 0;
 23fbc44:	2700      	movs	r7, #0
        results = loadcell2_get_result( ctx );
 23fbc46:	4640      	mov	r0, r8
 23fbc48:	f7ff ffb2 	bl	23fbbb0 <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fbc4c:	3c01      	subs	r4, #1
        sum_val += results;
 23fbc4e:	4407      	add	r7, r0
    Delay_1ms( );
 23fbc50:	f7ff fe2c 	bl	23fb8ac <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fbc54:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23fbc58:	d1f5      	bne.n	23fbc46 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x16>
    average_val = ( float ) sum_val;
 23fbc5a:	ee07 7a90 	vmov	s15, r7
    average_val /= 20.0;
 23fbc5e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
    average_val = ( float ) sum_val;
 23fbc62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    average_val /= 20.0;
 23fbc66:	eec7 7a26 	vdiv.f32	s15, s14, s13
    switch ( cal_val )
 23fbc6a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    weight_val = average_val - tare_val;
 23fbc6e:	ee77 7ac8 	vsub.f32	s15, s15, s16
    switch ( cal_val )
 23fbc72:	d036      	beq.n	23fbce2 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xb2>
 23fbc74:	d80d      	bhi.n	23fbc92 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x62>
 23fbc76:	2e64      	cmp	r6, #100	; 0x64
 23fbc78:	d01d      	beq.n	23fbcb6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x86>
 23fbc7a:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 23fbc7e:	d027      	beq.n	23fbcd0 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xa0>
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc80:	2300      	movs	r3, #0
 23fbc82:	732b      	strb	r3, [r5, #12]
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc84:	752b      	strb	r3, [r5, #20]
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc86:	772b      	strb	r3, [r5, #28]
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc88:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_NO_DATA;
 23fbc8c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
            break;
 23fbc90:	e019      	b.n	23fbcc6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
    switch ( cal_val )
 23fbc92:	f241 3388 	movw	r3, #5000	; 0x1388
 23fbc96:	429e      	cmp	r6, r3
 23fbc98:	d02c      	beq.n	23fbcf4 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xc4>
 23fbc9a:	f242 7310 	movw	r3, #10000	; 0x2710
 23fbc9e:	429e      	cmp	r6, r3
 23fbca0:	d1ee      	bne.n	23fbc80 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x50>
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fbca2:	eddf 6a19 	vldr	s13, [pc, #100]	; 23fbd08 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xd8>
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fbca6:	2401      	movs	r4, #1
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fbca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_10000g_ok = LOADCELL2_DATA_OK;
 23fbcac:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
            cell_data->weight_coeff_10000g = 10000.0 / weight_val;
 23fbcb0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
            break;
 23fbcb4:	e007      	b.n	23fbcc6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_100g = 100.0 / weight_val;
 23fbcb6:	eddf 6a15 	vldr	s13, [pc, #84]	; 23fbd0c <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xdc>
 23fbcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fbcbe:	2401      	movs	r4, #1
            cell_data->weight_coeff_100g = 100.0 / weight_val;
 23fbcc0:	ed85 7a02 	vstr	s14, [r5, #8]
            cell_data->weight_data_100g_ok = LOADCELL2_DATA_OK;
 23fbcc4:	732c      	strb	r4, [r5, #12]
}
 23fbcc6:	4620      	mov	r0, r4
 23fbcc8:	ecbd 8b02 	vpop	{d8}
 23fbccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fbcd0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 23fbd10 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe0>
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fbcd4:	2401      	movs	r4, #1
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fbcd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_500g_ok = LOADCELL2_DATA_OK;
 23fbcda:	752c      	strb	r4, [r5, #20]
            cell_data->weight_coeff_500g = 500.0 / weight_val;
 23fbcdc:	ed85 7a04 	vstr	s14, [r5, #16]
            break;
 23fbce0:	e7f1      	b.n	23fbcc6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fbce2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 23fbd14 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe4>
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fbce6:	2401      	movs	r4, #1
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fbce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_1000g_ok = LOADCELL2_DATA_OK;
 23fbcec:	772c      	strb	r4, [r5, #28]
            cell_data->weight_coeff_1000g = 1000.0 / weight_val;
 23fbcee:	ed85 7a06 	vstr	s14, [r5, #24]
            break;
 23fbcf2:	e7e8      	b.n	23fbcc6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fbcf4:	eddf 6a08 	vldr	s13, [pc, #32]	; 23fbd18 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0xe8>
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fbcf8:	2401      	movs	r4, #1
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fbcfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            cell_data->weight_data_5000g_ok = LOADCELL2_DATA_OK;
 23fbcfe:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
            cell_data->weight_coeff_5000g = 5000.0 / weight_val;
 23fbd02:	ed85 7a08 	vstr	s14, [r5, #32]
            break;
 23fbd06:	e7de      	b.n	23fbcc6 <_Z21loadcell2_calibrationP11loadcell2_ttP16loadcell2_data_t+0x96>
 23fbd08:	461c4000 	.word	0x461c4000
 23fbd0c:	42c80000 	.word	0x42c80000
 23fbd10:	43fa0000 	.word	0x43fa0000
 23fbd14:	447a0000 	.word	0x447a0000
 23fbd18:	459c4000 	.word	0x459c4000
 23fbd1c:	00000000 	.word	0x00000000

023fbd20 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t>:
{
 23fbd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd22:	ed2d 8b02 	vpush	{d8}
 23fbd26:	4607      	mov	r7, r0
 23fbd28:	460c      	mov	r4, r1
    tare_val = cell_data->tare;
 23fbd2a:	ed91 8a00 	vldr	s16, [r1]
 23fbd2e:	2614      	movs	r6, #20
    sum_val = 0;
 23fbd30:	2500      	movs	r5, #0
        results = loadcell2_get_result( ctx );
 23fbd32:	4638      	mov	r0, r7
 23fbd34:	f7ff ff3c 	bl	23fbbb0 <_Z20loadcell2_get_resultP11loadcell2_t>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fbd38:	3e01      	subs	r6, #1
        sum_val += results;
 23fbd3a:	4405      	add	r5, r0
    Delay_1ms( );
 23fbd3c:	f7ff fdb6 	bl	23fb8ac <_Z9Delay_1msv>
    for ( n_cnt = 0; n_cnt < 20; n_cnt++ )
 23fbd40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23fbd44:	d1f5      	bne.n	23fbd32 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x12>
    average_val = ( float ) sum_val;
 23fbd46:	ee07 5a90 	vmov	s15, r5
    average_val /= 20.0;
 23fbd4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
    average_val = ( float ) sum_val;
 23fbd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    average_val /= 20.0;
 23fbd52:	ee87 0a87 	vdiv.f32	s0, s15, s14
    if ( cell_data->weight_data_100g_ok == LOADCELL2_DATA_OK )
 23fbd56:	7b23      	ldrb	r3, [r4, #12]
    weight_val = average_val - tare_val;
 23fbd58:	ee30 0a48 	vsub.f32	s0, s0, s16
    if ( cell_data->weight_data_100g_ok == LOADCELL2_DATA_OK )
 23fbd5c:	2b01      	cmp	r3, #1
 23fbd5e:	d10d      	bne.n	23fbd7c <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x5c>
        weight_val *= cell_data->weight_coeff_100g;
 23fbd60:	edd4 7a02 	vldr	s15, [r4, #8]
        weight_val *= cell_data->weight_coeff_500g;
 23fbd64:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 23fbd68:	ecbd 8b02 	vpop	{d8}
    if ( weight_val < 0 )
 23fbd6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23fbd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        weight_val = 0.0;
 23fbd74:	bf48      	it	mi
 23fbd76:	ed9f 0a18 	vldrmi	s0, [pc, #96]	; 23fbdd8 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0xb8>
}
 23fbd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( cell_data->weight_data_500g_ok == LOADCELL2_DATA_OK )
 23fbd7c:	7d23      	ldrb	r3, [r4, #20]
 23fbd7e:	2b01      	cmp	r3, #1
 23fbd80:	d102      	bne.n	23fbd88 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x68>
        weight_val *= cell_data->weight_coeff_500g;
 23fbd82:	edd4 7a04 	vldr	s15, [r4, #16]
 23fbd86:	e7ed      	b.n	23fbd64 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_1000g_ok == LOADCELL2_DATA_OK )
 23fbd88:	7f23      	ldrb	r3, [r4, #28]
 23fbd8a:	2b01      	cmp	r3, #1
 23fbd8c:	d102      	bne.n	23fbd94 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x74>
        weight_val *= cell_data->weight_coeff_1000g;
 23fbd8e:	edd4 7a06 	vldr	s15, [r4, #24]
 23fbd92:	e7e7      	b.n	23fbd64 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_5000g_ok == LOADCELL2_DATA_OK )
 23fbd94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 23fbd98:	2b01      	cmp	r3, #1
 23fbd9a:	d102      	bne.n	23fbda2 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x82>
        weight_val *= cell_data->weight_coeff_5000g;
 23fbd9c:	edd4 7a08 	vldr	s15, [r4, #32]
 23fbda0:	e7e0      	b.n	23fbd64 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
    else if ( cell_data->weight_data_10000g_ok == LOADCELL2_DATA_OK )
 23fbda2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23fbda6:	2b01      	cmp	r3, #1
 23fbda8:	d102      	bne.n	23fbdb0 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x90>
        weight_val *= cell_data->weight_coeff_10000g;
 23fbdaa:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 23fbdae:	e7d9      	b.n	23fbd64 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x44>
        weight_val *= LOADCELL2_DEFAULT_WEIGHT_SCALE_COEFFICIENT;
 23fbdb0:	ee10 0a10 	vmov	r0, s0
 23fbdb4:	f7fe fdd8 	bl	23fa968 <__aeabi_f2d>
 23fbdb8:	a305      	add	r3, pc, #20	; (adr r3, 23fbdd0 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0xb0>)
 23fbdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbdbe:	f7fe fe2b 	bl	23faa18 <__aeabi_dmul>
 23fbdc2:	f7ff f8d9 	bl	23faf78 <__aeabi_d2f>
 23fbdc6:	ee00 0a10 	vmov	s0, r0
 23fbdca:	e7cd      	b.n	23fbd68 <_Z20loadcell2_get_weightP11loadcell2_tP16loadcell2_data_t+0x48>
 23fbdcc:	f3af 8000 	nop.w
 23fbdd0:	616a3715 	.word	0x616a3715
 23fbdd4:	3fb6a7a5 	.word	0x3fb6a7a5
 23fbdd8:	00000000 	.word	0x00000000

023fbddc <_Z15digital_in_initP12digital_in_th>:

#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fbddc:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fbdde:	460c      	mov	r4, r1
 23fbde0:	b921      	cbnz	r1, 23fbdec <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fbde2:	7800      	ldrb	r0, [r0, #0]
 23fbde4:	f003 f8a2 	bl	23fef2c <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fbde8:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fbdea:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fbdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbdf0:	e7fb      	b.n	23fbdea <_Z15digital_in_initP12digital_in_th+0xe>
	...

023fbdf4 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{   
 23fbdf4:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fbdf6:	2400      	movs	r4, #0
 23fbdf8:	4b05      	ldr	r3, [pc, #20]	; (23fbe10 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fbdfa:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fbdfc:	4b05      	ldr	r3, [pc, #20]	; (23fbe14 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fbdfe:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fbe00:	f003 f8ea 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe04:	4621      	mov	r1, r4
}
 23fbe06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fbe0a:	f001 b9f7 	b.w	23fd1fc <_ZN7TwoWire8setSpeedEm>
 23fbe0e:	bf00      	nop
 23fbe10:	1007ae42 	.word	0x1007ae42
 23fbe14:	1007ae44 	.word	0x1007ae44

023fbe18 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{   
 23fbe18:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fbe1a:	f003 f8dd 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe1e:	4b05      	ldr	r3, [pc, #20]	; (23fbe34 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fbe20:	6819      	ldr	r1, [r3, #0]
 23fbe22:	f001 f9eb 	bl	23fd1fc <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fbe26:	f003 f8d7 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe2a:	f001 f9eb 	bl	23fd204 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbe2e:	2000      	movs	r0, #0
 23fbe30:	bd08      	pop	{r3, pc}
 23fbe32:	bf00      	nop
 23fbe34:	1007ae44 	.word	0x1007ae44

023fbe38 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{    
 23fbe38:	b510      	push	{r4, lr}
 23fbe3a:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fbe3c:	4b04      	ldr	r3, [pc, #16]	; (23fbe50 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fbe3e:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fbe40:	f003 f8ca 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe44:	4621      	mov	r1, r4
 23fbe46:	f001 f9d9 	bl	23fd1fc <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbe4a:	2000      	movs	r0, #0
 23fbe4c:	bd10      	pop	{r4, pc}
 23fbe4e:	bf00      	nop
 23fbe50:	1007ae44 	.word	0x1007ae44

023fbe54 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{    
    addr = address;                 //set function parameter to global variable
 23fbe54:	4b01      	ldr	r3, [pc, #4]	; (23fbe5c <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbe56:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fbe58:	7019      	strb	r1, [r3, #0]
}
 23fbe5a:	4770      	bx	lr
 23fbe5c:	1007ae42 	.word	0x1007ae42

023fbe60 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{   
 23fbe60:	b513      	push	{r0, r1, r4, lr}
 23fbe62:	460c      	mov	r4, r1
 23fbe64:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fbe66:	f003 f8b7 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe6a:	4b0b      	ldr	r3, [pc, #44]	; (23fbe98 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fbe6c:	7819      	ldrb	r1, [r3, #0]
 23fbe6e:	f001 f9f8 	bl	23fd262 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fbe72:	f003 f8b1 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe76:	6803      	ldr	r3, [r0, #0]
 23fbe78:	4621      	mov	r1, r4
 23fbe7a:	68db      	ldr	r3, [r3, #12]
 23fbe7c:	9a01      	ldr	r2, [sp, #4]
 23fbe7e:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)         //send stop condition (true)
 23fbe80:	f003 f8aa 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbe84:	2101      	movs	r1, #1
 23fbe86:	f001 f9f0 	bl	23fd26a <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;                  //return status
    }
    return I2C_MASTER_ERROR;                        //return status    
}
 23fbe8a:	3801      	subs	r0, #1
 23fbe8c:	bf18      	it	ne
 23fbe8e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fbe92:	b002      	add	sp, #8
 23fbe94:	bd10      	pop	{r4, pc}
 23fbe96:	bf00      	nop
 23fbe98:	1007ae42 	.word	0x1007ae42

023fbe9c <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j>:
    return I2C_MASTER_ERROR;            //return status
}

//i2c write (dummy write) then read operation
int8_t i2c_master_write_then_read(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data, uint8_t *read_data_buf, size_t len_read_data)
{   
 23fbe9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    //local variable
    uint8_t temp;     //variable for determining error

    //write
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fbea0:	4e19      	ldr	r6, [pc, #100]	; (23fbf08 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x6c>)
{   
 23fbea2:	460c      	mov	r4, r1
 23fbea4:	461d      	mov	r5, r3
 23fbea6:	9201      	str	r2, [sp, #4]
 23fbea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fbeac:	f003 f894 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbeb0:	7831      	ldrb	r1, [r6, #0]
 23fbeb2:	f001 f9d6 	bl	23fd262 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fbeb6:	f003 f88f 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbeba:	6803      	ldr	r3, [r0, #0]
 23fbebc:	9a01      	ldr	r2, [sp, #4]
 23fbebe:	68db      	ldr	r3, [r3, #12]
 23fbec0:	4621      	mov	r1, r4
 23fbec2:	4798      	blx	r3
    Wire.endTransmission(FALSE);                    //send restart condition (false)
 23fbec4:	f003 f888 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbec8:	2100      	movs	r1, #0
 23fbeca:	f001 f9ce 	bl	23fd26a <_ZN7TwoWire15endTransmissionEh>

    //read
    temp = Wire.requestFrom(addr, len_read_data, true);     //true signals send stop after read
 23fbece:	f003 f883 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbed2:	7831      	ldrb	r1, [r6, #0]
 23fbed4:	2301      	movs	r3, #1
 23fbed6:	4642      	mov	r2, r8
 23fbed8:	f001 f9b1 	bl	23fd23e <_ZN7TwoWire11requestFromEhjh>
 23fbedc:	2600      	movs	r6, #0
 23fbede:	b2c4      	uxtb	r4, r0
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fbee0:	b2f7      	uxtb	r7, r6
 23fbee2:	45b8      	cmp	r8, r7
 23fbee4:	f106 0601 	add.w	r6, r6, #1
 23fbee8:	d906      	bls.n	23fbef8 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x5c>
    {
        read_data_buf[ii] = Wire.read();                    //write pointer function parameter
 23fbeea:	f003 f875 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23fbeee:	6803      	ldr	r3, [r0, #0]
 23fbef0:	695b      	ldr	r3, [r3, #20]
 23fbef2:	4798      	blx	r3
 23fbef4:	55e8      	strb	r0, [r5, r7]
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fbef6:	e7f3      	b.n	23fbee0 <_Z26i2c_master_write_then_readP12i2c_master_tPhjS1_j+0x44>
    }

    //logic for successful transfer
    if(temp != 0)                       //requestFrom() returns 0 if timeout occurs
 23fbef8:	fab4 f084 	clz	r0, r4
 23fbefc:	0940      	lsrs	r0, r0, #5
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;            //return status
}
 23fbefe:	4240      	negs	r0, r0
 23fbf00:	b002      	add	sp, #8
 23fbf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbf06:	bf00      	nop
 23fbf08:	1007ae42 	.word	0x1007ae42
 23fbf0c:	00000000 	.word	0x00000000

023fbf10 <_ZN10ThermistorC1Eiiiiiii>:
*/
#include "photon-thermistor.h"

#define ABS_ZERO -273.15

Thermistor::Thermistor(
 23fbf10:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
		_adcMax(4095),
		_thermistorNominal(thermistorNominal),
		_temperatureNominal(temperatureNominal),
		_bCoef(bCoef),
		_samples(samples),
		_sampleDelay(sampleDelay) {
 23fbf14:	f20f 0960 	addw	r9, pc, #96	; 0x60
 23fbf18:	e9d9 8900 	ldrd	r8, r9, [r9]
Thermistor::Thermistor(
 23fbf1c:	4604      	mov	r4, r0
		_sampleDelay(sampleDelay) {
 23fbf1e:	e9c0 8902 	strd	r8, r9, [r0, #8]
 23fbf22:	e9c0 8904 	strd	r8, r9, [r0, #16]
 23fbf26:	6001      	str	r1, [r0, #0]
 23fbf28:	4610      	mov	r0, r2
Thermistor::Thermistor(
 23fbf2a:	461e      	mov	r6, r3
 23fbf2c:	460d      	mov	r5, r1
		_sampleDelay(sampleDelay) {
 23fbf2e:	f7fe fd09 	bl	23fa944 <__aeabi_i2d>
 23fbf32:	a313      	add	r3, pc, #76	; (adr r3, 23fbf80 <_ZN10ThermistorC1Eiiiiiii+0x70>)
 23fbf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf38:	e9c4 0106 	strd	r0, r1, [r4, #24]
 23fbf3c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 23fbf40:	4630      	mov	r0, r6
 23fbf42:	f7fe fcff 	bl	23fa944 <__aeabi_i2d>
 23fbf46:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 23fbf4a:	9806      	ldr	r0, [sp, #24]
 23fbf4c:	f7fe fcfa 	bl	23fa944 <__aeabi_i2d>
 23fbf50:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 23fbf54:	9807      	ldr	r0, [sp, #28]
 23fbf56:	f7fe fcf5 	bl	23fa944 <__aeabi_i2d>
 23fbf5a:	9b08      	ldr	r3, [sp, #32]
 23fbf5c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 23fbf60:	6423      	str	r3, [r4, #64]	; 0x40
 23fbf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pinMode(_pin, INPUT);
 23fbf64:	b2a8      	uxth	r0, r5
 23fbf66:	2100      	movs	r1, #0
		_sampleDelay(sampleDelay) {
 23fbf68:	6463      	str	r3, [r4, #68]	; 0x44
  pinMode(_pin, INPUT);
 23fbf6a:	f002 ffdf 	bl	23fef2c <pinMode>
}
 23fbf6e:	4620      	mov	r0, r4
 23fbf70:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 23fbf74:	f3af 8000 	nop.w
 23fbf78:	66666666 	.word	0x66666666
 23fbf7c:	400a6666 	.word	0x400a6666
 23fbf80:	00000000 	.word	0x00000000
 23fbf84:	40affe00 	.word	0x40affe00

023fbf88 <_ZNK10Thermistor7readADCEv>:
		_bCoef(bCoef), _samples(samples),
		_sampleDelay(sampleDelay) {
  pinMode(_pin, INPUT);
}

double Thermistor::readADC() const {
 23fbf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned sum = 0;
  for(int i=0; i<_samples-1; i++) {
 23fbf8a:	2500      	movs	r5, #0
double Thermistor::readADC() const {
 23fbf8c:	4604      	mov	r4, r0
  unsigned sum = 0;
 23fbf8e:	462e      	mov	r6, r5
  for(int i=0; i<_samples-1; i++) {
 23fbf90:	6c23      	ldr	r3, [r4, #64]	; 0x40
    sum += analogRead(_pin);
 23fbf92:	8820      	ldrh	r0, [r4, #0]
  for(int i=0; i<_samples-1; i++) {
 23fbf94:	3b01      	subs	r3, #1
 23fbf96:	42ab      	cmp	r3, r5
 23fbf98:	dd07      	ble.n	23fbfaa <_ZNK10Thermistor7readADCEv+0x22>
    sum += analogRead(_pin);
 23fbf9a:	f002 ffd8 	bl	23fef4e <analogRead>
 23fbf9e:	4406      	add	r6, r0
    delay(_sampleDelay);
 23fbfa0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 23fbfa2:	f000 fd7f 	bl	23fcaa4 <delay>
  for(int i=0; i<_samples-1; i++) {
 23fbfa6:	3501      	adds	r5, #1
 23fbfa8:	e7f2      	b.n	23fbf90 <_ZNK10Thermistor7readADCEv+0x8>
  }
  sum += analogRead(_pin);
 23fbfaa:	f002 ffd0 	bl	23fef4e <analogRead>

  return (1. * sum) / _samples;
 23fbfae:	4430      	add	r0, r6
 23fbfb0:	f7fe fcb8 	bl	23fa924 <__aeabi_ui2d>
 23fbfb4:	4606      	mov	r6, r0
 23fbfb6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 23fbfb8:	460f      	mov	r7, r1
 23fbfba:	f7fe fcc3 	bl	23fa944 <__aeabi_i2d>
 23fbfbe:	4602      	mov	r2, r0
 23fbfc0:	460b      	mov	r3, r1
 23fbfc2:	4630      	mov	r0, r6
 23fbfc4:	4639      	mov	r1, r7
 23fbfc6:	f7fe fe51 	bl	23fac6c <__aeabi_ddiv>
}
 23fbfca:	ec41 0b10 	vmov	d0, r0, r1
 23fbfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbfd0 <_ZNK10Thermistor6adcToKEd>:

double Thermistor::readTempF() const {
  return cToF(readTempC());
}

double Thermistor::adcToK(double adc) const {
 23fbfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	double resistance = -1.0 * (_analogReference * _seriesResistor * adc) / (_analogReference * adc - _vcc * _adcMax);
  double steinhart = (1.0 / (_temperatureNominal - ABS_ZERO)) + (1.0 / _bCoef) * log(resistance / _thermistorNominal);
 23fbfd4:	a333      	add	r3, pc, #204	; (adr r3, 23fc0a4 <_ZNK10Thermistor6adcToKEd+0xd4>)
 23fbfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
double Thermistor::adcToK(double adc) const {
 23fbfda:	ed2d 8b04 	vpush	{d8-d9}
 23fbfde:	4682      	mov	sl, r0
	double resistance = -1.0 * (_analogReference * _seriesResistor * adc) / (_analogReference * adc - _vcc * _adcMax);
 23fbfe0:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
  double steinhart = (1.0 / (_temperatureNominal - ABS_ZERO)) + (1.0 / _bCoef) * log(resistance / _thermistorNominal);
 23fbfe4:	e9d0 010c 	ldrd	r0, r1, [r0, #48]	; 0x30
double Thermistor::adcToK(double adc) const {
 23fbfe8:	ec55 4b10 	vmov	r4, r5, d0
  double steinhart = (1.0 / (_temperatureNominal - ABS_ZERO)) + (1.0 / _bCoef) * log(resistance / _thermistorNominal);
 23fbfec:	f7fe fb5e 	bl	23fa6ac <__adddf3>
 23fbff0:	4602      	mov	r2, r0
 23fbff2:	460b      	mov	r3, r1
 23fbff4:	2000      	movs	r0, #0
 23fbff6:	492a      	ldr	r1, [pc, #168]	; (23fc0a0 <_ZNK10Thermistor6adcToKEd+0xd0>)
 23fbff8:	f7fe fe38 	bl	23fac6c <__aeabi_ddiv>
 23fbffc:	e9da 230e 	ldrd	r2, r3, [sl, #56]	; 0x38
 23fc000:	ec41 0b18 	vmov	d8, r0, r1
 23fc004:	2000      	movs	r0, #0
 23fc006:	4926      	ldr	r1, [pc, #152]	; (23fc0a0 <_ZNK10Thermistor6adcToKEd+0xd0>)
 23fc008:	f7fe fe30 	bl	23fac6c <__aeabi_ddiv>
	double resistance = -1.0 * (_analogReference * _seriesResistor * adc) / (_analogReference * adc - _vcc * _adcMax);
 23fc00c:	e9da 2306 	ldrd	r2, r3, [sl, #24]
  double steinhart = (1.0 / (_temperatureNominal - ABS_ZERO)) + (1.0 / _bCoef) * log(resistance / _thermistorNominal);
 23fc010:	ec41 0b19 	vmov	d9, r0, r1
	double resistance = -1.0 * (_analogReference * _seriesResistor * adc) / (_analogReference * adc - _vcc * _adcMax);
 23fc014:	4640      	mov	r0, r8
 23fc016:	4649      	mov	r1, r9
 23fc018:	f7fe fcfe 	bl	23faa18 <__aeabi_dmul>
 23fc01c:	4622      	mov	r2, r4
 23fc01e:	462b      	mov	r3, r5
 23fc020:	f7fe fcfa 	bl	23faa18 <__aeabi_dmul>
 23fc024:	4622      	mov	r2, r4
 23fc026:	462b      	mov	r3, r5
 23fc028:	4606      	mov	r6, r0
 23fc02a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 23fc02e:	4640      	mov	r0, r8
 23fc030:	4649      	mov	r1, r9
 23fc032:	f7fe fcf1 	bl	23faa18 <__aeabi_dmul>
 23fc036:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 23fc03a:	4604      	mov	r4, r0
 23fc03c:	460d      	mov	r5, r1
 23fc03e:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 23fc042:	f7fe fce9 	bl	23faa18 <__aeabi_dmul>
 23fc046:	4602      	mov	r2, r0
 23fc048:	460b      	mov	r3, r1
 23fc04a:	4620      	mov	r0, r4
 23fc04c:	4629      	mov	r1, r5
 23fc04e:	f7fe fb2b 	bl	23fa6a8 <__aeabi_dsub>
 23fc052:	4602      	mov	r2, r0
 23fc054:	460b      	mov	r3, r1
 23fc056:	4630      	mov	r0, r6
 23fc058:	4639      	mov	r1, r7
 23fc05a:	f7fe fe07 	bl	23fac6c <__aeabi_ddiv>
  double steinhart = (1.0 / (_temperatureNominal - ABS_ZERO)) + (1.0 / _bCoef) * log(resistance / _thermistorNominal);
 23fc05e:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 23fc062:	f7fe fe03 	bl	23fac6c <__aeabi_ddiv>
 23fc066:	ec41 0b10 	vmov	d0, r0, r1
 23fc06a:	f003 f8a1 	bl	23ff1b0 <log>
 23fc06e:	ec51 0b19 	vmov	r0, r1, d9
 23fc072:	ec53 2b10 	vmov	r2, r3, d0
 23fc076:	f7fe fccf 	bl	23faa18 <__aeabi_dmul>
 23fc07a:	ec53 2b18 	vmov	r2, r3, d8
 23fc07e:	f7fe fb15 	bl	23fa6ac <__adddf3>
 23fc082:	4602      	mov	r2, r0
 23fc084:	460b      	mov	r3, r1
  double kelvin = 1.0 / steinhart;
 23fc086:	2000      	movs	r0, #0
 23fc088:	4905      	ldr	r1, [pc, #20]	; (23fc0a0 <_ZNK10Thermistor6adcToKEd+0xd0>)
 23fc08a:	f7fe fdef 	bl	23fac6c <__aeabi_ddiv>
  return kelvin;
}
 23fc08e:	ecbd 8b04 	vpop	{d8-d9}
 23fc092:	ec41 0b10 	vmov	d0, r0, r1
 23fc096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc09a:	bf00      	nop
 23fc09c:	f3af 8000 	nop.w
 23fc0a0:	3ff00000 	.word	0x3ff00000
 23fc0a4:	66666666 	.word	0x66666666
 23fc0a8:	40711266 	.word	0x40711266

023fc0ac <_ZNK10Thermistor9readTempKEv>:
double Thermistor::readTempK() const {
 23fc0ac:	b510      	push	{r4, lr}
 23fc0ae:	4604      	mov	r4, r0
	return adcToK(readADC());
 23fc0b0:	f7ff ff6a 	bl	23fbf88 <_ZNK10Thermistor7readADCEv>
 23fc0b4:	4620      	mov	r0, r4
}
 23fc0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return adcToK(readADC());
 23fc0ba:	f7ff bf89 	b.w	23fbfd0 <_ZNK10Thermistor6adcToKEd>
	...

023fc0c0 <_ZNK10Thermistor9readTempCEv>:
double Thermistor::readTempC() const {
 23fc0c0:	b508      	push	{r3, lr}
  return kToC(readTempK());
 23fc0c2:	f7ff fff3 	bl	23fc0ac <_ZNK10Thermistor9readTempKEv>

double Thermistor::kToC(double k) const {
	double c = k + ABS_ZERO;
 23fc0c6:	a306      	add	r3, pc, #24	; (adr r3, 23fc0e0 <_ZNK10Thermistor9readTempCEv+0x20>)
 23fc0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  return kToC(readTempK());
 23fc0cc:	ec51 0b10 	vmov	r0, r1, d0
	double c = k + ABS_ZERO;
 23fc0d0:	f7fe faea 	bl	23fa6a8 <__aeabi_dsub>
}
 23fc0d4:	ec41 0b10 	vmov	d0, r0, r1
 23fc0d8:	bd08      	pop	{r3, pc}
 23fc0da:	bf00      	nop
 23fc0dc:	f3af 8000 	nop.w
 23fc0e0:	66666666 	.word	0x66666666
 23fc0e4:	40711266 	.word	0x40711266

023fc0e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc0e8:	b509      	push	{r0, r3, lr}
 23fc0ea:	4804      	ldr	r0, [pc, #16]	; (23fc0fc <os_mutex_recursive_create+0x14>)
 23fc0ec:	6800      	ldr	r0, [r0, #0]
 23fc0ee:	4b04      	ldr	r3, [pc, #16]	; (23fc100 <os_mutex_recursive_create+0x18>)
 23fc0f0:	4403      	add	r3, r0
 23fc0f2:	681b      	ldr	r3, [r3, #0]
 23fc0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc0f6:	9302      	str	r3, [sp, #8]
 23fc0f8:	bd09      	pop	{r0, r3, pc}
 23fc0fa:	0000      	.short	0x0000
 23fc0fc:	1007a918 	.word	0x1007a918
 23fc100:	00000030 	.word	0x00000030

023fc104 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc104:	b509      	push	{r0, r3, lr}
 23fc106:	4804      	ldr	r0, [pc, #16]	; (23fc118 <os_mutex_recursive_destroy+0x14>)
 23fc108:	6800      	ldr	r0, [r0, #0]
 23fc10a:	4b04      	ldr	r3, [pc, #16]	; (23fc11c <os_mutex_recursive_destroy+0x18>)
 23fc10c:	4403      	add	r3, r0
 23fc10e:	681b      	ldr	r3, [r3, #0]
 23fc110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc112:	9302      	str	r3, [sp, #8]
 23fc114:	bd09      	pop	{r0, r3, pc}
 23fc116:	0000      	.short	0x0000
 23fc118:	1007a918 	.word	0x1007a918
 23fc11c:	00000030 	.word	0x00000030

023fc120 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc120:	b509      	push	{r0, r3, lr}
 23fc122:	4804      	ldr	r0, [pc, #16]	; (23fc134 <os_mutex_recursive_lock+0x14>)
 23fc124:	6800      	ldr	r0, [r0, #0]
 23fc126:	4b04      	ldr	r3, [pc, #16]	; (23fc138 <os_mutex_recursive_lock+0x18>)
 23fc128:	4403      	add	r3, r0
 23fc12a:	681b      	ldr	r3, [r3, #0]
 23fc12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc12e:	9302      	str	r3, [sp, #8]
 23fc130:	bd09      	pop	{r0, r3, pc}
 23fc132:	0000      	.short	0x0000
 23fc134:	1007a918 	.word	0x1007a918
 23fc138:	00000030 	.word	0x00000030

023fc13c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc13c:	b509      	push	{r0, r3, lr}
 23fc13e:	4804      	ldr	r0, [pc, #16]	; (23fc150 <os_mutex_recursive_unlock+0x14>)
 23fc140:	6800      	ldr	r0, [r0, #0]
 23fc142:	4b04      	ldr	r3, [pc, #16]	; (23fc154 <os_mutex_recursive_unlock+0x18>)
 23fc144:	4403      	add	r3, r0
 23fc146:	681b      	ldr	r3, [r3, #0]
 23fc148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc14a:	9302      	str	r3, [sp, #8]
 23fc14c:	bd09      	pop	{r0, r3, pc}
 23fc14e:	0000      	.short	0x0000
 23fc150:	1007a918 	.word	0x1007a918
 23fc154:	00000030 	.word	0x00000030

023fc158 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc158:	b509      	push	{r0, r3, lr}
 23fc15a:	4804      	ldr	r0, [pc, #16]	; (23fc16c <HAL_RNG_GetRandomNumber+0x14>)
 23fc15c:	6800      	ldr	r0, [r0, #0]
 23fc15e:	4b04      	ldr	r3, [pc, #16]	; (23fc170 <HAL_RNG_GetRandomNumber+0x18>)
 23fc160:	4403      	add	r3, r0
 23fc162:	681b      	ldr	r3, [r3, #0]
 23fc164:	685b      	ldr	r3, [r3, #4]
 23fc166:	9302      	str	r3, [sp, #8]
 23fc168:	bd09      	pop	{r0, r3, pc}
 23fc16a:	0000      	.short	0x0000
 23fc16c:	1007a918 	.word	0x1007a918
 23fc170:	00000000 	.word	0x00000000

023fc174 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc174:	b509      	push	{r0, r3, lr}
 23fc176:	4804      	ldr	r0, [pc, #16]	; (23fc188 <HAL_Delay_Microseconds+0x14>)
 23fc178:	6800      	ldr	r0, [r0, #0]
 23fc17a:	4b04      	ldr	r3, [pc, #16]	; (23fc18c <HAL_Delay_Microseconds+0x18>)
 23fc17c:	4403      	add	r3, r0
 23fc17e:	681b      	ldr	r3, [r3, #0]
 23fc180:	68db      	ldr	r3, [r3, #12]
 23fc182:	9302      	str	r3, [sp, #8]
 23fc184:	bd09      	pop	{r0, r3, pc}
 23fc186:	0000      	.short	0x0000
 23fc188:	1007a918 	.word	0x1007a918
 23fc18c:	00000000 	.word	0x00000000

023fc190 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc190:	b509      	push	{r0, r3, lr}
 23fc192:	4804      	ldr	r0, [pc, #16]	; (23fc1a4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc194:	6800      	ldr	r0, [r0, #0]
 23fc196:	4b04      	ldr	r3, [pc, #16]	; (23fc1a8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc198:	4403      	add	r3, r0
 23fc19a:	681b      	ldr	r3, [r3, #0]
 23fc19c:	695b      	ldr	r3, [r3, #20]
 23fc19e:	9302      	str	r3, [sp, #8]
 23fc1a0:	bd09      	pop	{r0, r3, pc}
 23fc1a2:	0000      	.short	0x0000
 23fc1a4:	1007a918 	.word	0x1007a918
 23fc1a8:	00000000 	.word	0x00000000

023fc1ac <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23fc1ac:	b509      	push	{r0, r3, lr}
 23fc1ae:	4804      	ldr	r0, [pc, #16]	; (23fc1c0 <HAL_EEPROM_Init+0x14>)
 23fc1b0:	6800      	ldr	r0, [r0, #0]
 23fc1b2:	4b04      	ldr	r3, [pc, #16]	; (23fc1c4 <HAL_EEPROM_Init+0x18>)
 23fc1b4:	4403      	add	r3, r0
 23fc1b6:	681b      	ldr	r3, [r3, #0]
 23fc1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc1ba:	9302      	str	r3, [sp, #8]
 23fc1bc:	bd09      	pop	{r0, r3, pc}
 23fc1be:	0000      	.short	0x0000
 23fc1c0:	1007a918 	.word	0x1007a918
 23fc1c4:	00000000 	.word	0x00000000

023fc1c8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23fc1c8:	b509      	push	{r0, r3, lr}
 23fc1ca:	4804      	ldr	r0, [pc, #16]	; (23fc1dc <HAL_EEPROM_Get+0x14>)
 23fc1cc:	6800      	ldr	r0, [r0, #0]
 23fc1ce:	4b04      	ldr	r3, [pc, #16]	; (23fc1e0 <HAL_EEPROM_Get+0x18>)
 23fc1d0:	4403      	add	r3, r0
 23fc1d2:	681b      	ldr	r3, [r3, #0]
 23fc1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc1d6:	9302      	str	r3, [sp, #8]
 23fc1d8:	bd09      	pop	{r0, r3, pc}
 23fc1da:	0000      	.short	0x0000
 23fc1dc:	1007a918 	.word	0x1007a918
 23fc1e0:	00000000 	.word	0x00000000

023fc1e4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23fc1e4:	b509      	push	{r0, r3, lr}
 23fc1e6:	4804      	ldr	r0, [pc, #16]	; (23fc1f8 <HAL_EEPROM_Put+0x14>)
 23fc1e8:	6800      	ldr	r0, [r0, #0]
 23fc1ea:	4b04      	ldr	r3, [pc, #16]	; (23fc1fc <HAL_EEPROM_Put+0x18>)
 23fc1ec:	4403      	add	r3, r0
 23fc1ee:	681b      	ldr	r3, [r3, #0]
 23fc1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc1f2:	9302      	str	r3, [sp, #8]
 23fc1f4:	bd09      	pop	{r0, r3, pc}
 23fc1f6:	0000      	.short	0x0000
 23fc1f8:	1007a918 	.word	0x1007a918
 23fc1fc:	00000000 	.word	0x00000000

023fc200 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc200:	b509      	push	{r0, r3, lr}
 23fc202:	4804      	ldr	r0, [pc, #16]	; (23fc214 <hal_timer_millis+0x14>)
 23fc204:	6800      	ldr	r0, [r0, #0]
 23fc206:	4b04      	ldr	r3, [pc, #16]	; (23fc218 <hal_timer_millis+0x18>)
 23fc208:	4403      	add	r3, r0
 23fc20a:	681b      	ldr	r3, [r3, #0]
 23fc20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc20e:	9302      	str	r3, [sp, #8]
 23fc210:	bd09      	pop	{r0, r3, pc}
 23fc212:	0000      	.short	0x0000
 23fc214:	1007a918 	.word	0x1007a918
 23fc218:	00000000 	.word	0x00000000

023fc21c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc21c:	b509      	push	{r0, r3, lr}
 23fc21e:	4804      	ldr	r0, [pc, #16]	; (23fc230 <hal_pin_validate_function+0x14>)
 23fc220:	6800      	ldr	r0, [r0, #0]
 23fc222:	4b04      	ldr	r3, [pc, #16]	; (23fc234 <hal_pin_validate_function+0x18>)
 23fc224:	4403      	add	r3, r0
 23fc226:	681b      	ldr	r3, [r3, #0]
 23fc228:	685b      	ldr	r3, [r3, #4]
 23fc22a:	9302      	str	r3, [sp, #8]
 23fc22c:	bd09      	pop	{r0, r3, pc}
 23fc22e:	0000      	.short	0x0000
 23fc230:	1007a918 	.word	0x1007a918
 23fc234:	00000014 	.word	0x00000014

023fc238 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc238:	b509      	push	{r0, r3, lr}
 23fc23a:	4804      	ldr	r0, [pc, #16]	; (23fc24c <hal_gpio_mode+0x14>)
 23fc23c:	6800      	ldr	r0, [r0, #0]
 23fc23e:	4b04      	ldr	r3, [pc, #16]	; (23fc250 <hal_gpio_mode+0x18>)
 23fc240:	4403      	add	r3, r0
 23fc242:	681b      	ldr	r3, [r3, #0]
 23fc244:	689b      	ldr	r3, [r3, #8]
 23fc246:	9302      	str	r3, [sp, #8]
 23fc248:	bd09      	pop	{r0, r3, pc}
 23fc24a:	0000      	.short	0x0000
 23fc24c:	1007a918 	.word	0x1007a918
 23fc250:	00000014 	.word	0x00000014

023fc254 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fc254:	b509      	push	{r0, r3, lr}
 23fc256:	4804      	ldr	r0, [pc, #16]	; (23fc268 <hal_adc_read+0x14>)
 23fc258:	6800      	ldr	r0, [r0, #0]
 23fc25a:	4b04      	ldr	r3, [pc, #16]	; (23fc26c <hal_adc_read+0x18>)
 23fc25c:	4403      	add	r3, r0
 23fc25e:	681b      	ldr	r3, [r3, #0]
 23fc260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc262:	9302      	str	r3, [sp, #8]
 23fc264:	bd09      	pop	{r0, r3, pc}
 23fc266:	0000      	.short	0x0000
 23fc268:	1007a918 	.word	0x1007a918
 23fc26c:	00000014 	.word	0x00000014

023fc270 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fc270:	b509      	push	{r0, r3, lr}
 23fc272:	4804      	ldr	r0, [pc, #16]	; (23fc284 <hal_i2c_set_speed+0x14>)
 23fc274:	6800      	ldr	r0, [r0, #0]
 23fc276:	4b04      	ldr	r3, [pc, #16]	; (23fc288 <hal_i2c_set_speed+0x18>)
 23fc278:	4403      	add	r3, r0
 23fc27a:	681b      	ldr	r3, [r3, #0]
 23fc27c:	681b      	ldr	r3, [r3, #0]
 23fc27e:	9302      	str	r3, [sp, #8]
 23fc280:	bd09      	pop	{r0, r3, pc}
 23fc282:	0000      	.short	0x0000
 23fc284:	1007a918 	.word	0x1007a918
 23fc288:	00000010 	.word	0x00000010

023fc28c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc28c:	b509      	push	{r0, r3, lr}
 23fc28e:	4804      	ldr	r0, [pc, #16]	; (23fc2a0 <hal_i2c_begin+0x14>)
 23fc290:	6800      	ldr	r0, [r0, #0]
 23fc292:	4b04      	ldr	r3, [pc, #16]	; (23fc2a4 <hal_i2c_begin+0x18>)
 23fc294:	4403      	add	r3, r0
 23fc296:	681b      	ldr	r3, [r3, #0]
 23fc298:	68db      	ldr	r3, [r3, #12]
 23fc29a:	9302      	str	r3, [sp, #8]
 23fc29c:	bd09      	pop	{r0, r3, pc}
 23fc29e:	0000      	.short	0x0000
 23fc2a0:	1007a918 	.word	0x1007a918
 23fc2a4:	00000010 	.word	0x00000010

023fc2a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc2a8:	b509      	push	{r0, r3, lr}
 23fc2aa:	4804      	ldr	r0, [pc, #16]	; (23fc2bc <hal_i2c_begin_transmission+0x14>)
 23fc2ac:	6800      	ldr	r0, [r0, #0]
 23fc2ae:	4b04      	ldr	r3, [pc, #16]	; (23fc2c0 <hal_i2c_begin_transmission+0x18>)
 23fc2b0:	4403      	add	r3, r0
 23fc2b2:	681b      	ldr	r3, [r3, #0]
 23fc2b4:	699b      	ldr	r3, [r3, #24]
 23fc2b6:	9302      	str	r3, [sp, #8]
 23fc2b8:	bd09      	pop	{r0, r3, pc}
 23fc2ba:	0000      	.short	0x0000
 23fc2bc:	1007a918 	.word	0x1007a918
 23fc2c0:	00000010 	.word	0x00000010

023fc2c4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc2c4:	b509      	push	{r0, r3, lr}
 23fc2c6:	4804      	ldr	r0, [pc, #16]	; (23fc2d8 <hal_i2c_end_transmission+0x14>)
 23fc2c8:	6800      	ldr	r0, [r0, #0]
 23fc2ca:	4b04      	ldr	r3, [pc, #16]	; (23fc2dc <hal_i2c_end_transmission+0x18>)
 23fc2cc:	4403      	add	r3, r0
 23fc2ce:	681b      	ldr	r3, [r3, #0]
 23fc2d0:	69db      	ldr	r3, [r3, #28]
 23fc2d2:	9302      	str	r3, [sp, #8]
 23fc2d4:	bd09      	pop	{r0, r3, pc}
 23fc2d6:	0000      	.short	0x0000
 23fc2d8:	1007a918 	.word	0x1007a918
 23fc2dc:	00000010 	.word	0x00000010

023fc2e0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc2e0:	b509      	push	{r0, r3, lr}
 23fc2e2:	4804      	ldr	r0, [pc, #16]	; (23fc2f4 <hal_i2c_write+0x14>)
 23fc2e4:	6800      	ldr	r0, [r0, #0]
 23fc2e6:	4b04      	ldr	r3, [pc, #16]	; (23fc2f8 <hal_i2c_write+0x18>)
 23fc2e8:	4403      	add	r3, r0
 23fc2ea:	681b      	ldr	r3, [r3, #0]
 23fc2ec:	6a1b      	ldr	r3, [r3, #32]
 23fc2ee:	9302      	str	r3, [sp, #8]
 23fc2f0:	bd09      	pop	{r0, r3, pc}
 23fc2f2:	0000      	.short	0x0000
 23fc2f4:	1007a918 	.word	0x1007a918
 23fc2f8:	00000010 	.word	0x00000010

023fc2fc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc2fc:	b509      	push	{r0, r3, lr}
 23fc2fe:	4804      	ldr	r0, [pc, #16]	; (23fc310 <hal_i2c_available+0x14>)
 23fc300:	6800      	ldr	r0, [r0, #0]
 23fc302:	4b04      	ldr	r3, [pc, #16]	; (23fc314 <hal_i2c_available+0x18>)
 23fc304:	4403      	add	r3, r0
 23fc306:	681b      	ldr	r3, [r3, #0]
 23fc308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc30a:	9302      	str	r3, [sp, #8]
 23fc30c:	bd09      	pop	{r0, r3, pc}
 23fc30e:	0000      	.short	0x0000
 23fc310:	1007a918 	.word	0x1007a918
 23fc314:	00000010 	.word	0x00000010

023fc318 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc318:	b509      	push	{r0, r3, lr}
 23fc31a:	4804      	ldr	r0, [pc, #16]	; (23fc32c <hal_i2c_read+0x14>)
 23fc31c:	6800      	ldr	r0, [r0, #0]
 23fc31e:	4b04      	ldr	r3, [pc, #16]	; (23fc330 <hal_i2c_read+0x18>)
 23fc320:	4403      	add	r3, r0
 23fc322:	681b      	ldr	r3, [r3, #0]
 23fc324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc326:	9302      	str	r3, [sp, #8]
 23fc328:	bd09      	pop	{r0, r3, pc}
 23fc32a:	0000      	.short	0x0000
 23fc32c:	1007a918 	.word	0x1007a918
 23fc330:	00000010 	.word	0x00000010

023fc334 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc334:	b509      	push	{r0, r3, lr}
 23fc336:	4804      	ldr	r0, [pc, #16]	; (23fc348 <hal_i2c_peek+0x14>)
 23fc338:	6800      	ldr	r0, [r0, #0]
 23fc33a:	4b04      	ldr	r3, [pc, #16]	; (23fc34c <hal_i2c_peek+0x18>)
 23fc33c:	4403      	add	r3, r0
 23fc33e:	681b      	ldr	r3, [r3, #0]
 23fc340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc342:	9302      	str	r3, [sp, #8]
 23fc344:	bd09      	pop	{r0, r3, pc}
 23fc346:	0000      	.short	0x0000
 23fc348:	1007a918 	.word	0x1007a918
 23fc34c:	00000010 	.word	0x00000010

023fc350 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc350:	b509      	push	{r0, r3, lr}
 23fc352:	4804      	ldr	r0, [pc, #16]	; (23fc364 <hal_i2c_flush+0x14>)
 23fc354:	6800      	ldr	r0, [r0, #0]
 23fc356:	4b04      	ldr	r3, [pc, #16]	; (23fc368 <hal_i2c_flush+0x18>)
 23fc358:	4403      	add	r3, r0
 23fc35a:	681b      	ldr	r3, [r3, #0]
 23fc35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc35e:	9302      	str	r3, [sp, #8]
 23fc360:	bd09      	pop	{r0, r3, pc}
 23fc362:	0000      	.short	0x0000
 23fc364:	1007a918 	.word	0x1007a918
 23fc368:	00000010 	.word	0x00000010

023fc36c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc36c:	b509      	push	{r0, r3, lr}
 23fc36e:	4804      	ldr	r0, [pc, #16]	; (23fc380 <hal_i2c_is_enabled+0x14>)
 23fc370:	6800      	ldr	r0, [r0, #0]
 23fc372:	4b04      	ldr	r3, [pc, #16]	; (23fc384 <hal_i2c_is_enabled+0x18>)
 23fc374:	4403      	add	r3, r0
 23fc376:	681b      	ldr	r3, [r3, #0]
 23fc378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc37a:	9302      	str	r3, [sp, #8]
 23fc37c:	bd09      	pop	{r0, r3, pc}
 23fc37e:	0000      	.short	0x0000
 23fc380:	1007a918 	.word	0x1007a918
 23fc384:	00000010 	.word	0x00000010

023fc388 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc388:	b509      	push	{r0, r3, lr}
 23fc38a:	4804      	ldr	r0, [pc, #16]	; (23fc39c <hal_i2c_init+0x14>)
 23fc38c:	6800      	ldr	r0, [r0, #0]
 23fc38e:	4b04      	ldr	r3, [pc, #16]	; (23fc3a0 <hal_i2c_init+0x18>)
 23fc390:	4403      	add	r3, r0
 23fc392:	681b      	ldr	r3, [r3, #0]
 23fc394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc396:	9302      	str	r3, [sp, #8]
 23fc398:	bd09      	pop	{r0, r3, pc}
 23fc39a:	0000      	.short	0x0000
 23fc39c:	1007a918 	.word	0x1007a918
 23fc3a0:	00000010 	.word	0x00000010

023fc3a4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc3a4:	b509      	push	{r0, r3, lr}
 23fc3a6:	4804      	ldr	r0, [pc, #16]	; (23fc3b8 <hal_i2c_request_ex+0x14>)
 23fc3a8:	6800      	ldr	r0, [r0, #0]
 23fc3aa:	4b04      	ldr	r3, [pc, #16]	; (23fc3bc <hal_i2c_request_ex+0x18>)
 23fc3ac:	4403      	add	r3, r0
 23fc3ae:	681b      	ldr	r3, [r3, #0]
 23fc3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc3b2:	9302      	str	r3, [sp, #8]
 23fc3b4:	bd09      	pop	{r0, r3, pc}
 23fc3b6:	0000      	.short	0x0000
 23fc3b8:	1007a918 	.word	0x1007a918
 23fc3bc:	00000010 	.word	0x00000010

023fc3c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc3c0:	b509      	push	{r0, r3, lr}
 23fc3c2:	4804      	ldr	r0, [pc, #16]	; (23fc3d4 <inet_inet_ntop+0x14>)
 23fc3c4:	6800      	ldr	r0, [r0, #0]
 23fc3c6:	4b04      	ldr	r3, [pc, #16]	; (23fc3d8 <inet_inet_ntop+0x18>)
 23fc3c8:	4403      	add	r3, r0
 23fc3ca:	681b      	ldr	r3, [r3, #0]
 23fc3cc:	695b      	ldr	r3, [r3, #20]
 23fc3ce:	9302      	str	r3, [sp, #8]
 23fc3d0:	bd09      	pop	{r0, r3, pc}
 23fc3d2:	0000      	.short	0x0000
 23fc3d4:	1007a918 	.word	0x1007a918
 23fc3d8:	0000004c 	.word	0x0000004c

023fc3dc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc3dc:	b509      	push	{r0, r3, lr}
 23fc3de:	4804      	ldr	r0, [pc, #16]	; (23fc3f0 <netdb_freeaddrinfo+0x14>)
 23fc3e0:	6800      	ldr	r0, [r0, #0]
 23fc3e2:	4b04      	ldr	r3, [pc, #16]	; (23fc3f4 <netdb_freeaddrinfo+0x18>)
 23fc3e4:	4403      	add	r3, r0
 23fc3e6:	681b      	ldr	r3, [r3, #0]
 23fc3e8:	689b      	ldr	r3, [r3, #8]
 23fc3ea:	9302      	str	r3, [sp, #8]
 23fc3ec:	bd09      	pop	{r0, r3, pc}
 23fc3ee:	0000      	.short	0x0000
 23fc3f0:	1007a918 	.word	0x1007a918
 23fc3f4:	00000050 	.word	0x00000050

023fc3f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc3f8:	b509      	push	{r0, r3, lr}
 23fc3fa:	4804      	ldr	r0, [pc, #16]	; (23fc40c <netdb_getaddrinfo+0x14>)
 23fc3fc:	6800      	ldr	r0, [r0, #0]
 23fc3fe:	4b04      	ldr	r3, [pc, #16]	; (23fc410 <netdb_getaddrinfo+0x18>)
 23fc400:	4403      	add	r3, r0
 23fc402:	681b      	ldr	r3, [r3, #0]
 23fc404:	68db      	ldr	r3, [r3, #12]
 23fc406:	9302      	str	r3, [sp, #8]
 23fc408:	bd09      	pop	{r0, r3, pc}
 23fc40a:	0000      	.short	0x0000
 23fc40c:	1007a918 	.word	0x1007a918
 23fc410:	00000050 	.word	0x00000050

023fc414 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc414:	b509      	push	{r0, r3, lr}
 23fc416:	4804      	ldr	r0, [pc, #16]	; (23fc428 <hal_spi_init+0x14>)
 23fc418:	6800      	ldr	r0, [r0, #0]
 23fc41a:	4b04      	ldr	r3, [pc, #16]	; (23fc42c <hal_spi_init+0x18>)
 23fc41c:	4403      	add	r3, r0
 23fc41e:	681b      	ldr	r3, [r3, #0]
 23fc420:	69db      	ldr	r3, [r3, #28]
 23fc422:	9302      	str	r3, [sp, #8]
 23fc424:	bd09      	pop	{r0, r3, pc}
 23fc426:	0000      	.short	0x0000
 23fc428:	1007a918 	.word	0x1007a918
 23fc42c:	00000018 	.word	0x00000018

023fc430 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc430:	b509      	push	{r0, r3, lr}
 23fc432:	4804      	ldr	r0, [pc, #16]	; (23fc444 <hal_spi_is_enabled+0x14>)
 23fc434:	6800      	ldr	r0, [r0, #0]
 23fc436:	4b04      	ldr	r3, [pc, #16]	; (23fc448 <hal_spi_is_enabled+0x18>)
 23fc438:	4403      	add	r3, r0
 23fc43a:	681b      	ldr	r3, [r3, #0]
 23fc43c:	6a1b      	ldr	r3, [r3, #32]
 23fc43e:	9302      	str	r3, [sp, #8]
 23fc440:	bd09      	pop	{r0, r3, pc}
 23fc442:	0000      	.short	0x0000
 23fc444:	1007a918 	.word	0x1007a918
 23fc448:	00000018 	.word	0x00000018

023fc44c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc44c:	b509      	push	{r0, r3, lr}
 23fc44e:	4804      	ldr	r0, [pc, #16]	; (23fc460 <hal_usart_end+0x14>)
 23fc450:	6800      	ldr	r0, [r0, #0]
 23fc452:	4b04      	ldr	r3, [pc, #16]	; (23fc464 <hal_usart_end+0x18>)
 23fc454:	4403      	add	r3, r0
 23fc456:	681b      	ldr	r3, [r3, #0]
 23fc458:	689b      	ldr	r3, [r3, #8]
 23fc45a:	9302      	str	r3, [sp, #8]
 23fc45c:	bd09      	pop	{r0, r3, pc}
 23fc45e:	0000      	.short	0x0000
 23fc460:	1007a918 	.word	0x1007a918
 23fc464:	00000024 	.word	0x00000024

023fc468 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc468:	b509      	push	{r0, r3, lr}
 23fc46a:	4804      	ldr	r0, [pc, #16]	; (23fc47c <hal_usart_write+0x14>)
 23fc46c:	6800      	ldr	r0, [r0, #0]
 23fc46e:	4b04      	ldr	r3, [pc, #16]	; (23fc480 <hal_usart_write+0x18>)
 23fc470:	4403      	add	r3, r0
 23fc472:	681b      	ldr	r3, [r3, #0]
 23fc474:	68db      	ldr	r3, [r3, #12]
 23fc476:	9302      	str	r3, [sp, #8]
 23fc478:	bd09      	pop	{r0, r3, pc}
 23fc47a:	0000      	.short	0x0000
 23fc47c:	1007a918 	.word	0x1007a918
 23fc480:	00000024 	.word	0x00000024

023fc484 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc484:	b509      	push	{r0, r3, lr}
 23fc486:	4804      	ldr	r0, [pc, #16]	; (23fc498 <hal_usart_available+0x14>)
 23fc488:	6800      	ldr	r0, [r0, #0]
 23fc48a:	4b04      	ldr	r3, [pc, #16]	; (23fc49c <hal_usart_available+0x18>)
 23fc48c:	4403      	add	r3, r0
 23fc48e:	681b      	ldr	r3, [r3, #0]
 23fc490:	691b      	ldr	r3, [r3, #16]
 23fc492:	9302      	str	r3, [sp, #8]
 23fc494:	bd09      	pop	{r0, r3, pc}
 23fc496:	0000      	.short	0x0000
 23fc498:	1007a918 	.word	0x1007a918
 23fc49c:	00000024 	.word	0x00000024

023fc4a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc4a0:	b509      	push	{r0, r3, lr}
 23fc4a2:	4804      	ldr	r0, [pc, #16]	; (23fc4b4 <hal_usart_read+0x14>)
 23fc4a4:	6800      	ldr	r0, [r0, #0]
 23fc4a6:	4b04      	ldr	r3, [pc, #16]	; (23fc4b8 <hal_usart_read+0x18>)
 23fc4a8:	4403      	add	r3, r0
 23fc4aa:	681b      	ldr	r3, [r3, #0]
 23fc4ac:	695b      	ldr	r3, [r3, #20]
 23fc4ae:	9302      	str	r3, [sp, #8]
 23fc4b0:	bd09      	pop	{r0, r3, pc}
 23fc4b2:	0000      	.short	0x0000
 23fc4b4:	1007a918 	.word	0x1007a918
 23fc4b8:	00000024 	.word	0x00000024

023fc4bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc4bc:	b509      	push	{r0, r3, lr}
 23fc4be:	4804      	ldr	r0, [pc, #16]	; (23fc4d0 <hal_usart_peek+0x14>)
 23fc4c0:	6800      	ldr	r0, [r0, #0]
 23fc4c2:	4b04      	ldr	r3, [pc, #16]	; (23fc4d4 <hal_usart_peek+0x18>)
 23fc4c4:	4403      	add	r3, r0
 23fc4c6:	681b      	ldr	r3, [r3, #0]
 23fc4c8:	699b      	ldr	r3, [r3, #24]
 23fc4ca:	9302      	str	r3, [sp, #8]
 23fc4cc:	bd09      	pop	{r0, r3, pc}
 23fc4ce:	0000      	.short	0x0000
 23fc4d0:	1007a918 	.word	0x1007a918
 23fc4d4:	00000024 	.word	0x00000024

023fc4d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc4d8:	b509      	push	{r0, r3, lr}
 23fc4da:	4804      	ldr	r0, [pc, #16]	; (23fc4ec <hal_usart_flush+0x14>)
 23fc4dc:	6800      	ldr	r0, [r0, #0]
 23fc4de:	4b04      	ldr	r3, [pc, #16]	; (23fc4f0 <hal_usart_flush+0x18>)
 23fc4e0:	4403      	add	r3, r0
 23fc4e2:	681b      	ldr	r3, [r3, #0]
 23fc4e4:	69db      	ldr	r3, [r3, #28]
 23fc4e6:	9302      	str	r3, [sp, #8]
 23fc4e8:	bd09      	pop	{r0, r3, pc}
 23fc4ea:	0000      	.short	0x0000
 23fc4ec:	1007a918 	.word	0x1007a918
 23fc4f0:	00000024 	.word	0x00000024

023fc4f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc4f4:	b509      	push	{r0, r3, lr}
 23fc4f6:	4804      	ldr	r0, [pc, #16]	; (23fc508 <hal_usart_is_enabled+0x14>)
 23fc4f8:	6800      	ldr	r0, [r0, #0]
 23fc4fa:	4b04      	ldr	r3, [pc, #16]	; (23fc50c <hal_usart_is_enabled+0x18>)
 23fc4fc:	4403      	add	r3, r0
 23fc4fe:	681b      	ldr	r3, [r3, #0]
 23fc500:	6a1b      	ldr	r3, [r3, #32]
 23fc502:	9302      	str	r3, [sp, #8]
 23fc504:	bd09      	pop	{r0, r3, pc}
 23fc506:	0000      	.short	0x0000
 23fc508:	1007a918 	.word	0x1007a918
 23fc50c:	00000024 	.word	0x00000024

023fc510 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc510:	b509      	push	{r0, r3, lr}
 23fc512:	4804      	ldr	r0, [pc, #16]	; (23fc524 <hal_usart_available_data_for_write+0x14>)
 23fc514:	6800      	ldr	r0, [r0, #0]
 23fc516:	4b04      	ldr	r3, [pc, #16]	; (23fc528 <hal_usart_available_data_for_write+0x18>)
 23fc518:	4403      	add	r3, r0
 23fc51a:	681b      	ldr	r3, [r3, #0]
 23fc51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc51e:	9302      	str	r3, [sp, #8]
 23fc520:	bd09      	pop	{r0, r3, pc}
 23fc522:	0000      	.short	0x0000
 23fc524:	1007a918 	.word	0x1007a918
 23fc528:	00000024 	.word	0x00000024

023fc52c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc52c:	b509      	push	{r0, r3, lr}
 23fc52e:	4804      	ldr	r0, [pc, #16]	; (23fc540 <hal_usart_begin_config+0x14>)
 23fc530:	6800      	ldr	r0, [r0, #0]
 23fc532:	4b04      	ldr	r3, [pc, #16]	; (23fc544 <hal_usart_begin_config+0x18>)
 23fc534:	4403      	add	r3, r0
 23fc536:	681b      	ldr	r3, [r3, #0]
 23fc538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc53a:	9302      	str	r3, [sp, #8]
 23fc53c:	bd09      	pop	{r0, r3, pc}
 23fc53e:	0000      	.short	0x0000
 23fc540:	1007a918 	.word	0x1007a918
 23fc544:	00000024 	.word	0x00000024

023fc548 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc548:	b509      	push	{r0, r3, lr}
 23fc54a:	4804      	ldr	r0, [pc, #16]	; (23fc55c <hal_usart_init_ex+0x14>)
 23fc54c:	6800      	ldr	r0, [r0, #0]
 23fc54e:	4b04      	ldr	r3, [pc, #16]	; (23fc560 <hal_usart_init_ex+0x18>)
 23fc550:	4403      	add	r3, r0
 23fc552:	681b      	ldr	r3, [r3, #0]
 23fc554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc556:	9302      	str	r3, [sp, #8]
 23fc558:	bd09      	pop	{r0, r3, pc}
 23fc55a:	0000      	.short	0x0000
 23fc55c:	1007a918 	.word	0x1007a918
 23fc560:	00000024 	.word	0x00000024

023fc564 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc564:	b509      	push	{r0, r3, lr}
 23fc566:	4804      	ldr	r0, [pc, #16]	; (23fc578 <HAL_USB_USART_Init+0x14>)
 23fc568:	6800      	ldr	r0, [r0, #0]
 23fc56a:	4b04      	ldr	r3, [pc, #16]	; (23fc57c <HAL_USB_USART_Init+0x18>)
 23fc56c:	4403      	add	r3, r0
 23fc56e:	681b      	ldr	r3, [r3, #0]
 23fc570:	681b      	ldr	r3, [r3, #0]
 23fc572:	9302      	str	r3, [sp, #8]
 23fc574:	bd09      	pop	{r0, r3, pc}
 23fc576:	0000      	.short	0x0000
 23fc578:	1007a918 	.word	0x1007a918
 23fc57c:	00000034 	.word	0x00000034

023fc580 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc580:	b509      	push	{r0, r3, lr}
 23fc582:	4804      	ldr	r0, [pc, #16]	; (23fc594 <HAL_USB_USART_Begin+0x14>)
 23fc584:	6800      	ldr	r0, [r0, #0]
 23fc586:	4b04      	ldr	r3, [pc, #16]	; (23fc598 <HAL_USB_USART_Begin+0x18>)
 23fc588:	4403      	add	r3, r0
 23fc58a:	681b      	ldr	r3, [r3, #0]
 23fc58c:	685b      	ldr	r3, [r3, #4]
 23fc58e:	9302      	str	r3, [sp, #8]
 23fc590:	bd09      	pop	{r0, r3, pc}
 23fc592:	0000      	.short	0x0000
 23fc594:	1007a918 	.word	0x1007a918
 23fc598:	00000034 	.word	0x00000034

023fc59c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc59c:	b509      	push	{r0, r3, lr}
 23fc59e:	4804      	ldr	r0, [pc, #16]	; (23fc5b0 <HAL_USB_USART_End+0x14>)
 23fc5a0:	6800      	ldr	r0, [r0, #0]
 23fc5a2:	4b04      	ldr	r3, [pc, #16]	; (23fc5b4 <HAL_USB_USART_End+0x18>)
 23fc5a4:	4403      	add	r3, r0
 23fc5a6:	681b      	ldr	r3, [r3, #0]
 23fc5a8:	689b      	ldr	r3, [r3, #8]
 23fc5aa:	9302      	str	r3, [sp, #8]
 23fc5ac:	bd09      	pop	{r0, r3, pc}
 23fc5ae:	0000      	.short	0x0000
 23fc5b0:	1007a918 	.word	0x1007a918
 23fc5b4:	00000034 	.word	0x00000034

023fc5b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc5b8:	b509      	push	{r0, r3, lr}
 23fc5ba:	4804      	ldr	r0, [pc, #16]	; (23fc5cc <HAL_USB_USART_Available_Data+0x14>)
 23fc5bc:	6800      	ldr	r0, [r0, #0]
 23fc5be:	4b04      	ldr	r3, [pc, #16]	; (23fc5d0 <HAL_USB_USART_Available_Data+0x18>)
 23fc5c0:	4403      	add	r3, r0
 23fc5c2:	681b      	ldr	r3, [r3, #0]
 23fc5c4:	691b      	ldr	r3, [r3, #16]
 23fc5c6:	9302      	str	r3, [sp, #8]
 23fc5c8:	bd09      	pop	{r0, r3, pc}
 23fc5ca:	0000      	.short	0x0000
 23fc5cc:	1007a918 	.word	0x1007a918
 23fc5d0:	00000034 	.word	0x00000034

023fc5d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc5d4:	b509      	push	{r0, r3, lr}
 23fc5d6:	4804      	ldr	r0, [pc, #16]	; (23fc5e8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc5d8:	6800      	ldr	r0, [r0, #0]
 23fc5da:	4b04      	ldr	r3, [pc, #16]	; (23fc5ec <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc5dc:	4403      	add	r3, r0
 23fc5de:	681b      	ldr	r3, [r3, #0]
 23fc5e0:	695b      	ldr	r3, [r3, #20]
 23fc5e2:	9302      	str	r3, [sp, #8]
 23fc5e4:	bd09      	pop	{r0, r3, pc}
 23fc5e6:	0000      	.short	0x0000
 23fc5e8:	1007a918 	.word	0x1007a918
 23fc5ec:	00000034 	.word	0x00000034

023fc5f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc5f0:	b509      	push	{r0, r3, lr}
 23fc5f2:	4804      	ldr	r0, [pc, #16]	; (23fc604 <HAL_USB_USART_Receive_Data+0x14>)
 23fc5f4:	6800      	ldr	r0, [r0, #0]
 23fc5f6:	4b04      	ldr	r3, [pc, #16]	; (23fc608 <HAL_USB_USART_Receive_Data+0x18>)
 23fc5f8:	4403      	add	r3, r0
 23fc5fa:	681b      	ldr	r3, [r3, #0]
 23fc5fc:	699b      	ldr	r3, [r3, #24]
 23fc5fe:	9302      	str	r3, [sp, #8]
 23fc600:	bd09      	pop	{r0, r3, pc}
 23fc602:	0000      	.short	0x0000
 23fc604:	1007a918 	.word	0x1007a918
 23fc608:	00000034 	.word	0x00000034

023fc60c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc60c:	b509      	push	{r0, r3, lr}
 23fc60e:	4804      	ldr	r0, [pc, #16]	; (23fc620 <HAL_USB_USART_Send_Data+0x14>)
 23fc610:	6800      	ldr	r0, [r0, #0]
 23fc612:	4b04      	ldr	r3, [pc, #16]	; (23fc624 <HAL_USB_USART_Send_Data+0x18>)
 23fc614:	4403      	add	r3, r0
 23fc616:	681b      	ldr	r3, [r3, #0]
 23fc618:	69db      	ldr	r3, [r3, #28]
 23fc61a:	9302      	str	r3, [sp, #8]
 23fc61c:	bd09      	pop	{r0, r3, pc}
 23fc61e:	0000      	.short	0x0000
 23fc620:	1007a918 	.word	0x1007a918
 23fc624:	00000034 	.word	0x00000034

023fc628 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc628:	b509      	push	{r0, r3, lr}
 23fc62a:	4804      	ldr	r0, [pc, #16]	; (23fc63c <HAL_USB_USART_Flush_Data+0x14>)
 23fc62c:	6800      	ldr	r0, [r0, #0]
 23fc62e:	4b04      	ldr	r3, [pc, #16]	; (23fc640 <HAL_USB_USART_Flush_Data+0x18>)
 23fc630:	4403      	add	r3, r0
 23fc632:	681b      	ldr	r3, [r3, #0]
 23fc634:	6a1b      	ldr	r3, [r3, #32]
 23fc636:	9302      	str	r3, [sp, #8]
 23fc638:	bd09      	pop	{r0, r3, pc}
 23fc63a:	0000      	.short	0x0000
 23fc63c:	1007a918 	.word	0x1007a918
 23fc640:	00000034 	.word	0x00000034

023fc644 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fc644:	b509      	push	{r0, r3, lr}
 23fc646:	4804      	ldr	r0, [pc, #16]	; (23fc658 <HAL_USB_USART_Is_Connected+0x14>)
 23fc648:	6800      	ldr	r0, [r0, #0]
 23fc64a:	4b04      	ldr	r3, [pc, #16]	; (23fc65c <HAL_USB_USART_Is_Connected+0x18>)
 23fc64c:	4403      	add	r3, r0
 23fc64e:	681b      	ldr	r3, [r3, #0]
 23fc650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc652:	9302      	str	r3, [sp, #8]
 23fc654:	bd09      	pop	{r0, r3, pc}
 23fc656:	0000      	.short	0x0000
 23fc658:	1007a918 	.word	0x1007a918
 23fc65c:	00000034 	.word	0x00000034

023fc660 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc660:	b509      	push	{r0, r3, lr}
 23fc662:	4804      	ldr	r0, [pc, #16]	; (23fc674 <panic_+0x14>)
 23fc664:	6800      	ldr	r0, [r0, #0]
 23fc666:	4b04      	ldr	r3, [pc, #16]	; (23fc678 <panic_+0x18>)
 23fc668:	4403      	add	r3, r0
 23fc66a:	681b      	ldr	r3, [r3, #0]
 23fc66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc66e:	9302      	str	r3, [sp, #8]
 23fc670:	bd09      	pop	{r0, r3, pc}
 23fc672:	0000      	.short	0x0000
 23fc674:	1007a918 	.word	0x1007a918
 23fc678:	00000048 	.word	0x00000048

023fc67c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc67c:	b509      	push	{r0, r3, lr}
 23fc67e:	4804      	ldr	r0, [pc, #16]	; (23fc690 <log_message_v+0x14>)
 23fc680:	6800      	ldr	r0, [r0, #0]
 23fc682:	4b04      	ldr	r3, [pc, #16]	; (23fc694 <log_message_v+0x18>)
 23fc684:	4403      	add	r3, r0
 23fc686:	681b      	ldr	r3, [r3, #0]
 23fc688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc68a:	9302      	str	r3, [sp, #8]
 23fc68c:	bd09      	pop	{r0, r3, pc}
 23fc68e:	0000      	.short	0x0000
 23fc690:	1007a918 	.word	0x1007a918
 23fc694:	00000048 	.word	0x00000048

023fc698 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc698:	b509      	push	{r0, r3, lr}
 23fc69a:	4804      	ldr	r0, [pc, #16]	; (23fc6ac <log_level_name+0x14>)
 23fc69c:	6800      	ldr	r0, [r0, #0]
 23fc69e:	4b04      	ldr	r3, [pc, #16]	; (23fc6b0 <log_level_name+0x18>)
 23fc6a0:	4403      	add	r3, r0
 23fc6a2:	681b      	ldr	r3, [r3, #0]
 23fc6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc6a6:	9302      	str	r3, [sp, #8]
 23fc6a8:	bd09      	pop	{r0, r3, pc}
 23fc6aa:	0000      	.short	0x0000
 23fc6ac:	1007a918 	.word	0x1007a918
 23fc6b0:	00000048 	.word	0x00000048

023fc6b4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc6b4:	b509      	push	{r0, r3, lr}
 23fc6b6:	4804      	ldr	r0, [pc, #16]	; (23fc6c8 <log_set_callbacks+0x14>)
 23fc6b8:	6800      	ldr	r0, [r0, #0]
 23fc6ba:	4b04      	ldr	r3, [pc, #16]	; (23fc6cc <log_set_callbacks+0x18>)
 23fc6bc:	4403      	add	r3, r0
 23fc6be:	681b      	ldr	r3, [r3, #0]
 23fc6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc6c2:	9302      	str	r3, [sp, #8]
 23fc6c4:	bd09      	pop	{r0, r3, pc}
 23fc6c6:	0000      	.short	0x0000
 23fc6c8:	1007a918 	.word	0x1007a918
 23fc6cc:	00000048 	.word	0x00000048

023fc6d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc6d0:	b509      	push	{r0, r3, lr}
 23fc6d2:	4804      	ldr	r0, [pc, #16]	; (23fc6e4 <set_system_mode+0x14>)
 23fc6d4:	6800      	ldr	r0, [r0, #0]
 23fc6d6:	4b04      	ldr	r3, [pc, #16]	; (23fc6e8 <set_system_mode+0x18>)
 23fc6d8:	4403      	add	r3, r0
 23fc6da:	681b      	ldr	r3, [r3, #0]
 23fc6dc:	685b      	ldr	r3, [r3, #4]
 23fc6de:	9302      	str	r3, [sp, #8]
 23fc6e0:	bd09      	pop	{r0, r3, pc}
 23fc6e2:	0000      	.short	0x0000
 23fc6e4:	1007a918 	.word	0x1007a918
 23fc6e8:	00000008 	.word	0x00000008

023fc6ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc6ec:	b509      	push	{r0, r3, lr}
 23fc6ee:	4804      	ldr	r0, [pc, #16]	; (23fc700 <system_delay_ms+0x14>)
 23fc6f0:	6800      	ldr	r0, [r0, #0]
 23fc6f2:	4b04      	ldr	r3, [pc, #16]	; (23fc704 <system_delay_ms+0x18>)
 23fc6f4:	4403      	add	r3, r0
 23fc6f6:	681b      	ldr	r3, [r3, #0]
 23fc6f8:	695b      	ldr	r3, [r3, #20]
 23fc6fa:	9302      	str	r3, [sp, #8]
 23fc6fc:	bd09      	pop	{r0, r3, pc}
 23fc6fe:	0000      	.short	0x0000
 23fc700:	1007a918 	.word	0x1007a918
 23fc704:	00000008 	.word	0x00000008

023fc708 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc708:	b509      	push	{r0, r3, lr}
 23fc70a:	4804      	ldr	r0, [pc, #16]	; (23fc71c <system_thread_set_state+0x14>)
 23fc70c:	6800      	ldr	r0, [r0, #0]
 23fc70e:	4b04      	ldr	r3, [pc, #16]	; (23fc720 <system_thread_set_state+0x18>)
 23fc710:	4403      	add	r3, r0
 23fc712:	681b      	ldr	r3, [r3, #0]
 23fc714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc716:	9302      	str	r3, [sp, #8]
 23fc718:	bd09      	pop	{r0, r3, pc}
 23fc71a:	0000      	.short	0x0000
 23fc71c:	1007a918 	.word	0x1007a918
 23fc720:	00000008 	.word	0x00000008

023fc724 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fc724:	b509      	push	{r0, r3, lr}
 23fc726:	4804      	ldr	r0, [pc, #16]	; (23fc738 <application_thread_current+0x14>)
 23fc728:	6800      	ldr	r0, [r0, #0]
 23fc72a:	4b04      	ldr	r3, [pc, #16]	; (23fc73c <application_thread_current+0x18>)
 23fc72c:	4403      	add	r3, r0
 23fc72e:	681b      	ldr	r3, [r3, #0]
 23fc730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc732:	9302      	str	r3, [sp, #8]
 23fc734:	bd09      	pop	{r0, r3, pc}
 23fc736:	0000      	.short	0x0000
 23fc738:	1007a918 	.word	0x1007a918
 23fc73c:	00000008 	.word	0x00000008

023fc740 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fc740:	b509      	push	{r0, r3, lr}
 23fc742:	4804      	ldr	r0, [pc, #16]	; (23fc754 <application_thread_invoke+0x14>)
 23fc744:	6800      	ldr	r0, [r0, #0]
 23fc746:	4b04      	ldr	r3, [pc, #16]	; (23fc758 <application_thread_invoke+0x18>)
 23fc748:	4403      	add	r3, r0
 23fc74a:	681b      	ldr	r3, [r3, #0]
 23fc74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc74e:	9302      	str	r3, [sp, #8]
 23fc750:	bd09      	pop	{r0, r3, pc}
 23fc752:	0000      	.short	0x0000
 23fc754:	1007a918 	.word	0x1007a918
 23fc758:	00000008 	.word	0x00000008

023fc75c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc75c:	b509      	push	{r0, r3, lr}
 23fc75e:	4804      	ldr	r0, [pc, #16]	; (23fc770 <system_ctrl_set_app_request_handler+0x14>)
 23fc760:	6800      	ldr	r0, [r0, #0]
 23fc762:	4b04      	ldr	r3, [pc, #16]	; (23fc774 <system_ctrl_set_app_request_handler+0x18>)
 23fc764:	4403      	add	r3, r0
 23fc766:	681b      	ldr	r3, [r3, #0]
 23fc768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc76c:	9302      	str	r3, [sp, #8]
 23fc76e:	bd09      	pop	{r0, r3, pc}
 23fc770:	1007a918 	.word	0x1007a918
 23fc774:	00000008 	.word	0x00000008

023fc778 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc778:	b509      	push	{r0, r3, lr}
 23fc77a:	4804      	ldr	r0, [pc, #16]	; (23fc78c <system_ctrl_set_result+0x14>)
 23fc77c:	6800      	ldr	r0, [r0, #0]
 23fc77e:	4b04      	ldr	r3, [pc, #16]	; (23fc790 <system_ctrl_set_result+0x18>)
 23fc780:	4403      	add	r3, r0
 23fc782:	681b      	ldr	r3, [r3, #0]
 23fc784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc788:	9302      	str	r3, [sp, #8]
 23fc78a:	bd09      	pop	{r0, r3, pc}
 23fc78c:	1007a918 	.word	0x1007a918
 23fc790:	00000008 	.word	0x00000008

023fc794 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 23fc794:	b509      	push	{r0, r3, lr}
 23fc796:	4804      	ldr	r0, [pc, #16]	; (23fc7a8 <spark_variable+0x14>)
 23fc798:	6800      	ldr	r0, [r0, #0]
 23fc79a:	4b04      	ldr	r3, [pc, #16]	; (23fc7ac <spark_variable+0x18>)
 23fc79c:	4403      	add	r3, r0
 23fc79e:	681b      	ldr	r3, [r3, #0]
 23fc7a0:	681b      	ldr	r3, [r3, #0]
 23fc7a2:	9302      	str	r3, [sp, #8]
 23fc7a4:	bd09      	pop	{r0, r3, pc}
 23fc7a6:	0000      	.short	0x0000
 23fc7a8:	1007a918 	.word	0x1007a918
 23fc7ac:	0000002c 	.word	0x0000002c

023fc7b0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fc7b0:	b509      	push	{r0, r3, lr}
 23fc7b2:	4804      	ldr	r0, [pc, #16]	; (23fc7c4 <spark_function+0x14>)
 23fc7b4:	6800      	ldr	r0, [r0, #0]
 23fc7b6:	4b04      	ldr	r3, [pc, #16]	; (23fc7c8 <spark_function+0x18>)
 23fc7b8:	4403      	add	r3, r0
 23fc7ba:	681b      	ldr	r3, [r3, #0]
 23fc7bc:	685b      	ldr	r3, [r3, #4]
 23fc7be:	9302      	str	r3, [sp, #8]
 23fc7c0:	bd09      	pop	{r0, r3, pc}
 23fc7c2:	0000      	.short	0x0000
 23fc7c4:	1007a918 	.word	0x1007a918
 23fc7c8:	0000002c 	.word	0x0000002c

023fc7cc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fc7cc:	b509      	push	{r0, r3, lr}
 23fc7ce:	4804      	ldr	r0, [pc, #16]	; (23fc7e0 <spark_process+0x14>)
 23fc7d0:	6800      	ldr	r0, [r0, #0]
 23fc7d2:	4b04      	ldr	r3, [pc, #16]	; (23fc7e4 <spark_process+0x18>)
 23fc7d4:	4403      	add	r3, r0
 23fc7d6:	681b      	ldr	r3, [r3, #0]
 23fc7d8:	689b      	ldr	r3, [r3, #8]
 23fc7da:	9302      	str	r3, [sp, #8]
 23fc7dc:	bd09      	pop	{r0, r3, pc}
 23fc7de:	0000      	.short	0x0000
 23fc7e0:	1007a918 	.word	0x1007a918
 23fc7e4:	0000002c 	.word	0x0000002c

023fc7e8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fc7e8:	b509      	push	{r0, r3, lr}
 23fc7ea:	4804      	ldr	r0, [pc, #16]	; (23fc7fc <spark_cloud_flag_connect+0x14>)
 23fc7ec:	6800      	ldr	r0, [r0, #0]
 23fc7ee:	4b04      	ldr	r3, [pc, #16]	; (23fc800 <spark_cloud_flag_connect+0x18>)
 23fc7f0:	4403      	add	r3, r0
 23fc7f2:	681b      	ldr	r3, [r3, #0]
 23fc7f4:	68db      	ldr	r3, [r3, #12]
 23fc7f6:	9302      	str	r3, [sp, #8]
 23fc7f8:	bd09      	pop	{r0, r3, pc}
 23fc7fa:	0000      	.short	0x0000
 23fc7fc:	1007a918 	.word	0x1007a918
 23fc800:	0000002c 	.word	0x0000002c

023fc804 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fc804:	b509      	push	{r0, r3, lr}
 23fc806:	4804      	ldr	r0, [pc, #16]	; (23fc818 <spark_cloud_flag_connected+0x14>)
 23fc808:	6800      	ldr	r0, [r0, #0]
 23fc80a:	4b04      	ldr	r3, [pc, #16]	; (23fc81c <spark_cloud_flag_connected+0x18>)
 23fc80c:	4403      	add	r3, r0
 23fc80e:	681b      	ldr	r3, [r3, #0]
 23fc810:	695b      	ldr	r3, [r3, #20]
 23fc812:	9302      	str	r3, [sp, #8]
 23fc814:	bd09      	pop	{r0, r3, pc}
 23fc816:	0000      	.short	0x0000
 23fc818:	1007a918 	.word	0x1007a918
 23fc81c:	0000002c 	.word	0x0000002c

023fc820 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fc820:	b509      	push	{r0, r3, lr}
 23fc822:	4804      	ldr	r0, [pc, #16]	; (23fc834 <spark_send_event+0x14>)
 23fc824:	6800      	ldr	r0, [r0, #0]
 23fc826:	4b04      	ldr	r3, [pc, #16]	; (23fc838 <spark_send_event+0x18>)
 23fc828:	4403      	add	r3, r0
 23fc82a:	681b      	ldr	r3, [r3, #0]
 23fc82c:	6a1b      	ldr	r3, [r3, #32]
 23fc82e:	9302      	str	r3, [sp, #8]
 23fc830:	bd09      	pop	{r0, r3, pc}
 23fc832:	0000      	.short	0x0000
 23fc834:	1007a918 	.word	0x1007a918
 23fc838:	0000002c 	.word	0x0000002c

023fc83c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc83c:	b509      	push	{r0, r3, lr}
 23fc83e:	4804      	ldr	r0, [pc, #16]	; (23fc850 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc840:	6800      	ldr	r0, [r0, #0]
 23fc842:	4b04      	ldr	r3, [pc, #16]	; (23fc854 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc844:	4403      	add	r3, r0
 23fc846:	681b      	ldr	r3, [r3, #0]
 23fc848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc84a:	9302      	str	r3, [sp, #8]
 23fc84c:	bd09      	pop	{r0, r3, pc}
 23fc84e:	0000      	.short	0x0000
 23fc850:	1007a918 	.word	0x1007a918
 23fc854:	0000002c 	.word	0x0000002c

023fc858 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc858:	b509      	push	{r0, r3, lr}
 23fc85a:	4804      	ldr	r0, [pc, #16]	; (23fc86c <network_connect+0x14>)
 23fc85c:	6800      	ldr	r0, [r0, #0]
 23fc85e:	4b04      	ldr	r3, [pc, #16]	; (23fc870 <network_connect+0x18>)
 23fc860:	4403      	add	r3, r0
 23fc862:	681b      	ldr	r3, [r3, #0]
 23fc864:	685b      	ldr	r3, [r3, #4]
 23fc866:	9302      	str	r3, [sp, #8]
 23fc868:	bd09      	pop	{r0, r3, pc}
 23fc86a:	0000      	.short	0x0000
 23fc86c:	1007a918 	.word	0x1007a918
 23fc870:	00000028 	.word	0x00000028

023fc874 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc874:	b509      	push	{r0, r3, lr}
 23fc876:	4804      	ldr	r0, [pc, #16]	; (23fc888 <network_connecting+0x14>)
 23fc878:	6800      	ldr	r0, [r0, #0]
 23fc87a:	4b04      	ldr	r3, [pc, #16]	; (23fc88c <network_connecting+0x18>)
 23fc87c:	4403      	add	r3, r0
 23fc87e:	681b      	ldr	r3, [r3, #0]
 23fc880:	689b      	ldr	r3, [r3, #8]
 23fc882:	9302      	str	r3, [sp, #8]
 23fc884:	bd09      	pop	{r0, r3, pc}
 23fc886:	0000      	.short	0x0000
 23fc888:	1007a918 	.word	0x1007a918
 23fc88c:	00000028 	.word	0x00000028

023fc890 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc890:	b509      	push	{r0, r3, lr}
 23fc892:	4804      	ldr	r0, [pc, #16]	; (23fc8a4 <network_disconnect+0x14>)
 23fc894:	6800      	ldr	r0, [r0, #0]
 23fc896:	4b04      	ldr	r3, [pc, #16]	; (23fc8a8 <network_disconnect+0x18>)
 23fc898:	4403      	add	r3, r0
 23fc89a:	681b      	ldr	r3, [r3, #0]
 23fc89c:	68db      	ldr	r3, [r3, #12]
 23fc89e:	9302      	str	r3, [sp, #8]
 23fc8a0:	bd09      	pop	{r0, r3, pc}
 23fc8a2:	0000      	.short	0x0000
 23fc8a4:	1007a918 	.word	0x1007a918
 23fc8a8:	00000028 	.word	0x00000028

023fc8ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc8ac:	b509      	push	{r0, r3, lr}
 23fc8ae:	4804      	ldr	r0, [pc, #16]	; (23fc8c0 <network_ready+0x14>)
 23fc8b0:	6800      	ldr	r0, [r0, #0]
 23fc8b2:	4b04      	ldr	r3, [pc, #16]	; (23fc8c4 <network_ready+0x18>)
 23fc8b4:	4403      	add	r3, r0
 23fc8b6:	681b      	ldr	r3, [r3, #0]
 23fc8b8:	691b      	ldr	r3, [r3, #16]
 23fc8ba:	9302      	str	r3, [sp, #8]
 23fc8bc:	bd09      	pop	{r0, r3, pc}
 23fc8be:	0000      	.short	0x0000
 23fc8c0:	1007a918 	.word	0x1007a918
 23fc8c4:	00000028 	.word	0x00000028

023fc8c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8c8:	b509      	push	{r0, r3, lr}
 23fc8ca:	4804      	ldr	r0, [pc, #16]	; (23fc8dc <network_on+0x14>)
 23fc8cc:	6800      	ldr	r0, [r0, #0]
 23fc8ce:	4b04      	ldr	r3, [pc, #16]	; (23fc8e0 <network_on+0x18>)
 23fc8d0:	4403      	add	r3, r0
 23fc8d2:	681b      	ldr	r3, [r3, #0]
 23fc8d4:	695b      	ldr	r3, [r3, #20]
 23fc8d6:	9302      	str	r3, [sp, #8]
 23fc8d8:	bd09      	pop	{r0, r3, pc}
 23fc8da:	0000      	.short	0x0000
 23fc8dc:	1007a918 	.word	0x1007a918
 23fc8e0:	00000028 	.word	0x00000028

023fc8e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8e4:	b509      	push	{r0, r3, lr}
 23fc8e6:	4804      	ldr	r0, [pc, #16]	; (23fc8f8 <network_off+0x14>)
 23fc8e8:	6800      	ldr	r0, [r0, #0]
 23fc8ea:	4b04      	ldr	r3, [pc, #16]	; (23fc8fc <network_off+0x18>)
 23fc8ec:	4403      	add	r3, r0
 23fc8ee:	681b      	ldr	r3, [r3, #0]
 23fc8f0:	699b      	ldr	r3, [r3, #24]
 23fc8f2:	9302      	str	r3, [sp, #8]
 23fc8f4:	bd09      	pop	{r0, r3, pc}
 23fc8f6:	0000      	.short	0x0000
 23fc8f8:	1007a918 	.word	0x1007a918
 23fc8fc:	00000028 	.word	0x00000028

023fc900 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc900:	b509      	push	{r0, r3, lr}
 23fc902:	4804      	ldr	r0, [pc, #16]	; (23fc914 <network_listen+0x14>)
 23fc904:	6800      	ldr	r0, [r0, #0]
 23fc906:	4b04      	ldr	r3, [pc, #16]	; (23fc918 <network_listen+0x18>)
 23fc908:	4403      	add	r3, r0
 23fc90a:	681b      	ldr	r3, [r3, #0]
 23fc90c:	69db      	ldr	r3, [r3, #28]
 23fc90e:	9302      	str	r3, [sp, #8]
 23fc910:	bd09      	pop	{r0, r3, pc}
 23fc912:	0000      	.short	0x0000
 23fc914:	1007a918 	.word	0x1007a918
 23fc918:	00000028 	.word	0x00000028

023fc91c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc91c:	b509      	push	{r0, r3, lr}
 23fc91e:	4804      	ldr	r0, [pc, #16]	; (23fc930 <network_listening+0x14>)
 23fc920:	6800      	ldr	r0, [r0, #0]
 23fc922:	4b04      	ldr	r3, [pc, #16]	; (23fc934 <network_listening+0x18>)
 23fc924:	4403      	add	r3, r0
 23fc926:	681b      	ldr	r3, [r3, #0]
 23fc928:	6a1b      	ldr	r3, [r3, #32]
 23fc92a:	9302      	str	r3, [sp, #8]
 23fc92c:	bd09      	pop	{r0, r3, pc}
 23fc92e:	0000      	.short	0x0000
 23fc930:	1007a918 	.word	0x1007a918
 23fc934:	00000028 	.word	0x00000028

023fc938 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc938:	b509      	push	{r0, r3, lr}
 23fc93a:	4804      	ldr	r0, [pc, #16]	; (23fc94c <network_set_listen_timeout+0x14>)
 23fc93c:	6800      	ldr	r0, [r0, #0]
 23fc93e:	4b04      	ldr	r3, [pc, #16]	; (23fc950 <network_set_listen_timeout+0x18>)
 23fc940:	4403      	add	r3, r0
 23fc942:	681b      	ldr	r3, [r3, #0]
 23fc944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc946:	9302      	str	r3, [sp, #8]
 23fc948:	bd09      	pop	{r0, r3, pc}
 23fc94a:	0000      	.short	0x0000
 23fc94c:	1007a918 	.word	0x1007a918
 23fc950:	00000028 	.word	0x00000028

023fc954 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc954:	b509      	push	{r0, r3, lr}
 23fc956:	4804      	ldr	r0, [pc, #16]	; (23fc968 <network_get_listen_timeout+0x14>)
 23fc958:	6800      	ldr	r0, [r0, #0]
 23fc95a:	4b04      	ldr	r3, [pc, #16]	; (23fc96c <network_get_listen_timeout+0x18>)
 23fc95c:	4403      	add	r3, r0
 23fc95e:	681b      	ldr	r3, [r3, #0]
 23fc960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc962:	9302      	str	r3, [sp, #8]
 23fc964:	bd09      	pop	{r0, r3, pc}
 23fc966:	0000      	.short	0x0000
 23fc968:	1007a918 	.word	0x1007a918
 23fc96c:	00000028 	.word	0x00000028

023fc970 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc970:	b509      	push	{r0, r3, lr}
 23fc972:	4804      	ldr	r0, [pc, #16]	; (23fc984 <network_is_on+0x14>)
 23fc974:	6800      	ldr	r0, [r0, #0]
 23fc976:	4b04      	ldr	r3, [pc, #16]	; (23fc988 <network_is_on+0x18>)
 23fc978:	4403      	add	r3, r0
 23fc97a:	681b      	ldr	r3, [r3, #0]
 23fc97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc97e:	9302      	str	r3, [sp, #8]
 23fc980:	bd09      	pop	{r0, r3, pc}
 23fc982:	0000      	.short	0x0000
 23fc984:	1007a918 	.word	0x1007a918
 23fc988:	00000028 	.word	0x00000028

023fc98c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc98c:	b509      	push	{r0, r3, lr}
 23fc98e:	4804      	ldr	r0, [pc, #16]	; (23fc9a0 <network_is_off+0x14>)
 23fc990:	6800      	ldr	r0, [r0, #0]
 23fc992:	4b04      	ldr	r3, [pc, #16]	; (23fc9a4 <network_is_off+0x18>)
 23fc994:	4403      	add	r3, r0
 23fc996:	681b      	ldr	r3, [r3, #0]
 23fc998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc99a:	9302      	str	r3, [sp, #8]
 23fc99c:	bd09      	pop	{r0, r3, pc}
 23fc99e:	0000      	.short	0x0000
 23fc9a0:	1007a918 	.word	0x1007a918
 23fc9a4:	00000028 	.word	0x00000028

023fc9a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc9a8:	b509      	push	{r0, r3, lr}
 23fc9aa:	4804      	ldr	r0, [pc, #16]	; (23fc9bc <malloc+0x14>)
 23fc9ac:	6800      	ldr	r0, [r0, #0]
 23fc9ae:	4b04      	ldr	r3, [pc, #16]	; (23fc9c0 <malloc+0x18>)
 23fc9b0:	4403      	add	r3, r0
 23fc9b2:	681b      	ldr	r3, [r3, #0]
 23fc9b4:	681b      	ldr	r3, [r3, #0]
 23fc9b6:	9302      	str	r3, [sp, #8]
 23fc9b8:	bd09      	pop	{r0, r3, pc}
 23fc9ba:	0000      	.short	0x0000
 23fc9bc:	1007a918 	.word	0x1007a918
 23fc9c0:	00000004 	.word	0x00000004

023fc9c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc9c4:	b509      	push	{r0, r3, lr}
 23fc9c6:	4804      	ldr	r0, [pc, #16]	; (23fc9d8 <free+0x14>)
 23fc9c8:	6800      	ldr	r0, [r0, #0]
 23fc9ca:	4b04      	ldr	r3, [pc, #16]	; (23fc9dc <free+0x18>)
 23fc9cc:	4403      	add	r3, r0
 23fc9ce:	681b      	ldr	r3, [r3, #0]
 23fc9d0:	685b      	ldr	r3, [r3, #4]
 23fc9d2:	9302      	str	r3, [sp, #8]
 23fc9d4:	bd09      	pop	{r0, r3, pc}
 23fc9d6:	0000      	.short	0x0000
 23fc9d8:	1007a918 	.word	0x1007a918
 23fc9dc:	00000004 	.word	0x00000004

023fc9e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc9e0:	b509      	push	{r0, r3, lr}
 23fc9e2:	4804      	ldr	r0, [pc, #16]	; (23fc9f4 <realloc+0x14>)
 23fc9e4:	6800      	ldr	r0, [r0, #0]
 23fc9e6:	4b04      	ldr	r3, [pc, #16]	; (23fc9f8 <realloc+0x18>)
 23fc9e8:	4403      	add	r3, r0
 23fc9ea:	681b      	ldr	r3, [r3, #0]
 23fc9ec:	689b      	ldr	r3, [r3, #8]
 23fc9ee:	9302      	str	r3, [sp, #8]
 23fc9f0:	bd09      	pop	{r0, r3, pc}
 23fc9f2:	0000      	.short	0x0000
 23fc9f4:	1007a918 	.word	0x1007a918
 23fc9f8:	00000004 	.word	0x00000004

023fc9fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc9fc:	b509      	push	{r0, r3, lr}
 23fc9fe:	4804      	ldr	r0, [pc, #16]	; (23fca10 <vsnprintf+0x14>)
 23fca00:	6800      	ldr	r0, [r0, #0]
 23fca02:	4b04      	ldr	r3, [pc, #16]	; (23fca14 <vsnprintf+0x18>)
 23fca04:	4403      	add	r3, r0
 23fca06:	681b      	ldr	r3, [r3, #0]
 23fca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fca0a:	9302      	str	r3, [sp, #8]
 23fca0c:	bd09      	pop	{r0, r3, pc}
 23fca0e:	0000      	.short	0x0000
 23fca10:	1007a918 	.word	0x1007a918
 23fca14:	00000004 	.word	0x00000004

023fca18 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fca18:	b509      	push	{r0, r3, lr}
 23fca1a:	4804      	ldr	r0, [pc, #16]	; (23fca2c <abort+0x14>)
 23fca1c:	6800      	ldr	r0, [r0, #0]
 23fca1e:	4b04      	ldr	r3, [pc, #16]	; (23fca30 <abort+0x18>)
 23fca20:	4403      	add	r3, r0
 23fca22:	681b      	ldr	r3, [r3, #0]
 23fca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fca26:	9302      	str	r3, [sp, #8]
 23fca28:	bd09      	pop	{r0, r3, pc}
 23fca2a:	0000      	.short	0x0000
 23fca2c:	1007a918 	.word	0x1007a918
 23fca30:	00000004 	.word	0x00000004

023fca34 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fca34:	b509      	push	{r0, r3, lr}
 23fca36:	4804      	ldr	r0, [pc, #16]	; (23fca48 <_malloc_r+0x14>)
 23fca38:	6800      	ldr	r0, [r0, #0]
 23fca3a:	4b04      	ldr	r3, [pc, #16]	; (23fca4c <_malloc_r+0x18>)
 23fca3c:	4403      	add	r3, r0
 23fca3e:	681b      	ldr	r3, [r3, #0]
 23fca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fca42:	9302      	str	r3, [sp, #8]
 23fca44:	bd09      	pop	{r0, r3, pc}
 23fca46:	0000      	.short	0x0000
 23fca48:	1007a918 	.word	0x1007a918
 23fca4c:	00000004 	.word	0x00000004

023fca50 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fca50:	b509      	push	{r0, r3, lr}
 23fca52:	4804      	ldr	r0, [pc, #16]	; (23fca64 <__errno+0x14>)
 23fca54:	6800      	ldr	r0, [r0, #0]
 23fca56:	4b04      	ldr	r3, [pc, #16]	; (23fca68 <__errno+0x18>)
 23fca58:	4403      	add	r3, r0
 23fca5a:	681b      	ldr	r3, [r3, #0]
 23fca5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fca5e:	9302      	str	r3, [sp, #8]
 23fca60:	bd09      	pop	{r0, r3, pc}
 23fca62:	0000      	.short	0x0000
 23fca64:	1007a918 	.word	0x1007a918
 23fca68:	00000004 	.word	0x00000004

023fca6c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fca6c:	b509      	push	{r0, r3, lr}
 23fca6e:	4804      	ldr	r0, [pc, #16]	; (23fca80 <__assert_func+0x14>)
 23fca70:	6800      	ldr	r0, [r0, #0]
 23fca72:	4b04      	ldr	r3, [pc, #16]	; (23fca84 <__assert_func+0x18>)
 23fca74:	4403      	add	r3, r0
 23fca76:	681b      	ldr	r3, [r3, #0]
 23fca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca7a:	9302      	str	r3, [sp, #8]
 23fca7c:	bd09      	pop	{r0, r3, pc}
 23fca7e:	0000      	.short	0x0000
 23fca80:	1007a918 	.word	0x1007a918
 23fca84:	00000004 	.word	0x00000004

023fca88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fca88:	b509      	push	{r0, r3, lr}
 23fca8a:	4804      	ldr	r0, [pc, #16]	; (23fca9c <newlib_impure_ptr_callback+0x14>)
 23fca8c:	6800      	ldr	r0, [r0, #0]
 23fca8e:	4b04      	ldr	r3, [pc, #16]	; (23fcaa0 <newlib_impure_ptr_callback+0x18>)
 23fca90:	4403      	add	r3, r0
 23fca92:	681b      	ldr	r3, [r3, #0]
 23fca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fca96:	9302      	str	r3, [sp, #8]
 23fca98:	bd09      	pop	{r0, r3, pc}
 23fca9a:	0000      	.short	0x0000
 23fca9c:	1007a918 	.word	0x1007a918
 23fcaa0:	00000004 	.word	0x00000004

023fcaa4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fcaa4:	2100      	movs	r1, #0
 23fcaa6:	f7ff be21 	b.w	23fc6ec <system_delay_ms>

023fcaaa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fcaaa:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fcaac:	6883      	ldr	r3, [r0, #8]
 23fcaae:	4604      	mov	r4, r0
 23fcab0:	b90b      	cbnz	r3, 23fcab6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fcab2:	f002 fb79 	bl	23ff1a8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcab6:	68c3      	ldr	r3, [r0, #12]
 23fcab8:	4798      	blx	r3
      if (_M_manager)
 23fcaba:	68a3      	ldr	r3, [r4, #8]
 23fcabc:	b11b      	cbz	r3, 23fcac6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fcabe:	2203      	movs	r2, #3
 23fcac0:	4621      	mov	r1, r4
 23fcac2:	4620      	mov	r0, r4
 23fcac4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fcac6:	4620      	mov	r0, r4
}
 23fcac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fcacc:	2110      	movs	r1, #16
 23fcace:	f7fe bad6 	b.w	23fb07e <_ZdlPvj>

023fcad2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fcad2:	b510      	push	{r4, lr}
      if (_M_manager)
 23fcad4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fcad6:	4604      	mov	r4, r0
      if (_M_manager)
 23fcad8:	b113      	cbz	r3, 23fcae0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fcada:	2203      	movs	r2, #3
 23fcadc:	4601      	mov	r1, r0
 23fcade:	4798      	blx	r3
    }
 23fcae0:	4620      	mov	r0, r4
 23fcae2:	bd10      	pop	{r4, pc}

023fcae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fcae4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fcae6:	6843      	ldr	r3, [r0, #4]
    {
 23fcae8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fcaea:	3b01      	subs	r3, #1
 23fcaec:	6043      	str	r3, [r0, #4]
 23fcaee:	b963      	cbnz	r3, 23fcb0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fcaf0:	6803      	ldr	r3, [r0, #0]
 23fcaf2:	689b      	ldr	r3, [r3, #8]
 23fcaf4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcaf6:	68a3      	ldr	r3, [r4, #8]
 23fcaf8:	3b01      	subs	r3, #1
 23fcafa:	60a3      	str	r3, [r4, #8]
 23fcafc:	b92b      	cbnz	r3, 23fcb0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcafe:	6823      	ldr	r3, [r4, #0]
 23fcb00:	4620      	mov	r0, r4
    }
 23fcb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fcb06:	68db      	ldr	r3, [r3, #12]
 23fcb08:	4718      	bx	r3
    }
 23fcb0a:	bd10      	pop	{r4, pc}

023fcb0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcb0c:	b570      	push	{r4, r5, r6, lr}
 23fcb0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcb10:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcb14:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcb18:	42ae      	cmp	r6, r5
 23fcb1a:	d004      	beq.n	23fcb26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcb1c:	4628      	mov	r0, r5
 23fcb1e:	f001 ff0b 	bl	23fe938 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcb22:	3510      	adds	r5, #16
 23fcb24:	e7f8      	b.n	23fcb18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcb26:	6820      	ldr	r0, [r4, #0]
 23fcb28:	f7ff ff4c 	bl	23fc9c4 <free>
    AllocatorT::free(data_);
}
 23fcb2c:	4620      	mov	r0, r4
 23fcb2e:	bd70      	pop	{r4, r5, r6, pc}

023fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fcb30:	b510      	push	{r4, lr}
 23fcb32:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fcb34:	6800      	ldr	r0, [r0, #0]
 23fcb36:	b108      	cbz	r0, 23fcb3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fcb38:	f7ff ffd4 	bl	23fcae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fcb3c:	4620      	mov	r0, r4
 23fcb3e:	bd10      	pop	{r4, pc}

023fcb40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fcb40:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcb42:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fcb44:	460b      	mov	r3, r1
 23fcb46:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcb48:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fcb4c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fcb50:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fcb54:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fcb58:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fcb5c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fcb60:	b002      	add	sp, #8
 23fcb62:	bd10      	pop	{r4, pc}

023fcb64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcb64:	2300      	movs	r3, #0
 23fcb66:	4802      	ldr	r0, [pc, #8]	; (23fcb70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcb68:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcb6a:	f7ff babd 	b.w	23fc0e8 <os_mutex_recursive_create>
 23fcb6e:	bf00      	nop
 23fcb70:	1007ae54 	.word	0x1007ae54

023fcb74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcb74:	4770      	bx	lr

023fcb76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fcb76:	2000      	movs	r0, #0
 23fcb78:	4770      	bx	lr

023fcb7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcb7a:	b510      	push	{r4, lr}
 23fcb7c:	4604      	mov	r4, r0
 23fcb7e:	2110      	movs	r1, #16
 23fcb80:	f7fe fa7d 	bl	23fb07e <_ZdlPvj>
 23fcb84:	4620      	mov	r0, r4
 23fcb86:	bd10      	pop	{r4, pc}

023fcb88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fcb88:	b508      	push	{r3, lr}
      { delete this; }
 23fcb8a:	f7ff fff6 	bl	23fcb7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fcb8e:	bd08      	pop	{r3, pc}

023fcb90 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fcb90:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fcb92:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fcb94:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fcb98:	6002      	str	r2, [r0, #0]
 23fcb9a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcb9c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcb9e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcba0:	680c      	ldr	r4, [r1, #0]
 23fcba2:	8085      	strh	r5, [r0, #4]
 23fcba4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcba6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fcba8:	bd30      	pop	{r4, r5, pc}

023fcbaa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fcbaa:	b510      	push	{r4, lr}
 23fcbac:	4604      	mov	r4, r0
    free((void*)msg_);
 23fcbae:	6800      	ldr	r0, [r0, #0]
 23fcbb0:	f7ff ff08 	bl	23fc9c4 <free>
}
 23fcbb4:	4620      	mov	r0, r4
 23fcbb6:	bd10      	pop	{r4, pc}

023fcbb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fcbb8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fcbba:	68c4      	ldr	r4, [r0, #12]
 23fcbbc:	b314      	cbz	r4, 23fcc04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fcbbe:	7823      	ldrb	r3, [r4, #0]
 23fcbc0:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fcbc2:	2b02      	cmp	r3, #2
 23fcbc4:	d103      	bne.n	23fcbce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fcbc6:	f104 000c 	add.w	r0, r4, #12
 23fcbca:	f7ff ffee 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fcbce:	1d23      	adds	r3, r4, #4
 23fcbd0:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fcbd2:	b135      	cbz	r5, 23fcbe2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fcbd4:	4628      	mov	r0, r5
 23fcbd6:	f7ff ff7c 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
 23fcbda:	2110      	movs	r1, #16
 23fcbdc:	4628      	mov	r0, r5
 23fcbde:	f7fe fa4e 	bl	23fb07e <_ZdlPvj>
 23fcbe2:	f104 0308 	add.w	r3, r4, #8
 23fcbe6:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fcbe8:	b135      	cbz	r5, 23fcbf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fcbea:	4628      	mov	r0, r5
 23fcbec:	f7ff ff71 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
 23fcbf0:	2110      	movs	r1, #16
 23fcbf2:	4628      	mov	r0, r5
 23fcbf4:	f7fe fa43 	bl	23fb07e <_ZdlPvj>
 23fcbf8:	4620      	mov	r0, r4
 23fcbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fcbfe:	2114      	movs	r1, #20
 23fcc00:	f7fe ba3d 	b.w	23fb07e <_ZdlPvj>
 23fcc04:	bd38      	pop	{r3, r4, r5, pc}

023fcc06 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fcc06:	b510      	push	{r4, lr}
 23fcc08:	b088      	sub	sp, #32
 23fcc0a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fcc0c:	4668      	mov	r0, sp
 23fcc0e:	f001 fede 	bl	23fe9ce <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fcc12:	4669      	mov	r1, sp
 23fcc14:	a804      	add	r0, sp, #16
 23fcc16:	f001 ff26 	bl	23fea66 <_ZN6StringC1ERKS_>
 23fcc1a:	a804      	add	r0, sp, #16
 23fcc1c:	47a0      	blx	r4
 23fcc1e:	4604      	mov	r4, r0
 23fcc20:	a804      	add	r0, sp, #16
 23fcc22:	f001 fe89 	bl	23fe938 <_ZN6StringD1Ev>
    String p(param);
 23fcc26:	4668      	mov	r0, sp
 23fcc28:	f001 fe86 	bl	23fe938 <_ZN6StringD1Ev>
}
 23fcc2c:	4620      	mov	r0, r4
 23fcc2e:	b008      	add	sp, #32
 23fcc30:	bd10      	pop	{r4, pc}

023fcc32 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fcc32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fcc34:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fcc36:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fcc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fcc3c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fcc3e:	4669      	mov	r1, sp
 23fcc40:	461a      	mov	r2, r3
 23fcc42:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fcc44:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fcc48:	f8ad 4000 	strh.w	r4, [sp]
 23fcc4c:	f7ff fdb0 	bl	23fc7b0 <spark_function>
}
 23fcc50:	b004      	add	sp, #16
 23fcc52:	bd10      	pop	{r4, pc}

023fcc54 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcc54:	680b      	ldr	r3, [r1, #0]
 23fcc56:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcc58:	684b      	ldr	r3, [r1, #4]
 23fcc5a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcc5c:	b113      	cbz	r3, 23fcc64 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fcc5e:	685a      	ldr	r2, [r3, #4]
 23fcc60:	3201      	adds	r2, #1
 23fcc62:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcc64:	4770      	bx	lr

023fcc66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fcc66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcc68:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcc6a:	4668      	mov	r0, sp
 23fcc6c:	460d      	mov	r5, r1
 23fcc6e:	f7ff fff1 	bl	23fcc54 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcc72:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcc74:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcc76:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fcc78:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fcc7a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fcc7c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fcc7e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fcc80:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fcc82:	f7ff ff55 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fcc86:	b135      	cbz	r5, 23fcc96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fcc88:	1d28      	adds	r0, r5, #4
 23fcc8a:	f7ff ff51 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcc8e:	2108      	movs	r1, #8
 23fcc90:	4628      	mov	r0, r5
 23fcc92:	f7fe f9f4 	bl	23fb07e <_ZdlPvj>
        return p;
    }
 23fcc96:	4620      	mov	r0, r4
 23fcc98:	b003      	add	sp, #12
 23fcc9a:	bd30      	pop	{r4, r5, pc}

023fcc9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fcc9c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcc9e:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcca0:	b90a      	cbnz	r2, 23fcca6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fcca2:	f002 fa81 	bl	23ff1a8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcca6:	68c3      	ldr	r3, [r0, #12]
    }
 23fcca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fccac:	4718      	bx	r3

023fccae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fccae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fccb0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fccb2:	f100 0110 	add.w	r1, r0, #16
 23fccb6:	f7ff fff1 	bl	23fcc9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fccba:	bd08      	pop	{r3, pc}

023fccbc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fccbc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fccbe:	b510      	push	{r4, lr}
      if (_M_empty())
 23fccc0:	b90a      	cbnz	r2, 23fccc6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fccc2:	f002 fa71 	bl	23ff1a8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fccc6:	68c3      	ldr	r3, [r0, #12]
    }
 23fccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcccc:	4718      	bx	r3

023fccce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fccce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fccd0:	6800      	ldr	r0, [r0, #0]
 23fccd2:	f100 0110 	add.w	r1, r0, #16
 23fccd6:	f7ff fff1 	bl	23fccbc <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fccda:	bd08      	pop	{r3, pc}

023fccdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fccdc:	b538      	push	{r3, r4, r5, lr}
 23fccde:	2300      	movs	r3, #0
 23fcce0:	4604      	mov	r4, r0
 23fcce2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcce4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcce6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcce8:	f7fe f9c5 	bl	23fb076 <_Znwj>
 23fccec:	b128      	cbz	r0, 23fccfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fccee:	2301      	movs	r3, #1
 23fccf0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fccf4:	4b02      	ldr	r3, [pc, #8]	; (23fcd00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fccf6:	60c5      	str	r5, [r0, #12]
 23fccf8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fccfa:	6020      	str	r0, [r4, #0]
	}
 23fccfc:	4620      	mov	r0, r4
 23fccfe:	bd38      	pop	{r3, r4, r5, pc}
 23fcd00:	023ffbc8 	.word	0x023ffbc8

023fcd04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fcd04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fcd06:	2300      	movs	r3, #0
 23fcd08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fcd0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fcd0c:	4604      	mov	r4, r0
 23fcd0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fcd10:	b12b      	cbz	r3, 23fcd1e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fcd12:	2202      	movs	r2, #2
 23fcd14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fcd16:	68eb      	ldr	r3, [r5, #12]
 23fcd18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fcd1a:	68ab      	ldr	r3, [r5, #8]
 23fcd1c:	60a3      	str	r3, [r4, #8]
    }
 23fcd1e:	4620      	mov	r0, r4
 23fcd20:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcd24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fcd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcd26:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fcd28:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fcd2a:	4668      	mov	r0, sp
 23fcd2c:	f7ff ff30 	bl	23fcb90 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcd30:	f04f 0302 	mov.w	r3, #2
 23fcd34:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fcd38:	2a00      	cmp	r2, #0
 23fcd3a:	d103      	bne.n	23fcd44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fcd3c:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fcd40:	2900      	cmp	r1, #0
 23fcd42:	d1f7      	bne.n	23fcd34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fcd44:	d121      	bne.n	23fcd8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fcd46:	f104 050c 	add.w	r5, r4, #12
 23fcd4a:	4669      	mov	r1, sp
 23fcd4c:	4628      	mov	r0, r5
 23fcd4e:	f7ff ff1f 	bl	23fcb90 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcd52:	2201      	movs	r2, #1
 23fcd54:	1c63      	adds	r3, r4, #1
 23fcd56:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcd5a:	2000      	movs	r0, #0
 23fcd5c:	f104 0308 	add.w	r3, r4, #8
 23fcd60:	e8d3 6fef 	ldaex	r6, [r3]
 23fcd64:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fcd68:	2a00      	cmp	r2, #0
 23fcd6a:	d1f9      	bne.n	23fcd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fcd6c:	b16e      	cbz	r6, 23fcd8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fcd6e:	f7ff fcd9 	bl	23fc724 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcd72:	b178      	cbz	r0, 23fcd94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcd74:	4629      	mov	r1, r5
 23fcd76:	4630      	mov	r0, r6
 23fcd78:	f7ff ff90 	bl	23fcc9c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fcd7c:	4630      	mov	r0, r6
 23fcd7e:	f7ff fea8 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcd82:	2110      	movs	r1, #16
 23fcd84:	4630      	mov	r0, r6
 23fcd86:	f7fe f97a 	bl	23fb07e <_ZdlPvj>
        p_->setError(std::move(error));
 23fcd8a:	4668      	mov	r0, sp
 23fcd8c:	f7ff ff0d 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
    }
 23fcd90:	b009      	add	sp, #36	; 0x24
 23fcd92:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcd94:	4631      	mov	r1, r6
 23fcd96:	a802      	add	r0, sp, #8
 23fcd98:	f7ff ffb4 	bl	23fcd04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fcd9c:	68e0      	ldr	r0, [r4, #12]
 23fcd9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcda2:	b108      	cbz	r0, 23fcda8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fcda4:	f002 fcfc 	bl	23ff7a0 <strdup>
        type_(type) {
 23fcda8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fcdaa:	2010      	movs	r0, #16
 23fcdac:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fcdb0:	f7fe f961 	bl	23fb076 <_Znwj>
 23fcdb4:	4605      	mov	r5, r0
 23fcdb6:	b1e8      	cbz	r0, 23fcdf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fcdb8:	2700      	movs	r7, #0
 23fcdba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcdbc:	2018      	movs	r0, #24
 23fcdbe:	f7fe f95a 	bl	23fb076 <_Znwj>
 23fcdc2:	4604      	mov	r4, r0
 23fcdc4:	b188      	cbz	r0, 23fcdea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fcdc6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fcdc8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fcdca:	a802      	add	r0, sp, #8
 23fcdcc:	f7ff feb8 	bl	23fcb40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcdd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcdd2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcdd4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcdd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcdd8:	9204      	str	r2, [sp, #16]
 23fcdda:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fcddc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fcdde:	60e3      	str	r3, [r4, #12]
 23fcde0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fcde4:	9205      	str	r2, [sp, #20]
 23fcde6:	f7ff fed3 	bl	23fcb90 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fcdea:	4b08      	ldr	r3, [pc, #32]	; (23fce0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcdec:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcdee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fcdf0:	4b07      	ldr	r3, [pc, #28]	; (23fce10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fcdf2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fcdf4:	a806      	add	r0, sp, #24
 23fcdf6:	f7ff fed8 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fcdfa:	a802      	add	r0, sp, #8
 23fcdfc:	f7ff fe69 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fce00:	2200      	movs	r2, #0
 23fce02:	4629      	mov	r1, r5
 23fce04:	4803      	ldr	r0, [pc, #12]	; (23fce14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fce06:	f7ff fc9b 	bl	23fc740 <application_thread_invoke>
 23fce0a:	e7b7      	b.n	23fcd7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fce0c:	023fccaf 	.word	0x023fccaf
 23fce10:	023fcf29 	.word	0x023fcf29
 23fce14:	023fcaab 	.word	0x023fcaab

023fce18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fce1c:	b08b      	sub	sp, #44	; 0x2c
 23fce1e:	4605      	mov	r5, r0
 23fce20:	460f      	mov	r7, r1
 23fce22:	4690      	mov	r8, r2
 23fce24:	4699      	mov	r9, r3
 23fce26:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fce2a:	f7ff fceb 	bl	23fc804 <spark_cloud_flag_connected>
 23fce2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fce30:	4683      	mov	fp, r0
 23fce32:	bb38      	cbnz	r0, 23fce84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fce34:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fce38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fce3a:	a905      	add	r1, sp, #20
 23fce3c:	4630      	mov	r0, r6
 23fce3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fce42:	f7ff fea5 	bl	23fcb90 <_ZN8particle5ErrorC1EOS0_>
 23fce46:	2014      	movs	r0, #20
 23fce48:	f7fe f915 	bl	23fb076 <_Znwj>
 23fce4c:	4604      	mov	r4, r0
 23fce4e:	b148      	cbz	r0, 23fce64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fce50:	2302      	movs	r3, #2
 23fce52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fce54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fce56:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fce5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fce5c:	4631      	mov	r1, r6
 23fce5e:	300c      	adds	r0, #12
 23fce60:	f7ff fe96 	bl	23fcb90 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fce64:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fce66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fce68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fce6c:	f7ff ff36 	bl	23fccdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fce70:	4630      	mov	r0, r6
 23fce72:	f7ff fe9a 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fce76:	a805      	add	r0, sp, #20
 23fce78:	f7ff fe97 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fce7c:	4628      	mov	r0, r5
 23fce7e:	b00b      	add	sp, #44	; 0x2c
 23fce80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fce84:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fce86:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fce88:	2014      	movs	r0, #20
 23fce8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fce8e:	9307      	str	r3, [sp, #28]
 23fce90:	f7fe f8f1 	bl	23fb076 <_Znwj>
 23fce94:	4601      	mov	r1, r0
 23fce96:	b118      	cbz	r0, 23fcea0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fce98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fce9c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fce9e:	7044      	strb	r4, [r0, #1]
 23fcea0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcea2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fcea4:	f7ff ff1a 	bl	23fccdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fcea8:	4b1e      	ldr	r3, [pc, #120]	; (23fcf24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fceaa:	2008      	movs	r0, #8
 23fceac:	9308      	str	r3, [sp, #32]
 23fceae:	f7fe f8e2 	bl	23fb076 <_Znwj>
 23fceb2:	4604      	mov	r4, r0
 23fceb4:	b110      	cbz	r0, 23fcebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fceb6:	a903      	add	r1, sp, #12
 23fceb8:	f7ff fecc 	bl	23fcc54 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fcebc:	464a      	mov	r2, r9
 23fcebe:	4641      	mov	r1, r8
 23fcec0:	4638      	mov	r0, r7
 23fcec2:	9600      	str	r6, [sp, #0]
 23fcec4:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fcec8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fceca:	f7ff fca9 	bl	23fc820 <spark_send_event>
 23fcece:	b9b8      	cbnz	r0, 23fcf00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fced0:	9b03      	ldr	r3, [sp, #12]
 23fced2:	3301      	adds	r3, #1
 23fced4:	781b      	ldrb	r3, [r3, #0]
 23fced6:	b2db      	uxtb	r3, r3
 23fced8:	b993      	cbnz	r3, 23fcf00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fceda:	9305      	str	r3, [sp, #20]
 23fcedc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fcee0:	a905      	add	r1, sp, #20
 23fcee2:	a803      	add	r0, sp, #12
 23fcee4:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fcee8:	f7ff ff1c 	bl	23fcd24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fceec:	a805      	add	r0, sp, #20
 23fceee:	f7ff fe5c 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fcef2:	a805      	add	r0, sp, #20
 23fcef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fcef6:	f7ff feb6 	bl	23fcc66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fcefa:	a806      	add	r0, sp, #24
 23fcefc:	f7ff fe18 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcf00:	a903      	add	r1, sp, #12
 23fcf02:	a805      	add	r0, sp, #20
 23fcf04:	f7ff fea6 	bl	23fcc54 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcf08:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcf0a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcf0c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fcf0e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fcf10:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fcf12:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fcf14:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fcf16:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fcf18:	f7ff fe0a 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcf1c:	a804      	add	r0, sp, #16
 23fcf1e:	f7ff fe07 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fcf22:	e7ab      	b.n	23fce7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fcf24:	023fcfa5 	.word	0x023fcfa5

023fcf28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fcf28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fcf2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcf2c:	4605      	mov	r5, r0
	switch (__op)
 23fcf2e:	d103      	bne.n	23fcf38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fcf30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fcf32:	6003      	str	r3, [r0, #0]
      }
 23fcf34:	2000      	movs	r0, #0
 23fcf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fcf38:	2a02      	cmp	r2, #2
 23fcf3a:	d010      	beq.n	23fcf5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fcf3c:	2a03      	cmp	r2, #3
 23fcf3e:	d1f9      	bne.n	23fcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fcf40:	6804      	ldr	r4, [r0, #0]
 23fcf42:	2c00      	cmp	r4, #0
 23fcf44:	d0f6      	beq.n	23fcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fcf46:	f104 0010 	add.w	r0, r4, #16
 23fcf4a:	f7ff fe2e 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fcf4e:	4620      	mov	r0, r4
 23fcf50:	f7ff fdbf 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fcf54:	2118      	movs	r1, #24
 23fcf56:	4620      	mov	r0, r4
 23fcf58:	f7fe f891 	bl	23fb07e <_ZdlPvj>
 23fcf5c:	e7ea      	b.n	23fcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcf5e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fcf60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcf62:	f7fe f888 	bl	23fb076 <_Znwj>
 23fcf66:	4604      	mov	r4, r0
 23fcf68:	b150      	cbz	r0, 23fcf80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fcf6a:	4631      	mov	r1, r6
 23fcf6c:	f7ff feca 	bl	23fcd04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fcf70:	6930      	ldr	r0, [r6, #16]
 23fcf72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcf76:	b108      	cbz	r0, 23fcf7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fcf78:	f002 fc12 	bl	23ff7a0 <strdup>
        type_(type) {
 23fcf7c:	6120      	str	r0, [r4, #16]
 23fcf7e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fcf80:	602c      	str	r4, [r5, #0]
	}
 23fcf82:	e7d7      	b.n	23fcf34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fcf84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fcf84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fcf86:	2300      	movs	r3, #0
 23fcf88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fcf8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fcf8c:	4604      	mov	r4, r0
 23fcf8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fcf90:	b12b      	cbz	r3, 23fcf9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fcf92:	2202      	movs	r2, #2
 23fcf94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fcf96:	68eb      	ldr	r3, [r5, #12]
 23fcf98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fcf9a:	68ab      	ldr	r3, [r5, #8]
 23fcf9c:	60a3      	str	r3, [r4, #8]
    }
 23fcf9e:	4620      	mov	r0, r4
 23fcfa0:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcfa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fcfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcfa6:	4604      	mov	r4, r0
 23fcfa8:	b089      	sub	sp, #36	; 0x24
 23fcfaa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fcfac:	a801      	add	r0, sp, #4
 23fcfae:	4611      	mov	r1, r2
 23fcfb0:	f7ff fe59 	bl	23fcc66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fcfb4:	b1a4      	cbz	r4, 23fcfe0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fcfb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcfb8:	b11d      	cbz	r5, 23fcfc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fcfba:	4628      	mov	r0, r5
 23fcfbc:	f002 fbf0 	bl	23ff7a0 <strdup>
 23fcfc0:	4605      	mov	r5, r0
 23fcfc2:	a801      	add	r0, sp, #4
 23fcfc4:	a903      	add	r1, sp, #12
        type_(type) {
 23fcfc6:	9503      	str	r5, [sp, #12]
 23fcfc8:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fcfcc:	f7ff feaa 	bl	23fcd24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fcfd0:	a803      	add	r0, sp, #12
 23fcfd2:	f7ff fdea 	bl	23fcbaa <_ZN8particle5ErrorD1Ev>
 23fcfd6:	a802      	add	r0, sp, #8
 23fcfd8:	f7ff fdaa 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcfdc:	b009      	add	sp, #36	; 0x24
 23fcfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcfe0:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fcfe2:	9d01      	ldr	r5, [sp, #4]
 23fcfe4:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fcfe8:	2a00      	cmp	r2, #0
 23fcfea:	d103      	bne.n	23fcff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fcfec:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fcff0:	2900      	cmp	r1, #0
 23fcff2:	d1f7      	bne.n	23fcfe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fcff4:	d1ef      	bne.n	23fcfd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fcff6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcff8:	2201      	movs	r2, #1
 23fcffa:	18eb      	adds	r3, r5, r3
 23fcffc:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd000:	1d2b      	adds	r3, r5, #4
 23fd002:	e8d3 6fef 	ldaex	r6, [r3]
 23fd006:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fd00a:	2a00      	cmp	r2, #0
 23fd00c:	d1f9      	bne.n	23fd002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fd00e:	2e00      	cmp	r6, #0
 23fd010:	d0e1      	beq.n	23fcfd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fd012:	4620      	mov	r0, r4
 23fd014:	f7ff fb86 	bl	23fc724 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd018:	4607      	mov	r7, r0
 23fd01a:	b160      	cbz	r0, 23fd036 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd01c:	4630      	mov	r0, r6
 23fd01e:	f105 010c 	add.w	r1, r5, #12
 23fd022:	f7ff fe4b 	bl	23fccbc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fd026:	4630      	mov	r0, r6
 23fd028:	f7ff fd53 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd02c:	2110      	movs	r1, #16
 23fd02e:	4630      	mov	r0, r6
 23fd030:	f7fe f825 	bl	23fb07e <_ZdlPvj>
 23fd034:	e7cf      	b.n	23fcfd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd036:	4631      	mov	r1, r6
 23fd038:	a803      	add	r0, sp, #12
 23fd03a:	f7ff ffa3 	bl	23fcf84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd03e:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd040:	2010      	movs	r0, #16
 23fd042:	f88d 301c 	strb.w	r3, [sp, #28]
 23fd046:	f7fe f816 	bl	23fb076 <_Znwj>
 23fd04a:	4605      	mov	r5, r0
 23fd04c:	b1d0      	cbz	r0, 23fd084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fd04e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd050:	2014      	movs	r0, #20
 23fd052:	f7fe f810 	bl	23fb076 <_Znwj>
 23fd056:	4604      	mov	r4, r0
 23fd058:	b178      	cbz	r0, 23fd07a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fd05a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd05c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd05e:	a803      	add	r0, sp, #12
 23fd060:	f7ff fd6e 	bl	23fcb40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd064:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd066:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd068:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd06a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fd06c:	9205      	str	r2, [sp, #20]
 23fd06e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd070:	60e3      	str	r3, [r4, #12]
 23fd072:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fd076:	9206      	str	r2, [sp, #24]
 23fd078:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd07a:	4b07      	ldr	r3, [pc, #28]	; (23fd098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd07c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd07e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd080:	4b06      	ldr	r3, [pc, #24]	; (23fd09c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fd082:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fd084:	a803      	add	r0, sp, #12
 23fd086:	f7ff fd24 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd08a:	2200      	movs	r2, #0
 23fd08c:	4629      	mov	r1, r5
 23fd08e:	4804      	ldr	r0, [pc, #16]	; (23fd0a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fd090:	f7ff fb56 	bl	23fc740 <application_thread_invoke>
 23fd094:	e7c7      	b.n	23fd026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fd096:	bf00      	nop
 23fd098:	023fcccf 	.word	0x023fcccf
 23fd09c:	023fd0a5 	.word	0x023fd0a5
 23fd0a0:	023fcaab 	.word	0x023fcaab

023fd0a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fd0a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd0a6:	b570      	push	{r4, r5, r6, lr}
 23fd0a8:	4604      	mov	r4, r0
	switch (__op)
 23fd0aa:	d103      	bne.n	23fd0b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd0ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd0ae:	6003      	str	r3, [r0, #0]
      }
 23fd0b0:	2000      	movs	r0, #0
 23fd0b2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fd0b4:	2a02      	cmp	r2, #2
 23fd0b6:	d00c      	beq.n	23fd0d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fd0b8:	2a03      	cmp	r2, #3
 23fd0ba:	d1f9      	bne.n	23fd0b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd0bc:	6804      	ldr	r4, [r0, #0]
 23fd0be:	2c00      	cmp	r4, #0
 23fd0c0:	d0f6      	beq.n	23fd0b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fd0c2:	4620      	mov	r0, r4
 23fd0c4:	f7ff fd05 	bl	23fcad2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd0c8:	2114      	movs	r1, #20
 23fd0ca:	4620      	mov	r0, r4
 23fd0cc:	f7fd ffd7 	bl	23fb07e <_ZdlPvj>
 23fd0d0:	e7ee      	b.n	23fd0b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd0d2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fd0d4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd0d6:	f7fd ffce 	bl	23fb076 <_Znwj>
 23fd0da:	4605      	mov	r5, r0
 23fd0dc:	b120      	cbz	r0, 23fd0e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fd0de:	4631      	mov	r1, r6
 23fd0e0:	f7ff ff50 	bl	23fcf84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fd0e4:	7c33      	ldrb	r3, [r6, #16]
 23fd0e6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fd0e8:	6025      	str	r5, [r4, #0]
	}
 23fd0ea:	e7e1      	b.n	23fd0b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fd0ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd0ec:	2200      	movs	r2, #0
 23fd0ee:	6840      	ldr	r0, [r0, #4]
 23fd0f0:	4611      	mov	r1, r2
 23fd0f2:	f7ff bc13 	b.w	23fc91c <network_listening>

023fd0f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd0f6:	2200      	movs	r2, #0
 23fd0f8:	6840      	ldr	r0, [r0, #4]
 23fd0fa:	4611      	mov	r1, r2
 23fd0fc:	f7ff bc2a 	b.w	23fc954 <network_get_listen_timeout>

023fd100 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd100:	2200      	movs	r2, #0
 23fd102:	6840      	ldr	r0, [r0, #4]
 23fd104:	f7ff bc18 	b.w	23fc938 <network_set_listen_timeout>

023fd108 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd108:	2200      	movs	r2, #0
 23fd10a:	6840      	ldr	r0, [r0, #4]
 23fd10c:	f081 0101 	eor.w	r1, r1, #1
 23fd110:	f7ff bbf6 	b.w	23fc900 <network_listen>

023fd114 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd114:	2300      	movs	r3, #0
 23fd116:	6840      	ldr	r0, [r0, #4]
 23fd118:	461a      	mov	r2, r3
 23fd11a:	4619      	mov	r1, r3
 23fd11c:	f7ff bbe2 	b.w	23fc8e4 <network_off>

023fd120 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd120:	2300      	movs	r3, #0
 23fd122:	6840      	ldr	r0, [r0, #4]
 23fd124:	461a      	mov	r2, r3
 23fd126:	4619      	mov	r1, r3
 23fd128:	f7ff bbce 	b.w	23fc8c8 <network_on>

023fd12c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd12c:	2200      	movs	r2, #0
 23fd12e:	6840      	ldr	r0, [r0, #4]
 23fd130:	4611      	mov	r1, r2
 23fd132:	f7ff bbbb 	b.w	23fc8ac <network_ready>

023fd136 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd136:	2200      	movs	r2, #0
 23fd138:	6840      	ldr	r0, [r0, #4]
 23fd13a:	4611      	mov	r1, r2
 23fd13c:	f7ff bb9a 	b.w	23fc874 <network_connecting>

023fd140 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd140:	2200      	movs	r2, #0
 23fd142:	2102      	movs	r1, #2
 23fd144:	6840      	ldr	r0, [r0, #4]
 23fd146:	f7ff bba3 	b.w	23fc890 <network_disconnect>

023fd14a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd14a:	2300      	movs	r3, #0
 23fd14c:	6840      	ldr	r0, [r0, #4]
 23fd14e:	461a      	mov	r2, r3
 23fd150:	f7ff bb82 	b.w	23fc858 <network_connect>

023fd154 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd154:	2203      	movs	r2, #3
 23fd156:	4b02      	ldr	r3, [pc, #8]	; (23fd160 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd158:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd15a:	4a02      	ldr	r2, [pc, #8]	; (23fd164 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd15c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd15e:	4770      	bx	lr
 23fd160:	1007ae58 	.word	0x1007ae58
 23fd164:	023ffbe4 	.word	0x023ffbe4

023fd168 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd168:	4770      	bx	lr

023fd16a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd16c:	4606      	mov	r6, r0
 23fd16e:	4615      	mov	r5, r2
 23fd170:	460c      	mov	r4, r1
 23fd172:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd174:	42bc      	cmp	r4, r7
 23fd176:	d006      	beq.n	23fd186 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd178:	6833      	ldr	r3, [r6, #0]
 23fd17a:	4630      	mov	r0, r6
 23fd17c:	689b      	ldr	r3, [r3, #8]
 23fd17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd182:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd184:	e7f6      	b.n	23fd174 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd186:	4628      	mov	r0, r5
 23fd188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd18a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd18a:	2200      	movs	r2, #0
 23fd18c:	7c00      	ldrb	r0, [r0, #16]
 23fd18e:	f7ff b8a7 	b.w	23fc2e0 <hal_i2c_write>

023fd192 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd192:	2100      	movs	r1, #0
 23fd194:	7c00      	ldrb	r0, [r0, #16]
 23fd196:	f7ff b8b1 	b.w	23fc2fc <hal_i2c_available>

023fd19a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd19a:	2100      	movs	r1, #0
 23fd19c:	7c00      	ldrb	r0, [r0, #16]
 23fd19e:	f7ff b8bb 	b.w	23fc318 <hal_i2c_read>

023fd1a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd1a2:	2100      	movs	r1, #0
 23fd1a4:	7c00      	ldrb	r0, [r0, #16]
 23fd1a6:	f7ff b8c5 	b.w	23fc334 <hal_i2c_peek>

023fd1aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd1aa:	2100      	movs	r1, #0
 23fd1ac:	7c00      	ldrb	r0, [r0, #16]
 23fd1ae:	f7ff b8cf 	b.w	23fc350 <hal_i2c_flush>

023fd1b2 <_ZN7TwoWireD0Ev>:
 23fd1b2:	b510      	push	{r4, lr}
 23fd1b4:	4604      	mov	r4, r0
 23fd1b6:	2114      	movs	r1, #20
 23fd1b8:	f7fd ff61 	bl	23fb07e <_ZdlPvj>
 23fd1bc:	4620      	mov	r0, r4
 23fd1be:	bd10      	pop	{r4, pc}

023fd1c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd1c0:	b538      	push	{r3, r4, r5, lr}
 23fd1c2:	4604      	mov	r4, r0
 23fd1c4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd1c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd1ca:	2200      	movs	r2, #0
 23fd1cc:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd1d0:	4b09      	ldr	r3, [pc, #36]	; (23fd1f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd1d2:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd1d4:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd1d6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd1d8:	4629      	mov	r1, r5
 23fd1da:	f7ff f8d5 	bl	23fc388 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd1de:	30bf      	adds	r0, #191	; 0xbf
 23fd1e0:	d108      	bne.n	23fd1f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd1e2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd1e4:	07db      	lsls	r3, r3, #31
 23fd1e6:	d505      	bpl.n	23fd1f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd1e8:	6868      	ldr	r0, [r5, #4]
 23fd1ea:	f7ff fbeb 	bl	23fc9c4 <free>
    free(conf.tx_buffer);
 23fd1ee:	68e8      	ldr	r0, [r5, #12]
 23fd1f0:	f7ff fbe8 	bl	23fc9c4 <free>
}
 23fd1f4:	4620      	mov	r0, r4
 23fd1f6:	bd38      	pop	{r3, r4, r5, pc}
 23fd1f8:	023ffc20 	.word	0x023ffc20

023fd1fc <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fd1fc:	2200      	movs	r2, #0
 23fd1fe:	7c00      	ldrb	r0, [r0, #16]
 23fd200:	f7ff b836 	b.w	23fc270 <hal_i2c_set_speed>

023fd204 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd204:	2300      	movs	r3, #0
 23fd206:	7c00      	ldrb	r0, [r0, #16]
 23fd208:	461a      	mov	r2, r3
 23fd20a:	4619      	mov	r1, r3
 23fd20c:	f7ff b83e 	b.w	23fc28c <hal_i2c_begin>

023fd210 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd212:	2200      	movs	r2, #0
 23fd214:	2314      	movs	r3, #20
 23fd216:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd21a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd21e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd220:	7c00      	ldrb	r0, [r0, #16]
 23fd222:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd226:	684b      	ldr	r3, [r1, #4]
 23fd228:	9303      	str	r3, [sp, #12]
 23fd22a:	68cb      	ldr	r3, [r1, #12]
 23fd22c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd22e:	7a0b      	ldrb	r3, [r1, #8]
 23fd230:	a901      	add	r1, sp, #4
 23fd232:	9305      	str	r3, [sp, #20]
 23fd234:	f7ff f8b6 	bl	23fc3a4 <hal_i2c_request_ex>
}
 23fd238:	b007      	add	sp, #28
 23fd23a:	f85d fb04 	ldr.w	pc, [sp], #4

023fd23e <_ZN7TwoWire11requestFromEhjh>:
{
 23fd23e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd240:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd242:	f88d 1000 	strb.w	r1, [sp]
 23fd246:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd24a:	bf18      	it	ne
 23fd24c:	2301      	movne	r3, #1
 23fd24e:	9103      	str	r1, [sp, #12]
 23fd250:	4669      	mov	r1, sp
    size_ = size;
 23fd252:	9201      	str	r2, [sp, #4]
 23fd254:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd258:	f7ff ffda 	bl	23fd210 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd25c:	b005      	add	sp, #20
 23fd25e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd262 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd262:	2200      	movs	r2, #0
 23fd264:	7c00      	ldrb	r0, [r0, #16]
 23fd266:	f7ff b81f 	b.w	23fc2a8 <hal_i2c_begin_transmission>

023fd26a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd26a:	2200      	movs	r2, #0
 23fd26c:	7c00      	ldrb	r0, [r0, #16]
 23fd26e:	f7ff b829 	b.w	23fc2c4 <hal_i2c_end_transmission>

023fd272 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd272:	4770      	bx	lr

023fd274 <_ZN9IPAddressD0Ev>:
 23fd274:	b510      	push	{r4, lr}
 23fd276:	4604      	mov	r4, r0
 23fd278:	2118      	movs	r1, #24
 23fd27a:	f7fd ff00 	bl	23fb07e <_ZdlPvj>
 23fd27e:	4620      	mov	r0, r4
 23fd280:	bd10      	pop	{r4, pc}

023fd282 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd282:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd284:	7d03      	ldrb	r3, [r0, #20]
{
 23fd286:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd288:	2b06      	cmp	r3, #6
 23fd28a:	f04f 0400 	mov.w	r4, #0
{
 23fd28e:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd290:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd294:	d012      	beq.n	23fd2bc <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd296:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd29a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd29e:	220a      	movs	r2, #10
 23fd2a0:	4630      	mov	r0, r6
 23fd2a2:	f001 fb1a 	bl	23fe8da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd2a6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd2a8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd2aa:	d019      	beq.n	23fd2e0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd2ac:	2c00      	cmp	r4, #0
 23fd2ae:	d0f4      	beq.n	23fd29a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd2b0:	212e      	movs	r1, #46	; 0x2e
 23fd2b2:	4630      	mov	r0, r6
 23fd2b4:	f001 fb0e 	bl	23fe8d4 <_ZN5Print5printEc>
 23fd2b8:	4404      	add	r4, r0
 23fd2ba:	e7ee      	b.n	23fd29a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd2bc:	232f      	movs	r3, #47	; 0x2f
 23fd2be:	466a      	mov	r2, sp
 23fd2c0:	4639      	mov	r1, r7
 23fd2c2:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd2c4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd2c8:	f7ff f87a 	bl	23fc3c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd2cc:	4668      	mov	r0, sp
 23fd2ce:	f7fd fead 	bl	23fb02c <strlen>
 23fd2d2:	6833      	ldr	r3, [r6, #0]
 23fd2d4:	4602      	mov	r2, r0
 23fd2d6:	4669      	mov	r1, sp
 23fd2d8:	4630      	mov	r0, r6
 23fd2da:	68db      	ldr	r3, [r3, #12]
 23fd2dc:	4798      	blx	r3
 23fd2de:	4604      	mov	r4, r0
    }
    return n;
}
 23fd2e0:	4620      	mov	r0, r4
 23fd2e2:	b00d      	add	sp, #52	; 0x34
 23fd2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fd2e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd2e8:	b510      	push	{r4, lr}
 23fd2ea:	4604      	mov	r4, r0
 23fd2ec:	4b04      	ldr	r3, [pc, #16]	; (23fd300 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd2ee:	2211      	movs	r2, #17
 23fd2f0:	2100      	movs	r1, #0
 23fd2f2:	f840 3b04 	str.w	r3, [r0], #4
 23fd2f6:	f002 f9fc 	bl	23ff6f2 <memset>
}
 23fd2fa:	4620      	mov	r0, r4
 23fd2fc:	bd10      	pop	{r4, pc}
 23fd2fe:	bf00      	nop
 23fd300:	023ffc48 	.word	0x023ffc48

023fd304 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd304:	4603      	mov	r3, r0
 23fd306:	4a07      	ldr	r2, [pc, #28]	; (23fd324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd308:	b510      	push	{r4, lr}
 23fd30a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd30e:	f101 0210 	add.w	r2, r1, #16
 23fd312:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd316:	4291      	cmp	r1, r2
 23fd318:	f843 4b04 	str.w	r4, [r3], #4
 23fd31c:	d1f9      	bne.n	23fd312 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd31e:	780a      	ldrb	r2, [r1, #0]
 23fd320:	701a      	strb	r2, [r3, #0]
}
 23fd322:	bd10      	pop	{r4, pc}
 23fd324:	023ffc48 	.word	0x023ffc48

023fd328 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd328:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd32a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd32e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd332:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd336:	2304      	movs	r3, #4
 23fd338:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd33c:	6041      	str	r1, [r0, #4]
 23fd33e:	7503      	strb	r3, [r0, #20]
}
 23fd340:	bd10      	pop	{r4, pc}
	...

023fd344 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd344:	b507      	push	{r0, r1, r2, lr}
 23fd346:	4b06      	ldr	r3, [pc, #24]	; (23fd360 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd348:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd34a:	78cb      	ldrb	r3, [r1, #3]
 23fd34c:	9300      	str	r3, [sp, #0]
 23fd34e:	788b      	ldrb	r3, [r1, #2]
 23fd350:	784a      	ldrb	r2, [r1, #1]
 23fd352:	7809      	ldrb	r1, [r1, #0]
 23fd354:	f7ff ffe8 	bl	23fd328 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd358:	b003      	add	sp, #12
 23fd35a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd35e:	bf00      	nop
 23fd360:	023ffc48 	.word	0x023ffc48

023fd364 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd364:	2201      	movs	r2, #1
 23fd366:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd36a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd36e:	4618      	mov	r0, r3
 23fd370:	2901      	cmp	r1, #1
 23fd372:	d108      	bne.n	23fd386 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd374:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd378:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd37c:	3a01      	subs	r2, #1
 23fd37e:	f103 0310 	add.w	r3, r3, #16
 23fd382:	d1f2      	bne.n	23fd36a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd384:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd386:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd388:	bf04      	itt	eq
 23fd38a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd38e:	1852      	addeq	r2, r2, r1
 23fd390:	e7f4      	b.n	23fd37c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd392 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 23fd392:	4770      	bx	lr

023fd394 <_ZN5spark16JSONBufferWriterD0Ev>:
 23fd394:	b510      	push	{r4, lr}
 23fd396:	4604      	mov	r4, r0
 23fd398:	2114      	movs	r1, #20
 23fd39a:	f7fd fe70 	bl	23fb07e <_ZdlPvj>
 23fd39e:	4620      	mov	r0, r4
 23fd3a0:	bd10      	pop	{r4, pc}

023fd3a2 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fd3a2:	b538      	push	{r3, r4, r5, lr}
 23fd3a4:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23fd3a6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23fd3aa:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fd3ac:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23fd3ae:	d207      	bcs.n	23fd3c0 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23fd3b0:	1ad2      	subs	r2, r2, r3
 23fd3b2:	6880      	ldr	r0, [r0, #8]
 23fd3b4:	42aa      	cmp	r2, r5
 23fd3b6:	bf28      	it	cs
 23fd3b8:	462a      	movcs	r2, r5
 23fd3ba:	4418      	add	r0, r3
 23fd3bc:	f002 f972 	bl	23ff6a4 <memcpy>
    }
    n_ += size;
 23fd3c0:	6922      	ldr	r2, [r4, #16]
 23fd3c2:	442a      	add	r2, r5
 23fd3c4:	6122      	str	r2, [r4, #16]
}
 23fd3c6:	bd38      	pop	{r3, r4, r5, pc}

023fd3c8 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23fd3c8:	b40e      	push	{r1, r2, r3}
 23fd3ca:	b517      	push	{r0, r1, r2, r4, lr}
 23fd3cc:	4604      	mov	r4, r0
 23fd3ce:	ab05      	add	r3, sp, #20
 23fd3d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fd3d4:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23fd3d6:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fd3d8:	6903      	ldr	r3, [r0, #16]
 23fd3da:	6880      	ldr	r0, [r0, #8]
 23fd3dc:	428b      	cmp	r3, r1
 23fd3de:	bf34      	ite	cc
 23fd3e0:	1ac9      	subcc	r1, r1, r3
 23fd3e2:	2100      	movcs	r1, #0
 23fd3e4:	4418      	add	r0, r3
 23fd3e6:	9b01      	ldr	r3, [sp, #4]
 23fd3e8:	f7ff fb08 	bl	23fc9fc <vsnprintf>
    va_end(args);
    n_ += n;
 23fd3ec:	6923      	ldr	r3, [r4, #16]
 23fd3ee:	4418      	add	r0, r3
 23fd3f0:	6120      	str	r0, [r4, #16]
}
 23fd3f2:	b003      	add	sp, #12
 23fd3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd3f8:	b003      	add	sp, #12
 23fd3fa:	4770      	bx	lr

023fd3fc <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd3fc:	b40e      	push	{r1, r2, r3}
 23fd3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd400:	b088      	sub	sp, #32
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd402:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd404:	af00      	add	r7, sp, #0
 23fd406:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd40a:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd40e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd410:	462b      	mov	r3, r5
 23fd412:	1878      	adds	r0, r7, r1
 23fd414:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd416:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd418:	f7ff faf0 	bl	23fc9fc <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd41c:	280f      	cmp	r0, #15
 23fd41e:	687a      	ldr	r2, [r7, #4]
 23fd420:	d91a      	bls.n	23fd458 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd422:	f100 0308 	add.w	r3, r0, #8
 23fd426:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd42a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd42c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd430:	1c41      	adds	r1, r0, #1
 23fd432:	462b      	mov	r3, r5
 23fd434:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd436:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd438:	f7ff fae0 	bl	23fc9fc <vsnprintf>
        if (n > 0) {
 23fd43c:	1e02      	subs	r2, r0, #0
 23fd43e:	dd04      	ble.n	23fd44a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd440:	6823      	ldr	r3, [r4, #0]
 23fd442:	4669      	mov	r1, sp
 23fd444:	4620      	mov	r0, r4
 23fd446:	689b      	ldr	r3, [r3, #8]
 23fd448:	4798      	blx	r3
 23fd44a:	46b5      	mov	sp, r6
}
 23fd44c:	3720      	adds	r7, #32
 23fd44e:	46bd      	mov	sp, r7
 23fd450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd454:	b003      	add	sp, #12
 23fd456:	4770      	bx	lr
    } else if (n > 0) {
 23fd458:	2800      	cmp	r0, #0
 23fd45a:	d0f7      	beq.n	23fd44c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd45c:	6823      	ldr	r3, [r4, #0]
 23fd45e:	4602      	mov	r2, r0
 23fd460:	689b      	ldr	r3, [r3, #8]
 23fd462:	4620      	mov	r0, r4
 23fd464:	f107 0110 	add.w	r1, r7, #16
 23fd468:	4798      	blx	r3
}
 23fd46a:	e7ef      	b.n	23fd44c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd46c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd46c:	b538      	push	{r3, r4, r5, lr}
 23fd46e:	680b      	ldr	r3, [r1, #0]
 23fd470:	4604      	mov	r4, r0
 23fd472:	6003      	str	r3, [r0, #0]
 23fd474:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd476:	6843      	ldr	r3, [r0, #4]
 23fd478:	429d      	cmp	r5, r3
 23fd47a:	d008      	beq.n	23fd48e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd47c:	b115      	cbz	r5, 23fd484 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd47e:	686b      	ldr	r3, [r5, #4]
 23fd480:	3301      	adds	r3, #1
 23fd482:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd484:	6860      	ldr	r0, [r4, #4]
 23fd486:	b108      	cbz	r0, 23fd48c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd488:	f7ff fb2c 	bl	23fcae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd48c:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd48e:	bd38      	pop	{r3, r4, r5, pc}

023fd490 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd490:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd492:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd494:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd498:	2201      	movs	r2, #1
 23fd49a:	689b      	ldr	r3, [r3, #8]
 23fd49c:	f10d 0107 	add.w	r1, sp, #7
 23fd4a0:	4798      	blx	r3
}
 23fd4a2:	b003      	add	sp, #12
 23fd4a4:	f85d fb04 	ldr.w	pc, [sp], #4

023fd4a8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd4a8:	460b      	mov	r3, r1
 23fd4aa:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fd4ac:	2200      	movs	r2, #0
 23fd4ae:	b510      	push	{r4, lr}
 23fd4b0:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd4b2:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fd4b6:	6083      	str	r3, [r0, #8]
    if (t) {
 23fd4b8:	b90b      	cbnz	r3, 23fd4be <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fd4ba:	4620      	mov	r0, r4
 23fd4bc:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fd4be:	f7ff ffd5 	bl	23fd46c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fd4c2:	e7fa      	b.n	23fd4ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fd4c4 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fd4c4:	6883      	ldr	r3, [r0, #8]
 23fd4c6:	b1eb      	cbz	r3, 23fd504 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fd4c8:	781a      	ldrb	r2, [r3, #0]
 23fd4ca:	2a03      	cmp	r2, #3
 23fd4cc:	d81a      	bhi.n	23fd504 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fd4ce:	e8df f002 	tbb	[pc, r2]
 23fd4d2:	1704      	.short	0x1704
 23fd4d4:	1b02      	.short	0x1b02
 23fd4d6:	2005      	movs	r0, #5
 23fd4d8:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fd4da:	6802      	ldr	r2, [r0, #0]
 23fd4dc:	685b      	ldr	r3, [r3, #4]
 23fd4de:	6852      	ldr	r2, [r2, #4]
 23fd4e0:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fd4e2:	282d      	cmp	r0, #45	; 0x2d
 23fd4e4:	d012      	beq.n	23fd50c <_ZNK5spark9JSONValue4typeEv+0x48>
 23fd4e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd4ea:	2b09      	cmp	r3, #9
 23fd4ec:	d90e      	bls.n	23fd50c <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fd4ee:	2874      	cmp	r0, #116	; 0x74
 23fd4f0:	d00e      	beq.n	23fd510 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fd4f2:	2866      	cmp	r0, #102	; 0x66
 23fd4f4:	d00c      	beq.n	23fd510 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fd4f6:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fd4fa:	4258      	negs	r0, r3
 23fd4fc:	4158      	adcs	r0, r3
 23fd4fe:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd500:	2006      	movs	r0, #6
 23fd502:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd504:	2000      	movs	r0, #0
 23fd506:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd508:	2004      	movs	r0, #4
 23fd50a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd50c:	2003      	movs	r0, #3
 23fd50e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd510:	2002      	movs	r0, #2
}
 23fd512:	4770      	bx	lr

023fd514 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd514:	b510      	push	{r4, lr}
 23fd516:	4604      	mov	r4, r0
    switch (type()) {
 23fd518:	f7ff ffd4 	bl	23fd4c4 <_ZNK5spark9JSONValue4typeEv>
 23fd51c:	2802      	cmp	r0, #2
 23fd51e:	d00e      	beq.n	23fd53e <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd520:	1ec3      	subs	r3, r0, #3
 23fd522:	b2db      	uxtb	r3, r3
 23fd524:	2b01      	cmp	r3, #1
 23fd526:	d814      	bhi.n	23fd552 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd528:	6822      	ldr	r2, [r4, #0]
 23fd52a:	68a3      	ldr	r3, [r4, #8]
 23fd52c:	6850      	ldr	r0, [r2, #4]
 23fd52e:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd530:	220a      	movs	r2, #10
}
 23fd532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd536:	2100      	movs	r1, #0
 23fd538:	4418      	add	r0, r3
 23fd53a:	f002 b9f9 	b.w	23ff930 <strtol>
        const char* const s = d_->json + t_->start;
 23fd53e:	6822      	ldr	r2, [r4, #0]
 23fd540:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd542:	6852      	ldr	r2, [r2, #4]
 23fd544:	685b      	ldr	r3, [r3, #4]
 23fd546:	5cd0      	ldrb	r0, [r2, r3]
 23fd548:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd54c:	4258      	negs	r0, r3
 23fd54e:	4158      	adcs	r0, r3
}
 23fd550:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd552:	2000      	movs	r0, #0
 23fd554:	e7fc      	b.n	23fd550 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023fd558 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd558:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd55a:	2300      	movs	r3, #0
 23fd55c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd55e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd562:	480e      	ldr	r0, [pc, #56]	; (23fd59c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd564:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd568:	b1a9      	cbz	r1, 23fd596 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd56a:	780b      	ldrb	r3, [r1, #0]
 23fd56c:	2b03      	cmp	r3, #3
 23fd56e:	d006      	beq.n	23fd57e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd570:	b98b      	cbnz	r3, 23fd596 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd572:	6813      	ldr	r3, [r2, #0]
 23fd574:	6858      	ldr	r0, [r3, #4]
 23fd576:	684b      	ldr	r3, [r1, #4]
 23fd578:	5cc3      	ldrb	r3, [r0, r3]
 23fd57a:	2b6e      	cmp	r3, #110	; 0x6e
 23fd57c:	d007      	beq.n	23fd58e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd57e:	6813      	ldr	r3, [r2, #0]
 23fd580:	684d      	ldr	r5, [r1, #4]
 23fd582:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd584:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd586:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd588:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd58a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd58c:	60e3      	str	r3, [r4, #12]
 23fd58e:	4611      	mov	r1, r2
 23fd590:	4620      	mov	r0, r4
 23fd592:	f7ff ff6b 	bl	23fd46c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd596:	4620      	mov	r0, r4
 23fd598:	bd38      	pop	{r3, r4, r5, pc}
 23fd59a:	bf00      	nop
 23fd59c:	023ffcd2 	.word	0x023ffcd2

023fd5a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd5a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd5a2:	2500      	movs	r5, #0
 23fd5a4:	460b      	mov	r3, r1
 23fd5a6:	4604      	mov	r4, r0
 23fd5a8:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd5aa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd5ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd5b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd5b6:	b14b      	cbz	r3, 23fd5cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd5b8:	781a      	ldrb	r2, [r3, #0]
 23fd5ba:	2a01      	cmp	r2, #1
 23fd5bc:	d106      	bne.n	23fd5cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd5be:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd5c2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd5c4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd5c6:	6143      	str	r3, [r0, #20]
 23fd5c8:	f7ff ff50 	bl	23fd46c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd5cc:	4620      	mov	r0, r4
 23fd5ce:	bd38      	pop	{r3, r4, r5, pc}

023fd5d0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd5d0:	b510      	push	{r4, lr}
    if (!n_) {
 23fd5d2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd5d4:	4604      	mov	r4, r0
    if (!n_) {
 23fd5d6:	b163      	cbz	r3, 23fd5f2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd5d8:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd5da:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd5dc:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd5de:	3010      	adds	r0, #16
 23fd5e0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd5e2:	6120      	str	r0, [r4, #16]
    --n_;
 23fd5e4:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd5e6:	b113      	cbz	r3, 23fd5ee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd5e8:	f7ff febc 	bl	23fd364 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd5ec:	60a0      	str	r0, [r4, #8]
    return true;
 23fd5ee:	2001      	movs	r0, #1
 23fd5f0:	e000      	b.n	23fd5f4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd5f2:	4618      	mov	r0, r3
}
 23fd5f4:	bd10      	pop	{r4, pc}

023fd5f6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd5f6:	b510      	push	{r4, lr}
    write('}');
 23fd5f8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd5fa:	4604      	mov	r4, r0
    write('}');
 23fd5fc:	f7ff ff48 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd600:	2301      	movs	r3, #1
}
 23fd602:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd604:	7123      	strb	r3, [r4, #4]
}
 23fd606:	bd10      	pop	{r4, pc}

023fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23fd608:	b508      	push	{r3, lr}
    switch (state_) {
 23fd60a:	7903      	ldrb	r3, [r0, #4]
 23fd60c:	2b01      	cmp	r3, #1
 23fd60e:	d002      	beq.n	23fd616 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd610:	2b02      	cmp	r3, #2
 23fd612:	d004      	beq.n	23fd61e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23fd614:	bd08      	pop	{r3, pc}
        write(',');
 23fd616:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd618:	f7ff ff3a 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
}
 23fd61c:	e7fa      	b.n	23fd614 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd61e:	213a      	movs	r1, #58	; 0x3a
 23fd620:	e7fa      	b.n	23fd618 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd622 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd622:	b510      	push	{r4, lr}
 23fd624:	4604      	mov	r4, r0
    writeSeparator();
 23fd626:	f7ff ffef 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd62a:	4620      	mov	r0, r4
 23fd62c:	217b      	movs	r1, #123	; 0x7b
 23fd62e:	f7ff ff2f 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd632:	2300      	movs	r3, #0
}
 23fd634:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd636:	7123      	strb	r3, [r4, #4]
}
 23fd638:	bd10      	pop	{r4, pc}
	...

023fd63c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd63c:	b513      	push	{r0, r1, r4, lr}
 23fd63e:	4604      	mov	r4, r0
 23fd640:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd642:	f7ff ffe1 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd646:	6823      	ldr	r3, [r4, #0]
 23fd648:	4620      	mov	r0, r4
 23fd64a:	68db      	ldr	r3, [r3, #12]
 23fd64c:	9a01      	ldr	r2, [sp, #4]
 23fd64e:	4903      	ldr	r1, [pc, #12]	; (23fd65c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd650:	4798      	blx	r3
    state_ = NEXT;
 23fd652:	2301      	movs	r3, #1
}
 23fd654:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd656:	7123      	strb	r3, [r4, #4]
}
 23fd658:	b002      	add	sp, #8
 23fd65a:	bd10      	pop	{r4, pc}
 23fd65c:	023ffc54 	.word	0x023ffc54

023fd660 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd660:	b513      	push	{r0, r1, r4, lr}
 23fd662:	4604      	mov	r4, r0
 23fd664:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd666:	f7ff ffcf 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd66a:	6823      	ldr	r3, [r4, #0]
 23fd66c:	4620      	mov	r0, r4
 23fd66e:	68db      	ldr	r3, [r3, #12]
 23fd670:	9a01      	ldr	r2, [sp, #4]
 23fd672:	4903      	ldr	r1, [pc, #12]	; (23fd680 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd674:	4798      	blx	r3
    state_ = NEXT;
 23fd676:	2301      	movs	r3, #1
}
 23fd678:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd67a:	7123      	strb	r3, [r4, #4]
}
 23fd67c:	b002      	add	sp, #8
 23fd67e:	bd10      	pop	{r4, pc}
 23fd680:	023ffc57 	.word	0x023ffc57

023fd684 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
 23fd684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd686:	4604      	mov	r4, r0
 23fd688:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
 23fd68c:	f7ff ffbc 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
 23fd690:	6823      	ldr	r3, [r4, #0]
 23fd692:	4620      	mov	r0, r4
 23fd694:	68dd      	ldr	r5, [r3, #12]
 23fd696:	4632      	mov	r2, r6
 23fd698:	463b      	mov	r3, r7
 23fd69a:	4903      	ldr	r1, [pc, #12]	; (23fd6a8 <_ZN5spark10JSONWriter5valueEd+0x24>)
 23fd69c:	47a8      	blx	r5
    state_ = NEXT;
 23fd69e:	2301      	movs	r3, #1
}
 23fd6a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd6a2:	7123      	strb	r3, [r4, #4]
}
 23fd6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fd6a6:	bf00      	nop
 23fd6a8:	023ffc5a 	.word	0x023ffc5a

023fd6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd6b0:	460d      	mov	r5, r1
 23fd6b2:	4690      	mov	r8, r2
    write('"');
 23fd6b4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd6b6:	4604      	mov	r4, r0
 23fd6b8:	462f      	mov	r7, r5
    write('"');
 23fd6ba:	f7ff fee9 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23fd6be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd764 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd6c2:	44a8      	add	r8, r5
    while (s != end) {
 23fd6c4:	4547      	cmp	r7, r8
 23fd6c6:	46ba      	mov	sl, r7
 23fd6c8:	d03d      	beq.n	23fd746 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd6ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd6ce:	2e22      	cmp	r6, #34	; 0x22
 23fd6d0:	d006      	beq.n	23fd6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd6d2:	2e5c      	cmp	r6, #92	; 0x5c
 23fd6d4:	d004      	beq.n	23fd6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd6d6:	4630      	mov	r0, r6
 23fd6d8:	f001 ffdc 	bl	23ff694 <isprint>
 23fd6dc:	2800      	cmp	r0, #0
 23fd6de:	d1f1      	bne.n	23fd6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd6e0:	6823      	ldr	r3, [r4, #0]
 23fd6e2:	4629      	mov	r1, r5
 23fd6e4:	4620      	mov	r0, r4
 23fd6e6:	689b      	ldr	r3, [r3, #8]
 23fd6e8:	ebaa 0205 	sub.w	r2, sl, r5
 23fd6ec:	4798      	blx	r3
            write('\\');
 23fd6ee:	215c      	movs	r1, #92	; 0x5c
 23fd6f0:	4620      	mov	r0, r4
 23fd6f2:	f7ff fecd 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd6f6:	2e0d      	cmp	r6, #13
 23fd6f8:	d80a      	bhi.n	23fd710 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd6fa:	2e07      	cmp	r6, #7
 23fd6fc:	d91c      	bls.n	23fd738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd6fe:	f1a6 0308 	sub.w	r3, r6, #8
 23fd702:	2b05      	cmp	r3, #5
 23fd704:	d818      	bhi.n	23fd738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd706:	e8df f003 	tbb	[pc, r3]
 23fd70a:	0f0d      	.short	0x0f0d
 23fd70c:	15131711 	.word	0x15131711
 23fd710:	2e22      	cmp	r6, #34	; 0x22
 23fd712:	d001      	beq.n	23fd718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd714:	2e5c      	cmp	r6, #92	; 0x5c
 23fd716:	d10f      	bne.n	23fd738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd718:	4631      	mov	r1, r6
                write('b');
 23fd71a:	4620      	mov	r0, r4
 23fd71c:	f7ff feb8 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23fd720:	463d      	mov	r5, r7
    while (s != end) {
 23fd722:	e7cf      	b.n	23fd6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd724:	2162      	movs	r1, #98	; 0x62
 23fd726:	e7f8      	b.n	23fd71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd728:	2174      	movs	r1, #116	; 0x74
 23fd72a:	e7f6      	b.n	23fd71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd72c:	216e      	movs	r1, #110	; 0x6e
 23fd72e:	e7f4      	b.n	23fd71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd730:	2166      	movs	r1, #102	; 0x66
 23fd732:	e7f2      	b.n	23fd71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd734:	2172      	movs	r1, #114	; 0x72
 23fd736:	e7f0      	b.n	23fd71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd738:	6823      	ldr	r3, [r4, #0]
 23fd73a:	4632      	mov	r2, r6
 23fd73c:	4649      	mov	r1, r9
 23fd73e:	4620      	mov	r0, r4
 23fd740:	68db      	ldr	r3, [r3, #12]
 23fd742:	4798      	blx	r3
                break;
 23fd744:	e7ec      	b.n	23fd720 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23fd746:	42bd      	cmp	r5, r7
 23fd748:	d005      	beq.n	23fd756 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd74a:	6823      	ldr	r3, [r4, #0]
 23fd74c:	4629      	mov	r1, r5
 23fd74e:	4620      	mov	r0, r4
 23fd750:	689b      	ldr	r3, [r3, #8]
 23fd752:	1b7a      	subs	r2, r7, r5
 23fd754:	4798      	blx	r3
    write('"');
 23fd756:	2122      	movs	r1, #34	; 0x22
 23fd758:	4620      	mov	r0, r4
 23fd75a:	f7ff fe99 	bl	23fd490 <_ZN5spark10JSONWriter5writeEc>
}
 23fd75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd762:	bf00      	nop
 23fd764:	023ffc5d 	.word	0x023ffc5d

023fd768 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd768:	b513      	push	{r0, r1, r4, lr}
 23fd76a:	4604      	mov	r4, r0
 23fd76c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd770:	f7ff ff4a 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd774:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd778:	4620      	mov	r0, r4
 23fd77a:	f7ff ff97 	bl	23fd6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd77e:	2302      	movs	r3, #2
}
 23fd780:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd782:	7123      	strb	r3, [r4, #4]
}
 23fd784:	b002      	add	sp, #8
 23fd786:	bd10      	pop	{r4, pc}

023fd788 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd788:	b513      	push	{r0, r1, r4, lr}
 23fd78a:	4604      	mov	r4, r0
 23fd78c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd790:	f7ff ff3a 	bl	23fd608 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd794:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd798:	4620      	mov	r0, r4
 23fd79a:	f7ff ff87 	bl	23fd6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd79e:	2301      	movs	r3, #1
}
 23fd7a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd7a2:	7123      	strb	r3, [r4, #4]
}
 23fd7a4:	b002      	add	sp, #8
 23fd7a6:	bd10      	pop	{r4, pc}

023fd7a8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd7a8:	6880      	ldr	r0, [r0, #8]
 23fd7aa:	6803      	ldr	r3, [r0, #0]
 23fd7ac:	68db      	ldr	r3, [r3, #12]
 23fd7ae:	4718      	bx	r3

023fd7b0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd7b0:	4770      	bx	lr

023fd7b2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd7b2:	4608      	mov	r0, r1
 23fd7b4:	b111      	cbz	r1, 23fd7bc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd7b6:	680b      	ldr	r3, [r1, #0]
 23fd7b8:	685b      	ldr	r3, [r3, #4]
 23fd7ba:	4718      	bx	r3
}
 23fd7bc:	4770      	bx	lr

023fd7be <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd7be:	4770      	bx	lr

023fd7c0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd7c0:	4770      	bx	lr

023fd7c2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd7c2:	4770      	bx	lr

023fd7c4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd7c4:	4770      	bx	lr

023fd7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd7c6:	b538      	push	{r3, r4, r5, lr}
 23fd7c8:	4604      	mov	r4, r0
 23fd7ca:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd7cc:	6800      	ldr	r0, [r0, #0]
 23fd7ce:	212e      	movs	r1, #46	; 0x2e
 23fd7d0:	f001 ffd3 	bl	23ff77a <strchrnul>
    size = s - category;
 23fd7d4:	6823      	ldr	r3, [r4, #0]
 23fd7d6:	1ac3      	subs	r3, r0, r3
 23fd7d8:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd7da:	b123      	cbz	r3, 23fd7e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd7dc:	7803      	ldrb	r3, [r0, #0]
 23fd7de:	b103      	cbz	r3, 23fd7e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd7e0:	3001      	adds	r0, #1
 23fd7e2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd7e4:	6020      	str	r0, [r4, #0]
}
 23fd7e6:	4618      	mov	r0, r3
 23fd7e8:	bd38      	pop	{r3, r4, r5, pc}

023fd7ea <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd7ea:	b510      	push	{r4, lr}
 23fd7ec:	4604      	mov	r4, r0
 23fd7ee:	210c      	movs	r1, #12
 23fd7f0:	f7fd fc45 	bl	23fb07e <_ZdlPvj>
 23fd7f4:	4620      	mov	r0, r4
 23fd7f6:	bd10      	pop	{r4, pc}

023fd7f8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd7f8:	b510      	push	{r4, lr}
 23fd7fa:	4604      	mov	r4, r0
 23fd7fc:	2104      	movs	r1, #4
 23fd7fe:	f7fd fc3e 	bl	23fb07e <_ZdlPvj>
 23fd802:	4620      	mov	r0, r4
 23fd804:	bd10      	pop	{r4, pc}

023fd806 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd806:	b510      	push	{r4, lr}
 23fd808:	4604      	mov	r4, r0
 23fd80a:	2104      	movs	r1, #4
 23fd80c:	f7fd fc37 	bl	23fb07e <_ZdlPvj>
 23fd810:	4620      	mov	r0, r4
 23fd812:	bd10      	pop	{r4, pc}

023fd814 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd814:	f7fe bc84 	b.w	23fc120 <os_mutex_recursive_lock>

023fd818 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd818:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd81a:	f7fd fbfd 	bl	23fb018 <strcmp>
}
 23fd81e:	fab0 f080 	clz	r0, r0
 23fd822:	0940      	lsrs	r0, r0, #5
 23fd824:	bd08      	pop	{r3, pc}

023fd826 <__tcf_1>:
 23fd826:	4770      	bx	lr

023fd828 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd828:	b510      	push	{r4, lr}
 23fd82a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd82c:	f001 fa0c 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fd830:	4284      	cmp	r4, r0
 23fd832:	d105      	bne.n	23fd840 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd834:	f001 fa08 	bl	23fec48 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd83c:	f001 b9f6 	b.w	23fec2c <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd840:	f001 fc1e 	bl	23ff080 <_Z22__fetch_global_Serial1v>
 23fd844:	4284      	cmp	r4, r0
 23fd846:	d105      	bne.n	23fd854 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd848:	f001 fc1a 	bl	23ff080 <_Z22__fetch_global_Serial1v>
}
 23fd84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd850:	f001 b98f 	b.w	23feb72 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd854:	b12c      	cbz	r4, 23fd862 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd856:	6823      	ldr	r3, [r4, #0]
 23fd858:	4620      	mov	r0, r4
}
 23fd85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd85e:	685b      	ldr	r3, [r3, #4]
 23fd860:	4718      	bx	r3
 23fd862:	bd10      	pop	{r4, pc}

023fd864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd864:	680b      	ldr	r3, [r1, #0]
 23fd866:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd868:	684b      	ldr	r3, [r1, #4]
 23fd86a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd86c:	b113      	cbz	r3, 23fd874 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd86e:	685a      	ldr	r2, [r3, #4]
 23fd870:	3201      	adds	r2, #1
 23fd872:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd874:	4770      	bx	lr

023fd876 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd876:	b513      	push	{r0, r1, r4, lr}
 23fd878:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd87a:	4608      	mov	r0, r1
 23fd87c:	9101      	str	r1, [sp, #4]
 23fd87e:	f7fd fbd5 	bl	23fb02c <strlen>
 23fd882:	4602      	mov	r2, r0
 23fd884:	4620      	mov	r0, r4
 23fd886:	9901      	ldr	r1, [sp, #4]
}
 23fd888:	b002      	add	sp, #8
 23fd88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd88e:	f7ff bf7b 	b.w	23fd788 <_ZN5spark10JSONWriter5valueEPKcj>

023fd892 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd892:	b513      	push	{r0, r1, r4, lr}
 23fd894:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd896:	4608      	mov	r0, r1
 23fd898:	9101      	str	r1, [sp, #4]
 23fd89a:	f7fd fbc7 	bl	23fb02c <strlen>
 23fd89e:	4602      	mov	r2, r0
 23fd8a0:	4620      	mov	r0, r4
 23fd8a2:	6823      	ldr	r3, [r4, #0]
 23fd8a4:	9901      	ldr	r1, [sp, #4]
 23fd8a6:	68db      	ldr	r3, [r3, #12]
}
 23fd8a8:	b002      	add	sp, #8
 23fd8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd8ae:	4718      	bx	r3

023fd8b0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd8b0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd8b2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd8b4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd8b8:	2201      	movs	r2, #1
 23fd8ba:	68db      	ldr	r3, [r3, #12]
 23fd8bc:	f10d 0107 	add.w	r1, sp, #7
 23fd8c0:	4798      	blx	r3
}
 23fd8c2:	b003      	add	sp, #12
 23fd8c4:	f85d fb04 	ldr.w	pc, [sp], #4

023fd8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd8c8:	680a      	ldr	r2, [r1, #0]
 23fd8ca:	b510      	push	{r4, lr}
 23fd8cc:	6002      	str	r2, [r0, #0]
 23fd8ce:	684a      	ldr	r2, [r1, #4]
 23fd8d0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd8d2:	2200      	movs	r2, #0
 23fd8d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd8d8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd8da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd8dc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd8de:	6084      	str	r4, [r0, #8]
 23fd8e0:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd8e2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd8e4:	60c4      	str	r4, [r0, #12]
 23fd8e6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd8e8:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd8ea:	6104      	str	r4, [r0, #16]
 23fd8ec:	bd10      	pop	{r4, pc}
	...

023fd8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd8f4:	f04f 0a14 	mov.w	sl, #20
 23fd8f8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd8fc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd8fe:	4645      	mov	r5, r8
 23fd900:	fb0a f404 	mul.w	r4, sl, r4
 23fd904:	9300      	str	r3, [sp, #0]
 23fd906:	4b17      	ldr	r3, [pc, #92]	; (23fd964 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd908:	10a4      	asrs	r4, r4, #2
 23fd90a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd90c:	2c00      	cmp	r4, #0
 23fd90e:	dd21      	ble.n	23fd954 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd910:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd912:	fb0a f006 	mul.w	r0, sl, r6
 23fd916:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd91a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd91e:	463a      	mov	r2, r7
 23fd920:	455f      	cmp	r7, fp
 23fd922:	bf28      	it	cs
 23fd924:	465a      	movcs	r2, fp
 23fd926:	5828      	ldr	r0, [r5, r0]
 23fd928:	9101      	str	r1, [sp, #4]
 23fd92a:	f001 ff56 	bl	23ff7da <strncmp>
                if (cmp == 0) {
 23fd92e:	2800      	cmp	r0, #0
 23fd930:	f04f 0301 	mov.w	r3, #1
 23fd934:	9901      	ldr	r1, [sp, #4]
 23fd936:	d10b      	bne.n	23fd950 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd938:	455f      	cmp	r7, fp
 23fd93a:	d103      	bne.n	23fd944 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd93c:	9a00      	ldr	r2, [sp, #0]
 23fd93e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd940:	4634      	mov	r4, r6
 23fd942:	e7e3      	b.n	23fd90c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd944:	d9fc      	bls.n	23fd940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd946:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd948:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd94c:	3e01      	subs	r6, #1
 23fd94e:	e7f7      	b.n	23fd940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd950:	dbf9      	blt.n	23fd946 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd952:	e7f5      	b.n	23fd940 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd954:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd958:	4802      	ldr	r0, [pc, #8]	; (23fd964 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd95a:	10ad      	asrs	r5, r5, #2
 23fd95c:	4368      	muls	r0, r5
 23fd95e:	b003      	add	sp, #12
 23fd960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd964:	cccccccd 	.word	0xcccccccd

023fd968 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd96a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd96c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd96e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd970:	b303      	cbz	r3, 23fd9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd972:	b1f9      	cbz	r1, 23fd9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd974:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd976:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd97a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd97c:	a903      	add	r1, sp, #12
 23fd97e:	a801      	add	r0, sp, #4
 23fd980:	f7ff ff21 	bl	23fd7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd984:	4601      	mov	r1, r0
 23fd986:	b1a8      	cbz	r0, 23fd9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd988:	f10d 030b 	add.w	r3, sp, #11
 23fd98c:	4620      	mov	r0, r4
 23fd98e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd990:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd994:	f7ff ffac 	bl	23fd8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd998:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd99c:	b153      	cbz	r3, 23fd9b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd99e:	6823      	ldr	r3, [r4, #0]
 23fd9a0:	2414      	movs	r4, #20
 23fd9a2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd9a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd9aa:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd9ac:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd9ae:	bfa8      	it	ge
 23fd9b0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd9b2:	e7e3      	b.n	23fd97c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd9b4:	4628      	mov	r0, r5
 23fd9b6:	b004      	add	sp, #16
 23fd9b8:	bd70      	pop	{r4, r5, r6, pc}

023fd9ba <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd9ba:	b40e      	push	{r1, r2, r3}
 23fd9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd9be:	b08c      	sub	sp, #48	; 0x30
 23fd9c0:	af00      	add	r7, sp, #0
 23fd9c2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd9c6:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd9ca:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9cc:	462b      	mov	r3, r5
 23fd9ce:	2120      	movs	r1, #32
 23fd9d0:	f107 0010 	add.w	r0, r7, #16
 23fd9d4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd9d6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9d8:	f7ff f810 	bl	23fc9fc <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd9dc:	281f      	cmp	r0, #31
 23fd9de:	687a      	ldr	r2, [r7, #4]
 23fd9e0:	d91a      	bls.n	23fda18 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd9e2:	f100 0308 	add.w	r3, r0, #8
 23fd9e6:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd9ea:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd9ec:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9f0:	1c41      	adds	r1, r0, #1
 23fd9f2:	462b      	mov	r3, r5
 23fd9f4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd9f6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9f8:	f7ff f800 	bl	23fc9fc <vsnprintf>
        if (n > 0) {
 23fd9fc:	1e02      	subs	r2, r0, #0
 23fd9fe:	dd04      	ble.n	23fda0a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fda00:	6823      	ldr	r3, [r4, #0]
 23fda02:	4669      	mov	r1, sp
 23fda04:	4620      	mov	r0, r4
 23fda06:	68db      	ldr	r3, [r3, #12]
 23fda08:	4798      	blx	r3
 23fda0a:	46b5      	mov	sp, r6
}
 23fda0c:	3730      	adds	r7, #48	; 0x30
 23fda0e:	46bd      	mov	sp, r7
 23fda10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fda14:	b003      	add	sp, #12
 23fda16:	4770      	bx	lr
    } else if (n > 0) {
 23fda18:	2800      	cmp	r0, #0
 23fda1a:	d0f7      	beq.n	23fda0c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fda1c:	6823      	ldr	r3, [r4, #0]
 23fda1e:	4602      	mov	r2, r0
 23fda20:	68db      	ldr	r3, [r3, #12]
 23fda22:	4620      	mov	r0, r4
 23fda24:	f107 0110 	add.w	r1, r7, #16
 23fda28:	4798      	blx	r3
}
 23fda2a:	e7ef      	b.n	23fda0c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fda2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fda2c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fda2e:	4c08      	ldr	r4, [pc, #32]	; (23fda50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fda30:	e8d4 3f8f 	ldab	r3, [r4]
 23fda34:	07db      	lsls	r3, r3, #31
 23fda36:	d409      	bmi.n	23fda4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fda38:	4620      	mov	r0, r4
 23fda3a:	f7fd fb2f 	bl	23fb09c <__cxa_guard_acquire>
 23fda3e:	b128      	cbz	r0, 23fda4c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fda40:	4620      	mov	r0, r4
 23fda42:	f7fd fb30 	bl	23fb0a6 <__cxa_guard_release>
 23fda46:	4803      	ldr	r0, [pc, #12]	; (23fda54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fda48:	f001 fe1a 	bl	23ff680 <atexit>
}
 23fda4c:	4802      	ldr	r0, [pc, #8]	; (23fda58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fda4e:	bd10      	pop	{r4, pc}
 23fda50:	1007ae64 	.word	0x1007ae64
 23fda54:	023fd7bf 	.word	0x023fd7bf
 23fda58:	1007a91c 	.word	0x1007a91c

023fda5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fda5c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fda5e:	4c08      	ldr	r4, [pc, #32]	; (23fda80 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fda60:	e8d4 3f8f 	ldab	r3, [r4]
 23fda64:	07db      	lsls	r3, r3, #31
 23fda66:	d409      	bmi.n	23fda7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fda68:	4620      	mov	r0, r4
 23fda6a:	f7fd fb17 	bl	23fb09c <__cxa_guard_acquire>
 23fda6e:	b128      	cbz	r0, 23fda7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fda70:	4620      	mov	r0, r4
 23fda72:	f7fd fb18 	bl	23fb0a6 <__cxa_guard_release>
 23fda76:	4803      	ldr	r0, [pc, #12]	; (23fda84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fda78:	f001 fe02 	bl	23ff680 <atexit>
    return &factory;
}
 23fda7c:	4802      	ldr	r0, [pc, #8]	; (23fda88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fda7e:	bd10      	pop	{r4, pc}
 23fda80:	1007ae68 	.word	0x1007ae68
 23fda84:	023fd827 	.word	0x023fd827
 23fda88:	1007a920 	.word	0x1007a920

023fda8c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fda8c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fda8e:	2500      	movs	r5, #0
 23fda90:	4604      	mov	r4, r0
 23fda92:	e9c0 5500 	strd	r5, r5, [r0]
 23fda96:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fda9a:	6085      	str	r5, [r0, #8]
 23fda9c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fda9e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fdaa2:	f7fe fb21 	bl	23fc0e8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fdaa6:	f7ff ffc1 	bl	23fda2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fdaaa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdaac:	f7ff ffd6 	bl	23fda5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fdab0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdab2:	6220      	str	r0, [r4, #32]
}
 23fdab4:	4620      	mov	r0, r4
 23fdab6:	bd38      	pop	{r3, r4, r5, pc}

023fdab8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fdab8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fdaba:	4c0a      	ldr	r4, [pc, #40]	; (23fdae4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fdabc:	e8d4 3f8f 	ldab	r3, [r4]
 23fdac0:	07db      	lsls	r3, r3, #31
 23fdac2:	d40c      	bmi.n	23fdade <_ZN5spark10LogManager8instanceEv+0x26>
 23fdac4:	4620      	mov	r0, r4
 23fdac6:	f7fd fae9 	bl	23fb09c <__cxa_guard_acquire>
 23fdaca:	b140      	cbz	r0, 23fdade <_ZN5spark10LogManager8instanceEv+0x26>
 23fdacc:	4806      	ldr	r0, [pc, #24]	; (23fdae8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdace:	f7ff ffdd 	bl	23fda8c <_ZN5spark10LogManagerC1Ev>
 23fdad2:	4620      	mov	r0, r4
 23fdad4:	f7fd fae7 	bl	23fb0a6 <__cxa_guard_release>
 23fdad8:	4804      	ldr	r0, [pc, #16]	; (23fdaec <_ZN5spark10LogManager8instanceEv+0x34>)
 23fdada:	f001 fdd1 	bl	23ff680 <atexit>
    return &mgr;
}
 23fdade:	4802      	ldr	r0, [pc, #8]	; (23fdae8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdae0:	bd10      	pop	{r4, pc}
 23fdae2:	bf00      	nop
 23fdae4:	1007ae60 	.word	0x1007ae60
 23fdae8:	1007ae70 	.word	0x1007ae70
 23fdaec:	023fe009 	.word	0x023fe009

023fdaf0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fdaf0:	2300      	movs	r3, #0
 23fdaf2:	4a02      	ldr	r2, [pc, #8]	; (23fdafc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fdaf4:	4902      	ldr	r1, [pc, #8]	; (23fdb00 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fdaf6:	4803      	ldr	r0, [pc, #12]	; (23fdb04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fdaf8:	f7fe bddc 	b.w	23fc6b4 <log_set_callbacks>
 23fdafc:	023fddf1 	.word	0x023fddf1
 23fdb00:	023fdd7d 	.word	0x023fdd7d
 23fdb04:	023fdcfd 	.word	0x023fdcfd

023fdb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fdb08:	2300      	movs	r3, #0
 23fdb0a:	461a      	mov	r2, r3
 23fdb0c:	4619      	mov	r1, r3
 23fdb0e:	4618      	mov	r0, r3
 23fdb10:	f7fe bdd0 	b.w	23fc6b4 <log_set_callbacks>

023fdb14 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fdb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdb16:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fdb18:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fdb1a:	4668      	mov	r0, sp
 23fdb1c:	f7ff fea2 	bl	23fd864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdb20:	466a      	mov	r2, sp
 23fdb22:	4629      	mov	r1, r5
 23fdb24:	4620      	mov	r0, r4
 23fdb26:	f7ff fd3b 	bl	23fd5a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fdb2a:	a801      	add	r0, sp, #4
 23fdb2c:	f7ff f800 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdb30:	4620      	mov	r0, r4
 23fdb32:	b003      	add	sp, #12
 23fdb34:	bd30      	pop	{r4, r5, pc}

023fdb36 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fdb36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdb38:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fdb3a:	68cd      	ldr	r5, [r1, #12]
 23fdb3c:	4668      	mov	r0, sp
 23fdb3e:	f7ff fe91 	bl	23fd864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdb42:	466a      	mov	r2, sp
 23fdb44:	4629      	mov	r1, r5
 23fdb46:	4620      	mov	r0, r4
 23fdb48:	f7ff fd06 	bl	23fd558 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdb4c:	a801      	add	r0, sp, #4
 23fdb4e:	f7fe ffef 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdb52:	4620      	mov	r0, r4
 23fdb54:	b003      	add	sp, #12
 23fdb56:	bd30      	pop	{r4, r5, pc}

023fdb58 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fdb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdb5a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fdb5c:	690d      	ldr	r5, [r1, #16]
 23fdb5e:	4668      	mov	r0, sp
 23fdb60:	f7ff fe80 	bl	23fd864 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdb64:	466a      	mov	r2, sp
 23fdb66:	4629      	mov	r1, r5
 23fdb68:	4620      	mov	r0, r4
 23fdb6a:	f7ff fc9d 	bl	23fd4a8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdb6e:	a801      	add	r0, sp, #4
 23fdb70:	f7fe ffde 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdb74:	4620      	mov	r0, r4
 23fdb76:	b003      	add	sp, #12
 23fdb78:	bd30      	pop	{r4, r5, pc}
	...

023fdb7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fdb7c:	b570      	push	{r4, r5, r6, lr}
 23fdb7e:	b08a      	sub	sp, #40	; 0x28
 23fdb80:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fdb82:	4601      	mov	r1, r0
 23fdb84:	a804      	add	r0, sp, #16
 23fdb86:	f7ff ffc5 	bl	23fdb14 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fdb8a:	4e14      	ldr	r6, [pc, #80]	; (23fdbdc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fdb8c:	a804      	add	r0, sp, #16
 23fdb8e:	f7ff fd1f 	bl	23fd5d0 <_ZN5spark18JSONObjectIterator4nextEv>
 23fdb92:	b1e8      	cbz	r0, 23fdbd0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fdb94:	4668      	mov	r0, sp
 23fdb96:	a904      	add	r1, sp, #16
 23fdb98:	f7ff ffcd 	bl	23fdb36 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fdb9c:	4631      	mov	r1, r6
 23fdb9e:	9802      	ldr	r0, [sp, #8]
 23fdba0:	f7ff fe3a 	bl	23fd818 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fdba4:	4604      	mov	r4, r0
 23fdba6:	b110      	cbz	r0, 23fdbae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fdba8:	1e2c      	subs	r4, r5, #0
 23fdbaa:	bf18      	it	ne
 23fdbac:	2401      	movne	r4, #1
 23fdbae:	a801      	add	r0, sp, #4
 23fdbb0:	f7fe ffbe 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdbb4:	2c00      	cmp	r4, #0
 23fdbb6:	d0e9      	beq.n	23fdb8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fdbb8:	4668      	mov	r0, sp
 23fdbba:	a904      	add	r1, sp, #16
 23fdbbc:	f7ff ffcc 	bl	23fdb58 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fdbc0:	4668      	mov	r0, sp
 23fdbc2:	f7ff fca7 	bl	23fd514 <_ZNK5spark9JSONValue5toIntEv>
 23fdbc6:	6028      	str	r0, [r5, #0]
 23fdbc8:	a801      	add	r0, sp, #4
 23fdbca:	f7fe ffb1 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdbce:	e7dd      	b.n	23fdb8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fdbd0:	a805      	add	r0, sp, #20
 23fdbd2:	f7fe ffad 	bl	23fcb30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdbd6:	b00a      	add	sp, #40	; 0x28
 23fdbd8:	bd70      	pop	{r4, r5, r6, pc}
 23fdbda:	bf00      	nop
 23fdbdc:	023ffc7c 	.word	0x023ffc7c

023fdbe0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fdbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdbe2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fdbe4:	4913      	ldr	r1, [pc, #76]	; (23fdc34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fdbe6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fdbe8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fdbea:	f7fd fa15 	bl	23fb018 <strcmp>
 23fdbee:	b950      	cbnz	r0, 23fdc06 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fdbf0:	f001 f82a 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fdbf4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fdbf8:	f001 f814 	bl	23fec24 <_ZN9USBSerial5beginEl>
}
 23fdbfc:	b003      	add	sp, #12
 23fdbfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fdc02:	f001 b821 	b.w	23fec48 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fdc06:	4620      	mov	r0, r4
 23fdc08:	490b      	ldr	r1, [pc, #44]	; (23fdc38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fdc0a:	f7fd fa05 	bl	23fb018 <strcmp>
 23fdc0e:	b978      	cbnz	r0, 23fdc30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fdc10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fdc14:	a901      	add	r1, sp, #4
 23fdc16:	4628      	mov	r0, r5
        int baud = 9600;
 23fdc18:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fdc1a:	f7ff ffaf 	bl	23fdb7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fdc1e:	f001 fa2f 	bl	23ff080 <_Z22__fetch_global_Serial1v>
 23fdc22:	9901      	ldr	r1, [sp, #4]
 23fdc24:	f000 ffa2 	bl	23feb6c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fdc28:	f001 fa2a 	bl	23ff080 <_Z22__fetch_global_Serial1v>
}
 23fdc2c:	b003      	add	sp, #12
 23fdc2e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fdc30:	2000      	movs	r0, #0
 23fdc32:	e7fb      	b.n	23fdc2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fdc34:	023ffc81 	.word	0x023ffc81
 23fdc38:	023ffc88 	.word	0x023ffc88

023fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdc3c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fdc3e:	2614      	movs	r6, #20
 23fdc40:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdc44:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdc46:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdc4a:	42ae      	cmp	r6, r5
 23fdc4c:	d005      	beq.n	23fdc5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fdc4e:	f105 0008 	add.w	r0, r5, #8
 23fdc52:	f7ff fff3 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdc56:	3514      	adds	r5, #20
 23fdc58:	e7f7      	b.n	23fdc4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fdc5a:	6820      	ldr	r0, [r4, #0]
 23fdc5c:	f7fe feb2 	bl	23fc9c4 <free>
}
 23fdc60:	4620      	mov	r0, r4
 23fdc62:	bd70      	pop	{r4, r5, r6, pc}

023fdc64 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fdc64:	b510      	push	{r4, lr}
 23fdc66:	4604      	mov	r4, r0
 23fdc68:	300c      	adds	r0, #12
 23fdc6a:	f7ff ffe7 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdc6e:	4620      	mov	r0, r4
 23fdc70:	f7fe ff4c 	bl	23fcb0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdc74:	4620      	mov	r0, r4
 23fdc76:	bd10      	pop	{r4, pc}

023fdc78 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fdc78:	b510      	push	{r4, lr}
 23fdc7a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fdc7c:	4b03      	ldr	r3, [pc, #12]	; (23fdc8c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fdc7e:	f840 3b04 	str.w	r3, [r0], #4
 23fdc82:	f7ff ffef 	bl	23fdc64 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fdc86:	4620      	mov	r0, r4
 23fdc88:	bd10      	pop	{r4, pc}
 23fdc8a:	bf00      	nop
 23fdc8c:	023ffb98 	.word	0x023ffb98

023fdc90 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fdc90:	b510      	push	{r4, lr}
 23fdc92:	4604      	mov	r4, r0
 23fdc94:	f7ff fff0 	bl	23fdc78 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdc98:	4620      	mov	r0, r4
 23fdc9a:	2124      	movs	r1, #36	; 0x24
 23fdc9c:	f7fd f9ef 	bl	23fb07e <_ZdlPvj>
 23fdca0:	4620      	mov	r0, r4
 23fdca2:	bd10      	pop	{r4, pc}

023fdca4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fdca4:	b510      	push	{r4, lr}
 23fdca6:	4604      	mov	r4, r0
 23fdca8:	4b02      	ldr	r3, [pc, #8]	; (23fdcb4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fdcaa:	6003      	str	r3, [r0, #0]
 23fdcac:	f7ff ffe4 	bl	23fdc78 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdcb0:	4620      	mov	r0, r4
 23fdcb2:	bd10      	pop	{r4, pc}
 23fdcb4:	023ffd20 	.word	0x023ffd20

023fdcb8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fdcb8:	b510      	push	{r4, lr}
 23fdcba:	4604      	mov	r4, r0
 23fdcbc:	f7ff fff2 	bl	23fdca4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fdcc0:	4620      	mov	r0, r4
 23fdcc2:	2124      	movs	r1, #36	; 0x24
 23fdcc4:	f7fd f9db 	bl	23fb07e <_ZdlPvj>
 23fdcc8:	4620      	mov	r0, r4
 23fdcca:	bd10      	pop	{r4, pc}

023fdccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fdccc:	2200      	movs	r2, #0
 23fdcce:	e9c0 2200 	strd	r2, r2, [r0]
 23fdcd2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdcd4:	b510      	push	{r4, lr}
 23fdcd6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdcd8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdcda:	6004      	str	r4, [r0, #0]
 23fdcdc:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdcde:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdce0:	6044      	str	r4, [r0, #4]
 23fdce2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdce4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdce6:	6084      	str	r4, [r0, #8]
}
 23fdce8:	bd10      	pop	{r4, pc}

023fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdcea:	b510      	push	{r4, lr}
 23fdcec:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdcee:	6803      	ldr	r3, [r0, #0]
 23fdcf0:	6818      	ldr	r0, [r3, #0]
 23fdcf2:	f7fe fa23 	bl	23fc13c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdcf6:	4620      	mov	r0, r4
 23fdcf8:	bd10      	pop	{r4, pc}
	...

023fdcfc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdd00:	b087      	sub	sp, #28
 23fdd02:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdd04:	4b1c      	ldr	r3, [pc, #112]	; (23fdd78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdd06:	4680      	mov	r8, r0
 23fdd08:	685b      	ldr	r3, [r3, #4]
 23fdd0a:	4689      	mov	r9, r1
 23fdd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdd10:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdd12:	b96b      	cbnz	r3, 23fdd30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdd14:	f7ff fed0 	bl	23fdab8 <_ZN5spark10LogManager8instanceEv>
 23fdd18:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdd1a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdd1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd20:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdd22:	f7ff fd77 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdd26:	7b23      	ldrb	r3, [r4, #12]
 23fdd28:	b12b      	cbz	r3, 23fdd36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdd2a:	a805      	add	r0, sp, #20
 23fdd2c:	f7ff ffdd 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdd30:	b007      	add	sp, #28
 23fdd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdd36:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdd38:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdd3c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdd3e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdd42:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdd46:	45aa      	cmp	sl, r5
 23fdd48:	d012      	beq.n	23fdd70 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdd4a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdd4e:	4631      	mov	r1, r6
 23fdd50:	1d38      	adds	r0, r7, #4
 23fdd52:	f7ff fe09 	bl	23fd968 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdd56:	4581      	cmp	r9, r0
 23fdd58:	d3f5      	bcc.n	23fdd46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdd5a:	9a03      	ldr	r2, [sp, #12]
 23fdd5c:	683b      	ldr	r3, [r7, #0]
 23fdd5e:	9200      	str	r2, [sp, #0]
 23fdd60:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdd64:	464a      	mov	r2, r9
 23fdd66:	4633      	mov	r3, r6
 23fdd68:	4641      	mov	r1, r8
 23fdd6a:	4638      	mov	r0, r7
 23fdd6c:	47d8      	blx	fp
 23fdd6e:	e7ea      	b.n	23fdd46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdd70:	2300      	movs	r3, #0
 23fdd72:	7323      	strb	r3, [r4, #12]
 23fdd74:	e7d9      	b.n	23fdd2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdd76:	bf00      	nop
 23fdd78:	e000ed00 	.word	0xe000ed00

023fdd7c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdd80:	469b      	mov	fp, r3
 23fdd82:	4b1a      	ldr	r3, [pc, #104]	; (23fddec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdd84:	4680      	mov	r8, r0
 23fdd86:	685b      	ldr	r3, [r3, #4]
 23fdd88:	4689      	mov	r9, r1
 23fdd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdd8e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdd90:	b96b      	cbnz	r3, 23fddae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdd92:	f7ff fe91 	bl	23fdab8 <_ZN5spark10LogManager8instanceEv>
 23fdd96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdd98:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdd9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd9e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdda0:	f7ff fd38 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdda4:	7b23      	ldrb	r3, [r4, #12]
 23fdda6:	b12b      	cbz	r3, 23fddb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdda8:	a801      	add	r0, sp, #4
 23fddaa:	f7ff ff9e 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fddae:	b003      	add	sp, #12
 23fddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fddb4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fddb6:	b2f6      	uxtb	r6, r6
 23fddb8:	7323      	strb	r3, [r4, #12]
 23fddba:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fddbe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fddc2:	4555      	cmp	r5, sl
 23fddc4:	d00e      	beq.n	23fdde4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fddc6:	f855 7b04 	ldr.w	r7, [r5], #4
 23fddca:	4659      	mov	r1, fp
 23fddcc:	1d38      	adds	r0, r7, #4
 23fddce:	f7ff fdcb 	bl	23fd968 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fddd2:	4286      	cmp	r6, r0
 23fddd4:	d3f5      	bcc.n	23fddc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fddd6:	683b      	ldr	r3, [r7, #0]
 23fddd8:	464a      	mov	r2, r9
 23fddda:	4641      	mov	r1, r8
 23fdddc:	4638      	mov	r0, r7
 23fddde:	68db      	ldr	r3, [r3, #12]
 23fdde0:	4798      	blx	r3
 23fdde2:	e7ee      	b.n	23fddc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdde4:	2300      	movs	r3, #0
 23fdde6:	7323      	strb	r3, [r4, #12]
 23fdde8:	e7de      	b.n	23fdda8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fddea:	bf00      	nop
 23fddec:	e000ed00 	.word	0xe000ed00

023fddf0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fddf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fddf4:	4b16      	ldr	r3, [pc, #88]	; (23fde50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fddf6:	4605      	mov	r5, r0
 23fddf8:	685b      	ldr	r3, [r3, #4]
 23fddfa:	460f      	mov	r7, r1
 23fddfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fde00:	bb1b      	cbnz	r3, 23fde4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fde02:	f7ff fe59 	bl	23fdab8 <_ZN5spark10LogManager8instanceEv>
 23fde06:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fde08:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fde0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fde0e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fde10:	f7ff fd00 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fde14:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fde18:	2446      	movs	r4, #70	; 0x46
 23fde1a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fde1e:	45b0      	cmp	r8, r6
 23fde20:	d109      	bne.n	23fde36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fde22:	a801      	add	r0, sp, #4
 23fde24:	f7ff ff61 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fde28:	42a5      	cmp	r5, r4
 23fde2a:	bfb4      	ite	lt
 23fde2c:	2000      	movlt	r0, #0
 23fde2e:	2001      	movge	r0, #1
}
 23fde30:	b002      	add	sp, #8
 23fde32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fde36:	f856 0b04 	ldr.w	r0, [r6], #4
 23fde3a:	4639      	mov	r1, r7
 23fde3c:	3004      	adds	r0, #4
 23fde3e:	f7ff fd93 	bl	23fd968 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fde42:	4284      	cmp	r4, r0
 23fde44:	bfa8      	it	ge
 23fde46:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fde48:	e7e9      	b.n	23fde1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fde4a:	2000      	movs	r0, #0
 23fde4c:	e7f0      	b.n	23fde30 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fde4e:	bf00      	nop
 23fde50:	e000ed00 	.word	0xe000ed00

023fde54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fde54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde56:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fde5a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fde5c:	4604      	mov	r4, r0
 23fde5e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde60:	db0d      	blt.n	23fde7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fde62:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fde64:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fde66:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fde68:	dd04      	ble.n	23fde74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fde6a:	00b9      	lsls	r1, r7, #2
 23fde6c:	f7fe fdb8 	bl	23fc9e0 <realloc>
            if (!d) {
 23fde70:	b918      	cbnz	r0, 23fde7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fde72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fde74:	f7fe fda6 	bl	23fc9c4 <free>
        T* d = nullptr;
 23fde78:	2000      	movs	r0, #0
        data_ = d;
 23fde7a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fde7c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fde7e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fde80:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fde82:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fde86:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde88:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fde8c:	1d08      	adds	r0, r1, #4
 23fde8e:	f001 fc16 	bl	23ff6be <memmove>
    new(p) T(std::move(value));
 23fde92:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fde96:	6863      	ldr	r3, [r4, #4]
    return true;
 23fde98:	2001      	movs	r0, #1
    ++size_;
 23fde9a:	3301      	adds	r3, #1
 23fde9c:	6063      	str	r3, [r4, #4]
    return true;
 23fde9e:	e7e8      	b.n	23fde72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdea0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdea2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdea4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdea8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdeaa:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdeac:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdeae:	f7ff fcb1 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdeb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdeb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdeba:	4293      	cmp	r3, r2
 23fdebc:	4619      	mov	r1, r3
 23fdebe:	d00a      	beq.n	23fded6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdec0:	6809      	ldr	r1, [r1, #0]
 23fdec2:	3304      	adds	r3, #4
 23fdec4:	42a9      	cmp	r1, r5
 23fdec6:	d1f8      	bne.n	23fdeba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdec8:	a801      	add	r0, sp, #4
 23fdeca:	f7ff ff0e 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdece:	2500      	movs	r5, #0
}
 23fded0:	4628      	mov	r0, r5
 23fded2:	b003      	add	sp, #12
 23fded4:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fded6:	4629      	mov	r1, r5
 23fded8:	4620      	mov	r0, r4
 23fdeda:	f7ff ffbb 	bl	23fde54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdede:	4605      	mov	r5, r0
 23fdee0:	2800      	cmp	r0, #0
 23fdee2:	d0f1      	beq.n	23fdec8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdee4:	6863      	ldr	r3, [r4, #4]
 23fdee6:	2b01      	cmp	r3, #1
 23fdee8:	d101      	bne.n	23fdeee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdeea:	f7ff fe01 	bl	23fdaf0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdeee:	a801      	add	r0, sp, #4
 23fdef0:	f7ff fefb 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdef4:	e7ec      	b.n	23fded0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdef6:	460b      	mov	r3, r1
 23fdef8:	b570      	push	{r4, r5, r6, lr}
 23fdefa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdefc:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdf00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdf04:	4282      	cmp	r2, r0
 23fdf06:	d00f      	beq.n	23fdf28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdf08:	4601      	mov	r1, r0
            if (*p == value) {
 23fdf0a:	681d      	ldr	r5, [r3, #0]
 23fdf0c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdf10:	42ae      	cmp	r6, r5
 23fdf12:	d107      	bne.n	23fdf24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdf14:	1a52      	subs	r2, r2, r1
 23fdf16:	f001 fbd2 	bl	23ff6be <memmove>
    return true;
 23fdf1a:	2001      	movs	r0, #1
    --size_;
 23fdf1c:	6863      	ldr	r3, [r4, #4]
 23fdf1e:	3b01      	subs	r3, #1
 23fdf20:	6063      	str	r3, [r4, #4]
}
 23fdf22:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdf24:	4608      	mov	r0, r1
 23fdf26:	e7ed      	b.n	23fdf04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdf28:	2000      	movs	r0, #0
 23fdf2a:	e7fa      	b.n	23fdf22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdf2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdf2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdf2e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdf30:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdf34:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdf36:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdf38:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdf3a:	f7ff fc6b 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdf3e:	4620      	mov	r0, r4
 23fdf40:	a901      	add	r1, sp, #4
 23fdf42:	f7ff ffd8 	bl	23fdef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdf46:	b118      	cbz	r0, 23fdf50 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdf48:	6863      	ldr	r3, [r4, #4]
 23fdf4a:	b90b      	cbnz	r3, 23fdf50 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdf4c:	f7ff fddc 	bl	23fdb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdf50:	a803      	add	r0, sp, #12
 23fdf52:	f7ff feca 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdf56:	b004      	add	sp, #16
 23fdf58:	bd10      	pop	{r4, pc}

023fdf5a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdf5a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdf5c:	b570      	push	{r4, r5, r6, lr}
 23fdf5e:	4604      	mov	r4, r0
 23fdf60:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdf64:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdf68:	42ae      	cmp	r6, r5
 23fdf6a:	d015      	beq.n	23fdf98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdf6c:	4620      	mov	r0, r4
 23fdf6e:	f105 0110 	add.w	r1, r5, #16
 23fdf72:	f7ff ffc0 	bl	23fdef6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdf76:	6863      	ldr	r3, [r4, #4]
 23fdf78:	b90b      	cbnz	r3, 23fdf7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdf7a:	f7ff fdc5 	bl	23fdb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdf7e:	69e0      	ldr	r0, [r4, #28]
 23fdf80:	6929      	ldr	r1, [r5, #16]
 23fdf82:	6803      	ldr	r3, [r0, #0]
 23fdf84:	68db      	ldr	r3, [r3, #12]
 23fdf86:	4798      	blx	r3
        if (h.stream) {
 23fdf88:	6969      	ldr	r1, [r5, #20]
 23fdf8a:	b119      	cbz	r1, 23fdf94 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdf8c:	6a20      	ldr	r0, [r4, #32]
 23fdf8e:	6803      	ldr	r3, [r0, #0]
 23fdf90:	68db      	ldr	r3, [r3, #12]
 23fdf92:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdf94:	3518      	adds	r5, #24
 23fdf96:	e7e7      	b.n	23fdf68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdf98:	2618      	movs	r6, #24
 23fdf9a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdf9e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdfa2:	42ae      	cmp	r6, r5
 23fdfa4:	d004      	beq.n	23fdfb0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdfa6:	4628      	mov	r0, r5
 23fdfa8:	f000 fcc6 	bl	23fe938 <_ZN6StringD1Ev>
 23fdfac:	3518      	adds	r5, #24
 23fdfae:	e7f8      	b.n	23fdfa2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdfb0:	2300      	movs	r3, #0
 23fdfb2:	6163      	str	r3, [r4, #20]
}
 23fdfb4:	bd70      	pop	{r4, r5, r6, pc}

023fdfb6 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdfb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdfb8:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdfba:	f7ff fda5 	bl	23fdb08 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdfbe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdfc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdfc4:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdfc6:	f7ff fc25 	bl	23fd814 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdfca:	4620      	mov	r0, r4
 23fdfcc:	f7ff ffc5 	bl	23fdf5a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fdfd0:	a801      	add	r0, sp, #4
 23fdfd2:	f7ff fe8a 	bl	23fdcea <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fdfd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fdfd8:	b108      	cbz	r0, 23fdfde <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fdfda:	f7fe f893 	bl	23fc104 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fdfde:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdfe2:	2618      	movs	r6, #24
 23fdfe4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdfe8:	42ae      	cmp	r6, r5
 23fdfea:	d004      	beq.n	23fdff6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fdfec:	4628      	mov	r0, r5
 23fdfee:	f000 fca3 	bl	23fe938 <_ZN6StringD1Ev>
 23fdff2:	3518      	adds	r5, #24
 23fdff4:	e7f8      	b.n	23fdfe8 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fdff6:	6920      	ldr	r0, [r4, #16]
 23fdff8:	f7fe fce4 	bl	23fc9c4 <free>
 23fdffc:	6820      	ldr	r0, [r4, #0]
 23fdffe:	f7fe fce1 	bl	23fc9c4 <free>
}
 23fe002:	4620      	mov	r0, r4
 23fe004:	b002      	add	sp, #8
 23fe006:	bd70      	pop	{r4, r5, r6, pc}

023fe008 <__tcf_2>:
    static LogManager mgr;
 23fe008:	4801      	ldr	r0, [pc, #4]	; (23fe010 <__tcf_2+0x8>)
 23fe00a:	f7ff bfd4 	b.w	23fdfb6 <_ZN5spark10LogManagerD1Ev>
 23fe00e:	bf00      	nop
 23fe010:	1007ae70 	.word	0x1007ae70

023fe014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe014:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe018:	4604      	mov	r4, r0
 23fe01a:	460d      	mov	r5, r1
 23fe01c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe01e:	d915      	bls.n	23fe04c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe020:	4290      	cmp	r0, r2
 23fe022:	d214      	bcs.n	23fe04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe024:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe028:	1a75      	subs	r5, r6, r1
 23fe02a:	f1a1 0714 	sub.w	r7, r1, #20
 23fe02e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe030:	42b7      	cmp	r7, r6
 23fe032:	d01a      	beq.n	23fe06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe034:	b11c      	cbz	r4, 23fe03e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe036:	4631      	mov	r1, r6
 23fe038:	4620      	mov	r0, r4
 23fe03a:	f7ff fc45 	bl	23fd8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe03e:	f106 0008 	add.w	r0, r6, #8
 23fe042:	f7ff fdfb 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe046:	3e14      	subs	r6, #20
 23fe048:	3c14      	subs	r4, #20
 23fe04a:	e7f1      	b.n	23fe030 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe04c:	d00d      	beq.n	23fe06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe04e:	42b5      	cmp	r5, r6
 23fe050:	d00b      	beq.n	23fe06a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe052:	b11c      	cbz	r4, 23fe05c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe054:	4629      	mov	r1, r5
 23fe056:	4620      	mov	r0, r4
 23fe058:	f7ff fc36 	bl	23fd8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe05c:	f105 0008 	add.w	r0, r5, #8
 23fe060:	f7ff fdec 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe064:	3514      	adds	r5, #20
 23fe066:	3414      	adds	r4, #20
 23fe068:	e7f1      	b.n	23fe04e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe06c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe070:	4604      	mov	r4, r0
 23fe072:	460d      	mov	r5, r1
 23fe074:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe076:	d914      	bls.n	23fe0a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe078:	4290      	cmp	r0, r2
 23fe07a:	d213      	bcs.n	23fe0a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe07c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe080:	1a75      	subs	r5, r6, r1
 23fe082:	f1a1 0710 	sub.w	r7, r1, #16
 23fe086:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe088:	42b7      	cmp	r7, r6
 23fe08a:	d018      	beq.n	23fe0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe08c:	b11c      	cbz	r4, 23fe096 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe08e:	4631      	mov	r1, r6
 23fe090:	4620      	mov	r0, r4
 23fe092:	f000 fcce 	bl	23fea32 <_ZN6StringC1EOS_>
                end->~T();
 23fe096:	4630      	mov	r0, r6
 23fe098:	f000 fc4e 	bl	23fe938 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe09c:	3e10      	subs	r6, #16
 23fe09e:	3c10      	subs	r4, #16
 23fe0a0:	e7f2      	b.n	23fe088 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe0a2:	d00c      	beq.n	23fe0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe0a4:	42b5      	cmp	r5, r6
 23fe0a6:	d00a      	beq.n	23fe0be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe0a8:	b11c      	cbz	r4, 23fe0b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe0aa:	4629      	mov	r1, r5
 23fe0ac:	4620      	mov	r0, r4
 23fe0ae:	f000 fcc0 	bl	23fea32 <_ZN6StringC1EOS_>
                p->~T();
 23fe0b2:	4628      	mov	r0, r5
 23fe0b4:	f000 fc40 	bl	23fe938 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe0b8:	3510      	adds	r5, #16
 23fe0ba:	3410      	adds	r4, #16
 23fe0bc:	e7f2      	b.n	23fe0a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe0c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe0c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe0c4:	4605      	mov	r5, r0
        if (n > 0) {
 23fe0c6:	dd11      	ble.n	23fe0ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe0c8:	0130      	lsls	r0, r6, #4
 23fe0ca:	f7fe fc6d 	bl	23fc9a8 <malloc>
            if (!d) {
 23fe0ce:	4604      	mov	r4, r0
 23fe0d0:	b158      	cbz	r0, 23fe0ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe0d2:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe0d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe0da:	f7ff ffc7 	bl	23fe06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe0de:	6828      	ldr	r0, [r5, #0]
 23fe0e0:	f7fe fc70 	bl	23fc9c4 <free>
        return true;
 23fe0e4:	2001      	movs	r0, #1
        data_ = d;
 23fe0e6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe0e8:	60ae      	str	r6, [r5, #8]
    }
 23fe0ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe0ec:	2400      	movs	r4, #0
 23fe0ee:	e7f6      	b.n	23fe0de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe0f4:	4690      	mov	r8, r2
        capacity_(0) {
 23fe0f6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe0f8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe0fa:	b095      	sub	sp, #84	; 0x54
 23fe0fc:	9103      	str	r1, [sp, #12]
    return size_;
 23fe0fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe102:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe104:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe106:	e9c0 3300 	strd	r3, r3, [r0]
 23fe10a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe112:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe116:	7602      	strb	r2, [r0, #24]
 23fe118:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe11a:	dc23      	bgt.n	23fe164 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe11c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe120:	2314      	movs	r3, #20
 23fe122:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe126:	42af      	cmp	r7, r5
 23fe128:	d03b      	beq.n	23fe1a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe12a:	4629      	mov	r1, r5
 23fe12c:	a80b      	add	r0, sp, #44	; 0x2c
 23fe12e:	f000 fc80 	bl	23fea32 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe132:	a90b      	add	r1, sp, #44	; 0x2c
 23fe134:	a80f      	add	r0, sp, #60	; 0x3c
 23fe136:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe138:	f000 fc7b 	bl	23fea32 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe13c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe140:	4299      	cmp	r1, r3
 23fe142:	da1b      	bge.n	23fe17c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe144:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe146:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe148:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe14c:	4631      	mov	r1, r6
 23fe14e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe152:	f106 0010 	add.w	r0, r6, #16
 23fe156:	f7ff ff89 	bl	23fe06c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe15a:	b9ee      	cbnz	r6, 23fe198 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe15e:	3301      	adds	r3, #1
 23fe160:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe162:	e011      	b.n	23fe188 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe164:	a808      	add	r0, sp, #32
 23fe166:	f7ff ffab 	bl	23fe0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe16a:	2800      	cmp	r0, #0
 23fe16c:	d1d6      	bne.n	23fe11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe16e:	a808      	add	r0, sp, #32
 23fe170:	f7fe fccc 	bl	23fcb0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe174:	4620      	mov	r0, r4
 23fe176:	b015      	add	sp, #84	; 0x54
 23fe178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe17c:	3101      	adds	r1, #1
 23fe17e:	a808      	add	r0, sp, #32
 23fe180:	f7ff ff9e 	bl	23fe0c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe184:	2800      	cmp	r0, #0
 23fe186:	d1dd      	bne.n	23fe144 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe188:	a80f      	add	r0, sp, #60	; 0x3c
 23fe18a:	f000 fbd5 	bl	23fe938 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe18e:	a80b      	add	r0, sp, #44	; 0x2c
 23fe190:	f000 fbd2 	bl	23fe938 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe194:	3514      	adds	r5, #20
 23fe196:	e7c6      	b.n	23fe126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe198:	4630      	mov	r0, r6
 23fe19a:	a90f      	add	r1, sp, #60	; 0x3c
 23fe19c:	f000 fc49 	bl	23fea32 <_ZN6StringC1EOS_>
 23fe1a0:	e7dc      	b.n	23fe15c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe1a2:	2600      	movs	r6, #0
 23fe1a4:	f04f 0914 	mov.w	r9, #20
 23fe1a8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe1ac:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe1ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe1b2:	429e      	cmp	r6, r3
 23fe1b4:	da7c      	bge.n	23fe2b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe1b6:	0133      	lsls	r3, r6, #4
 23fe1b8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe1ba:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe1bc:	b90b      	cbnz	r3, 23fe1c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe1be:	3601      	adds	r6, #1
 23fe1c0:	e7f5      	b.n	23fe1ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe1c2:	2300      	movs	r3, #0
 23fe1c4:	9307      	str	r3, [sp, #28]
 23fe1c6:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe1ca:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe1cc:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe1ce:	a907      	add	r1, sp, #28
 23fe1d0:	a806      	add	r0, sp, #24
 23fe1d2:	f7ff faf8 	bl	23fd7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe1d6:	4682      	mov	sl, r0
 23fe1d8:	2800      	cmp	r0, #0
 23fe1da:	d0f0      	beq.n	23fe1be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe1dc:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe1e0:	4601      	mov	r1, r0
            bool found = false;
 23fe1e2:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe1e6:	4628      	mov	r0, r5
 23fe1e8:	9a07      	ldr	r2, [sp, #28]
 23fe1ea:	f10d 0317 	add.w	r3, sp, #23
 23fe1ee:	f7ff fb7f 	bl	23fd8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe1f2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe1f6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe1f8:	2f00      	cmp	r7, #0
 23fe1fa:	d14a      	bne.n	23fe292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe1fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe200:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe204:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe20c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe210:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe214:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe216:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe21a:	4293      	cmp	r3, r2
 23fe21c:	db17      	blt.n	23fe24e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe21e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe222:	f1ba 0f00 	cmp.w	sl, #0
 23fe226:	dd30      	ble.n	23fe28a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe228:	fb09 f00a 	mul.w	r0, r9, sl
 23fe22c:	f7fe fbbc 	bl	23fc9a8 <malloc>
            if (!d) {
 23fe230:	4683      	mov	fp, r0
 23fe232:	b360      	cbz	r0, 23fe28e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe234:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe238:	fb09 1202 	mla	r2, r9, r2, r1
 23fe23c:	f7ff feea 	bl	23fe014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe240:	6828      	ldr	r0, [r5, #0]
 23fe242:	f7fe fbbf 	bl	23fc9c4 <free>
        data_ = d;
 23fe246:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe24a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe24e:	682b      	ldr	r3, [r5, #0]
 23fe250:	9a01      	ldr	r2, [sp, #4]
 23fe252:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe256:	686a      	ldr	r2, [r5, #4]
 23fe258:	4651      	mov	r1, sl
 23fe25a:	fb09 3202 	mla	r2, r9, r2, r3
 23fe25e:	f10a 0014 	add.w	r0, sl, #20
 23fe262:	f7ff fed7 	bl	23fe014 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe266:	f1ba 0f00 	cmp.w	sl, #0
 23fe26a:	d003      	beq.n	23fe274 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe26c:	4650      	mov	r0, sl
 23fe26e:	a90f      	add	r1, sp, #60	; 0x3c
 23fe270:	f7ff fb2a 	bl	23fd8c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe274:	686b      	ldr	r3, [r5, #4]
 23fe276:	3301      	adds	r3, #1
 23fe278:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe27a:	a811      	add	r0, sp, #68	; 0x44
 23fe27c:	f7ff fcde 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe280:	b13f      	cbz	r7, 23fe292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe282:	a80b      	add	r0, sp, #44	; 0x2c
 23fe284:	f7ff fcda 	bl	23fdc3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe288:	e771      	b.n	23fe16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe28a:	46bb      	mov	fp, r7
 23fe28c:	e7d8      	b.n	23fe240 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe28e:	2701      	movs	r7, #1
 23fe290:	e7f3      	b.n	23fe27a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe292:	9b01      	ldr	r3, [sp, #4]
 23fe294:	682d      	ldr	r5, [r5, #0]
 23fe296:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe29a:	9b06      	ldr	r3, [sp, #24]
 23fe29c:	781b      	ldrb	r3, [r3, #0]
 23fe29e:	b92b      	cbnz	r3, 23fe2ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe2a0:	f8d8 3000 	ldr.w	r3, [r8]
 23fe2a4:	9a02      	ldr	r2, [sp, #8]
 23fe2a6:	4413      	add	r3, r2
 23fe2a8:	7c1b      	ldrb	r3, [r3, #16]
 23fe2aa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe2ac:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe2ae:	e78e      	b.n	23fe1ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2b0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe2b2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2b4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe2b6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2b8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2ba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2be:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2c0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe2c2:	60a2      	str	r2, [r4, #8]
 23fe2c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2c6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2c8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe2ca:	60e2      	str	r2, [r4, #12]
 23fe2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2ce:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe2d0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe2d2:	6122      	str	r2, [r4, #16]
 23fe2d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2d6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe2d8:	9b03      	ldr	r3, [sp, #12]
 23fe2da:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe2dc:	6162      	str	r2, [r4, #20]
 23fe2de:	7623      	strb	r3, [r4, #24]
 23fe2e0:	e7cf      	b.n	23fe282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe2e6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe2e8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe2ea:	4617      	mov	r7, r2
 23fe2ec:	b087      	sub	sp, #28
 23fe2ee:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe2f0:	4668      	mov	r0, sp
 23fe2f2:	4619      	mov	r1, r3
 23fe2f4:	f7fd fa34 	bl	23fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe2f8:	4b0b      	ldr	r3, [pc, #44]	; (23fe328 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe2fa:	4669      	mov	r1, sp
 23fe2fc:	f846 3b04 	str.w	r3, [r6], #4
 23fe300:	a803      	add	r0, sp, #12
 23fe302:	f7fd fa2d 	bl	23fb760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe306:	4639      	mov	r1, r7
 23fe308:	aa03      	add	r2, sp, #12
 23fe30a:	4630      	mov	r0, r6
 23fe30c:	f7ff fef0 	bl	23fe0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe310:	a803      	add	r0, sp, #12
 23fe312:	f7fd f9c9 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe316:	4668      	mov	r0, sp
 23fe318:	f7fd f9c6 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe31c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe31e:	4b03      	ldr	r3, [pc, #12]	; (23fe32c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe320:	6225      	str	r5, [r4, #32]
 23fe322:	6023      	str	r3, [r4, #0]
}
 23fe324:	b007      	add	sp, #28
 23fe326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe328:	023ffb98 	.word	0x023ffb98
 23fe32c:	023ffd08 	.word	0x023ffd08

023fe330 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe330:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe332:	460f      	mov	r7, r1
 23fe334:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe336:	4638      	mov	r0, r7
 23fe338:	491c      	ldr	r1, [pc, #112]	; (23fe3ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe33a:	4616      	mov	r6, r2
 23fe33c:	461d      	mov	r5, r3
 23fe33e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe340:	f7fc fe6a 	bl	23fb018 <strcmp>
 23fe344:	b9c0      	cbnz	r0, 23fe378 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe346:	b1a4      	cbz	r4, 23fe372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe348:	4629      	mov	r1, r5
 23fe34a:	a801      	add	r0, sp, #4
 23fe34c:	f7ff fcbe 	bl	23fdccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe350:	2024      	movs	r0, #36	; 0x24
 23fe352:	4917      	ldr	r1, [pc, #92]	; (23fe3b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe354:	f000 ff24 	bl	23ff1a0 <_ZnwjRKSt9nothrow_t>
 23fe358:	4605      	mov	r5, r0
 23fe35a:	b130      	cbz	r0, 23fe36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe35c:	ab01      	add	r3, sp, #4
 23fe35e:	4632      	mov	r2, r6
 23fe360:	4621      	mov	r1, r4
 23fe362:	f7ff ffbf 	bl	23fe2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe366:	4b13      	ldr	r3, [pc, #76]	; (23fe3b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe368:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe36a:	a801      	add	r0, sp, #4
 23fe36c:	f7fd f99c 	bl	23fb6a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe370:	462c      	mov	r4, r5
}
 23fe372:	4620      	mov	r0, r4
 23fe374:	b005      	add	sp, #20
 23fe376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe378:	4638      	mov	r0, r7
 23fe37a:	490f      	ldr	r1, [pc, #60]	; (23fe3b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe37c:	f7fc fe4c 	bl	23fb018 <strcmp>
 23fe380:	b990      	cbnz	r0, 23fe3a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe382:	2c00      	cmp	r4, #0
 23fe384:	d0f5      	beq.n	23fe372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe386:	4629      	mov	r1, r5
 23fe388:	a801      	add	r0, sp, #4
 23fe38a:	f7ff fc9f 	bl	23fdccc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe38e:	2024      	movs	r0, #36	; 0x24
 23fe390:	4907      	ldr	r1, [pc, #28]	; (23fe3b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe392:	f000 ff05 	bl	23ff1a0 <_ZnwjRKSt9nothrow_t>
 23fe396:	4605      	mov	r5, r0
 23fe398:	2800      	cmp	r0, #0
 23fe39a:	d0e6      	beq.n	23fe36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe39c:	4632      	mov	r2, r6
 23fe39e:	4621      	mov	r1, r4
 23fe3a0:	ab01      	add	r3, sp, #4
 23fe3a2:	f7ff ff9f 	bl	23fe2e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe3a6:	e7e0      	b.n	23fe36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe3a8:	2400      	movs	r4, #0
 23fe3aa:	e7e2      	b.n	23fe372 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe3ac:	023ffc90 	.word	0x023ffc90
 23fe3b0:	023ffe54 	.word	0x023ffe54
 23fe3b4:	023ffd20 	.word	0x023ffd20
 23fe3b8:	023ffc94 	.word	0x023ffc94

023fe3bc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe3bc:	4b01      	ldr	r3, [pc, #4]	; (23fe3c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe3be:	4a02      	ldr	r2, [pc, #8]	; (23fe3c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe3c0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe3c2:	4770      	bx	lr
 23fe3c4:	1007ae6c 	.word	0x1007ae6c
 23fe3c8:	023ffb8c 	.word	0x023ffb8c

023fe3cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe3d0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe3d2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe3d6:	4604      	mov	r4, r0
 23fe3d8:	460e      	mov	r6, r1
 23fe3da:	4617      	mov	r7, r2
 23fe3dc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe3de:	f000 fc33 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe3e2:	4581      	cmp	r9, r0
 23fe3e4:	d04d      	beq.n	23fe482 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe3e6:	792b      	ldrb	r3, [r5, #4]
 23fe3e8:	0719      	lsls	r1, r3, #28
 23fe3ea:	d504      	bpl.n	23fe3f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe3ec:	4620      	mov	r0, r4
 23fe3ee:	696a      	ldr	r2, [r5, #20]
 23fe3f0:	4954      	ldr	r1, [pc, #336]	; (23fe544 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe3f2:	f7ff fae2 	bl	23fd9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe3f6:	f1b8 0f00 	cmp.w	r8, #0
 23fe3fa:	d00d      	beq.n	23fe418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe3fc:	215b      	movs	r1, #91	; 0x5b
 23fe3fe:	4620      	mov	r0, r4
 23fe400:	f7ff fa56 	bl	23fd8b0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe404:	4641      	mov	r1, r8
 23fe406:	4620      	mov	r0, r4
 23fe408:	f7ff fa43 	bl	23fd892 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe40c:	6823      	ldr	r3, [r4, #0]
 23fe40e:	2202      	movs	r2, #2
 23fe410:	4620      	mov	r0, r4
 23fe412:	68db      	ldr	r3, [r3, #12]
 23fe414:	494c      	ldr	r1, [pc, #304]	; (23fe548 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe416:	4798      	blx	r3
    if (attr.has_file) {
 23fe418:	792b      	ldrb	r3, [r5, #4]
 23fe41a:	07da      	lsls	r2, r3, #31
 23fe41c:	d524      	bpl.n	23fe468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe41e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe422:	212f      	movs	r1, #47	; 0x2f
 23fe424:	4640      	mov	r0, r8
 23fe426:	f001 f9ec 	bl	23ff802 <strrchr>
    if (s1) {
 23fe42a:	b108      	cbz	r0, 23fe430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe42c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe430:	4641      	mov	r1, r8
 23fe432:	4620      	mov	r0, r4
 23fe434:	f7ff fa2d 	bl	23fd892 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe438:	792b      	ldrb	r3, [r5, #4]
 23fe43a:	079b      	lsls	r3, r3, #30
 23fe43c:	d508      	bpl.n	23fe450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe43e:	213a      	movs	r1, #58	; 0x3a
 23fe440:	4620      	mov	r0, r4
 23fe442:	f7ff fa35 	bl	23fd8b0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe446:	4620      	mov	r0, r4
 23fe448:	68ea      	ldr	r2, [r5, #12]
 23fe44a:	4940      	ldr	r1, [pc, #256]	; (23fe54c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe44c:	f7ff fab5 	bl	23fd9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe450:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe452:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe454:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe458:	4620      	mov	r0, r4
            write(", ", 2);
 23fe45a:	f04f 0202 	mov.w	r2, #2
 23fe45e:	68db      	ldr	r3, [r3, #12]
 23fe460:	bf14      	ite	ne
 23fe462:	493b      	ldrne	r1, [pc, #236]	; (23fe550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe464:	493b      	ldreq	r1, [pc, #236]	; (23fe554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe466:	4798      	blx	r3
    if (attr.has_function) {
 23fe468:	792b      	ldrb	r3, [r5, #4]
 23fe46a:	0758      	lsls	r0, r3, #29
 23fe46c:	d51d      	bpl.n	23fe4aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe46e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe470:	460b      	mov	r3, r1
 23fe472:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe474:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe478:	b160      	cbz	r0, 23fe494 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe47a:	2820      	cmp	r0, #32
 23fe47c:	d108      	bne.n	23fe490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe47e:	4619      	mov	r1, r3
 23fe480:	e7f7      	b.n	23fe472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe482:	4835      	ldr	r0, [pc, #212]	; (23fe558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe484:	f000 f983 	bl	23fe78e <_ZN5spark12NetworkClass9listeningEv>
 23fe488:	2800      	cmp	r0, #0
 23fe48a:	d0ac      	beq.n	23fe3e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe490:	2828      	cmp	r0, #40	; 0x28
 23fe492:	d1ee      	bne.n	23fe472 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe494:	6823      	ldr	r3, [r4, #0]
 23fe496:	1a52      	subs	r2, r2, r1
 23fe498:	4620      	mov	r0, r4
 23fe49a:	68db      	ldr	r3, [r3, #12]
 23fe49c:	4798      	blx	r3
        write("(): ", 4);
 23fe49e:	6823      	ldr	r3, [r4, #0]
 23fe4a0:	2204      	movs	r2, #4
 23fe4a2:	4620      	mov	r0, r4
 23fe4a4:	68db      	ldr	r3, [r3, #12]
 23fe4a6:	492d      	ldr	r1, [pc, #180]	; (23fe55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe4a8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe4aa:	2100      	movs	r1, #0
 23fe4ac:	4638      	mov	r0, r7
 23fe4ae:	f7fe f8f3 	bl	23fc698 <log_level_name>
 23fe4b2:	4601      	mov	r1, r0
    write(s);
 23fe4b4:	4620      	mov	r0, r4
 23fe4b6:	f7ff f9ec 	bl	23fd892 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe4ba:	6823      	ldr	r3, [r4, #0]
 23fe4bc:	2202      	movs	r2, #2
 23fe4be:	4620      	mov	r0, r4
 23fe4c0:	68db      	ldr	r3, [r3, #12]
 23fe4c2:	4924      	ldr	r1, [pc, #144]	; (23fe554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe4c4:	4798      	blx	r3
    if (msg) {
 23fe4c6:	b11e      	cbz	r6, 23fe4d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe4c8:	4631      	mov	r1, r6
 23fe4ca:	4620      	mov	r0, r4
 23fe4cc:	f7ff f9e1 	bl	23fd892 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe4d0:	792b      	ldrb	r3, [r5, #4]
 23fe4d2:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe4d6:	d02c      	beq.n	23fe532 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe4d8:	6823      	ldr	r3, [r4, #0]
 23fe4da:	4921      	ldr	r1, [pc, #132]	; (23fe560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe4dc:	68db      	ldr	r3, [r3, #12]
 23fe4de:	2202      	movs	r2, #2
 23fe4e0:	4620      	mov	r0, r4
 23fe4e2:	4798      	blx	r3
        if (attr.has_code) {
 23fe4e4:	792b      	ldrb	r3, [r5, #4]
 23fe4e6:	06d9      	lsls	r1, r3, #27
 23fe4e8:	d50a      	bpl.n	23fe500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe4ea:	6823      	ldr	r3, [r4, #0]
 23fe4ec:	2207      	movs	r2, #7
 23fe4ee:	4620      	mov	r0, r4
 23fe4f0:	491c      	ldr	r1, [pc, #112]	; (23fe564 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe4f2:	68db      	ldr	r3, [r3, #12]
 23fe4f4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe4f6:	4620      	mov	r0, r4
 23fe4f8:	69aa      	ldr	r2, [r5, #24]
 23fe4fa:	491b      	ldr	r1, [pc, #108]	; (23fe568 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe4fc:	f7ff fa5d 	bl	23fd9ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe500:	792b      	ldrb	r3, [r5, #4]
 23fe502:	069a      	lsls	r2, r3, #26
 23fe504:	d511      	bpl.n	23fe52a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe506:	06db      	lsls	r3, r3, #27
 23fe508:	d505      	bpl.n	23fe516 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe50a:	6823      	ldr	r3, [r4, #0]
 23fe50c:	2202      	movs	r2, #2
 23fe50e:	4620      	mov	r0, r4
 23fe510:	68db      	ldr	r3, [r3, #12]
 23fe512:	490f      	ldr	r1, [pc, #60]	; (23fe550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe514:	4798      	blx	r3
            write("details = ", 10);
 23fe516:	6823      	ldr	r3, [r4, #0]
 23fe518:	4620      	mov	r0, r4
 23fe51a:	4914      	ldr	r1, [pc, #80]	; (23fe56c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe51c:	220a      	movs	r2, #10
 23fe51e:	68db      	ldr	r3, [r3, #12]
 23fe520:	4798      	blx	r3
            write(attr.details);
 23fe522:	4620      	mov	r0, r4
 23fe524:	69e9      	ldr	r1, [r5, #28]
 23fe526:	f7ff f9b4 	bl	23fd892 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe52a:	215d      	movs	r1, #93	; 0x5d
 23fe52c:	4620      	mov	r0, r4
 23fe52e:	f7ff f9bf 	bl	23fd8b0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe532:	6823      	ldr	r3, [r4, #0]
 23fe534:	4620      	mov	r0, r4
}
 23fe536:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe53a:	2202      	movs	r2, #2
 23fe53c:	68db      	ldr	r3, [r3, #12]
 23fe53e:	490c      	ldr	r1, [pc, #48]	; (23fe570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe540:	4718      	bx	r3
 23fe542:	bf00      	nop
 23fe544:	023ffca5 	.word	0x023ffca5
 23fe548:	023ffcac 	.word	0x023ffcac
 23fe54c:	023ffc54 	.word	0x023ffc54
 23fe550:	023ffcaf 	.word	0x023ffcaf
 23fe554:	023ffcb4 	.word	0x023ffcb4
 23fe558:	1007ae98 	.word	0x1007ae98
 23fe55c:	023ffcb2 	.word	0x023ffcb2
 23fe560:	023ffcb7 	.word	0x023ffcb7
 23fe564:	023ffcba 	.word	0x023ffcba
 23fe568:	023ffcc2 	.word	0x023ffcc2
 23fe56c:	023ffcc5 	.word	0x023ffcc5
 23fe570:	023ffcd0 	.word	0x023ffcd0

023fe574 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe578:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe57a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe57c:	460d      	mov	r5, r1
 23fe57e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe580:	f000 fb62 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe584:	4287      	cmp	r7, r0
 23fe586:	d007      	beq.n	23fe598 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe588:	6a20      	ldr	r0, [r4, #32]
 23fe58a:	4632      	mov	r2, r6
 23fe58c:	6803      	ldr	r3, [r0, #0]
 23fe58e:	4629      	mov	r1, r5
}
 23fe590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe594:	68db      	ldr	r3, [r3, #12]
 23fe596:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe598:	4803      	ldr	r0, [pc, #12]	; (23fe5a8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe59a:	f000 f8f8 	bl	23fe78e <_ZN5spark12NetworkClass9listeningEv>
 23fe59e:	2800      	cmp	r0, #0
 23fe5a0:	d0f2      	beq.n	23fe588 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe5a6:	bf00      	nop
 23fe5a8:	1007ae98 	.word	0x1007ae98

023fe5ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe5b0:	b085      	sub	sp, #20
    return stream_;
 23fe5b2:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe5b6:	4605      	mov	r5, r0
 23fe5b8:	460f      	mov	r7, r1
 23fe5ba:	4690      	mov	r8, r2
 23fe5bc:	461e      	mov	r6, r3
 23fe5be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe5c0:	f000 fb42 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe5c4:	4581      	cmp	r9, r0
 23fe5c6:	d105      	bne.n	23fe5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe5c8:	4849      	ldr	r0, [pc, #292]	; (23fe6f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe5ca:	f000 f8e0 	bl	23fe78e <_ZN5spark12NetworkClass9listeningEv>
 23fe5ce:	2800      	cmp	r0, #0
 23fe5d0:	f040 808a 	bne.w	23fe6e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe5d4:	f04f 0900 	mov.w	r9, #0
 23fe5d8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe5da:	4a46      	ldr	r2, [pc, #280]	; (23fe6f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe5dc:	a801      	add	r0, sp, #4
 23fe5de:	9201      	str	r2, [sp, #4]
 23fe5e0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe5e2:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe5e6:	f7ff f81c 	bl	23fd622 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe5ea:	4649      	mov	r1, r9
 23fe5ec:	4640      	mov	r0, r8
 23fe5ee:	f7fe f853 	bl	23fc698 <log_level_name>
 23fe5f2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe5f4:	4940      	ldr	r1, [pc, #256]	; (23fe6f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe5f6:	2201      	movs	r2, #1
 23fe5f8:	a801      	add	r0, sp, #4
 23fe5fa:	f7ff f8b5 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe5fe:	4641      	mov	r1, r8
 23fe600:	f7ff f939 	bl	23fd876 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe604:	b13f      	cbz	r7, 23fe616 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe606:	493d      	ldr	r1, [pc, #244]	; (23fe6fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe608:	2201      	movs	r2, #1
 23fe60a:	a801      	add	r0, sp, #4
 23fe60c:	f7ff f8ac 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe610:	4639      	mov	r1, r7
 23fe612:	f7ff f930 	bl	23fd876 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe616:	b13e      	cbz	r6, 23fe628 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe618:	4939      	ldr	r1, [pc, #228]	; (23fe700 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe61a:	2201      	movs	r2, #1
 23fe61c:	a801      	add	r0, sp, #4
 23fe61e:	f7ff f8a3 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe622:	4631      	mov	r1, r6
 23fe624:	f7ff f927 	bl	23fd876 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe628:	7923      	ldrb	r3, [r4, #4]
 23fe62a:	07df      	lsls	r7, r3, #31
 23fe62c:	d50e      	bpl.n	23fe64c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe62e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe630:	212f      	movs	r1, #47	; 0x2f
 23fe632:	4630      	mov	r0, r6
 23fe634:	f001 f8e5 	bl	23ff802 <strrchr>
    if (s1) {
 23fe638:	b100      	cbz	r0, 23fe63c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe63a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe63c:	4931      	ldr	r1, [pc, #196]	; (23fe704 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe63e:	2201      	movs	r2, #1
 23fe640:	a801      	add	r0, sp, #4
 23fe642:	f7ff f891 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe646:	4631      	mov	r1, r6
 23fe648:	f7ff f915 	bl	23fd876 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe64c:	7923      	ldrb	r3, [r4, #4]
 23fe64e:	079e      	lsls	r6, r3, #30
 23fe650:	d507      	bpl.n	23fe662 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe652:	492d      	ldr	r1, [pc, #180]	; (23fe708 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe654:	2202      	movs	r2, #2
 23fe656:	a801      	add	r0, sp, #4
 23fe658:	f7ff f886 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe65c:	68e1      	ldr	r1, [r4, #12]
 23fe65e:	f7fe ffed 	bl	23fd63c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe662:	7923      	ldrb	r3, [r4, #4]
 23fe664:	0758      	lsls	r0, r3, #29
 23fe666:	d514      	bpl.n	23fe692 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe668:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe66a:	4633      	mov	r3, r6
 23fe66c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe672:	b12a      	cbz	r2, 23fe680 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe674:	2a20      	cmp	r2, #32
 23fe676:	d101      	bne.n	23fe67c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe678:	461e      	mov	r6, r3
 23fe67a:	e7f7      	b.n	23fe66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe67c:	2a28      	cmp	r2, #40	; 0x28
 23fe67e:	d1f5      	bne.n	23fe66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe680:	2202      	movs	r2, #2
 23fe682:	4922      	ldr	r1, [pc, #136]	; (23fe70c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe684:	a801      	add	r0, sp, #4
 23fe686:	f7ff f86f 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe68a:	4631      	mov	r1, r6
 23fe68c:	1bba      	subs	r2, r7, r6
 23fe68e:	f7ff f87b 	bl	23fd788 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe692:	7923      	ldrb	r3, [r4, #4]
 23fe694:	0719      	lsls	r1, r3, #28
 23fe696:	d507      	bpl.n	23fe6a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe698:	491d      	ldr	r1, [pc, #116]	; (23fe710 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe69a:	2201      	movs	r2, #1
 23fe69c:	a801      	add	r0, sp, #4
 23fe69e:	f7ff f863 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe6a2:	6961      	ldr	r1, [r4, #20]
 23fe6a4:	f7fe ffdc 	bl	23fd660 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe6a8:	7923      	ldrb	r3, [r4, #4]
 23fe6aa:	06da      	lsls	r2, r3, #27
 23fe6ac:	d508      	bpl.n	23fe6c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe6ae:	2204      	movs	r2, #4
 23fe6b0:	4918      	ldr	r1, [pc, #96]	; (23fe714 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe6b2:	eb0d 0002 	add.w	r0, sp, r2
 23fe6b6:	f7ff f857 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe6ba:	69a1      	ldr	r1, [r4, #24]
 23fe6bc:	f7fe ffbe 	bl	23fd63c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe6c0:	7923      	ldrb	r3, [r4, #4]
 23fe6c2:	069b      	lsls	r3, r3, #26
 23fe6c4:	d507      	bpl.n	23fe6d6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe6c6:	4914      	ldr	r1, [pc, #80]	; (23fe718 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe6c8:	2206      	movs	r2, #6
 23fe6ca:	a801      	add	r0, sp, #4
 23fe6cc:	f7ff f84c 	bl	23fd768 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe6d0:	69e1      	ldr	r1, [r4, #28]
 23fe6d2:	f7ff f8d0 	bl	23fd876 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe6d6:	a801      	add	r0, sp, #4
 23fe6d8:	f7fe ff8d 	bl	23fd5f6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe6dc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe6de:	2202      	movs	r2, #2
 23fe6e0:	6803      	ldr	r3, [r0, #0]
 23fe6e2:	490e      	ldr	r1, [pc, #56]	; (23fe71c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe6e4:	68db      	ldr	r3, [r3, #12]
 23fe6e6:	4798      	blx	r3
}
 23fe6e8:	b005      	add	sp, #20
 23fe6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe6ee:	bf00      	nop
 23fe6f0:	1007ae98 	.word	0x1007ae98
 23fe6f4:	023ffcf0 	.word	0x023ffcf0
 23fe6f8:	023ffc86 	.word	0x023ffc86
 23fe6fc:	023ffcd3 	.word	0x023ffcd3
 23fe700:	023ffec7 	.word	0x023ffec7
 23fe704:	023ffaa3 	.word	0x023ffaa3
 23fe708:	023ffcd5 	.word	0x023ffcd5
 23fe70c:	023ffcd8 	.word	0x023ffcd8
 23fe710:	023ffa7c 	.word	0x023ffa7c
 23fe714:	023ffcdb 	.word	0x023ffcdb
 23fe718:	023ffce0 	.word	0x023ffce0
 23fe71c:	023ffcd0 	.word	0x023ffcd0

023fe720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe720:	2300      	movs	r3, #0
 23fe722:	6840      	ldr	r0, [r0, #4]
 23fe724:	461a      	mov	r2, r3
 23fe726:	f7fe b897 	b.w	23fc858 <network_connect>

023fe72a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe72a:	2200      	movs	r2, #0
 23fe72c:	2102      	movs	r1, #2
 23fe72e:	6840      	ldr	r0, [r0, #4]
 23fe730:	f7fe b8ae 	b.w	23fc890 <network_disconnect>

023fe734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe734:	2200      	movs	r2, #0
 23fe736:	6840      	ldr	r0, [r0, #4]
 23fe738:	4611      	mov	r1, r2
 23fe73a:	f7fe b89b 	b.w	23fc874 <network_connecting>

023fe73e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe73e:	2200      	movs	r2, #0
 23fe740:	6840      	ldr	r0, [r0, #4]
 23fe742:	4611      	mov	r1, r2
 23fe744:	f7fe b8b2 	b.w	23fc8ac <network_ready>

023fe748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe748:	2300      	movs	r3, #0
 23fe74a:	6840      	ldr	r0, [r0, #4]
 23fe74c:	461a      	mov	r2, r3
 23fe74e:	4619      	mov	r1, r3
 23fe750:	f7fe b8ba 	b.w	23fc8c8 <network_on>

023fe754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe754:	2300      	movs	r3, #0
 23fe756:	6840      	ldr	r0, [r0, #4]
 23fe758:	461a      	mov	r2, r3
 23fe75a:	4619      	mov	r1, r3
 23fe75c:	f7fe b8c2 	b.w	23fc8e4 <network_off>

023fe760 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe760:	2100      	movs	r1, #0
 23fe762:	6840      	ldr	r0, [r0, #4]
 23fe764:	f7fe b904 	b.w	23fc970 <network_is_on>

023fe768 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe768:	2100      	movs	r1, #0
 23fe76a:	6840      	ldr	r0, [r0, #4]
 23fe76c:	f7fe b90e 	b.w	23fc98c <network_is_off>

023fe770 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe770:	2200      	movs	r2, #0
 23fe772:	6840      	ldr	r0, [r0, #4]
 23fe774:	f081 0101 	eor.w	r1, r1, #1
 23fe778:	f7fe b8c2 	b.w	23fc900 <network_listen>

023fe77c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe77c:	2200      	movs	r2, #0
 23fe77e:	6840      	ldr	r0, [r0, #4]
 23fe780:	f7fe b8da 	b.w	23fc938 <network_set_listen_timeout>

023fe784 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe784:	2200      	movs	r2, #0
 23fe786:	6840      	ldr	r0, [r0, #4]
 23fe788:	4611      	mov	r1, r2
 23fe78a:	f7fe b8e3 	b.w	23fc954 <network_get_listen_timeout>

023fe78e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe78e:	2200      	movs	r2, #0
 23fe790:	6840      	ldr	r0, [r0, #4]
 23fe792:	4611      	mov	r1, r2
 23fe794:	f7fe b8c2 	b.w	23fc91c <network_listening>

023fe798 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe79c:	b095      	sub	sp, #84	; 0x54
 23fe79e:	4614      	mov	r4, r2
 23fe7a0:	460d      	mov	r5, r1
 23fe7a2:	4607      	mov	r7, r0
    IPAddress addr;
 23fe7a4:	f7fe fda0 	bl	23fd2e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe7a8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe7aa:	221c      	movs	r2, #28
 23fe7ac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe7ae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe7b0:	f000 ff9f 	bl	23ff6f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe7b4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe7b6:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe7b8:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe7ba:	2100      	movs	r1, #0
 23fe7bc:	466b      	mov	r3, sp
 23fe7be:	aa0c      	add	r2, sp, #48	; 0x30
 23fe7c0:	f7fd fe1a 	bl	23fc3f8 <netdb_getaddrinfo>
    if (!r) {
 23fe7c4:	4604      	mov	r4, r0
 23fe7c6:	2800      	cmp	r0, #0
 23fe7c8:	d14b      	bne.n	23fe862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe7ca:	4602      	mov	r2, r0
 23fe7cc:	2101      	movs	r1, #1
 23fe7ce:	6868      	ldr	r0, [r5, #4]
 23fe7d0:	f7fe f86c 	bl	23fc8ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe7d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe7d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe7d8:	4622      	mov	r2, r4
 23fe7da:	6868      	ldr	r0, [r5, #4]
 23fe7dc:	f7fe f866 	bl	23fc8ac <network_ready>
        bool ok = false;
 23fe7e0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe7e2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe7e4:	9e00      	ldr	r6, [sp, #0]
 23fe7e6:	2e00      	cmp	r6, #0
 23fe7e8:	d03b      	beq.n	23fe862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe7ea:	2900      	cmp	r1, #0
 23fe7ec:	d139      	bne.n	23fe862 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe7ee:	6873      	ldr	r3, [r6, #4]
 23fe7f0:	2b02      	cmp	r3, #2
 23fe7f2:	d003      	beq.n	23fe7fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe7f4:	2b0a      	cmp	r3, #10
 23fe7f6:	d011      	beq.n	23fe81c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe7f8:	69f6      	ldr	r6, [r6, #28]
 23fe7fa:	e7f4      	b.n	23fe7e6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe7fc:	f1b8 0f00 	cmp.w	r8, #0
 23fe800:	d0fa      	beq.n	23fe7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe802:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe804:	a806      	add	r0, sp, #24
 23fe806:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe808:	1d3c      	adds	r4, r7, #4
 23fe80a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe80c:	f7fe fd9a 	bl	23fd344 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe814:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe816:	4641      	mov	r1, r8
 23fe818:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe81a:	e7ed      	b.n	23fe7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe81c:	f1b9 0f00 	cmp.w	r9, #0
 23fe820:	d0ea      	beq.n	23fe7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe822:	2210      	movs	r2, #16
 23fe824:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe826:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe828:	f000 ff63 	bl	23ff6f2 <memset>
                    a.v = 6;
 23fe82c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe82e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe830:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe834:	f104 0308 	add.w	r3, r4, #8
 23fe838:	3418      	adds	r4, #24
 23fe83a:	462a      	mov	r2, r5
 23fe83c:	6818      	ldr	r0, [r3, #0]
 23fe83e:	6859      	ldr	r1, [r3, #4]
 23fe840:	3308      	adds	r3, #8
 23fe842:	c203      	stmia	r2!, {r0, r1}
 23fe844:	42a3      	cmp	r3, r4
 23fe846:	4615      	mov	r5, r2
 23fe848:	d1f7      	bne.n	23fe83a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe84a:	a901      	add	r1, sp, #4
 23fe84c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe84e:	1d3c      	adds	r4, r7, #4
 23fe850:	ad07      	add	r5, sp, #28
 23fe852:	f7fe fd57 	bl	23fd304 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe85a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe85c:	4649      	mov	r1, r9
 23fe85e:	7023      	strb	r3, [r4, #0]
                    break;
 23fe860:	e7ca      	b.n	23fe7f8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe862:	9800      	ldr	r0, [sp, #0]
 23fe864:	f7fd fdba 	bl	23fc3dc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe868:	4638      	mov	r0, r7
 23fe86a:	b015      	add	sp, #84	; 0x54
 23fe86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe870 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe870:	4b02      	ldr	r3, [pc, #8]	; (23fe87c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe872:	4a03      	ldr	r2, [pc, #12]	; (23fe880 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe874:	601a      	str	r2, [r3, #0]
 23fe876:	2200      	movs	r2, #0
 23fe878:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe87a:	4770      	bx	lr
 23fe87c:	1007ae98 	.word	0x1007ae98
 23fe880:	023ffd68 	.word	0x023ffd68

023fe884 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe886:	4606      	mov	r6, r0
 23fe888:	460d      	mov	r5, r1
  size_t n = 0;
 23fe88a:	2400      	movs	r4, #0
 23fe88c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe88e:	42bd      	cmp	r5, r7
 23fe890:	d00c      	beq.n	23fe8ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe892:	6833      	ldr	r3, [r6, #0]
 23fe894:	4630      	mov	r0, r6
 23fe896:	689b      	ldr	r3, [r3, #8]
 23fe898:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe89c:	4798      	blx	r3
     if (chunk>=0)
 23fe89e:	1e03      	subs	r3, r0, #0
 23fe8a0:	db01      	blt.n	23fe8a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe8a2:	441c      	add	r4, r3
  while (size--) {
 23fe8a4:	e7f3      	b.n	23fe88e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe8a6:	2c00      	cmp	r4, #0
 23fe8a8:	bf08      	it	eq
 23fe8aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe8ac:	4620      	mov	r0, r4
 23fe8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe8b0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe8b0:	b513      	push	{r0, r1, r4, lr}
 23fe8b2:	4604      	mov	r4, r0
    }
 23fe8b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe8b6:	b159      	cbz	r1, 23fe8d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe8b8:	9101      	str	r1, [sp, #4]
 23fe8ba:	f7fc fbb7 	bl	23fb02c <strlen>
 23fe8be:	4602      	mov	r2, r0
 23fe8c0:	4620      	mov	r0, r4
 23fe8c2:	6823      	ldr	r3, [r4, #0]
 23fe8c4:	9901      	ldr	r1, [sp, #4]
 23fe8c6:	68db      	ldr	r3, [r3, #12]
    }
 23fe8c8:	b002      	add	sp, #8
 23fe8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe8ce:	4718      	bx	r3
    }
 23fe8d0:	b002      	add	sp, #8
 23fe8d2:	bd10      	pop	{r4, pc}

023fe8d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe8d4:	6803      	ldr	r3, [r0, #0]
 23fe8d6:	689b      	ldr	r3, [r3, #8]
 23fe8d8:	4718      	bx	r3

023fe8da <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe8da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe8dc:	2a01      	cmp	r2, #1
 23fe8de:	bf98      	it	ls
 23fe8e0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe8e2:	b530      	push	{r4, r5, lr}
 23fe8e4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe8e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe8ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe8ec:	460d      	mov	r5, r1
 23fe8ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe8f2:	fb01 5312 	mls	r3, r1, r2, r5
 23fe8f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe8fa:	2b09      	cmp	r3, #9
 23fe8fc:	bf94      	ite	ls
 23fe8fe:	3330      	addls	r3, #48	; 0x30
 23fe900:	3337      	addhi	r3, #55	; 0x37
 23fe902:	b2db      	uxtb	r3, r3
  } while(n);
 23fe904:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe906:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe90a:	d9ef      	bls.n	23fe8ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe90c:	4621      	mov	r1, r4
 23fe90e:	f7ff ffcf 	bl	23fe8b0 <_ZN5Print5writeEPKc>
}
 23fe912:	b00b      	add	sp, #44	; 0x2c
 23fe914:	bd30      	pop	{r4, r5, pc}
	...

023fe918 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fe918:	2200      	movs	r2, #0
 23fe91a:	4b01      	ldr	r3, [pc, #4]	; (23fe920 <_GLOBAL__sub_I_RGB+0x8>)
 23fe91c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe91e:	4770      	bx	lr
 23fe920:	1007aea0 	.word	0x1007aea0

023fe924 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe924:	b510      	push	{r4, lr}
 23fe926:	4604      	mov	r4, r0
 23fe928:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe92a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe92c:	f7fd fd72 	bl	23fc414 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe930:	2300      	movs	r3, #0
}
 23fe932:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe934:	6063      	str	r3, [r4, #4]
}
 23fe936:	bd10      	pop	{r4, pc}

023fe938 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe938:	b510      	push	{r4, lr}
 23fe93a:	4604      	mov	r4, r0
{
	free(buffer);
 23fe93c:	6800      	ldr	r0, [r0, #0]
 23fe93e:	f7fe f841 	bl	23fc9c4 <free>
}
 23fe942:	4620      	mov	r0, r4
 23fe944:	bd10      	pop	{r4, pc}

023fe946 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe946:	b510      	push	{r4, lr}
 23fe948:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe94a:	6800      	ldr	r0, [r0, #0]
 23fe94c:	b108      	cbz	r0, 23fe952 <_ZN6String10invalidateEv+0xc>
 23fe94e:	f7fe f839 	bl	23fc9c4 <free>
	buffer = NULL;
 23fe952:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe954:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe958:	6023      	str	r3, [r4, #0]
}
 23fe95a:	bd10      	pop	{r4, pc}

023fe95c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe95c:	b538      	push	{r3, r4, r5, lr}
 23fe95e:	4604      	mov	r4, r0
 23fe960:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe962:	6800      	ldr	r0, [r0, #0]
 23fe964:	3101      	adds	r1, #1
 23fe966:	f7fe f83b 	bl	23fc9e0 <realloc>
	if (newbuffer) {
 23fe96a:	b110      	cbz	r0, 23fe972 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe96c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe970:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe972:	bd38      	pop	{r3, r4, r5, pc}

023fe974 <_ZN6String7reserveEj>:
{
 23fe974:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe976:	6803      	ldr	r3, [r0, #0]
{
 23fe978:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe97a:	b123      	cbz	r3, 23fe986 <_ZN6String7reserveEj+0x12>
 23fe97c:	6843      	ldr	r3, [r0, #4]
 23fe97e:	428b      	cmp	r3, r1
 23fe980:	d301      	bcc.n	23fe986 <_ZN6String7reserveEj+0x12>
 23fe982:	2001      	movs	r0, #1
}
 23fe984:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe986:	4620      	mov	r0, r4
 23fe988:	f7ff ffe8 	bl	23fe95c <_ZN6String12changeBufferEj>
 23fe98c:	2800      	cmp	r0, #0
 23fe98e:	d0f9      	beq.n	23fe984 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe990:	68a3      	ldr	r3, [r4, #8]
 23fe992:	2b00      	cmp	r3, #0
 23fe994:	d1f5      	bne.n	23fe982 <_ZN6String7reserveEj+0xe>
 23fe996:	6822      	ldr	r2, [r4, #0]
 23fe998:	7013      	strb	r3, [r2, #0]
 23fe99a:	e7f2      	b.n	23fe982 <_ZN6String7reserveEj+0xe>

023fe99c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe99e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe9a0:	4611      	mov	r1, r2
 23fe9a2:	9201      	str	r2, [sp, #4]
{
 23fe9a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe9a6:	f7ff ffe5 	bl	23fe974 <_ZN6String7reserveEj>
 23fe9aa:	9a01      	ldr	r2, [sp, #4]
 23fe9ac:	b928      	cbnz	r0, 23fe9ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe9ae:	4620      	mov	r0, r4
 23fe9b0:	f7ff ffc9 	bl	23fe946 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe9b4:	4620      	mov	r0, r4
 23fe9b6:	b003      	add	sp, #12
 23fe9b8:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe9ba:	4629      	mov	r1, r5
	len = length;
 23fe9bc:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe9be:	6820      	ldr	r0, [r4, #0]
 23fe9c0:	f000 fe70 	bl	23ff6a4 <memcpy>
	buffer[len] = 0;
 23fe9c4:	2100      	movs	r1, #0
 23fe9c6:	6822      	ldr	r2, [r4, #0]
 23fe9c8:	68a3      	ldr	r3, [r4, #8]
 23fe9ca:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe9cc:	e7f2      	b.n	23fe9b4 <_ZN6String4copyEPKcj+0x18>

023fe9ce <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fe9ce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe9d0:	b513      	push	{r0, r1, r4, lr}
 23fe9d2:	4604      	mov	r4, r0
	capacity = 0;
 23fe9d4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe9d8:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe9da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fe9dc:	b141      	cbz	r1, 23fe9f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fe9de:	4608      	mov	r0, r1
 23fe9e0:	9101      	str	r1, [sp, #4]
 23fe9e2:	f7fc fb23 	bl	23fb02c <strlen>
 23fe9e6:	9901      	ldr	r1, [sp, #4]
 23fe9e8:	4602      	mov	r2, r0
 23fe9ea:	4620      	mov	r0, r4
 23fe9ec:	f7ff ffd6 	bl	23fe99c <_ZN6String4copyEPKcj>
}
 23fe9f0:	4620      	mov	r0, r4
 23fe9f2:	b002      	add	sp, #8
 23fe9f4:	bd10      	pop	{r4, pc}

023fe9f6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe9f6:	b538      	push	{r3, r4, r5, lr}
 23fe9f8:	4605      	mov	r5, r0
	if (buffer) {
 23fe9fa:	6800      	ldr	r0, [r0, #0]
{
 23fe9fc:	460c      	mov	r4, r1
	if (buffer) {
 23fe9fe:	b170      	cbz	r0, 23fea1e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fea00:	686a      	ldr	r2, [r5, #4]
 23fea02:	688b      	ldr	r3, [r1, #8]
 23fea04:	429a      	cmp	r2, r3
 23fea06:	d308      	bcc.n	23fea1a <_ZN6String4moveERS_+0x24>
 23fea08:	6809      	ldr	r1, [r1, #0]
 23fea0a:	b131      	cbz	r1, 23fea1a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fea0c:	f000 febf 	bl	23ff78e <strcpy>
			len = rhs.len;
 23fea10:	68a3      	ldr	r3, [r4, #8]
 23fea12:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fea14:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fea16:	60a3      	str	r3, [r4, #8]
}
 23fea18:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fea1a:	f7fd ffd3 	bl	23fc9c4 <free>
	buffer = rhs.buffer;
 23fea1e:	6823      	ldr	r3, [r4, #0]
 23fea20:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fea22:	6863      	ldr	r3, [r4, #4]
 23fea24:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fea26:	68a3      	ldr	r3, [r4, #8]
 23fea28:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fea2a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fea2c:	e9c4 3300 	strd	r3, r3, [r4]
 23fea30:	e7f1      	b.n	23fea16 <_ZN6String4moveERS_+0x20>

023fea32 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fea32:	2300      	movs	r3, #0
String::String(String &&rval)
 23fea34:	b510      	push	{r4, lr}
 23fea36:	4604      	mov	r4, r0
	capacity = 0;
 23fea38:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fea3c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fea3e:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fea40:	f7ff ffd9 	bl	23fe9f6 <_ZN6String4moveERS_>
}
 23fea44:	4620      	mov	r0, r4
 23fea46:	bd10      	pop	{r4, pc}

023fea48 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fea48:	4288      	cmp	r0, r1
{
 23fea4a:	b510      	push	{r4, lr}
 23fea4c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fea4e:	d005      	beq.n	23fea5c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fea50:	680b      	ldr	r3, [r1, #0]
 23fea52:	b12b      	cbz	r3, 23fea60 <_ZN6StringaSERKS_+0x18>
 23fea54:	688a      	ldr	r2, [r1, #8]
 23fea56:	4619      	mov	r1, r3
 23fea58:	f7ff ffa0 	bl	23fe99c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fea5c:	4620      	mov	r0, r4
 23fea5e:	bd10      	pop	{r4, pc}
	else invalidate();
 23fea60:	f7ff ff71 	bl	23fe946 <_ZN6String10invalidateEv>
 23fea64:	e7fa      	b.n	23fea5c <_ZN6StringaSERKS_+0x14>

023fea66 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fea66:	2300      	movs	r3, #0
String::String(const String &value)
 23fea68:	b510      	push	{r4, lr}
 23fea6a:	4604      	mov	r4, r0
	capacity = 0;
 23fea6c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fea70:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fea72:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fea74:	f7ff ffe8 	bl	23fea48 <_ZN6StringaSERKS_>
}
 23fea78:	4620      	mov	r0, r4
 23fea7a:	bd10      	pop	{r4, pc}

023fea7c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 23fea7c:	6800      	ldr	r0, [r0, #0]
 23fea7e:	b108      	cbz	r0, 23fea84 <_ZNK6String5toIntEv+0x8>
 23fea80:	f000 be04 	b.w	23ff68c <atol>
	return 0;
}
 23fea84:	4770      	bx	lr
	...

023fea88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fea88:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fea8a:	2000      	movs	r0, #0
 23fea8c:	4b04      	ldr	r3, [pc, #16]	; (23feaa0 <_GLOBAL__sub_I_System+0x18>)
 23fea8e:	601a      	str	r2, [r3, #0]
 23fea90:	4b04      	ldr	r3, [pc, #16]	; (23feaa4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fea92:	4a05      	ldr	r2, [pc, #20]	; (23feaa8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fea94:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fea98:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fea9a:	f7fd be19 	b.w	23fc6d0 <set_system_mode>
 23fea9e:	bf00      	nop
 23feaa0:	1007aebc 	.word	0x1007aebc
 23feaa4:	1007aeb0 	.word	0x1007aeb0
 23feaa8:	ffff0000 	.word	0xffff0000

023feaac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23feaac:	4b02      	ldr	r3, [pc, #8]	; (23feab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23feaae:	681a      	ldr	r2, [r3, #0]
 23feab0:	4b02      	ldr	r3, [pc, #8]	; (23feabc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23feab2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23feab4:	4770      	bx	lr
 23feab6:	bf00      	nop
 23feab8:	1007a924 	.word	0x1007a924
 23feabc:	1007aec0 	.word	0x1007aec0

023feac0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23feac0:	4770      	bx	lr

023feac2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feac2:	7441      	strb	r1, [r0, #17]
}
 23feac4:	4770      	bx	lr

023feac6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23feac6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23feac8:	7c00      	ldrb	r0, [r0, #16]
 23feaca:	f7fd fd21 	bl	23fc510 <hal_usart_available_data_for_write>
}
 23feace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fead2:	bd08      	pop	{r3, pc}

023fead4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fead4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fead6:	7c00      	ldrb	r0, [r0, #16]
 23fead8:	f7fd fcd4 	bl	23fc484 <hal_usart_available>
}
 23feadc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feae0:	bd08      	pop	{r3, pc}

023feae2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23feae2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23feae4:	7c00      	ldrb	r0, [r0, #16]
 23feae6:	f7fd fce9 	bl	23fc4bc <hal_usart_peek>
}
 23feaea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feaee:	bd08      	pop	{r3, pc}

023feaf0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23feaf0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23feaf2:	7c00      	ldrb	r0, [r0, #16]
 23feaf4:	f7fd fcd4 	bl	23fc4a0 <hal_usart_read>
}
 23feaf8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feafc:	bd08      	pop	{r3, pc}

023feafe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23feafe:	7c00      	ldrb	r0, [r0, #16]
 23feb00:	f7fd bcea 	b.w	23fc4d8 <hal_usart_flush>

023feb04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23feb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb06:	7c45      	ldrb	r5, [r0, #17]
{
 23feb08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb0a:	b12d      	cbz	r5, 23feb18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23feb0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23feb0e:	b003      	add	sp, #12
 23feb10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23feb14:	f7fd bca8 	b.w	23fc468 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb18:	7c00      	ldrb	r0, [r0, #16]
 23feb1a:	9101      	str	r1, [sp, #4]
 23feb1c:	f7fd fcf8 	bl	23fc510 <hal_usart_available_data_for_write>
 23feb20:	2800      	cmp	r0, #0
 23feb22:	9901      	ldr	r1, [sp, #4]
 23feb24:	dcf2      	bgt.n	23feb0c <_ZN11USARTSerial5writeEh+0x8>
}
 23feb26:	4628      	mov	r0, r5
 23feb28:	b003      	add	sp, #12
 23feb2a:	bd30      	pop	{r4, r5, pc}

023feb2c <_ZN11USARTSerialD0Ev>:
 23feb2c:	b510      	push	{r4, lr}
 23feb2e:	4604      	mov	r4, r0
 23feb30:	2114      	movs	r1, #20
 23feb32:	f7fc faa4 	bl	23fb07e <_ZdlPvj>
 23feb36:	4620      	mov	r0, r4
 23feb38:	bd10      	pop	{r4, pc}
	...

023feb3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feb3c:	b510      	push	{r4, lr}
 23feb3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feb42:	4604      	mov	r4, r0
 23feb44:	4608      	mov	r0, r1
 23feb46:	4611      	mov	r1, r2
 23feb48:	2200      	movs	r2, #0
 23feb4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feb4e:	4b04      	ldr	r3, [pc, #16]	; (23feb60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feb50:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feb52:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feb54:	2301      	movs	r3, #1
 23feb56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feb58:	f7fd fcf6 	bl	23fc548 <hal_usart_init_ex>
}
 23feb5c:	4620      	mov	r0, r4
 23feb5e:	bd10      	pop	{r4, pc}
 23feb60:	023ffdc0 	.word	0x023ffdc0

023feb64 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23feb64:	2300      	movs	r3, #0
 23feb66:	7c00      	ldrb	r0, [r0, #16]
 23feb68:	f7fd bce0 	b.w	23fc52c <hal_usart_begin_config>

023feb6c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23feb6c:	2200      	movs	r2, #0
 23feb6e:	f7ff bff9 	b.w	23feb64 <_ZN11USARTSerial5beginEmm>

023feb72 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23feb72:	7c00      	ldrb	r0, [r0, #16]
 23feb74:	f7fd bc6a 	b.w	23fc44c <hal_usart_end>

023feb78 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feb78:	7c00      	ldrb	r0, [r0, #16]
 23feb7a:	f7fd bcbb 	b.w	23fc4f4 <hal_usart_is_enabled>

023feb7e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feb7e:	7441      	strb	r1, [r0, #17]
}
 23feb80:	4770      	bx	lr

023feb82 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feb82:	4770      	bx	lr

023feb84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23feb84:	4770      	bx	lr

023feb86 <_ZN9USBSerial4readEv>:
{
 23feb86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23feb88:	2100      	movs	r1, #0
 23feb8a:	7c00      	ldrb	r0, [r0, #16]
 23feb8c:	f7fd fd30 	bl	23fc5f0 <HAL_USB_USART_Receive_Data>
}
 23feb90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feb94:	bd08      	pop	{r3, pc}

023feb96 <_ZN9USBSerial4peekEv>:
{
 23feb96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23feb98:	2101      	movs	r1, #1
 23feb9a:	7c00      	ldrb	r0, [r0, #16]
 23feb9c:	f7fd fd28 	bl	23fc5f0 <HAL_USB_USART_Receive_Data>
}
 23feba0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feba4:	bd08      	pop	{r3, pc}

023feba6 <_ZN9USBSerial17availableForWriteEv>:
{
 23feba6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23feba8:	7c00      	ldrb	r0, [r0, #16]
 23febaa:	f7fd fd13 	bl	23fc5d4 <HAL_USB_USART_Available_Data_For_Write>
}
 23febae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23febb2:	bd08      	pop	{r3, pc}

023febb4 <_ZN9USBSerial9availableEv>:
{
 23febb4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23febb6:	7c00      	ldrb	r0, [r0, #16]
 23febb8:	f7fd fcfe 	bl	23fc5b8 <HAL_USB_USART_Available_Data>
}
 23febbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23febc0:	bd08      	pop	{r3, pc}

023febc2 <_ZN9USBSerial5writeEh>:
{
 23febc2:	b513      	push	{r0, r1, r4, lr}
 23febc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23febc6:	7c00      	ldrb	r0, [r0, #16]
{
 23febc8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23febca:	f7fd fd03 	bl	23fc5d4 <HAL_USB_USART_Available_Data_For_Write>
 23febce:	2800      	cmp	r0, #0
 23febd0:	9901      	ldr	r1, [sp, #4]
 23febd2:	dc01      	bgt.n	23febd8 <_ZN9USBSerial5writeEh+0x16>
 23febd4:	7c60      	ldrb	r0, [r4, #17]
 23febd6:	b120      	cbz	r0, 23febe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23febd8:	7c20      	ldrb	r0, [r4, #16]
 23febda:	f7fd fd17 	bl	23fc60c <HAL_USB_USART_Send_Data>
 23febde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23febe2:	b002      	add	sp, #8
 23febe4:	bd10      	pop	{r4, pc}

023febe6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23febe6:	7c00      	ldrb	r0, [r0, #16]
 23febe8:	f7fd bd1e 	b.w	23fc628 <HAL_USB_USART_Flush_Data>

023febec <_ZN9USBSerialD0Ev>:
 23febec:	b510      	push	{r4, lr}
 23febee:	4604      	mov	r4, r0
 23febf0:	2114      	movs	r1, #20
 23febf2:	f7fc fa44 	bl	23fb07e <_ZdlPvj>
 23febf6:	4620      	mov	r0, r4
 23febf8:	bd10      	pop	{r4, pc}
	...

023febfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23febfc:	b510      	push	{r4, lr}
 23febfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fec02:	4604      	mov	r4, r0
 23fec04:	4608      	mov	r0, r1
 23fec06:	2100      	movs	r1, #0
 23fec08:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fec0c:	4b04      	ldr	r3, [pc, #16]	; (23fec20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fec0e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fec10:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fec12:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fec14:	4611      	mov	r1, r2
  _blocking = true;
 23fec16:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fec18:	f7fd fca4 	bl	23fc564 <HAL_USB_USART_Init>
}
 23fec1c:	4620      	mov	r0, r4
 23fec1e:	bd10      	pop	{r4, pc}
 23fec20:	023ffdf0 	.word	0x023ffdf0

023fec24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fec24:	2200      	movs	r2, #0
 23fec26:	7c00      	ldrb	r0, [r0, #16]
 23fec28:	f7fd bcaa 	b.w	23fc580 <HAL_USB_USART_Begin>

023fec2c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fec2c:	7c00      	ldrb	r0, [r0, #16]
 23fec2e:	f7fd bcb5 	b.w	23fc59c <HAL_USB_USART_End>

023fec32 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fec32:	7c00      	ldrb	r0, [r0, #16]
 23fec34:	f7fd bd06 	b.w	23fc644 <HAL_USB_USART_Is_Connected>

023fec38 <_Z19acquireSerialBufferv>:
{
 23fec38:	b510      	push	{r4, lr}
 23fec3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fec3c:	2214      	movs	r2, #20
 23fec3e:	2100      	movs	r1, #0
 23fec40:	f000 fd57 	bl	23ff6f2 <memset>
}
 23fec44:	4620      	mov	r0, r4
 23fec46:	bd10      	pop	{r4, pc}

023fec48 <_Z16_fetch_usbserialv>:
{
 23fec48:	b510      	push	{r4, lr}
 23fec4a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fec4c:	a803      	add	r0, sp, #12
 23fec4e:	f7ff fff3 	bl	23fec38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fec52:	4c0c      	ldr	r4, [pc, #48]	; (23fec84 <_Z16_fetch_usbserialv+0x3c>)
 23fec54:	e8d4 1f8f 	ldab	r1, [r4]
 23fec58:	f011 0101 	ands.w	r1, r1, #1
 23fec5c:	d10f      	bne.n	23fec7e <_Z16_fetch_usbserialv+0x36>
 23fec5e:	4620      	mov	r0, r4
 23fec60:	9101      	str	r1, [sp, #4]
 23fec62:	f7fc fa1b 	bl	23fb09c <__cxa_guard_acquire>
 23fec66:	9901      	ldr	r1, [sp, #4]
 23fec68:	b148      	cbz	r0, 23fec7e <_Z16_fetch_usbserialv+0x36>
 23fec6a:	aa03      	add	r2, sp, #12
 23fec6c:	4806      	ldr	r0, [pc, #24]	; (23fec88 <_Z16_fetch_usbserialv+0x40>)
 23fec6e:	f7ff ffc5 	bl	23febfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fec72:	4620      	mov	r0, r4
 23fec74:	f7fc fa17 	bl	23fb0a6 <__cxa_guard_release>
 23fec78:	4804      	ldr	r0, [pc, #16]	; (23fec8c <_Z16_fetch_usbserialv+0x44>)
 23fec7a:	f000 fd01 	bl	23ff680 <atexit>
	return _usbserial;
}
 23fec7e:	4802      	ldr	r0, [pc, #8]	; (23fec88 <_Z16_fetch_usbserialv+0x40>)
 23fec80:	b008      	add	sp, #32
 23fec82:	bd10      	pop	{r4, pc}
 23fec84:	1007aec4 	.word	0x1007aec4
 23fec88:	1007aec8 	.word	0x1007aec8
 23fec8c:	023feb83 	.word	0x023feb83

023fec90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fec90:	2200      	movs	r2, #0
 23fec92:	6840      	ldr	r0, [r0, #4]
 23fec94:	4611      	mov	r1, r2
 23fec96:	f7fd be09 	b.w	23fc8ac <network_ready>

023fec9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fec9a:	2200      	movs	r2, #0
 23fec9c:	6840      	ldr	r0, [r0, #4]
 23fec9e:	4611      	mov	r1, r2
 23feca0:	f7fd be3c 	b.w	23fc91c <network_listening>

023feca4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feca4:	2200      	movs	r2, #0
 23feca6:	6840      	ldr	r0, [r0, #4]
 23feca8:	4611      	mov	r1, r2
 23fecaa:	f7fd be53 	b.w	23fc954 <network_get_listen_timeout>

023fecae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fecae:	2200      	movs	r2, #0
 23fecb0:	6840      	ldr	r0, [r0, #4]
 23fecb2:	f7fd be41 	b.w	23fc938 <network_set_listen_timeout>

023fecb6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fecb6:	2200      	movs	r2, #0
 23fecb8:	6840      	ldr	r0, [r0, #4]
 23fecba:	f081 0101 	eor.w	r1, r1, #1
 23fecbe:	f7fd be1f 	b.w	23fc900 <network_listen>

023fecc2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fecc2:	2300      	movs	r3, #0
 23fecc4:	6840      	ldr	r0, [r0, #4]
 23fecc6:	461a      	mov	r2, r3
 23fecc8:	4619      	mov	r1, r3
 23fecca:	f7fd be0b 	b.w	23fc8e4 <network_off>

023fecce <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fecce:	2300      	movs	r3, #0
 23fecd0:	6840      	ldr	r0, [r0, #4]
 23fecd2:	461a      	mov	r2, r3
 23fecd4:	4619      	mov	r1, r3
 23fecd6:	f7fd bdf7 	b.w	23fc8c8 <network_on>

023fecda <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fecda:	2200      	movs	r2, #0
 23fecdc:	6840      	ldr	r0, [r0, #4]
 23fecde:	4611      	mov	r1, r2
 23fece0:	f7fd bdc8 	b.w	23fc874 <network_connecting>

023fece4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fece4:	2200      	movs	r2, #0
 23fece6:	2102      	movs	r1, #2
 23fece8:	6840      	ldr	r0, [r0, #4]
 23fecea:	f7fd bdd1 	b.w	23fc890 <network_disconnect>

023fecee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fecee:	2300      	movs	r3, #0
 23fecf0:	6840      	ldr	r0, [r0, #4]
 23fecf2:	461a      	mov	r2, r3
 23fecf4:	f7fd bdb0 	b.w	23fc858 <network_connect>

023fecf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fecf8:	2204      	movs	r2, #4
 23fecfa:	4b02      	ldr	r3, [pc, #8]	; (23fed04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fecfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fecfe:	4a02      	ldr	r2, [pc, #8]	; (23fed08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fed00:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fed02:	4770      	bx	lr
 23fed04:	1007aedc 	.word	0x1007aedc
 23fed08:	023ffe20 	.word	0x023ffe20

023fed0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fed0c:	4b01      	ldr	r3, [pc, #4]	; (23fed14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fed0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fed10:	4770      	bx	lr
 23fed12:	bf00      	nop
 23fed14:	1007a92c 	.word	0x1007a92c

023fed18 <serialEventRun>:
{
 23fed18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fed1a:	4b0f      	ldr	r3, [pc, #60]	; (23fed58 <serialEventRun+0x40>)
 23fed1c:	b143      	cbz	r3, 23fed30 <serialEventRun+0x18>
 23fed1e:	f7ff ff93 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fed22:	6803      	ldr	r3, [r0, #0]
 23fed24:	691b      	ldr	r3, [r3, #16]
 23fed26:	4798      	blx	r3
 23fed28:	2800      	cmp	r0, #0
 23fed2a:	dd01      	ble.n	23fed30 <serialEventRun+0x18>
        serialEvent();
 23fed2c:	e000      	b.n	23fed30 <serialEventRun+0x18>
 23fed2e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fed30:	4b0a      	ldr	r3, [pc, #40]	; (23fed5c <serialEventRun+0x44>)
 23fed32:	b143      	cbz	r3, 23fed46 <serialEventRun+0x2e>
 23fed34:	f000 f9a4 	bl	23ff080 <_Z22__fetch_global_Serial1v>
 23fed38:	6803      	ldr	r3, [r0, #0]
 23fed3a:	691b      	ldr	r3, [r3, #16]
 23fed3c:	4798      	blx	r3
 23fed3e:	2800      	cmp	r0, #0
 23fed40:	dd01      	ble.n	23fed46 <serialEventRun+0x2e>
        serialEvent1();
 23fed42:	e000      	b.n	23fed46 <serialEventRun+0x2e>
 23fed44:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fed46:	4b06      	ldr	r3, [pc, #24]	; (23fed60 <serialEventRun+0x48>)
 23fed48:	b10b      	cbz	r3, 23fed4e <serialEventRun+0x36>
 23fed4a:	f000 f9df 	bl	23ff10c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fed4e:	4b05      	ldr	r3, [pc, #20]	; (23fed64 <serialEventRun+0x4c>)
 23fed50:	b10b      	cbz	r3, 23fed56 <serialEventRun+0x3e>
 23fed52:	f000 fa11 	bl	23ff178 <_Z15serialEventRun3v>
}
 23fed56:	bd08      	pop	{r3, pc}
	...

023fed68 <_post_loop>:
{
 23fed68:	b508      	push	{r3, lr}
	serialEventRun();
 23fed6a:	f7ff ffd5 	bl	23fed18 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fed6e:	f7fd fa0f 	bl	23fc190 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fed72:	4b01      	ldr	r3, [pc, #4]	; (23fed78 <_post_loop+0x10>)
 23fed74:	6018      	str	r0, [r3, #0]
}
 23fed76:	bd08      	pop	{r3, pc}
 23fed78:	1007aeec 	.word	0x1007aeec

023fed7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fed7c:	4805      	ldr	r0, [pc, #20]	; (23fed94 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fed7e:	4a06      	ldr	r2, [pc, #24]	; (23fed98 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fed80:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fed82:	1a12      	subs	r2, r2, r0
 23fed84:	4905      	ldr	r1, [pc, #20]	; (23fed9c <_Z33system_initialize_user_backup_ramv+0x20>)
 23fed86:	f000 fc8d 	bl	23ff6a4 <memcpy>
    __backup_sram_signature = signature;
 23fed8a:	4b05      	ldr	r3, [pc, #20]	; (23feda0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fed8c:	4a05      	ldr	r2, [pc, #20]	; (23feda4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fed8e:	601a      	str	r2, [r3, #0]
}
 23fed90:	bd08      	pop	{r3, pc}
 23fed92:	bf00      	nop
 23fed94:	1007b400 	.word	0x1007b400
 23fed98:	1007b404 	.word	0x1007b404
 23fed9c:	085ffa5c 	.word	0x085ffa5c
 23feda0:	1007b400 	.word	0x1007b400
 23feda4:	9a271c1e 	.word	0x9a271c1e

023feda8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feda8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fedaa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fedac:	461a      	mov	r2, r3
 23fedae:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fedb2:	9300      	str	r3, [sp, #0]
 23fedb4:	f7fd fce0 	bl	23fc778 <system_ctrl_set_result>
}
 23fedb8:	b003      	add	sp, #12
 23fedba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fedc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fedc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fedc2:	8843      	ldrh	r3, [r0, #2]
 23fedc4:	2b0a      	cmp	r3, #10
 23fedc6:	d008      	beq.n	23fedda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fedc8:	2b50      	cmp	r3, #80	; 0x50
 23fedca:	d10b      	bne.n	23fede4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fedcc:	4b09      	ldr	r3, [pc, #36]	; (23fedf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fedce:	681b      	ldr	r3, [r3, #0]
 23fedd0:	b14b      	cbz	r3, 23fede6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fedd2:	b003      	add	sp, #12
 23fedd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fedd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fedda:	f7ff ffe5 	bl	23feda8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fedde:	b003      	add	sp, #12
 23fede0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fede4:	2300      	movs	r3, #0
 23fede6:	461a      	mov	r2, r3
 23fede8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fedec:	9300      	str	r3, [sp, #0]
 23fedee:	f7fd fcc3 	bl	23fc778 <system_ctrl_set_result>
}
 23fedf2:	e7f4      	b.n	23fedde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fedf4:	1007aee8 	.word	0x1007aee8

023fedf8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fedf8:	2100      	movs	r1, #0
{
 23fedfa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fedfc:	4811      	ldr	r0, [pc, #68]	; (23fee44 <module_user_init_hook+0x4c>)
 23fedfe:	f7fd fe43 	bl	23fca88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fee02:	4b11      	ldr	r3, [pc, #68]	; (23fee48 <module_user_init_hook+0x50>)
 23fee04:	681a      	ldr	r2, [r3, #0]
 23fee06:	4b11      	ldr	r3, [pc, #68]	; (23fee4c <module_user_init_hook+0x54>)
 23fee08:	429a      	cmp	r2, r3
 23fee0a:	bf0c      	ite	eq
 23fee0c:	2201      	moveq	r2, #1
 23fee0e:	2200      	movne	r2, #0
 23fee10:	4b0f      	ldr	r3, [pc, #60]	; (23fee50 <module_user_init_hook+0x58>)
 23fee12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fee14:	d001      	beq.n	23fee1a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fee16:	f7ff ffb1 	bl	23fed7c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fee1a:	f7fd f99d 	bl	23fc158 <HAL_RNG_GetRandomNumber>
 23fee1e:	4604      	mov	r4, r0
    srand(seed);
 23fee20:	f000 fc70 	bl	23ff704 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fee24:	4b0b      	ldr	r3, [pc, #44]	; (23fee54 <module_user_init_hook+0x5c>)
 23fee26:	b113      	cbz	r3, 23fee2e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fee28:	4620      	mov	r0, r4
 23fee2a:	e000      	b.n	23fee2e <module_user_init_hook+0x36>
 23fee2c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fee2e:	2100      	movs	r1, #0
 23fee30:	4808      	ldr	r0, [pc, #32]	; (23fee54 <module_user_init_hook+0x5c>)
 23fee32:	f7fd fd03 	bl	23fc83c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fee36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fee3a:	2100      	movs	r1, #0
 23fee3c:	4806      	ldr	r0, [pc, #24]	; (23fee58 <module_user_init_hook+0x60>)
 23fee3e:	f7fd bc8d 	b.w	23fc75c <system_ctrl_set_app_request_handler>
 23fee42:	bf00      	nop
 23fee44:	023fed0d 	.word	0x023fed0d
 23fee48:	1007b400 	.word	0x1007b400
 23fee4c:	9a271c1e 	.word	0x9a271c1e
 23fee50:	1007aee4 	.word	0x1007aee4
 23fee54:	00000000 	.word	0x00000000
 23fee58:	023fedc1 	.word	0x023fedc1

023fee5c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23fee5c:	b509      	push	{r0, r3, lr}
 23fee5e:	4804      	ldr	r0, [pc, #16]	; (23fee70 <spark_protocol_instance+0x14>)
 23fee60:	6800      	ldr	r0, [r0, #0]
 23fee62:	4b04      	ldr	r3, [pc, #16]	; (23fee74 <spark_protocol_instance+0x18>)
 23fee64:	4403      	add	r3, r0
 23fee66:	681b      	ldr	r3, [r3, #0]
 23fee68:	681b      	ldr	r3, [r3, #0]
 23fee6a:	9302      	str	r3, [sp, #8]
 23fee6c:	bd09      	pop	{r0, r3, pc}
 23fee6e:	0000      	.short	0x0000
 23fee70:	1007a918 	.word	0x1007a918
 23fee74:	00000044 	.word	0x00000044

023fee78 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23fee78:	b509      	push	{r0, r3, lr}
 23fee7a:	4804      	ldr	r0, [pc, #16]	; (23fee8c <spark_protocol_set_product_id+0x14>)
 23fee7c:	6800      	ldr	r0, [r0, #0]
 23fee7e:	4b04      	ldr	r3, [pc, #16]	; (23fee90 <spark_protocol_set_product_id+0x18>)
 23fee80:	4403      	add	r3, r0
 23fee82:	681b      	ldr	r3, [r3, #0]
 23fee84:	685b      	ldr	r3, [r3, #4]
 23fee86:	9302      	str	r3, [sp, #8]
 23fee88:	bd09      	pop	{r0, r3, pc}
 23fee8a:	0000      	.short	0x0000
 23fee8c:	1007a918 	.word	0x1007a918
 23fee90:	00000044 	.word	0x00000044

023fee94 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23fee94:	b509      	push	{r0, r3, lr}
 23fee96:	4804      	ldr	r0, [pc, #16]	; (23feea8 <spark_protocol_set_product_firmware_version+0x14>)
 23fee98:	6800      	ldr	r0, [r0, #0]
 23fee9a:	4b04      	ldr	r3, [pc, #16]	; (23feeac <spark_protocol_set_product_firmware_version+0x18>)
 23fee9c:	4403      	add	r3, r0
 23fee9e:	681b      	ldr	r3, [r3, #0]
 23feea0:	689b      	ldr	r3, [r3, #8]
 23feea2:	9302      	str	r3, [sp, #8]
 23feea4:	bd09      	pop	{r0, r3, pc}
 23feea6:	0000      	.short	0x0000
 23feea8:	1007a918 	.word	0x1007a918
 23feeac:	00000044 	.word	0x00000044

023feeb0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23feeb0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23feeb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23feeb4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23feeb6:	d902      	bls.n	23feebe <pinAvailable+0xe>
    return false;
 23feeb8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23feeba:	b003      	add	sp, #12
 23feebc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23feebe:	f1a0 030f 	sub.w	r3, r0, #15
 23feec2:	2b02      	cmp	r3, #2
 23feec4:	d90b      	bls.n	23feede <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23feec6:	2801      	cmp	r0, #1
 23feec8:	d821      	bhi.n	23fef0e <pinAvailable+0x5e>
 23feeca:	f000 f885 	bl	23fefd8 <_Z19__fetch_global_Wirev>
 23feece:	2100      	movs	r1, #0
 23feed0:	7c00      	ldrb	r0, [r0, #16]
 23feed2:	f7fd fa4b 	bl	23fc36c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23feed6:	f080 0001 	eor.w	r0, r0, #1
 23feeda:	b2c0      	uxtb	r0, r0
 23feedc:	e7ed      	b.n	23feeba <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23feede:	4d11      	ldr	r5, [pc, #68]	; (23fef24 <pinAvailable+0x74>)
 23feee0:	e8d5 1f8f 	ldab	r1, [r5]
 23feee4:	f011 0101 	ands.w	r1, r1, #1
 23feee8:	d10b      	bne.n	23fef02 <pinAvailable+0x52>
 23feeea:	4628      	mov	r0, r5
 23feeec:	9101      	str	r1, [sp, #4]
 23feeee:	f7fc f8d5 	bl	23fb09c <__cxa_guard_acquire>
 23feef2:	9901      	ldr	r1, [sp, #4]
 23feef4:	b128      	cbz	r0, 23fef02 <pinAvailable+0x52>
 23feef6:	480c      	ldr	r0, [pc, #48]	; (23fef28 <pinAvailable+0x78>)
 23feef8:	f7ff fd14 	bl	23fe924 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23feefc:	4628      	mov	r0, r5
 23feefe:	f7fc f8d2 	bl	23fb0a6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fef02:	4b09      	ldr	r3, [pc, #36]	; (23fef28 <pinAvailable+0x78>)
 23fef04:	7818      	ldrb	r0, [r3, #0]
 23fef06:	f7fd fa93 	bl	23fc430 <hal_spi_is_enabled>
 23fef0a:	2800      	cmp	r0, #0
 23fef0c:	d1d4      	bne.n	23feeb8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fef0e:	3c08      	subs	r4, #8
 23fef10:	2c01      	cmp	r4, #1
 23fef12:	d805      	bhi.n	23fef20 <pinAvailable+0x70>
 23fef14:	f000 f8b4 	bl	23ff080 <_Z22__fetch_global_Serial1v>
 23fef18:	7c00      	ldrb	r0, [r0, #16]
 23fef1a:	f7fd faeb 	bl	23fc4f4 <hal_usart_is_enabled>
 23fef1e:	e7da      	b.n	23feed6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fef20:	2001      	movs	r0, #1
 23fef22:	e7ca      	b.n	23feeba <pinAvailable+0xa>
 23fef24:	1007ae48 	.word	0x1007ae48
 23fef28:	1007ae4c 	.word	0x1007ae4c

023fef2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fef2c:	281b      	cmp	r0, #27
{
 23fef2e:	b538      	push	{r3, r4, r5, lr}
 23fef30:	4604      	mov	r4, r0
 23fef32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fef34:	d80a      	bhi.n	23fef4c <pinMode+0x20>
 23fef36:	29ff      	cmp	r1, #255	; 0xff
 23fef38:	d008      	beq.n	23fef4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fef3a:	f7ff ffb9 	bl	23feeb0 <pinAvailable>
 23fef3e:	b128      	cbz	r0, 23fef4c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fef40:	4629      	mov	r1, r5
 23fef42:	4620      	mov	r0, r4
}
 23fef44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fef48:	f7fd b976 	b.w	23fc238 <hal_gpio_mode>
}
 23fef4c:	bd38      	pop	{r3, r4, r5, pc}

023fef4e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fef4e:	b510      	push	{r4, lr}
 23fef50:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fef52:	f7ff ffad 	bl	23feeb0 <pinAvailable>
 23fef56:	b150      	cbz	r0, 23fef6e <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fef58:	2103      	movs	r1, #3
 23fef5a:	4620      	mov	r0, r4
 23fef5c:	f7fd f95e 	bl	23fc21c <hal_pin_validate_function>
 23fef60:	2803      	cmp	r0, #3
 23fef62:	d104      	bne.n	23fef6e <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fef64:	4620      	mov	r0, r4
}
 23fef66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fef6a:	f7fd b973 	b.w	23fc254 <hal_adc_read>
}
 23fef6e:	2000      	movs	r0, #0
 23fef70:	bd10      	pop	{r4, pc}
	...

023fef74 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fef74:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fef76:	4c08      	ldr	r4, [pc, #32]	; (23fef98 <_Z21__fetch_global_EEPROMv+0x24>)
 23fef78:	e8d4 3f8f 	ldab	r3, [r4]
 23fef7c:	07db      	lsls	r3, r3, #31
 23fef7e:	d408      	bmi.n	23fef92 <_Z21__fetch_global_EEPROMv+0x1e>
 23fef80:	4620      	mov	r0, r4
 23fef82:	f7fc f88b 	bl	23fb09c <__cxa_guard_acquire>
 23fef86:	b120      	cbz	r0, 23fef92 <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fef88:	f7fd f910 	bl	23fc1ac <HAL_EEPROM_Init>
 23fef8c:	4620      	mov	r0, r4
 23fef8e:	f7fc f88a 	bl	23fb0a6 <__cxa_guard_release>
	return eeprom;
}
 23fef92:	4802      	ldr	r0, [pc, #8]	; (23fef9c <_Z21__fetch_global_EEPROMv+0x28>)
 23fef94:	bd10      	pop	{r4, pc}
 23fef96:	bf00      	nop
 23fef98:	1007aef0 	.word	0x1007aef0
 23fef9c:	1007aef4 	.word	0x1007aef4

023fefa0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefa0:	4770      	bx	lr
	...

023fefa4 <_Z17acquireWireBufferv>:
{
 23fefa4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fefa6:	4b0a      	ldr	r3, [pc, #40]	; (23fefd0 <_Z17acquireWireBufferv+0x2c>)
{
 23fefa8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fefaa:	6003      	str	r3, [r0, #0]
 23fefac:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefae:	4909      	ldr	r1, [pc, #36]	; (23fefd4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fefb0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefb2:	2020      	movs	r0, #32
 23fefb4:	f000 f8f6 	bl	23ff1a4 <_ZnajRKSt9nothrow_t>
	};
 23fefb8:	2520      	movs	r5, #32
 23fefba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefbc:	4905      	ldr	r1, [pc, #20]	; (23fefd4 <_Z17acquireWireBufferv+0x30>)
 23fefbe:	4628      	mov	r0, r5
	};
 23fefc0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefc2:	f000 f8ef 	bl	23ff1a4 <_ZnajRKSt9nothrow_t>
	};
 23fefc6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fefca:	4620      	mov	r0, r4
 23fefcc:	bd38      	pop	{r3, r4, r5, pc}
 23fefce:	bf00      	nop
 23fefd0:	00010018 	.word	0x00010018
 23fefd4:	023ffe54 	.word	0x023ffe54

023fefd8 <_Z19__fetch_global_Wirev>:
{
 23fefd8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefda:	4d0e      	ldr	r5, [pc, #56]	; (23ff014 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fefdc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefde:	e8d5 1f8f 	ldab	r1, [r5]
 23fefe2:	f011 0401 	ands.w	r4, r1, #1
 23fefe6:	d111      	bne.n	23ff00c <_Z19__fetch_global_Wirev+0x34>
 23fefe8:	4628      	mov	r0, r5
 23fefea:	f7fc f857 	bl	23fb09c <__cxa_guard_acquire>
 23fefee:	b168      	cbz	r0, 23ff00c <_Z19__fetch_global_Wirev+0x34>
 23feff0:	4668      	mov	r0, sp
 23feff2:	f7ff ffd7 	bl	23fefa4 <_Z17acquireWireBufferv>
 23feff6:	466a      	mov	r2, sp
 23feff8:	4621      	mov	r1, r4
 23feffa:	4807      	ldr	r0, [pc, #28]	; (23ff018 <_Z19__fetch_global_Wirev+0x40>)
 23feffc:	f7fe f8e0 	bl	23fd1c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff000:	4628      	mov	r0, r5
 23ff002:	f7fc f850 	bl	23fb0a6 <__cxa_guard_release>
 23ff006:	4805      	ldr	r0, [pc, #20]	; (23ff01c <_Z19__fetch_global_Wirev+0x44>)
 23ff008:	f000 fb3a 	bl	23ff680 <atexit>
	return wire;
}
 23ff00c:	4802      	ldr	r0, [pc, #8]	; (23ff018 <_Z19__fetch_global_Wirev+0x40>)
 23ff00e:	b007      	add	sp, #28
 23ff010:	bd30      	pop	{r4, r5, pc}
 23ff012:	bf00      	nop
 23ff014:	1007aef8 	.word	0x1007aef8
 23ff018:	1007aefc 	.word	0x1007aefc
 23ff01c:	023fefa1 	.word	0x023fefa1

023ff020 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff020:	4770      	bx	lr
	...

023ff024 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff024:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff026:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff028:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff02a:	462a      	mov	r2, r5
 23ff02c:	2100      	movs	r1, #0
 23ff02e:	f000 fb60 	bl	23ff6f2 <memset>
 23ff032:	8025      	strh	r5, [r4, #0]
 23ff034:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff036:	4907      	ldr	r1, [pc, #28]	; (23ff054 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff038:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff03a:	8125      	strh	r5, [r4, #8]
 23ff03c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff03e:	f000 f8b1 	bl	23ff1a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff042:	4904      	ldr	r1, [pc, #16]	; (23ff054 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff044:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff046:	4628      	mov	r0, r5
 23ff048:	f000 f8ac 	bl	23ff1a4 <_ZnajRKSt9nothrow_t>
    };
 23ff04c:	60e0      	str	r0, [r4, #12]
}
 23ff04e:	4620      	mov	r0, r4
 23ff050:	bd38      	pop	{r3, r4, r5, pc}
 23ff052:	bf00      	nop
 23ff054:	023ffe54 	.word	0x023ffe54

023ff058 <__tcf_2>:
 23ff058:	4770      	bx	lr

023ff05a <__tcf_1>:
 23ff05a:	4770      	bx	lr

023ff05c <_Z20acquireSerial1Bufferv>:
{
 23ff05c:	b510      	push	{r4, lr}
 23ff05e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff060:	f7ff ffe0 	bl	23ff024 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff064:	4620      	mov	r0, r4
 23ff066:	bd10      	pop	{r4, pc}

023ff068 <_Z20acquireSerial2Bufferv>:
 23ff068:	b510      	push	{r4, lr}
 23ff06a:	4604      	mov	r4, r0
 23ff06c:	f7ff ffda 	bl	23ff024 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff070:	4620      	mov	r0, r4
 23ff072:	bd10      	pop	{r4, pc}

023ff074 <_Z20acquireSerial3Bufferv>:
 23ff074:	b510      	push	{r4, lr}
 23ff076:	4604      	mov	r4, r0
 23ff078:	f7ff ffd4 	bl	23ff024 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff07c:	4620      	mov	r0, r4
 23ff07e:	bd10      	pop	{r4, pc}

023ff080 <_Z22__fetch_global_Serial1v>:
{
 23ff080:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff082:	4d0e      	ldr	r5, [pc, #56]	; (23ff0bc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff084:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff086:	e8d5 1f8f 	ldab	r1, [r5]
 23ff08a:	f011 0401 	ands.w	r4, r1, #1
 23ff08e:	d111      	bne.n	23ff0b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff090:	4628      	mov	r0, r5
 23ff092:	f7fc f803 	bl	23fb09c <__cxa_guard_acquire>
 23ff096:	b168      	cbz	r0, 23ff0b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff098:	a801      	add	r0, sp, #4
 23ff09a:	f7ff ffdf 	bl	23ff05c <_Z20acquireSerial1Bufferv>
 23ff09e:	4621      	mov	r1, r4
 23ff0a0:	aa01      	add	r2, sp, #4
 23ff0a2:	4807      	ldr	r0, [pc, #28]	; (23ff0c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff0a4:	f7ff fd4a 	bl	23feb3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff0a8:	4628      	mov	r0, r5
 23ff0aa:	f7fb fffc 	bl	23fb0a6 <__cxa_guard_release>
 23ff0ae:	4805      	ldr	r0, [pc, #20]	; (23ff0c4 <_Z22__fetch_global_Serial1v+0x44>)
 23ff0b0:	f000 fae6 	bl	23ff680 <atexit>
    return serial1;
}
 23ff0b4:	4802      	ldr	r0, [pc, #8]	; (23ff0c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff0b6:	b007      	add	sp, #28
 23ff0b8:	bd30      	pop	{r4, r5, pc}
 23ff0ba:	bf00      	nop
 23ff0bc:	1007af10 	.word	0x1007af10
 23ff0c0:	1007af1c 	.word	0x1007af1c
 23ff0c4:	023ff021 	.word	0x023ff021

023ff0c8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff0c8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff0ca:	4c0d      	ldr	r4, [pc, #52]	; (23ff100 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff0cc:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff0ce:	e8d4 3f8f 	ldab	r3, [r4]
 23ff0d2:	07db      	lsls	r3, r3, #31
 23ff0d4:	d411      	bmi.n	23ff0fa <_Z22__fetch_global_Serial2v+0x32>
 23ff0d6:	4620      	mov	r0, r4
 23ff0d8:	f7fb ffe0 	bl	23fb09c <__cxa_guard_acquire>
 23ff0dc:	b168      	cbz	r0, 23ff0fa <_Z22__fetch_global_Serial2v+0x32>
 23ff0de:	a801      	add	r0, sp, #4
 23ff0e0:	f7ff ffc2 	bl	23ff068 <_Z20acquireSerial2Bufferv>
 23ff0e4:	2101      	movs	r1, #1
 23ff0e6:	aa01      	add	r2, sp, #4
 23ff0e8:	4806      	ldr	r0, [pc, #24]	; (23ff104 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff0ea:	f7ff fd27 	bl	23feb3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff0ee:	4620      	mov	r0, r4
 23ff0f0:	f7fb ffd9 	bl	23fb0a6 <__cxa_guard_release>
 23ff0f4:	4804      	ldr	r0, [pc, #16]	; (23ff108 <_Z22__fetch_global_Serial2v+0x40>)
 23ff0f6:	f000 fac3 	bl	23ff680 <atexit>
	return serial2;
}
 23ff0fa:	4802      	ldr	r0, [pc, #8]	; (23ff104 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff0fc:	b006      	add	sp, #24
 23ff0fe:	bd10      	pop	{r4, pc}
 23ff100:	1007af14 	.word	0x1007af14
 23ff104:	1007af30 	.word	0x1007af30
 23ff108:	023ff05b 	.word	0x023ff05b

023ff10c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff10c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff10e:	f7ff ffdb 	bl	23ff0c8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff112:	4b07      	ldr	r3, [pc, #28]	; (23ff130 <_Z15serialEventRun2v+0x24>)
 23ff114:	4604      	mov	r4, r0
 23ff116:	b153      	cbz	r3, 23ff12e <_Z15serialEventRun2v+0x22>
 23ff118:	f7ff fd2e 	bl	23feb78 <_ZN11USARTSerial9isEnabledEv>
 23ff11c:	b138      	cbz	r0, 23ff12e <_Z15serialEventRun2v+0x22>
 23ff11e:	6823      	ldr	r3, [r4, #0]
 23ff120:	4620      	mov	r0, r4
 23ff122:	691b      	ldr	r3, [r3, #16]
 23ff124:	4798      	blx	r3
 23ff126:	2800      	cmp	r0, #0
 23ff128:	dd01      	ble.n	23ff12e <_Z15serialEventRun2v+0x22>
        handler();
 23ff12a:	e000      	b.n	23ff12e <_Z15serialEventRun2v+0x22>
 23ff12c:	bf00      	nop
}
 23ff12e:	bd10      	pop	{r4, pc}
 23ff130:	00000000 	.word	0x00000000

023ff134 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff134:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff136:	4c0d      	ldr	r4, [pc, #52]	; (23ff16c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff138:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff13a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff13e:	07db      	lsls	r3, r3, #31
 23ff140:	d411      	bmi.n	23ff166 <_Z22__fetch_global_Serial3v+0x32>
 23ff142:	4620      	mov	r0, r4
 23ff144:	f7fb ffaa 	bl	23fb09c <__cxa_guard_acquire>
 23ff148:	b168      	cbz	r0, 23ff166 <_Z22__fetch_global_Serial3v+0x32>
 23ff14a:	a801      	add	r0, sp, #4
 23ff14c:	f7ff ff92 	bl	23ff074 <_Z20acquireSerial3Bufferv>
 23ff150:	2102      	movs	r1, #2
 23ff152:	aa01      	add	r2, sp, #4
 23ff154:	4806      	ldr	r0, [pc, #24]	; (23ff170 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff156:	f7ff fcf1 	bl	23feb3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff15a:	4620      	mov	r0, r4
 23ff15c:	f7fb ffa3 	bl	23fb0a6 <__cxa_guard_release>
 23ff160:	4804      	ldr	r0, [pc, #16]	; (23ff174 <_Z22__fetch_global_Serial3v+0x40>)
 23ff162:	f000 fa8d 	bl	23ff680 <atexit>
	return serial3;
}
 23ff166:	4802      	ldr	r0, [pc, #8]	; (23ff170 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff168:	b006      	add	sp, #24
 23ff16a:	bd10      	pop	{r4, pc}
 23ff16c:	1007af18 	.word	0x1007af18
 23ff170:	1007af44 	.word	0x1007af44
 23ff174:	023ff059 	.word	0x023ff059

023ff178 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff178:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff17a:	f7ff ffdb 	bl	23ff134 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff17e:	4b07      	ldr	r3, [pc, #28]	; (23ff19c <_Z15serialEventRun3v+0x24>)
 23ff180:	4604      	mov	r4, r0
 23ff182:	b153      	cbz	r3, 23ff19a <_Z15serialEventRun3v+0x22>
 23ff184:	f7ff fcf8 	bl	23feb78 <_ZN11USARTSerial9isEnabledEv>
 23ff188:	b138      	cbz	r0, 23ff19a <_Z15serialEventRun3v+0x22>
 23ff18a:	6823      	ldr	r3, [r4, #0]
 23ff18c:	4620      	mov	r0, r4
 23ff18e:	691b      	ldr	r3, [r3, #16]
 23ff190:	4798      	blx	r3
 23ff192:	2800      	cmp	r0, #0
 23ff194:	dd01      	ble.n	23ff19a <_Z15serialEventRun3v+0x22>
        handler();
 23ff196:	e000      	b.n	23ff19a <_Z15serialEventRun3v+0x22>
 23ff198:	bf00      	nop
}
 23ff19a:	bd10      	pop	{r4, pc}
 23ff19c:	00000000 	.word	0x00000000

023ff1a0 <_ZnwjRKSt9nothrow_t>:
 23ff1a0:	f7fb bf69 	b.w	23fb076 <_Znwj>

023ff1a4 <_ZnajRKSt9nothrow_t>:
 23ff1a4:	f7fb bf69 	b.w	23fb07a <_Znaj>

023ff1a8 <_ZSt25__throw_bad_function_callv>:
 23ff1a8:	b508      	push	{r3, lr}
 23ff1aa:	f7fd fc35 	bl	23fca18 <abort>
	...

023ff1b0 <log>:
 23ff1b0:	b538      	push	{r3, r4, r5, lr}
 23ff1b2:	ed2d 8b02 	vpush	{d8}
 23ff1b6:	ec55 4b10 	vmov	r4, r5, d0
 23ff1ba:	f000 f841 	bl	23ff240 <__ieee754_log>
 23ff1be:	4b1e      	ldr	r3, [pc, #120]	; (23ff238 <log+0x88>)
 23ff1c0:	eeb0 8a40 	vmov.f32	s16, s0
 23ff1c4:	eef0 8a60 	vmov.f32	s17, s1
 23ff1c8:	f993 3000 	ldrsb.w	r3, [r3]
 23ff1cc:	3301      	adds	r3, #1
 23ff1ce:	d01a      	beq.n	23ff206 <log+0x56>
 23ff1d0:	4622      	mov	r2, r4
 23ff1d2:	462b      	mov	r3, r5
 23ff1d4:	4620      	mov	r0, r4
 23ff1d6:	4629      	mov	r1, r5
 23ff1d8:	f7fb feb8 	bl	23faf4c <__aeabi_dcmpun>
 23ff1dc:	b998      	cbnz	r0, 23ff206 <log+0x56>
 23ff1de:	2200      	movs	r2, #0
 23ff1e0:	2300      	movs	r3, #0
 23ff1e2:	4620      	mov	r0, r4
 23ff1e4:	4629      	mov	r1, r5
 23ff1e6:	f7fb fea7 	bl	23faf38 <__aeabi_dcmpgt>
 23ff1ea:	b960      	cbnz	r0, 23ff206 <log+0x56>
 23ff1ec:	2200      	movs	r2, #0
 23ff1ee:	2300      	movs	r3, #0
 23ff1f0:	4620      	mov	r0, r4
 23ff1f2:	4629      	mov	r1, r5
 23ff1f4:	f7fb fe78 	bl	23faee8 <__aeabi_dcmpeq>
 23ff1f8:	b160      	cbz	r0, 23ff214 <log+0x64>
 23ff1fa:	f7fd fc29 	bl	23fca50 <__errno>
 23ff1fe:	2322      	movs	r3, #34	; 0x22
 23ff200:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 23ff230 <log+0x80>
 23ff204:	6003      	str	r3, [r0, #0]
 23ff206:	eeb0 0a48 	vmov.f32	s0, s16
 23ff20a:	eef0 0a68 	vmov.f32	s1, s17
 23ff20e:	ecbd 8b02 	vpop	{d8}
 23ff212:	bd38      	pop	{r3, r4, r5, pc}
 23ff214:	f7fd fc1c 	bl	23fca50 <__errno>
 23ff218:	2221      	movs	r2, #33	; 0x21
 23ff21a:	4603      	mov	r3, r0
 23ff21c:	4807      	ldr	r0, [pc, #28]	; (23ff23c <log+0x8c>)
 23ff21e:	ecbd 8b02 	vpop	{d8}
 23ff222:	601a      	str	r2, [r3, #0]
 23ff224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff228:	f000 ba22 	b.w	23ff670 <nan>
 23ff22c:	f3af 8000 	nop.w
 23ff230:	00000000 	.word	0x00000000
 23ff234:	fff00000 	.word	0xfff00000
 23ff238:	1007a928 	.word	0x1007a928
 23ff23c:	023ffe58 	.word	0x023ffe58

023ff240 <__ieee754_log>:
 23ff240:	ec51 0b10 	vmov	r0, r1, d0
 23ff244:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23ff248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff24c:	460f      	mov	r7, r1
 23ff24e:	ed2d 8b02 	vpush	{d8}
 23ff252:	b085      	sub	sp, #20
 23ff254:	da54      	bge.n	23ff300 <__ieee754_log+0xc0>
 23ff256:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff25a:	ee10 2a10 	vmov	r2, s0
 23ff25e:	4303      	orrs	r3, r0
 23ff260:	f000 80f4 	beq.w	23ff44c <__ieee754_log+0x20c>
 23ff264:	2900      	cmp	r1, #0
 23ff266:	f2c0 8134 	blt.w	23ff4d2 <__ieee754_log+0x292>
 23ff26a:	2200      	movs	r2, #0
 23ff26c:	4bdc      	ldr	r3, [pc, #880]	; (23ff5e0 <__ieee754_log+0x3a0>)
 23ff26e:	f7fb fbd3 	bl	23faa18 <__aeabi_dmul>
 23ff272:	4adc      	ldr	r2, [pc, #880]	; (23ff5e4 <__ieee754_log+0x3a4>)
 23ff274:	460f      	mov	r7, r1
 23ff276:	f06f 0435 	mvn.w	r4, #53	; 0x35
 23ff27a:	4297      	cmp	r7, r2
 23ff27c:	dc44      	bgt.n	23ff308 <__ieee754_log+0xc8>
 23ff27e:	153b      	asrs	r3, r7, #20
 23ff280:	f3c7 0713 	ubfx	r7, r7, #0, #20
 23ff284:	4ad8      	ldr	r2, [pc, #864]	; (23ff5e8 <__ieee754_log+0x3a8>)
 23ff286:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 23ff28a:	4bd8      	ldr	r3, [pc, #864]	; (23ff5ec <__ieee754_log+0x3ac>)
 23ff28c:	443b      	add	r3, r7
 23ff28e:	4426      	add	r6, r4
 23ff290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 23ff294:	405a      	eors	r2, r3
 23ff296:	eb06 5613 	add.w	r6, r6, r3, lsr #20
 23ff29a:	4bd3      	ldr	r3, [pc, #844]	; (23ff5e8 <__ieee754_log+0x3a8>)
 23ff29c:	ea42 0107 	orr.w	r1, r2, r7
 23ff2a0:	2200      	movs	r2, #0
 23ff2a2:	f7fb fa01 	bl	23fa6a8 <__aeabi_dsub>
 23ff2a6:	1cbb      	adds	r3, r7, #2
 23ff2a8:	4682      	mov	sl, r0
 23ff2aa:	468b      	mov	fp, r1
 23ff2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff2b0:	2b02      	cmp	r3, #2
 23ff2b2:	dc34      	bgt.n	23ff31e <__ieee754_log+0xde>
 23ff2b4:	2200      	movs	r2, #0
 23ff2b6:	2300      	movs	r3, #0
 23ff2b8:	f7fb fe16 	bl	23faee8 <__aeabi_dcmpeq>
 23ff2bc:	2800      	cmp	r0, #0
 23ff2be:	f000 80d2 	beq.w	23ff466 <__ieee754_log+0x226>
 23ff2c2:	2e00      	cmp	r6, #0
 23ff2c4:	f000 815c 	beq.w	23ff580 <__ieee754_log+0x340>
 23ff2c8:	4630      	mov	r0, r6
 23ff2ca:	f7fb fb3b 	bl	23fa944 <__aeabi_i2d>
 23ff2ce:	4606      	mov	r6, r0
 23ff2d0:	460f      	mov	r7, r1
 23ff2d2:	a3ad      	add	r3, pc, #692	; (adr r3, 23ff588 <__ieee754_log+0x348>)
 23ff2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2d8:	f7fb fb9e 	bl	23faa18 <__aeabi_dmul>
 23ff2dc:	4604      	mov	r4, r0
 23ff2de:	460d      	mov	r5, r1
 23ff2e0:	4630      	mov	r0, r6
 23ff2e2:	4639      	mov	r1, r7
 23ff2e4:	a3aa      	add	r3, pc, #680	; (adr r3, 23ff590 <__ieee754_log+0x350>)
 23ff2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2ea:	f7fb fb95 	bl	23faa18 <__aeabi_dmul>
 23ff2ee:	4602      	mov	r2, r0
 23ff2f0:	460b      	mov	r3, r1
 23ff2f2:	4620      	mov	r0, r4
 23ff2f4:	4629      	mov	r1, r5
 23ff2f6:	f7fb f9d9 	bl	23fa6ac <__adddf3>
 23ff2fa:	ec41 0b10 	vmov	d0, r0, r1
 23ff2fe:	e009      	b.n	23ff314 <__ieee754_log+0xd4>
 23ff300:	4ab8      	ldr	r2, [pc, #736]	; (23ff5e4 <__ieee754_log+0x3a4>)
 23ff302:	2400      	movs	r4, #0
 23ff304:	4297      	cmp	r7, r2
 23ff306:	ddba      	ble.n	23ff27e <__ieee754_log+0x3e>
 23ff308:	4602      	mov	r2, r0
 23ff30a:	460b      	mov	r3, r1
 23ff30c:	f7fb f9ce 	bl	23fa6ac <__adddf3>
 23ff310:	ec41 0b10 	vmov	d0, r0, r1
 23ff314:	b005      	add	sp, #20
 23ff316:	ecbd 8b02 	vpop	{d8}
 23ff31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff31e:	4bb4      	ldr	r3, [pc, #720]	; (23ff5f0 <__ieee754_log+0x3b0>)
 23ff320:	2200      	movs	r2, #0
 23ff322:	18fb      	adds	r3, r7, r3
 23ff324:	9301      	str	r3, [sp, #4]
 23ff326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff32a:	f7fb f9bf 	bl	23fa6ac <__adddf3>
 23ff32e:	4602      	mov	r2, r0
 23ff330:	460b      	mov	r3, r1
 23ff332:	4650      	mov	r0, sl
 23ff334:	4659      	mov	r1, fp
 23ff336:	f7fb fc99 	bl	23fac6c <__aeabi_ddiv>
 23ff33a:	ec41 0b18 	vmov	d8, r0, r1
 23ff33e:	4630      	mov	r0, r6
 23ff340:	f7fb fb00 	bl	23fa944 <__aeabi_i2d>
 23ff344:	ec53 2b18 	vmov	r2, r3, d8
 23ff348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23ff34c:	ec51 0b18 	vmov	r0, r1, d8
 23ff350:	f7fb fb62 	bl	23faa18 <__aeabi_dmul>
 23ff354:	4602      	mov	r2, r0
 23ff356:	460b      	mov	r3, r1
 23ff358:	4680      	mov	r8, r0
 23ff35a:	4689      	mov	r9, r1
 23ff35c:	f7fb fb5c 	bl	23faa18 <__aeabi_dmul>
 23ff360:	4604      	mov	r4, r0
 23ff362:	460d      	mov	r5, r1
 23ff364:	a38c      	add	r3, pc, #560	; (adr r3, 23ff598 <__ieee754_log+0x358>)
 23ff366:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff36a:	f7fb fb55 	bl	23faa18 <__aeabi_dmul>
 23ff36e:	a38c      	add	r3, pc, #560	; (adr r3, 23ff5a0 <__ieee754_log+0x360>)
 23ff370:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff374:	f7fb f99a 	bl	23fa6ac <__adddf3>
 23ff378:	4622      	mov	r2, r4
 23ff37a:	462b      	mov	r3, r5
 23ff37c:	f7fb fb4c 	bl	23faa18 <__aeabi_dmul>
 23ff380:	a389      	add	r3, pc, #548	; (adr r3, 23ff5a8 <__ieee754_log+0x368>)
 23ff382:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff386:	f7fb f991 	bl	23fa6ac <__adddf3>
 23ff38a:	4622      	mov	r2, r4
 23ff38c:	462b      	mov	r3, r5
 23ff38e:	f7fb fb43 	bl	23faa18 <__aeabi_dmul>
 23ff392:	a387      	add	r3, pc, #540	; (adr r3, 23ff5b0 <__ieee754_log+0x370>)
 23ff394:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff398:	f7fb f988 	bl	23fa6ac <__adddf3>
 23ff39c:	4642      	mov	r2, r8
 23ff39e:	464b      	mov	r3, r9
 23ff3a0:	f7fb fb3a 	bl	23faa18 <__aeabi_dmul>
 23ff3a4:	4680      	mov	r8, r0
 23ff3a6:	4689      	mov	r9, r1
 23ff3a8:	4620      	mov	r0, r4
 23ff3aa:	4629      	mov	r1, r5
 23ff3ac:	a382      	add	r3, pc, #520	; (adr r3, 23ff5b8 <__ieee754_log+0x378>)
 23ff3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff3b2:	f7fb fb31 	bl	23faa18 <__aeabi_dmul>
 23ff3b6:	a382      	add	r3, pc, #520	; (adr r3, 23ff5c0 <__ieee754_log+0x380>)
 23ff3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff3bc:	f7fb f976 	bl	23fa6ac <__adddf3>
 23ff3c0:	4622      	mov	r2, r4
 23ff3c2:	462b      	mov	r3, r5
 23ff3c4:	f7fb fb28 	bl	23faa18 <__aeabi_dmul>
 23ff3c8:	a37f      	add	r3, pc, #508	; (adr r3, 23ff5c8 <__ieee754_log+0x388>)
 23ff3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff3ce:	f7fb f96d 	bl	23fa6ac <__adddf3>
 23ff3d2:	4622      	mov	r2, r4
 23ff3d4:	462b      	mov	r3, r5
 23ff3d6:	f7fb fb1f 	bl	23faa18 <__aeabi_dmul>
 23ff3da:	460b      	mov	r3, r1
 23ff3dc:	4602      	mov	r2, r0
 23ff3de:	4649      	mov	r1, r9
 23ff3e0:	4640      	mov	r0, r8
 23ff3e2:	f7fb f963 	bl	23fa6ac <__adddf3>
 23ff3e6:	4b83      	ldr	r3, [pc, #524]	; (23ff5f4 <__ieee754_log+0x3b4>)
 23ff3e8:	4689      	mov	r9, r1
 23ff3ea:	9901      	ldr	r1, [sp, #4]
 23ff3ec:	1bdb      	subs	r3, r3, r7
 23ff3ee:	4680      	mov	r8, r0
 23ff3f0:	430b      	orrs	r3, r1
 23ff3f2:	2b00      	cmp	r3, #0
 23ff3f4:	dd5f      	ble.n	23ff4b6 <__ieee754_log+0x276>
 23ff3f6:	2200      	movs	r2, #0
 23ff3f8:	4b7f      	ldr	r3, [pc, #508]	; (23ff5f8 <__ieee754_log+0x3b8>)
 23ff3fa:	4650      	mov	r0, sl
 23ff3fc:	4659      	mov	r1, fp
 23ff3fe:	f7fb fb0b 	bl	23faa18 <__aeabi_dmul>
 23ff402:	4652      	mov	r2, sl
 23ff404:	465b      	mov	r3, fp
 23ff406:	f7fb fb07 	bl	23faa18 <__aeabi_dmul>
 23ff40a:	4604      	mov	r4, r0
 23ff40c:	460d      	mov	r5, r1
 23ff40e:	2e00      	cmp	r6, #0
 23ff410:	d169      	bne.n	23ff4e6 <__ieee754_log+0x2a6>
 23ff412:	4622      	mov	r2, r4
 23ff414:	462b      	mov	r3, r5
 23ff416:	4640      	mov	r0, r8
 23ff418:	4649      	mov	r1, r9
 23ff41a:	f7fb f947 	bl	23fa6ac <__adddf3>
 23ff41e:	ec53 2b18 	vmov	r2, r3, d8
 23ff422:	f7fb faf9 	bl	23faa18 <__aeabi_dmul>
 23ff426:	4602      	mov	r2, r0
 23ff428:	460b      	mov	r3, r1
 23ff42a:	4620      	mov	r0, r4
 23ff42c:	4629      	mov	r1, r5
 23ff42e:	f7fb f93b 	bl	23fa6a8 <__aeabi_dsub>
 23ff432:	4602      	mov	r2, r0
 23ff434:	460b      	mov	r3, r1
 23ff436:	4650      	mov	r0, sl
 23ff438:	4659      	mov	r1, fp
 23ff43a:	f7fb f935 	bl	23fa6a8 <__aeabi_dsub>
 23ff43e:	ec41 0b10 	vmov	d0, r0, r1
 23ff442:	b005      	add	sp, #20
 23ff444:	ecbd 8b02 	vpop	{d8}
 23ff448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff44c:	2200      	movs	r2, #0
 23ff44e:	2300      	movs	r3, #0
 23ff450:	2000      	movs	r0, #0
 23ff452:	496a      	ldr	r1, [pc, #424]	; (23ff5fc <__ieee754_log+0x3bc>)
 23ff454:	f7fb fc0a 	bl	23fac6c <__aeabi_ddiv>
 23ff458:	ec41 0b10 	vmov	d0, r0, r1
 23ff45c:	b005      	add	sp, #20
 23ff45e:	ecbd 8b02 	vpop	{d8}
 23ff462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff466:	a35a      	add	r3, pc, #360	; (adr r3, 23ff5d0 <__ieee754_log+0x390>)
 23ff468:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff46c:	4650      	mov	r0, sl
 23ff46e:	4659      	mov	r1, fp
 23ff470:	f7fb fad2 	bl	23faa18 <__aeabi_dmul>
 23ff474:	4602      	mov	r2, r0
 23ff476:	460b      	mov	r3, r1
 23ff478:	2000      	movs	r0, #0
 23ff47a:	495f      	ldr	r1, [pc, #380]	; (23ff5f8 <__ieee754_log+0x3b8>)
 23ff47c:	f7fb f914 	bl	23fa6a8 <__aeabi_dsub>
 23ff480:	4604      	mov	r4, r0
 23ff482:	460d      	mov	r5, r1
 23ff484:	4652      	mov	r2, sl
 23ff486:	465b      	mov	r3, fp
 23ff488:	4650      	mov	r0, sl
 23ff48a:	4659      	mov	r1, fp
 23ff48c:	f7fb fac4 	bl	23faa18 <__aeabi_dmul>
 23ff490:	4602      	mov	r2, r0
 23ff492:	460b      	mov	r3, r1
 23ff494:	4620      	mov	r0, r4
 23ff496:	4629      	mov	r1, r5
 23ff498:	f7fb fabe 	bl	23faa18 <__aeabi_dmul>
 23ff49c:	4604      	mov	r4, r0
 23ff49e:	460d      	mov	r5, r1
 23ff4a0:	2e00      	cmp	r6, #0
 23ff4a2:	d159      	bne.n	23ff558 <__ieee754_log+0x318>
 23ff4a4:	4602      	mov	r2, r0
 23ff4a6:	460b      	mov	r3, r1
 23ff4a8:	4650      	mov	r0, sl
 23ff4aa:	4659      	mov	r1, fp
 23ff4ac:	f7fb f8fc 	bl	23fa6a8 <__aeabi_dsub>
 23ff4b0:	ec41 0b10 	vmov	d0, r0, r1
 23ff4b4:	e72e      	b.n	23ff314 <__ieee754_log+0xd4>
 23ff4b6:	2e00      	cmp	r6, #0
 23ff4b8:	f040 80a2 	bne.w	23ff600 <__ieee754_log+0x3c0>
 23ff4bc:	4642      	mov	r2, r8
 23ff4be:	464b      	mov	r3, r9
 23ff4c0:	4650      	mov	r0, sl
 23ff4c2:	4659      	mov	r1, fp
 23ff4c4:	f7fb f8f0 	bl	23fa6a8 <__aeabi_dsub>
 23ff4c8:	ec53 2b18 	vmov	r2, r3, d8
 23ff4cc:	f7fb faa4 	bl	23faa18 <__aeabi_dmul>
 23ff4d0:	e7af      	b.n	23ff432 <__ieee754_log+0x1f2>
 23ff4d2:	460b      	mov	r3, r1
 23ff4d4:	f7fb f8e8 	bl	23fa6a8 <__aeabi_dsub>
 23ff4d8:	2200      	movs	r2, #0
 23ff4da:	2300      	movs	r3, #0
 23ff4dc:	f7fb fbc6 	bl	23fac6c <__aeabi_ddiv>
 23ff4e0:	ec41 0b10 	vmov	d0, r0, r1
 23ff4e4:	e716      	b.n	23ff314 <__ieee754_log+0xd4>
 23ff4e6:	a328      	add	r3, pc, #160	; (adr r3, 23ff588 <__ieee754_log+0x348>)
 23ff4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23ff4f0:	f7fb fa92 	bl	23faa18 <__aeabi_dmul>
 23ff4f4:	4622      	mov	r2, r4
 23ff4f6:	462b      	mov	r3, r5
 23ff4f8:	4606      	mov	r6, r0
 23ff4fa:	460f      	mov	r7, r1
 23ff4fc:	4640      	mov	r0, r8
 23ff4fe:	4649      	mov	r1, r9
 23ff500:	f7fb f8d4 	bl	23fa6ac <__adddf3>
 23ff504:	ec53 2b18 	vmov	r2, r3, d8
 23ff508:	f7fb fa86 	bl	23faa18 <__aeabi_dmul>
 23ff50c:	4680      	mov	r8, r0
 23ff50e:	4689      	mov	r9, r1
 23ff510:	a31f      	add	r3, pc, #124	; (adr r3, 23ff590 <__ieee754_log+0x350>)
 23ff512:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23ff51a:	f7fb fa7d 	bl	23faa18 <__aeabi_dmul>
 23ff51e:	4602      	mov	r2, r0
 23ff520:	460b      	mov	r3, r1
 23ff522:	4640      	mov	r0, r8
 23ff524:	4649      	mov	r1, r9
 23ff526:	f7fb f8c1 	bl	23fa6ac <__adddf3>
 23ff52a:	4602      	mov	r2, r0
 23ff52c:	460b      	mov	r3, r1
 23ff52e:	4620      	mov	r0, r4
 23ff530:	4629      	mov	r1, r5
 23ff532:	f7fb f8b9 	bl	23fa6a8 <__aeabi_dsub>
 23ff536:	4652      	mov	r2, sl
 23ff538:	465b      	mov	r3, fp
 23ff53a:	f7fb f8b5 	bl	23fa6a8 <__aeabi_dsub>
 23ff53e:	4602      	mov	r2, r0
 23ff540:	460b      	mov	r3, r1
 23ff542:	4630      	mov	r0, r6
 23ff544:	4639      	mov	r1, r7
 23ff546:	f7fb f8af 	bl	23fa6a8 <__aeabi_dsub>
 23ff54a:	ec41 0b10 	vmov	d0, r0, r1
 23ff54e:	b005      	add	sp, #20
 23ff550:	ecbd 8b02 	vpop	{d8}
 23ff554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff558:	4630      	mov	r0, r6
 23ff55a:	f7fb f9f3 	bl	23fa944 <__aeabi_i2d>
 23ff55e:	4680      	mov	r8, r0
 23ff560:	4689      	mov	r9, r1
 23ff562:	a309      	add	r3, pc, #36	; (adr r3, 23ff588 <__ieee754_log+0x348>)
 23ff564:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff568:	f7fb fa56 	bl	23faa18 <__aeabi_dmul>
 23ff56c:	4606      	mov	r6, r0
 23ff56e:	460f      	mov	r7, r1
 23ff570:	4640      	mov	r0, r8
 23ff572:	4649      	mov	r1, r9
 23ff574:	a306      	add	r3, pc, #24	; (adr r3, 23ff590 <__ieee754_log+0x350>)
 23ff576:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff57a:	f7fb fa4d 	bl	23faa18 <__aeabi_dmul>
 23ff57e:	e7d4      	b.n	23ff52a <__ieee754_log+0x2ea>
 23ff580:	ed9f 0b15 	vldr	d0, [pc, #84]	; 23ff5d8 <__ieee754_log+0x398>
 23ff584:	e6c6      	b.n	23ff314 <__ieee754_log+0xd4>
 23ff586:	bf00      	nop
 23ff588:	fee00000 	.word	0xfee00000
 23ff58c:	3fe62e42 	.word	0x3fe62e42
 23ff590:	35793c76 	.word	0x35793c76
 23ff594:	3dea39ef 	.word	0x3dea39ef
 23ff598:	df3e5244 	.word	0xdf3e5244
 23ff59c:	3fc2f112 	.word	0x3fc2f112
 23ff5a0:	96cb03de 	.word	0x96cb03de
 23ff5a4:	3fc74664 	.word	0x3fc74664
 23ff5a8:	94229359 	.word	0x94229359
 23ff5ac:	3fd24924 	.word	0x3fd24924
 23ff5b0:	55555593 	.word	0x55555593
 23ff5b4:	3fe55555 	.word	0x3fe55555
 23ff5b8:	d078c69f 	.word	0xd078c69f
 23ff5bc:	3fc39a09 	.word	0x3fc39a09
 23ff5c0:	1d8e78af 	.word	0x1d8e78af
 23ff5c4:	3fcc71c5 	.word	0x3fcc71c5
 23ff5c8:	9997fa04 	.word	0x9997fa04
 23ff5cc:	3fd99999 	.word	0x3fd99999
 23ff5d0:	55555555 	.word	0x55555555
 23ff5d4:	3fd55555 	.word	0x3fd55555
	...
 23ff5e0:	43500000 	.word	0x43500000
 23ff5e4:	7fefffff 	.word	0x7fefffff
 23ff5e8:	3ff00000 	.word	0x3ff00000
 23ff5ec:	00095f64 	.word	0x00095f64
 23ff5f0:	fff9eb86 	.word	0xfff9eb86
 23ff5f4:	0006b851 	.word	0x0006b851
 23ff5f8:	3fe00000 	.word	0x3fe00000
 23ff5fc:	c3500000 	.word	0xc3500000
 23ff600:	a317      	add	r3, pc, #92	; (adr r3, 23ff660 <__ieee754_log+0x420>)
 23ff602:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23ff60a:	f7fb fa05 	bl	23faa18 <__aeabi_dmul>
 23ff60e:	4642      	mov	r2, r8
 23ff610:	464b      	mov	r3, r9
 23ff612:	4604      	mov	r4, r0
 23ff614:	460d      	mov	r5, r1
 23ff616:	4650      	mov	r0, sl
 23ff618:	4659      	mov	r1, fp
 23ff61a:	f7fb f845 	bl	23fa6a8 <__aeabi_dsub>
 23ff61e:	ec53 2b18 	vmov	r2, r3, d8
 23ff622:	f7fb f9f9 	bl	23faa18 <__aeabi_dmul>
 23ff626:	4606      	mov	r6, r0
 23ff628:	460f      	mov	r7, r1
 23ff62a:	a30f      	add	r3, pc, #60	; (adr r3, 23ff668 <__ieee754_log+0x428>)
 23ff62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23ff634:	f7fb f9f0 	bl	23faa18 <__aeabi_dmul>
 23ff638:	4602      	mov	r2, r0
 23ff63a:	460b      	mov	r3, r1
 23ff63c:	4630      	mov	r0, r6
 23ff63e:	4639      	mov	r1, r7
 23ff640:	f7fb f832 	bl	23fa6a8 <__aeabi_dsub>
 23ff644:	4652      	mov	r2, sl
 23ff646:	465b      	mov	r3, fp
 23ff648:	f7fb f82e 	bl	23fa6a8 <__aeabi_dsub>
 23ff64c:	4602      	mov	r2, r0
 23ff64e:	460b      	mov	r3, r1
 23ff650:	4620      	mov	r0, r4
 23ff652:	4629      	mov	r1, r5
 23ff654:	f7fb f828 	bl	23fa6a8 <__aeabi_dsub>
 23ff658:	ec41 0b10 	vmov	d0, r0, r1
 23ff65c:	e65a      	b.n	23ff314 <__ieee754_log+0xd4>
 23ff65e:	bf00      	nop
 23ff660:	fee00000 	.word	0xfee00000
 23ff664:	3fe62e42 	.word	0x3fe62e42
 23ff668:	35793c76 	.word	0x35793c76
 23ff66c:	3dea39ef 	.word	0x3dea39ef

023ff670 <nan>:
 23ff670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ff678 <nan+0x8>
 23ff674:	4770      	bx	lr
 23ff676:	bf00      	nop
 23ff678:	00000000 	.word	0x00000000
 23ff67c:	7ff80000 	.word	0x7ff80000

023ff680 <atexit>:
 23ff680:	2300      	movs	r3, #0
 23ff682:	4601      	mov	r1, r0
 23ff684:	461a      	mov	r2, r3
 23ff686:	4618      	mov	r0, r3
 23ff688:	f000 b95c 	b.w	23ff944 <__register_exitproc>

023ff68c <atol>:
 23ff68c:	220a      	movs	r2, #10
 23ff68e:	2100      	movs	r1, #0
 23ff690:	f000 b94e 	b.w	23ff930 <strtol>

023ff694 <isprint>:
 23ff694:	4b02      	ldr	r3, [pc, #8]	; (23ff6a0 <isprint+0xc>)
 23ff696:	4418      	add	r0, r3
 23ff698:	7840      	ldrb	r0, [r0, #1]
 23ff69a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff69e:	4770      	bx	lr
 23ff6a0:	023ffec9 	.word	0x023ffec9

023ff6a4 <memcpy>:
 23ff6a4:	440a      	add	r2, r1
 23ff6a6:	1e43      	subs	r3, r0, #1
 23ff6a8:	4291      	cmp	r1, r2
 23ff6aa:	d100      	bne.n	23ff6ae <memcpy+0xa>
 23ff6ac:	4770      	bx	lr
 23ff6ae:	b510      	push	{r4, lr}
 23ff6b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff6b4:	4291      	cmp	r1, r2
 23ff6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff6ba:	d1f9      	bne.n	23ff6b0 <memcpy+0xc>
 23ff6bc:	bd10      	pop	{r4, pc}

023ff6be <memmove>:
 23ff6be:	4288      	cmp	r0, r1
 23ff6c0:	b510      	push	{r4, lr}
 23ff6c2:	eb01 0402 	add.w	r4, r1, r2
 23ff6c6:	d902      	bls.n	23ff6ce <memmove+0x10>
 23ff6c8:	4284      	cmp	r4, r0
 23ff6ca:	4623      	mov	r3, r4
 23ff6cc:	d807      	bhi.n	23ff6de <memmove+0x20>
 23ff6ce:	1e43      	subs	r3, r0, #1
 23ff6d0:	42a1      	cmp	r1, r4
 23ff6d2:	d008      	beq.n	23ff6e6 <memmove+0x28>
 23ff6d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff6d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff6dc:	e7f8      	b.n	23ff6d0 <memmove+0x12>
 23ff6de:	4402      	add	r2, r0
 23ff6e0:	4601      	mov	r1, r0
 23ff6e2:	428a      	cmp	r2, r1
 23ff6e4:	d100      	bne.n	23ff6e8 <memmove+0x2a>
 23ff6e6:	bd10      	pop	{r4, pc}
 23ff6e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff6ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff6f0:	e7f7      	b.n	23ff6e2 <memmove+0x24>

023ff6f2 <memset>:
 23ff6f2:	4402      	add	r2, r0
 23ff6f4:	4603      	mov	r3, r0
 23ff6f6:	4293      	cmp	r3, r2
 23ff6f8:	d100      	bne.n	23ff6fc <memset+0xa>
 23ff6fa:	4770      	bx	lr
 23ff6fc:	f803 1b01 	strb.w	r1, [r3], #1
 23ff700:	e7f9      	b.n	23ff6f6 <memset+0x4>
	...

023ff704 <srand>:
 23ff704:	b538      	push	{r3, r4, r5, lr}
 23ff706:	4b10      	ldr	r3, [pc, #64]	; (23ff748 <srand+0x44>)
 23ff708:	4604      	mov	r4, r0
 23ff70a:	681d      	ldr	r5, [r3, #0]
 23ff70c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff70e:	b9b3      	cbnz	r3, 23ff73e <srand+0x3a>
 23ff710:	2018      	movs	r0, #24
 23ff712:	f7fd f949 	bl	23fc9a8 <malloc>
 23ff716:	4602      	mov	r2, r0
 23ff718:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff71a:	b920      	cbnz	r0, 23ff726 <srand+0x22>
 23ff71c:	4b0b      	ldr	r3, [pc, #44]	; (23ff74c <srand+0x48>)
 23ff71e:	2142      	movs	r1, #66	; 0x42
 23ff720:	480b      	ldr	r0, [pc, #44]	; (23ff750 <srand+0x4c>)
 23ff722:	f7fd f9a3 	bl	23fca6c <__assert_func>
 23ff726:	490b      	ldr	r1, [pc, #44]	; (23ff754 <srand+0x50>)
 23ff728:	4b0b      	ldr	r3, [pc, #44]	; (23ff758 <srand+0x54>)
 23ff72a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff72e:	4b0b      	ldr	r3, [pc, #44]	; (23ff75c <srand+0x58>)
 23ff730:	2100      	movs	r1, #0
 23ff732:	6083      	str	r3, [r0, #8]
 23ff734:	230b      	movs	r3, #11
 23ff736:	8183      	strh	r3, [r0, #12]
 23ff738:	2001      	movs	r0, #1
 23ff73a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff73e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff740:	2200      	movs	r2, #0
 23ff742:	611c      	str	r4, [r3, #16]
 23ff744:	615a      	str	r2, [r3, #20]
 23ff746:	bd38      	pop	{r3, r4, r5, pc}
 23ff748:	1007a92c 	.word	0x1007a92c
 23ff74c:	023ffe59 	.word	0x023ffe59
 23ff750:	023ffe70 	.word	0x023ffe70
 23ff754:	abcd330e 	.word	0xabcd330e
 23ff758:	e66d1234 	.word	0xe66d1234
 23ff75c:	0005deec 	.word	0x0005deec

023ff760 <strchr>:
 23ff760:	b2c9      	uxtb	r1, r1
 23ff762:	4603      	mov	r3, r0
 23ff764:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff768:	b11a      	cbz	r2, 23ff772 <strchr+0x12>
 23ff76a:	428a      	cmp	r2, r1
 23ff76c:	d1f9      	bne.n	23ff762 <strchr+0x2>
 23ff76e:	4618      	mov	r0, r3
 23ff770:	4770      	bx	lr
 23ff772:	2900      	cmp	r1, #0
 23ff774:	bf18      	it	ne
 23ff776:	2300      	movne	r3, #0
 23ff778:	e7f9      	b.n	23ff76e <strchr+0xe>

023ff77a <strchrnul>:
 23ff77a:	b510      	push	{r4, lr}
 23ff77c:	4604      	mov	r4, r0
 23ff77e:	f7ff ffef 	bl	23ff760 <strchr>
 23ff782:	b918      	cbnz	r0, 23ff78c <strchrnul+0x12>
 23ff784:	4620      	mov	r0, r4
 23ff786:	f7fb fc51 	bl	23fb02c <strlen>
 23ff78a:	4420      	add	r0, r4
 23ff78c:	bd10      	pop	{r4, pc}

023ff78e <strcpy>:
 23ff78e:	4603      	mov	r3, r0
 23ff790:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff794:	f803 2b01 	strb.w	r2, [r3], #1
 23ff798:	2a00      	cmp	r2, #0
 23ff79a:	d1f9      	bne.n	23ff790 <strcpy+0x2>
 23ff79c:	4770      	bx	lr
	...

023ff7a0 <strdup>:
 23ff7a0:	4b02      	ldr	r3, [pc, #8]	; (23ff7ac <strdup+0xc>)
 23ff7a2:	4601      	mov	r1, r0
 23ff7a4:	6818      	ldr	r0, [r3, #0]
 23ff7a6:	f000 b803 	b.w	23ff7b0 <_strdup_r>
 23ff7aa:	bf00      	nop
 23ff7ac:	1007a92c 	.word	0x1007a92c

023ff7b0 <_strdup_r>:
 23ff7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff7b2:	4604      	mov	r4, r0
 23ff7b4:	4608      	mov	r0, r1
 23ff7b6:	460d      	mov	r5, r1
 23ff7b8:	f7fb fc38 	bl	23fb02c <strlen>
 23ff7bc:	1c42      	adds	r2, r0, #1
 23ff7be:	4620      	mov	r0, r4
 23ff7c0:	4611      	mov	r1, r2
 23ff7c2:	9201      	str	r2, [sp, #4]
 23ff7c4:	f7fd f936 	bl	23fca34 <_malloc_r>
 23ff7c8:	4604      	mov	r4, r0
 23ff7ca:	b118      	cbz	r0, 23ff7d4 <_strdup_r+0x24>
 23ff7cc:	9a01      	ldr	r2, [sp, #4]
 23ff7ce:	4629      	mov	r1, r5
 23ff7d0:	f7ff ff68 	bl	23ff6a4 <memcpy>
 23ff7d4:	4620      	mov	r0, r4
 23ff7d6:	b003      	add	sp, #12
 23ff7d8:	bd30      	pop	{r4, r5, pc}

023ff7da <strncmp>:
 23ff7da:	b510      	push	{r4, lr}
 23ff7dc:	b17a      	cbz	r2, 23ff7fe <strncmp+0x24>
 23ff7de:	4603      	mov	r3, r0
 23ff7e0:	3901      	subs	r1, #1
 23ff7e2:	1884      	adds	r4, r0, r2
 23ff7e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff7e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff7ec:	4290      	cmp	r0, r2
 23ff7ee:	d101      	bne.n	23ff7f4 <strncmp+0x1a>
 23ff7f0:	42a3      	cmp	r3, r4
 23ff7f2:	d101      	bne.n	23ff7f8 <strncmp+0x1e>
 23ff7f4:	1a80      	subs	r0, r0, r2
 23ff7f6:	bd10      	pop	{r4, pc}
 23ff7f8:	2800      	cmp	r0, #0
 23ff7fa:	d1f3      	bne.n	23ff7e4 <strncmp+0xa>
 23ff7fc:	e7fa      	b.n	23ff7f4 <strncmp+0x1a>
 23ff7fe:	4610      	mov	r0, r2
 23ff800:	e7f9      	b.n	23ff7f6 <strncmp+0x1c>

023ff802 <strrchr>:
 23ff802:	b538      	push	{r3, r4, r5, lr}
 23ff804:	4603      	mov	r3, r0
 23ff806:	460c      	mov	r4, r1
 23ff808:	b969      	cbnz	r1, 23ff826 <strrchr+0x24>
 23ff80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff80e:	f7ff bfa7 	b.w	23ff760 <strchr>
 23ff812:	1c43      	adds	r3, r0, #1
 23ff814:	4605      	mov	r5, r0
 23ff816:	4621      	mov	r1, r4
 23ff818:	4618      	mov	r0, r3
 23ff81a:	f7ff ffa1 	bl	23ff760 <strchr>
 23ff81e:	2800      	cmp	r0, #0
 23ff820:	d1f7      	bne.n	23ff812 <strrchr+0x10>
 23ff822:	4628      	mov	r0, r5
 23ff824:	bd38      	pop	{r3, r4, r5, pc}
 23ff826:	2500      	movs	r5, #0
 23ff828:	e7f5      	b.n	23ff816 <strrchr+0x14>
	...

023ff82c <_strtol_l.constprop.0>:
 23ff82c:	2b01      	cmp	r3, #1
 23ff82e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff832:	d001      	beq.n	23ff838 <_strtol_l.constprop.0+0xc>
 23ff834:	2b24      	cmp	r3, #36	; 0x24
 23ff836:	d906      	bls.n	23ff846 <_strtol_l.constprop.0+0x1a>
 23ff838:	f7fd f90a 	bl	23fca50 <__errno>
 23ff83c:	2316      	movs	r3, #22
 23ff83e:	6003      	str	r3, [r0, #0]
 23ff840:	2000      	movs	r0, #0
 23ff842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff846:	460d      	mov	r5, r1
 23ff848:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff92c <_strtol_l.constprop.0+0x100>
 23ff84c:	462e      	mov	r6, r5
 23ff84e:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff852:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff856:	f017 0708 	ands.w	r7, r7, #8
 23ff85a:	d1f7      	bne.n	23ff84c <_strtol_l.constprop.0+0x20>
 23ff85c:	2c2d      	cmp	r4, #45	; 0x2d
 23ff85e:	d132      	bne.n	23ff8c6 <_strtol_l.constprop.0+0x9a>
 23ff860:	782c      	ldrb	r4, [r5, #0]
 23ff862:	2701      	movs	r7, #1
 23ff864:	1cb5      	adds	r5, r6, #2
 23ff866:	2b00      	cmp	r3, #0
 23ff868:	d05b      	beq.n	23ff922 <_strtol_l.constprop.0+0xf6>
 23ff86a:	2b10      	cmp	r3, #16
 23ff86c:	d109      	bne.n	23ff882 <_strtol_l.constprop.0+0x56>
 23ff86e:	2c30      	cmp	r4, #48	; 0x30
 23ff870:	d107      	bne.n	23ff882 <_strtol_l.constprop.0+0x56>
 23ff872:	782c      	ldrb	r4, [r5, #0]
 23ff874:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff878:	2c58      	cmp	r4, #88	; 0x58
 23ff87a:	d14d      	bne.n	23ff918 <_strtol_l.constprop.0+0xec>
 23ff87c:	786c      	ldrb	r4, [r5, #1]
 23ff87e:	2310      	movs	r3, #16
 23ff880:	3502      	adds	r5, #2
 23ff882:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff886:	f04f 0c00 	mov.w	ip, #0
 23ff88a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff88e:	4666      	mov	r6, ip
 23ff890:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff894:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff898:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff89c:	f1be 0f09 	cmp.w	lr, #9
 23ff8a0:	d816      	bhi.n	23ff8d0 <_strtol_l.constprop.0+0xa4>
 23ff8a2:	4674      	mov	r4, lr
 23ff8a4:	42a3      	cmp	r3, r4
 23ff8a6:	dd24      	ble.n	23ff8f2 <_strtol_l.constprop.0+0xc6>
 23ff8a8:	f1bc 0f00 	cmp.w	ip, #0
 23ff8ac:	db1e      	blt.n	23ff8ec <_strtol_l.constprop.0+0xc0>
 23ff8ae:	45b1      	cmp	r9, r6
 23ff8b0:	d31c      	bcc.n	23ff8ec <_strtol_l.constprop.0+0xc0>
 23ff8b2:	d101      	bne.n	23ff8b8 <_strtol_l.constprop.0+0x8c>
 23ff8b4:	45a2      	cmp	sl, r4
 23ff8b6:	db19      	blt.n	23ff8ec <_strtol_l.constprop.0+0xc0>
 23ff8b8:	fb06 4603 	mla	r6, r6, r3, r4
 23ff8bc:	f04f 0c01 	mov.w	ip, #1
 23ff8c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff8c4:	e7e8      	b.n	23ff898 <_strtol_l.constprop.0+0x6c>
 23ff8c6:	2c2b      	cmp	r4, #43	; 0x2b
 23ff8c8:	bf04      	itt	eq
 23ff8ca:	782c      	ldrbeq	r4, [r5, #0]
 23ff8cc:	1cb5      	addeq	r5, r6, #2
 23ff8ce:	e7ca      	b.n	23ff866 <_strtol_l.constprop.0+0x3a>
 23ff8d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff8d4:	f1be 0f19 	cmp.w	lr, #25
 23ff8d8:	d801      	bhi.n	23ff8de <_strtol_l.constprop.0+0xb2>
 23ff8da:	3c37      	subs	r4, #55	; 0x37
 23ff8dc:	e7e2      	b.n	23ff8a4 <_strtol_l.constprop.0+0x78>
 23ff8de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff8e2:	f1be 0f19 	cmp.w	lr, #25
 23ff8e6:	d804      	bhi.n	23ff8f2 <_strtol_l.constprop.0+0xc6>
 23ff8e8:	3c57      	subs	r4, #87	; 0x57
 23ff8ea:	e7db      	b.n	23ff8a4 <_strtol_l.constprop.0+0x78>
 23ff8ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff8f0:	e7e6      	b.n	23ff8c0 <_strtol_l.constprop.0+0x94>
 23ff8f2:	f1bc 0f00 	cmp.w	ip, #0
 23ff8f6:	da05      	bge.n	23ff904 <_strtol_l.constprop.0+0xd8>
 23ff8f8:	2322      	movs	r3, #34	; 0x22
 23ff8fa:	4646      	mov	r6, r8
 23ff8fc:	6003      	str	r3, [r0, #0]
 23ff8fe:	b942      	cbnz	r2, 23ff912 <_strtol_l.constprop.0+0xe6>
 23ff900:	4630      	mov	r0, r6
 23ff902:	e79e      	b.n	23ff842 <_strtol_l.constprop.0+0x16>
 23ff904:	b107      	cbz	r7, 23ff908 <_strtol_l.constprop.0+0xdc>
 23ff906:	4276      	negs	r6, r6
 23ff908:	2a00      	cmp	r2, #0
 23ff90a:	d0f9      	beq.n	23ff900 <_strtol_l.constprop.0+0xd4>
 23ff90c:	f1bc 0f00 	cmp.w	ip, #0
 23ff910:	d000      	beq.n	23ff914 <_strtol_l.constprop.0+0xe8>
 23ff912:	1e69      	subs	r1, r5, #1
 23ff914:	6011      	str	r1, [r2, #0]
 23ff916:	e7f3      	b.n	23ff900 <_strtol_l.constprop.0+0xd4>
 23ff918:	2430      	movs	r4, #48	; 0x30
 23ff91a:	2b00      	cmp	r3, #0
 23ff91c:	d1b1      	bne.n	23ff882 <_strtol_l.constprop.0+0x56>
 23ff91e:	2308      	movs	r3, #8
 23ff920:	e7af      	b.n	23ff882 <_strtol_l.constprop.0+0x56>
 23ff922:	2c30      	cmp	r4, #48	; 0x30
 23ff924:	d0a5      	beq.n	23ff872 <_strtol_l.constprop.0+0x46>
 23ff926:	230a      	movs	r3, #10
 23ff928:	e7ab      	b.n	23ff882 <_strtol_l.constprop.0+0x56>
 23ff92a:	bf00      	nop
 23ff92c:	023ffeca 	.word	0x023ffeca

023ff930 <strtol>:
 23ff930:	4613      	mov	r3, r2
 23ff932:	460a      	mov	r2, r1
 23ff934:	4601      	mov	r1, r0
 23ff936:	4802      	ldr	r0, [pc, #8]	; (23ff940 <strtol+0x10>)
 23ff938:	6800      	ldr	r0, [r0, #0]
 23ff93a:	f7ff bf77 	b.w	23ff82c <_strtol_l.constprop.0>
 23ff93e:	bf00      	nop
 23ff940:	1007a92c 	.word	0x1007a92c

023ff944 <__register_exitproc>:
 23ff944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff948:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffa08 <__register_exitproc+0xc4>
 23ff94c:	4606      	mov	r6, r0
 23ff94e:	461f      	mov	r7, r3
 23ff950:	460d      	mov	r5, r1
 23ff952:	f8d8 0000 	ldr.w	r0, [r8]
 23ff956:	4691      	mov	r9, r2
 23ff958:	f000 f858 	bl	23ffa0c <__retarget_lock_acquire_recursive>
 23ff95c:	4b26      	ldr	r3, [pc, #152]	; (23ff9f8 <__register_exitproc+0xb4>)
 23ff95e:	681c      	ldr	r4, [r3, #0]
 23ff960:	b934      	cbnz	r4, 23ff970 <__register_exitproc+0x2c>
 23ff962:	4c26      	ldr	r4, [pc, #152]	; (23ff9fc <__register_exitproc+0xb8>)
 23ff964:	601c      	str	r4, [r3, #0]
 23ff966:	4b26      	ldr	r3, [pc, #152]	; (23ffa00 <__register_exitproc+0xbc>)
 23ff968:	b113      	cbz	r3, 23ff970 <__register_exitproc+0x2c>
 23ff96a:	681b      	ldr	r3, [r3, #0]
 23ff96c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff970:	6863      	ldr	r3, [r4, #4]
 23ff972:	2b1f      	cmp	r3, #31
 23ff974:	dd07      	ble.n	23ff986 <__register_exitproc+0x42>
 23ff976:	f8d8 0000 	ldr.w	r0, [r8]
 23ff97a:	f000 f849 	bl	23ffa10 <__retarget_lock_release_recursive>
 23ff97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff986:	b35e      	cbz	r6, 23ff9e0 <__register_exitproc+0x9c>
 23ff988:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff98c:	b988      	cbnz	r0, 23ff9b2 <__register_exitproc+0x6e>
 23ff98e:	4b1d      	ldr	r3, [pc, #116]	; (23ffa04 <__register_exitproc+0xc0>)
 23ff990:	b923      	cbnz	r3, 23ff99c <__register_exitproc+0x58>
 23ff992:	f8d8 0000 	ldr.w	r0, [r8]
 23ff996:	f000 f83a 	bl	23ffa0e <__retarget_lock_release>
 23ff99a:	e7f0      	b.n	23ff97e <__register_exitproc+0x3a>
 23ff99c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff9a0:	f7fd f802 	bl	23fc9a8 <malloc>
 23ff9a4:	2800      	cmp	r0, #0
 23ff9a6:	d0f4      	beq.n	23ff992 <__register_exitproc+0x4e>
 23ff9a8:	2300      	movs	r3, #0
 23ff9aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff9ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff9b2:	6863      	ldr	r3, [r4, #4]
 23ff9b4:	2201      	movs	r2, #1
 23ff9b6:	2e02      	cmp	r6, #2
 23ff9b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff9bc:	fa02 f203 	lsl.w	r2, r2, r3
 23ff9c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff9c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff9c8:	ea43 0302 	orr.w	r3, r3, r2
 23ff9cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff9d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff9d4:	bf02      	ittt	eq
 23ff9d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff9da:	4313      	orreq	r3, r2
 23ff9dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff9e0:	6863      	ldr	r3, [r4, #4]
 23ff9e2:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9e6:	1c5a      	adds	r2, r3, #1
 23ff9e8:	3302      	adds	r3, #2
 23ff9ea:	6062      	str	r2, [r4, #4]
 23ff9ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff9f0:	f000 f80e 	bl	23ffa10 <__retarget_lock_release_recursive>
 23ff9f4:	2000      	movs	r0, #0
 23ff9f6:	e7c4      	b.n	23ff982 <__register_exitproc+0x3e>
 23ff9f8:	1007afe4 	.word	0x1007afe4
 23ff9fc:	1007af58 	.word	0x1007af58
 23ffa00:	00000000 	.word	0x00000000
 23ffa04:	023fc9a9 	.word	0x023fc9a9
 23ffa08:	1007a990 	.word	0x1007a990

023ffa0c <__retarget_lock_acquire_recursive>:
 23ffa0c:	4770      	bx	lr

023ffa0e <__retarget_lock_release>:
 23ffa0e:	4770      	bx	lr

023ffa10 <__retarget_lock_release_recursive>:
 23ffa10:	4770      	bx	lr
	...

023ffa14 <dynalib_user>:
 23ffa14:	b03d 023f b065 023f b069 023f 0000 0000     =.?.e.?.i.?.....
 23ffa24:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffa34:	7574 6c61 5200 7365 7465 6120 6c6c 7220     tual.Reset all r
 23ffa44:	6765 7369 6574 7372 5000 776f 7265 6f20     egisters.Power o
 23ffa54:	006e 6553 2074 6564 6166 6c75 2074 6f63     n.Set default co
 23ffa64:	666e 6769 4300 6c61 6269 6172 6574 4120     nfig.Calibrate A
 23ffa74:	4546 7700 6965 6867 0074 6574 706d 7265     FE.weight.temper
 23ffa84:	7461 7275 0065 6164 6174 6163 656b 642f     ature.datacake/d
 23ffa94:	7461 0061 6557 6769 7468 203a 2e25 6632     ata.Weight: %.2f
 23ffaa4:	5400 6d65 3a70 2520 322e 2066 0043 6154     .Temp: %.2f C.Ta
 23ffab4:	7272 6e69 2067 6874 2065 6373 6c61 0065     rring the scale.
 23ffac4:	6154 7272 6e69 2067 6f63 706d 656c 6574     Tarring complete
 23ffad4:	5300 6174 7472 6320 6c61 6269 6172 6974     .Start calibrati
 23ffae4:	6e6f 4300 6c61 6269 6172 6974 6e6f 6320     on.Calibration c
 23ffaf4:	6d6f 6c70 7465 0065 6143 696c 7262 7461     omplete.Calibrat
 23ffb04:	6f69 206e 7265 6f72 0072 6f4e 7420 7261     ion error.No tar
 23ffb14:	6972 676e 6620 756f 646e 202e 6550 6672     ring found. Perf
 23ffb24:	6d6f 6e69 2067 2061 6174 6572 002e 6f4e     oming a tare..No
 23ffb34:	7720 6965 6867 2074 6572 2066 6f66 6e75      weight ref foun
 23ffb44:	2e64 4e00 206f 6163 696c 7262 7461 6f69     d..No calibratio
 23ffb54:	206e 6176 756c 2065 6f66 6e75 2e64 5020     n value found. P
 23ffb64:	7265 6f66 6d72 6e69 2067 2061 6163 696c     erforming a cali
 23ffb74:	7262 7461 6f69 2e6e 7400 7261 0065 6163     bration..tare.ca
 23ffb84:	696c 7262 7461 0065 7061 0070               librate.app.

023ffb90 <_ZTVN5spark10LogHandlerE>:
	...
 23ffba0:	b085 023f b0ad 023f                         ..?...?.

023ffba8 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffbb0:	b0dd 023f b111 023f e3cd 023f e575 023f     ..?...?...?.u.?.

023ffbc0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffbc8:	cb75 023f cb7b 023f cbb9 023f cb89 023f     u.?.{.?...?...?.
 23ffbd8:	cb77 023f                                   w.?.

023ffbdc <_ZTVN5spark13EthernetClassE>:
	...
 23ffbe4:	d14b 023f d141 023f d137 023f d12d 023f     K.?.A.?.7.?.-.?.
 23ffbf4:	d121 023f d115 023f e761 023f e769 023f     !.?...?.a.?.i.?.
 23ffc04:	d109 023f d101 023f d0f7 023f d0ed 023f     ..?...?...?...?.
 23ffc14:	e799 023f                                   ..?.

023ffc18 <_ZTV7TwoWire>:
	...
 23ffc20:	d169 023f d1b3 023f d18b 023f d16b 023f     i.?...?...?.k.?.
 23ffc30:	d193 023f d19b 023f d1a3 023f d1ab 023f     ..?...?...?...?.

023ffc40 <_ZTV9IPAddress>:
	...
 23ffc48:	d283 023f d273 023f d275 023f 6425 2500     ..?.s.?.u.?.%d.%
 23ffc58:	0075 6725 7500 3025 7834 0000               u.%g.u%04x..

023ffc64 <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ffc6c:	d393 023f d395 023f d3a3 023f d3c9 023f     ..?...?...?...?.
 23ffc7c:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc8c:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffc9c:	4867 6e61 6c64 7265 2500 3130 7530 0020     gHandler.%010u .
 23ffcac:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 23ffcbc:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 23ffccc:	3d20 0020 0a0d 6d00 6c00 006e 6e66 6300      = ....m.ln.fn.c
 23ffcdc:	646f 0065 6564 6174 6c69 0000               ode.detail..

023ffce8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcf0:	d7c5 023f d7eb 023f d7a9 023f d3fd 023f     ..?...?...?...?.

023ffd00 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd08:	dc79 023f dc91 023f e3cd 023f e575 023f     y.?...?...?.u.?.

023ffd18 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd20:	dca5 023f dcb9 023f e5ad 023f d7b1 023f     ..?...?...?...?.

023ffd30 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd38:	d7c3 023f d7f9 023f e331 023f d7b3 023f     ..?...?.1.?...?.

023ffd48 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd50:	d7c1 023f d807 023f dbe1 023f d829 023f     ..?...?...?.).?.

023ffd60 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd68:	e721 023f e72b 023f e735 023f e73f 023f     !.?.+.?.5.?.?.?.
 23ffd78:	e749 023f e755 023f e761 023f e769 023f     I.?.U.?.a.?.i.?.
 23ffd88:	e771 023f e77d 023f e785 023f e78f 023f     q.?.}.?...?...?.
 23ffd98:	e799 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffda8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffdb8 <_ZTV11USARTSerial>:
	...
 23ffdc0:	eac1 023f eb2d 023f eb05 023f e885 023f     ..?.-.?...?...?.
 23ffdd0:	ead5 023f eaf1 023f eae3 023f eaff 023f     ..?...?...?...?.
 23ffde0:	eac3 023f eac7 023f                         ..?...?.

023ffde8 <_ZTV9USBSerial>:
	...
 23ffdf0:	eb85 023f ebed 023f ebc3 023f e885 023f     ..?...?...?...?.
 23ffe00:	ebb5 023f eb87 023f eb97 023f ebe7 023f     ..?...?...?...?.
 23ffe10:	eba7 023f eb7f 023f                         ..?...?.

023ffe18 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe20:	ecef 023f ece5 023f ecdb 023f ec91 023f     ..?...?...?...?.
 23ffe30:	eccf 023f ecc3 023f e761 023f e769 023f     ..?...?.a.?.i.?.
 23ffe40:	ecb7 023f ecaf 023f eca5 023f ec9b 023f     ..?...?...?...?.
 23ffe50:	e799 023f                                   ..?.

023ffe54 <_ZSt7nothrow>:
 23ffe54:	0000 0000 5200 4545 544e 6d20 6c61 6f6c     .....REENT mallo
 23ffe64:	2063 7573 6363 6565 6564 0064 742f 706d     c succeeded./tmp
 23ffe74:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 23ffe84:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 23ffe94:	3131 3432 315f 3036 3136 3038 3336 2f39     1124_1606180639/
 23ffea4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 23ffeb4:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 23ffec4:	646e 632e                                    nd.c.

023ffec9 <_ctype_>:
 23ffec9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff09:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff19:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff29:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff39:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff49:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fb7ad 	.word	0x023fb7ad
 23fffd0:	023fcb65 	.word	0x023fcb65
 23fffd4:	023fd155 	.word	0x023fd155
 23fffd8:	023fe3bd 	.word	0x023fe3bd
 23fffdc:	023fe871 	.word	0x023fe871
 23fffe0:	023fe919 	.word	0x023fe919
 23fffe4:	023fea89 	.word	0x023fea89
 23fffe8:	023feaad 	.word	0x023feaad
 23fffec:	023fecf9 	.word	0x023fecf9
